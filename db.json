{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"source/images/front_end/nodejs-runtime001.png","path":"images/front_end/nodejs-runtime001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/component-btn-001.png","path":"images/engineering/component-btn-001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/component-progress001.png","path":"images/engineering/component-progress001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/component-progress002.png","path":"images/engineering/component-progress002.png","modified":0,"renderable":0},{"_id":"source/images/engineering/component-switch001.png","path":"images/engineering/component-switch001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/component002.png","path":"images/engineering/component002.png","modified":0,"renderable":0},{"_id":"source/images/engineering/component001.png","path":"images/engineering/component001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/component003.png","path":"images/engineering/component003.png","modified":0,"renderable":0},{"_id":"source/images/engineering/mdtohtml008.png","path":"images/engineering/mdtohtml008.png","modified":0,"renderable":0},{"_id":"source/images/engineering/mdtohtml009.png","path":"images/engineering/mdtohtml009.png","modified":0,"renderable":0},{"_id":"source/images/engineering/mdtohtml010.png","path":"images/engineering/mdtohtml010.png","modified":0,"renderable":0},{"_id":"source/images/engineering/mdtohtml011.png","path":"images/engineering/mdtohtml011.png","modified":0,"renderable":0},{"_id":"source/images/engineering/mdtphtml012.png","path":"images/engineering/mdtphtml012.png","modified":0,"renderable":0},{"_id":"source/images/engineering/project-name001.png","path":"images/engineering/project-name001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/webpack-001.png","path":"images/engineering/webpack-001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/webpack-bundle-analyzer-001.png","path":"images/engineering/webpack-bundle-analyzer-001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/webpack-config-001.png","path":"images/engineering/webpack-config-001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/webpack-eslint001.png","path":"images/engineering/webpack-eslint001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/webpack-hot001.png","path":"images/engineering/webpack-hot001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/webpack-module001.png","path":"images/engineering/webpack-module001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/webpack-plugin-001.png","path":"images/engineering/webpack-plugin-001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/webpack-source-map001.png","path":"images/engineering/webpack-source-map001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/yolo-build-001.png","path":"images/engineering/yolo-build-001.png","modified":0,"renderable":0},{"_id":"source/images/engineering/yolo-npm-publish.png","path":"images/engineering/yolo-npm-publish.png","modified":0,"renderable":0},{"_id":"source/images/engineering/yolo-upload001.png","path":"images/engineering/yolo-upload001.png","modified":0,"renderable":0},{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":0,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":0,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":0,"renderable":1},{"_id":"source/images/book/javascript-advanced4.png","path":"images/book/javascript-advanced4.png","modified":1,"renderable":0},{"_id":"source/images/book/stydy-js-algo3.png","path":"images/book/stydy-js-algo3.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/about/index.md","hash":"1d1153da0089a9045b9f6b3f9858a1e661c23daf","modified":1657442805363},{"_id":"source/categories/index.md","hash":"ae71778d1ed620b8b002efe9bf1eb9103de2c136","modified":1656522255671},{"_id":"source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1656522255723},{"_id":"source/books/index.md","hash":"c95ae6aa2605981f9987a99cc48bede1f6838ece","modified":1657443751490},{"_id":"source/links/index.md","hash":"1d9a0b6b07eb2c8ab287fb44ba53ad9889748a82","modified":1656522255722},{"_id":"source/tags/index.md","hash":"7a553072486e9f5ad33eae5090e72f69fec77a22","modified":1656522255726},{"_id":"source/pageName/index.md","hash":"ec2fe58d642fe13724fc1580e08830529689ce02","modified":1656837317141},{"_id":"source/_posts/computer_base/algorithm.md","hash":"925f5067ec08c472def58a99f05febba415ed2d4","modified":1657425290471},{"_id":"source/_posts/interview/interview01.md","hash":"6f34d0637b843aa0fd297af56e77b0d9a818e267","modified":1657388296516},{"_id":"source/_posts/engineering/loader-and-plugin.md","hash":"6b4273dd2f8dd1fe7b66e58a7aed24d562abf4bb","modified":1657302498429},{"_id":"source/_posts/engineering/build-cli.md","hash":"d966a1711adffafca4b330255a27ef9d7acceb94","modified":1657382642310},{"_id":"source/_posts/engineering/component-library.md","hash":"6c8213cc690724ef2aa55d629f6953cad0d33c4a","modified":1657444693112},{"_id":"source/_posts/front_end/js-object.md","hash":"35dd089e8038e89b72eb806d84f4dc46ac151d98","modified":1657206231447},{"_id":"source/_posts/front_end/high-quality-code.md","hash":"5cddafa309d5571832a974b44ee52e4ea13f470c","modified":1656945488454},{"_id":"source/_posts/front_end/koa-base.md","hash":"3357d8680587e234c162997892f401c572acb515","modified":1657215186281},{"_id":"source/_posts/front_end/react-mobx6.md","hash":"5235bedeeaa19acfd46a3da4642b0182a089b553","modified":1657211549036},{"_id":"source/images/front_end/nodejs-runtime001.png","hash":"f8c6fe55ed97fb7a506d5ae59bd049f1640ec2b4","modified":1654790288383},{"_id":"source/images/engineering/component-progress001.png","hash":"d4b2137294419aa140c3fc85cc6d636db88e8152","modified":1657347162651},{"_id":"source/_posts/front_end/typescript.md","hash":"7581824e2f860b326cddc6d5d362af14218c9cda","modified":1657290394275},{"_id":"source/_posts/front_end/reacthooks.md","hash":"31458256fcc641bac735e3c498bdc482996d6229","modified":1657445379454},{"_id":"source/images/engineering/component002.png","hash":"c4b46c520848827bfa02f41779f5b47732964416","modified":1657342701906},{"_id":"source/images/engineering/component001.png","hash":"16a3397b2ad4f2dd56a47883301549afef0a9115","modified":1657341930823},{"_id":"source/images/engineering/component-switch001.png","hash":"5c71eccf50eb1e22482fa39a76d438a0c470e48b","modified":1657347927950},{"_id":"source/images/engineering/component-progress002.png","hash":"732a0f03692a892037cd2cd4506f11ceb456d8ac","modified":1657347193119},{"_id":"source/_posts/front_end/browser-cache.md","hash":"32862a211cbd4e95b6be8d3f9bf8a7304da2813c","modified":1656945414588},{"_id":"source/images/engineering/component003.png","hash":"249f07d5b3a329e71b4d8c18839a252d2b5bf881","modified":1657343282581},{"_id":"source/images/engineering/mdtohtml010.png","hash":"1532d9f7adafa9cbc0cd4f2b826a9a4c0a984b2a","modified":1649043106599},{"_id":"source/images/engineering/project-name001.png","hash":"e6fe6657ebcd1e22cb491334cbddb2bcf113415f","modified":1657339746763},{"_id":"source/images/engineering/yolo-build-001.png","hash":"f86c2fd9f46d66aca3835c7c2fb507275ef3087e","modified":1651770861532},{"_id":"source/_posts/engineering/webpack-base.md","hash":"ef3729627df5fc1a531bd233f0db54f9a08ab24b","modified":1657335733997},{"_id":"source/_posts/front_end/node-base.md","hash":"5b8fca7758d42fe08da90e991647f86eed46ec32","modified":1657290122526},{"_id":"source/images/engineering/yolo-upload001.png","hash":"170e933bc71fc4214ba7c83f334901cd4a1005f3","modified":1651993926379},{"_id":"source/images/engineering/yolo-npm-publish.png","hash":"2c6d01440324f307508c3ec116cb9fc01d207876","modified":1651845101311},{"_id":"source/images/engineering/component-btn-001.png","hash":"5fb9a17b9ba83f610802e307d2a3b82379f100a0","modified":1657345908825},{"_id":"source/images/engineering/mdtohtml009.png","hash":"ac50e57a41e41f871fd18d24debd5b1c987d4c4f","modified":1649043036681},{"_id":"source/images/engineering/mdtphtml012.png","hash":"6972fd04161b21b93ef06d34f644a012c23be58a","modified":1649051620573},{"_id":"source/images/engineering/mdtohtml011.png","hash":"09d9c51970707ae6f3a18adbbce4506a9b9194a6","modified":1649043394285},{"_id":"source/images/engineering/mdtohtml008.png","hash":"bc660e9a21d69de990da8cc38a6a4c6128fbbc5e","modified":1649043006929},{"_id":"source/images/engineering/webpack-hot001.png","hash":"b4ad14484fdf440687fd26f61de33974a0a2d7c1","modified":1652095143967},{"_id":"source/images/engineering/webpack-module001.png","hash":"1f67fca6cf982133320fd5f1d071aa48a3ac6074","modified":1652168699832},{"_id":"themes/pure/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1656523442743},{"_id":"themes/pure/.gitignore","hash":"204766bf9e2d6fe1fce5b9b02b8edfac2d235830","modified":1656523442743},{"_id":"themes/pure/README.cn.md","hash":"c14beac2aa2b6e6deb5359600b215d0ae348c0a4","modified":1656523442743},{"_id":"themes/pure/README.md","hash":"94fe451bf920cec6152e7bf9cbff4ccf0af0febc","modified":1656523442744},{"_id":"themes/pure/package.json","hash":"d5bad0f074925c46e8ee5a75d385346d2fcea850","modified":1656523442764},{"_id":"themes/pure/_config.yml.example","hash":"a3b55d01598967db40da6f740b38cdba4f17d7bc","modified":1656523442744},{"_id":"themes/pure/_config.yml","hash":"8f675eaabbe217e123fa3b581639fc8a1f4d6353","modified":1657445879180},{"_id":"themes/pure/languages/en.yml","hash":"2a3fd360160dcebad2530b83f306562c00f61308","modified":1656853936284},{"_id":"themes/pure/languages/zh-CN.yml","hash":"bb78376b2aa31877041b61567cf285d7d96f9e8c","modified":1656853899558},{"_id":"themes/pure/languages/zh-TW.yml","hash":"d1881b2d9272338ce31404a09193915698c32303","modified":1656853945272},{"_id":"themes/pure/languages/default.yml","hash":"58be3e5a858df7201eb20ea2e9ad622c11ccaea6","modified":1656853924521},{"_id":"themes/pure/layout/about.ejs","hash":"4b64515ccc801cc9eba637a1e1909c6c4dd203f6","modified":1656523442761},{"_id":"themes/pure/layout/archive.ejs","hash":"62847ac8ce2562908c01d69f7f6886e24a6ded40","modified":1656523442762},{"_id":"themes/pure/layout/books.ejs","hash":"75cbd31d3551c730e8a683bd5b08562881a95b51","modified":1656523442762},{"_id":"themes/pure/layout/category.ejs","hash":"b3f7a96fbaf201a65ed64d509edc29976542fbfb","modified":1656523442762},{"_id":"themes/pure/layout/categories.ejs","hash":"9cc7b5f5af40fd7ec641bf0f5a5f8f1ce1ac22d5","modified":1656523442762},{"_id":"themes/pure/layout/index.ejs","hash":"44418dbf1fb82392b8e1e4cc910d16a383190433","modified":1656523442763},{"_id":"themes/pure/layout/layout.ejs","hash":"71bdeba7b8be0c4f56a87ad05da2c6d4254da55e","modified":1656523442763},{"_id":"themes/pure/layout/links.ejs","hash":"ee90a5f2a9d19bc02682ea3a59177b947f7f7284","modified":1656523442763},{"_id":"themes/pure/layout/page.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1656523442763},{"_id":"themes/pure/layout/tag.ejs","hash":"30d8ddd84c9aa87dff1be02af308097cf4e72448","modified":1656523442764},{"_id":"themes/pure/layout/post.ejs","hash":"fbfed3c882059e757b23ff57924400683631594b","modified":1656523442763},{"_id":"themes/pure/layout/tags.ejs","hash":"76bc71f3dfd8a5b1aa14b09dec7b460b14f5028a","modified":1656523442764},{"_id":"themes/pure/scripts/thumbnail.js","hash":"4a7385e533f3567758bc995a8be5eb3e7839ac9c","modified":1656523442777},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1656523442779},{"_id":"themes/pure/layout/repository.ejs","hash":"0ecad33b6c1ec741eb3b02bb47a3824ac3749d09","modified":1656523442763},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/custom.md","hash":"a3b49dff53b405dbafe2e96834313fc329710007","modified":1656523442742},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16dbe91b392ef9debb7abeffde473668d3337eb2","modified":1656523442742},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1656523442743},{"_id":"themes/pure/_source/404/index.md","hash":"16638b081d796638565ca462f3c87339b9a0577e","modified":1656523442745},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"eef9b025c2a81fdc714967d0c7b21bed9d55cff5","modified":1656523442745},{"_id":"themes/pure/_source/about/index.md","hash":"b72470146e8244886e15715e0cae79b4130305e8","modified":1656523442746},{"_id":"themes/pure/_source/books/index.md","hash":"d913d58987f539ac2ca4cca366ebf42f8b1a03d1","modified":1656523442746},{"_id":"themes/pure/_source/_data/links.yml","hash":"a5e31f35ebb8e1e8811f2e3d957cf4d4835aa2f9","modified":1656523442745},{"_id":"themes/pure/_source/categories/index.md","hash":"b0006184ce9570766e7c7507d20fede1079f4992","modified":1656523442746},{"_id":"themes/pure/_source/links/index.md","hash":"d768332d0d322fe39267dbbda05b931488c27d7e","modified":1656523442746},{"_id":"themes/pure/_source/repository/index.md","hash":"bf2bec13066d7d53fc05a334876eb482e6f95825","modified":1656523442747},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"d51feef193137dd4a6627cb172ae37089ef4f9b9","modified":1656853983227},{"_id":"themes/pure/layout/_common/head.ejs","hash":"4135b80c40cc970f9dc30fdd02e4f3e0a8b0af67","modified":1656523442749},{"_id":"themes/pure/layout/_common/header.ejs","hash":"c05070274965692a270c7e07ad9f4dad6f2c5888","modified":1656523442749},{"_id":"themes/pure/_source/tags/index.md","hash":"c35ba8af5acf41102909a9f9c1349a24d89f97a6","modified":1656523442747},{"_id":"themes/pure/layout/_common/script.ejs","hash":"3045da0c1979946694b628fbef39c01cc98b6e75","modified":1656523442749},{"_id":"themes/pure/layout/_common/social.ejs","hash":"2bcdc7b0ee3905e724b01c2efa1ca6b47a846e1f","modified":1656523442749},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"944913dcabd09c10d3014c844abf851f4dfdba8d","modified":1656523442750},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"a8a387f9e7289a6524cf46d7ab76c34fff37f4bf","modified":1656523442750},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"4be88eec64fd40c7e1b74df8ccb6c8cdfa3e7a17","modified":1656523442750},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"15ebb5d7cc3f07e6bf5ffa783c3d2feabd252fc1","modified":1656523442750},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"513892fae41de4e68963c95a9358285714274bb4","modified":1656523442750},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"01fabc035fe48a494581f5680ed23f355e0e59ce","modified":1656523442751},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"c196b54f92eff017a48e02bacc029dd82edc8cf9","modified":1656523442751},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"47bbb53fe9cca05928c45782c6897c8a94d597ff","modified":1656523442751},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"db8cba32bf6655a8d21fe8c8ccd0695b049e1d4c","modified":1656523442751},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"8af3bcfc07c344cefa0655dbe83f3c1a55954899","modified":1656523442751},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"c5d1add53ce45df5f851f19023b2e4f16dad43ef","modified":1656523442752},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"cc450ee5638f180332b3c4b747c5337b89d5a0c8","modified":1656523442752},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"1d90de80d5eb2b10be6cad6fa0bfb465cbc5c9f1","modified":1656523442754},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"a6662f79f7fd6f1cc9b5180672ba8e1d0192fbe2","modified":1656523442755},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"17787edc304543c8658c7f51076022bda6ad227d","modified":1656523442754},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"db2967c6902ceb67caa70364935ef3441b10432f","modified":1656523442758},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"d5c98ab345952bb11d9ee69a9c1e3432b6760c55","modified":1656523442758},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"6e671c659b282b690a5d61e842b5d5f38dced6d7","modified":1656523442758},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"a464706b7a903e25d34b104bdfb298b260abc132","modified":1656523442759},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"7a64d98212769423425102a441fca52eb6930fff","modified":1656523442759},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"42b6602f478c9afa4e462716dcfcc76875c0df7d","modified":1656523442759},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"4558b5713926735d874deb14d8b21ed2e597b714","modified":1656523442758},{"_id":"themes/pure/layout/_script/search.ejs","hash":"2b784d15581df4309f56682896b725da7d44fcdd","modified":1656523442759},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"89848cc8e0190ca76cc26d42c6880a23e370702e","modified":1656523442759},{"_id":"themes/pure/layout/_search/index.ejs","hash":"2c1f06dac5710e5fd073f3e5739545f3f6a0a56f","modified":1656523442760},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"14b1ec0bdb911ab6d92046c78d371264afc4fb19","modified":1656523442760},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"5e9a5cc9bdc05fabf939db494c3937cc0df48a72","modified":1656523442759},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"dc548a83c33b5a598683bf2e1cb723bc3be4a76b","modified":1656523442760},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"b250fb0f63286f9648cd8bf428bed6a88901b481","modified":1656523442760},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"9811bab46dcf436c6d05ae78acd62bc25751df78","modified":1656523442761},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8932ce5283a7e6a356c6840104a7d6984f2ea986","modified":1656523442761},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"24823a881a6c15fd846c7f4780eb90fe869a813b","modified":1656523442761},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"83c8ce4b099951d58b2be5006f6963afbbe7d4e9","modified":1656523442761},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"e6967ec160b93a5f466a73a36745833e644d04c0","modified":1656523442761},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1656523442780},{"_id":"themes/pure/source/fonts/README.md","hash":"b5b2aac1b36a86dac2217d242d650e026c5a3b0c","modified":1656523442779},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1656523442781},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1656523442781},{"_id":"themes/pure/source/images/avatar.jpg","hash":"43451f01924e41a4db583d600169c0ef0501323f","modified":1656840025090},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1656523442784},{"_id":"themes/pure/source/js/application.js","hash":"c29f52f5ed2d1a5d8185b115f2962d22e707e19e","modified":1656523442784},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1656523442783},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1656523442784},{"_id":"themes/pure/source/js/insight.js","hash":"a1b773d9ce470bf0e2f8fdca1b6fac2ac3d31aeb","modified":1656523442785},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"20ef0d47ec3d2de7d94db9778ddac092dc2bd4b5","modified":1656523442752},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"0ef132fc45042b28411e3334e77b6e2a7f47fae2","modified":1656523442752},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"ccaba745bffe5c29434538fc87e2db73adb4c893","modified":1657444638696},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"bdef9836ca91b3e45498a9d98bcaec69e6627ced","modified":1656523442753},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1656523442753},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"8cbaef422bd7f3d1581d1198dd1c36e4c0e1e46e","modified":1656523442753},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"5b4119092b890c156a4e85e15be2cbcebf89fcbd","modified":1656523442753},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"946f4bcfa5e5dc4d60c05916c8187bd2c06d1a95","modified":1656523442753},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"8fd470b8d52606a90d475f7da9dbbed32742b1c9","modified":1656523442754},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1656523442754},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"0d8b9a3aeaed95b74e292c593f0a8225711bfdca","modified":1656523442754},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"81e9a89734505f54fef83dc74d2e277dab1bfa75","modified":1656523442754},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"4557389e499b89982eb005a821208fdd3dbac627","modified":1656523442755},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"829778c19025882fe73cf1b297a36a9d0eff39a1","modified":1656523442755},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"98dac12a9cbf47098b49183893d714355e2e5999","modified":1656523442755},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"d6bf1cfaa9167dcfb9ffab20c6670c53a008e838","modified":1656523442756},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"19585fc666e13a2816d74a8046998ac7fd36f75c","modified":1656523442755},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"0af71b5b354fdddd576fbd55c3aeb0221af71e7d","modified":1656523442756},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"2cc7b1cb7bdf157fe6470eb34a613963df75afa3","modified":1656523442756},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"96fcc36560a8367e6c4ba9ec1e82d0c5a730b1b4","modified":1656523442756},{"_id":"themes/pure/layout/_script/_repository/github.ejs","hash":"4df2172813297fcfb9ab894f668f21230f2e9e77","modified":1656523442757},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"72b48dcaab830b615c71f6e810e96100b715c682","modified":1656523442757},{"_id":"themes/pure/layout/_script/_repository/legacy.ejs","hash":"9ed1e7de79bd661065b9c071957c54e58c38827c","modified":1656523442757},{"_id":"themes/pure/layout/_script/_repository/gitee.ejs","hash":"be7fed016f5332b597af6a5d5de262cc4fe939a0","modified":1656523442757},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"f95c3289c03fa084afce64e3c399cb5127707f56","modified":1656523442758},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"19120669bfea521e0b9d2df5bf3a34f0ecb8bb68","modified":1656523442756},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"85292e8ead3836946f8c527ffe4ab83e2009475b","modified":1657440352418},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"30a20bd592b783be9cdafebf7747da1eb7994117","modified":1657440352171},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1656523442783},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1656523442783},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1656523442783},{"_id":"source/images/engineering/webpack-config-001.png","hash":"00c6e4a43a6c1b7919ffdd7747e29bfb8de07b46","modified":1652275148184},{"_id":"source/images/engineering/webpack-plugin-001.png","hash":"39b867de4022fe9849c8628d904182f31c98201b","modified":1652368578550},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1656523442765},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1656523442766},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1656523442767},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1656523442768},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1656523442766},{"_id":"themes/pure/source/js/jquery.min.js","hash":"dacc1f76630a9708add066819b1aabf8dce01056","modified":1656523442785},{"_id":"themes/pure/source/js/plugin.min.js","hash":"4eded164f8b6f5187fbf10065873ebeee5ab8787","modified":1656523442788},{"_id":"source/images/engineering/webpack-001.png","hash":"e830e2cc30fa2e95755ad77c0c3604fb577438f7","modified":1652117949364},{"_id":"source/images/engineering/webpack-source-map001.png","hash":"172a8b2dc01d154a7e9dbc195152b00331beeef6","modified":1652114538311},{"_id":"themes/pure/source/css/style.css","hash":"d2d149d5259f76bc40ac56aa0a5d752382312750","modified":1656868178018},{"_id":"themes/pure/source/css/style.min.css","hash":"4e46cbfadf9f0c5c236239a163058a3f525492ce","modified":1656523442779},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"1af91521f1c29c231ffc19d7f64696ddcd71470b","modified":1656523442781},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1656523442787},{"_id":"themes/pure/source/js/plugin.js","hash":"59cb2985d8d21653f0f80ef327517eca86af0ac6","modified":1656523442786},{"_id":"source/images/engineering/webpack-eslint001.png","hash":"dbc5ae69d8324b75af058b95ead64b5aa16377e1","modified":1652174558662},{"_id":"source/images/engineering/webpack-bundle-analyzer-001.png","hash":"4545cbe02aa2f8c7fcdd84d6e9bc92733beabec0","modified":1652283086975},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1656523442776},{"_id":"public/baidusitemap.xml","hash":"30e6028b45060eec442db19b3daa25b1d9683384","modified":1657446573624},{"_id":"public/atom.xml","hash":"17b233298b45baf47ccd1abfeb163ba513cb2051","modified":1657446573624},{"_id":"public/sitemap.xml","hash":"e55ec29303b617da062e2b11949f939b5bda8843","modified":1657446573624},{"_id":"public/content.json","hash":"075cfb9893a37a9f55398bb7abcc9cc67eedb92e","modified":1657446573624},{"_id":"public/about/index.html","hash":"0ed4e6d34d2493366cc60e2ec189d6ed29d3dd62","modified":1657446573624},{"_id":"public/categories/index.html","hash":"665d8b7091753f862e0a615426e1b700a6b9ee35","modified":1657446573624},{"_id":"public/links/index.html","hash":"ed72558d4da74648ba9720e35a82f00484d73d46","modified":1657446573624},{"_id":"public/books/index.html","hash":"e233e6ec42e23004f1e1432cef86eeec224912aa","modified":1657446573624},{"_id":"public/pageName/index.html","hash":"6f37f96addc6e010f4855a4363e981d8eb305f50","modified":1657446573624},{"_id":"public/repository/index.html","hash":"0e474eeb60bcec45763c2700291d57790a93c942","modified":1657446573624},{"_id":"public/tags/index.html","hash":"b35a0b629ad2ac7ba1091d7dc07da73d01fc1e61","modified":1657446573624},{"_id":"public/2022/04/17/front_end/react-mobx6/index.html","hash":"3a28c2c212853af11d4862e2139fa6fc8004902b","modified":1657446573624},{"_id":"public/2022/03/30/engineering/component-library/index.html","hash":"bdbc47ea0c7df59eb914138263902f081b4a7153","modified":1657446573624},{"_id":"public/2022/02/21/front_end/koa-base/index.html","hash":"a1e54f9d2fa6e96fbe0569982807d5caf058368c","modified":1657446573624},{"_id":"public/2022/01/06/front_end/node-base/index.html","hash":"9c9f9fd2935b2464ef50986a032336fcb1df66d3","modified":1657446573624},{"_id":"public/2021/12/28/front_end/typescript/index.html","hash":"8c1a0ad2675130452162987a7e3628b7f5a2a3e8","modified":1657446573624},{"_id":"public/2021/07/14/front_end/reacthooks/index.html","hash":"086f0481b8f0cf363b82a0c6bc09477d24c821a5","modified":1657446573624},{"_id":"public/2021/03/24/engineering/loader-and-plugin/index.html","hash":"d7e41abbe09a39cddf53be83a8aebea0dee61ceb","modified":1657446573624},{"_id":"public/2021/02/10/engineering/webpack-base/index.html","hash":"6010259d115f32cb521ebd4a75d9150284f3528c","modified":1657446573624},{"_id":"public/2021/01/26/engineering/build-cli/index.html","hash":"094f885acbf873c3c99b481c18188f002a148d8b","modified":1657446573624},{"_id":"public/2021/01/15/front_end/browser-cache/index.html","hash":"c741d5c1aacacc74932b1eda0628644e7bafbf14","modified":1657446573624},{"_id":"public/2020/12/20/front_end/high-quality-code/index.html","hash":"cf9d6bbf12efa94ef1840338bd63d9068c2d24b7","modified":1657446573624},{"_id":"public/2020/11/10/front_end/js-object/index.html","hash":"6a52148ebd4c5a7225bb8cd2c276e104523f501e","modified":1657446573624},{"_id":"public/2020/08/22/interview/interview01/index.html","hash":"eb14b34f12f43f7fd1b2d094ddc912feb635e7f6","modified":1657446573624},{"_id":"public/2020/05/22/computer_base/algorithm/index.html","hash":"1ff79f5902a8a600b615cfe1388e6c26e8bd4d40","modified":1657446573624},{"_id":"public/archives/index.html","hash":"6cf5acd013cedae02c8bd69f58a5287e3fc6d1fb","modified":1657446573624},{"_id":"public/archives/page/2/index.html","hash":"e5a94c5725be59618a72fbc49d25544f264c23d3","modified":1657446573624},{"_id":"public/archives/2020/index.html","hash":"1820e20444600e409b845cac52cf1551da5d5e2e","modified":1657446573624},{"_id":"public/archives/2020/05/index.html","hash":"c40ae5e9e59d9b030b84e4290093d0e01a8bceb3","modified":1657446573624},{"_id":"public/archives/2020/08/index.html","hash":"cde94874922699cb1bab850ddfa771f3fc3245aa","modified":1657446573624},{"_id":"public/archives/2020/11/index.html","hash":"b689fce101ea5b8b0ab51b5892dc3b11d8ac4474","modified":1657446573624},{"_id":"public/archives/2020/12/index.html","hash":"2be06b0f71c684f18e3494d90ae1ab5fbab44bff","modified":1657446573624},{"_id":"public/archives/2021/index.html","hash":"cc9c9423a14bf26521f0d29c0aa8f841f41a0492","modified":1657446573624},{"_id":"public/archives/2021/01/index.html","hash":"aeda052788ce4e70fdb47fc6faf9c4903de5a36c","modified":1657446573624},{"_id":"public/archives/2021/02/index.html","hash":"eff6083edf1efe5fc17542f229d69f099ed2d9de","modified":1657446573624},{"_id":"public/archives/2021/03/index.html","hash":"ac4c7ee91cb567aa839f51ad2c81efed30608b92","modified":1657446573624},{"_id":"public/archives/2021/07/index.html","hash":"77274729dacab2a9cd6b42745e66477e871fa954","modified":1657446573624},{"_id":"public/archives/2021/12/index.html","hash":"dcb44c2379e6206b0f20be5b1a141356334b1abc","modified":1657446573624},{"_id":"public/archives/2022/index.html","hash":"d32673e2a6d7e36b46a852e9a3937edcdfe28320","modified":1657446573624},{"_id":"public/archives/2022/01/index.html","hash":"c16bcc20f9766482ae5d727da68cb409fe04d648","modified":1657446573624},{"_id":"public/archives/2022/02/index.html","hash":"710e8d0853afc148651e9c0879f5bdbb4405020d","modified":1657446573624},{"_id":"public/archives/2022/03/index.html","hash":"fe7630acd76b89e6d101e579829c4938762bfc68","modified":1657446573624},{"_id":"public/archives/2022/04/index.html","hash":"fb71d05a5be84a7ae5274b4bc63ab506548a18e4","modified":1657446573624},{"_id":"public/categories/计算机基础/index.html","hash":"7435bb49b7086ee5228081fe27fa153ab5b41c1f","modified":1657446573624},{"_id":"public/categories/工程化/index.html","hash":"c15dc94e4c4b8258d2b5c2e15f8be828f65ff153","modified":1657446573624},{"_id":"public/categories/前端/index.html","hash":"b9c54e06d1546497b6f6b033af1b232ff414fdf3","modified":1657446573624},{"_id":"public/index.html","hash":"60202430a215bfb146d44de8fba839f4ec34d954","modified":1657446573624},{"_id":"public/page/2/index.html","hash":"cf1e0f9c96c2c37f0e4e1a2a02a2d77708c0e2e9","modified":1657446573624},{"_id":"public/tags/数据结构与算法/index.html","hash":"cb3fc243f0c03bfce58ea7305029019e0efd02f4","modified":1657446573624},{"_id":"public/tags/Webpack/index.html","hash":"639a1031786765845e774e52199abb7563c05c5e","modified":1657446573624},{"_id":"public/tags/React/index.html","hash":"4e8881e6a5e9902bcdfb0a33ae27801ce9511314","modified":1657446573624},{"_id":"public/tags/面试/index.html","hash":"ba38020a7dd88fe0bc9b84c214b54cd1a42fbcf4","modified":1657446573624},{"_id":"public/tags/JavaScript/index.html","hash":"31ba94a9c134dfdaae86282a6ea2168044c42ce0","modified":1657446573624},{"_id":"public/tags/Node/index.html","hash":"659a3698c04f18c15ec8f0ab647e98d1e8519304","modified":1657446573624},{"_id":"public/tags/Koa/index.html","hash":"c6f2c529fa46ae6d18b33387cb940c40bea7e55d","modified":1657446573624},{"_id":"public/tags/TypeScript/index.html","hash":"5663e8eec452c6cd6facd4dd2a19f3bf0e743f76","modified":1657446573624},{"_id":"public/tags/浏览器/index.html","hash":"9f8949075f7c752b2ffedb697736da1f93ae7728","modified":1657446573624},{"_id":"public/images/engineering/component-progress002.png","hash":"732a0f03692a892037cd2cd4506f11ceb456d8ac","modified":1657438887159},{"_id":"public/images/front_end/nodejs-runtime001.png","hash":"f8c6fe55ed97fb7a506d5ae59bd049f1640ec2b4","modified":1657438887159},{"_id":"public/images/engineering/component-progress001.png","hash":"d4b2137294419aa140c3fc85cc6d636db88e8152","modified":1657438887159},{"_id":"public/images/engineering/component002.png","hash":"c4b46c520848827bfa02f41779f5b47732964416","modified":1657438887159},{"_id":"public/images/engineering/component001.png","hash":"16a3397b2ad4f2dd56a47883301549afef0a9115","modified":1657438887159},{"_id":"public/images/engineering/component003.png","hash":"249f07d5b3a329e71b4d8c18839a252d2b5bf881","modified":1657438887159},{"_id":"public/images/engineering/component-switch001.png","hash":"5c71eccf50eb1e22482fa39a76d438a0c470e48b","modified":1657438887159},{"_id":"public/images/engineering/mdtohtml010.png","hash":"1532d9f7adafa9cbc0cd4f2b826a9a4c0a984b2a","modified":1657438887159},{"_id":"public/images/engineering/project-name001.png","hash":"e6fe6657ebcd1e22cb491334cbddb2bcf113415f","modified":1657438887159},{"_id":"public/images/engineering/yolo-build-001.png","hash":"f86c2fd9f46d66aca3835c7c2fb507275ef3087e","modified":1657438887159},{"_id":"public/images/engineering/yolo-npm-publish.png","hash":"2c6d01440324f307508c3ec116cb9fc01d207876","modified":1657438887159},{"_id":"public/images/engineering/yolo-upload001.png","hash":"170e933bc71fc4214ba7c83f334901cd4a1005f3","modified":1657438887159},{"_id":"public/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1657438887159},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1657438887159},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1657438887159},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1657438887159},{"_id":"public/images/avatar.jpg","hash":"43451f01924e41a4db583d600169c0ef0501323f","modified":1657438887159},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1657438887159},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1657438887159},{"_id":"public/images/donate/alipayimg.png","hash":"85292e8ead3836946f8c527ffe4ab83e2009475b","modified":1657446573624},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1657438887159},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1657438887159},{"_id":"public/images/donate/wechatpayimg.png","hash":"30a20bd592b783be9cdafebf7747da1eb7994117","modified":1657446573624},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1657438887159},{"_id":"public/images/engineering/component-btn-001.png","hash":"5fb9a17b9ba83f610802e307d2a3b82379f100a0","modified":1657438887159},{"_id":"public/images/engineering/mdtohtml009.png","hash":"ac50e57a41e41f871fd18d24debd5b1c987d4c4f","modified":1657438887159},{"_id":"public/images/engineering/mdtohtml011.png","hash":"09d9c51970707ae6f3a18adbbce4506a9b9194a6","modified":1657438887159},{"_id":"public/images/engineering/mdtphtml012.png","hash":"6972fd04161b21b93ef06d34f644a012c23be58a","modified":1657438887159},{"_id":"public/fonts/README.html","hash":"3b9daaf126709e3bbce5926e15d599f1fe877921","modified":1657438887159},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1657438887159},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1657438887159},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1657438887159},{"_id":"public/css/style.css","hash":"12b9918285974a769df15639ab859cb516771755","modified":1657438887159},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1657438887159},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1657438887159},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1657438887159},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1657438887159},{"_id":"public/images/engineering/mdtohtml008.png","hash":"bc660e9a21d69de990da8cc38a6a4c6128fbbc5e","modified":1657438887159},{"_id":"public/images/engineering/webpack-hot001.png","hash":"b4ad14484fdf440687fd26f61de33974a0a2d7c1","modified":1657438887159},{"_id":"public/images/engineering/webpack-module001.png","hash":"1f67fca6cf982133320fd5f1d071aa48a3ac6074","modified":1657438887159},{"_id":"public/fonts/iconfont.svg","hash":"1af91521f1c29c231ffc19d7f64696ddcd71470b","modified":1657438887159},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1657438887159},{"_id":"public/images/engineering/webpack-config-001.png","hash":"00c6e4a43a6c1b7919ffdd7747e29bfb8de07b46","modified":1657438887159},{"_id":"public/images/engineering/webpack-plugin-001.png","hash":"39b867de4022fe9849c8628d904182f31c98201b","modified":1657438887159},{"_id":"public/images/engineering/webpack-001.png","hash":"e830e2cc30fa2e95755ad77c0c3604fb577438f7","modified":1657438887159},{"_id":"public/images/engineering/webpack-source-map001.png","hash":"172a8b2dc01d154a7e9dbc195152b00331beeef6","modified":1657438887159},{"_id":"public/images/engineering/webpack-eslint001.png","hash":"dbc5ae69d8324b75af058b95ead64b5aa16377e1","modified":1657438887159},{"_id":"public/images/engineering/webpack-bundle-analyzer-001.png","hash":"4545cbe02aa2f8c7fcdd84d6e9bc92733beabec0","modified":1657438887159},{"_id":"source/images/book/stydy-js-algo3.png","hash":"61e79acf4c1cb1f3832bc1ba220811a35a0d77dc","modified":1657443710271},{"_id":"source/images/book/javascript-advanced4.png","hash":"6b242f7f56583752dedb615bcceb332c15315021","modified":1657443658513},{"_id":"public/images/book/stydy-js-algo3.png","hash":"61e79acf4c1cb1f3832bc1ba220811a35a0d77dc","modified":1657446573624},{"_id":"public/images/book/javascript-advanced4.png","hash":"6b242f7f56583752dedb615bcceb332c15315021","modified":1657446573624}],"Category":[{"name":"计算机基础","_id":"cl5f0bihu0004v4uw8xx8fcyq"},{"name":"工程化","_id":"cl5f0bihy000cv4uw053we422"},{"name":"前端","_id":"cl5f0bii5000vv4uwe7h6e153"}],"Data":[],"Page":[{"title":"关于","comments":0,"_content":"```js\n{\n  name: 'izph'\n  age: 22,\n  gender: '男',\n  profession: 'Front End Developer',\n  experience: '1年',\n  address: '北京市',\n  education: '本科',\n  github: 'https://github.com/izph',\n  blog: 'http://blog.yolo-ui.xyz',\n  email: 'izph@foxmail.com',\n  description: '来自HQU、信息与计算科学（数学方向）、前端开发程序员',\n\n  skills: [\n    ['HTML', 'CSS', 'JavaScript', 'ES6'],\n    ['Webpack', 'Git'],\n    ['React', 'Node']\n  ],\n\n  devTools: [\n    ['Visual Studio Code', 'Chrome DevTools'],\n  ]  \n}\n```\n\n","source":"about/index.md","raw":"---\ntitle: 关于\n\ncomments: false\n---\n```js\n{\n  name: 'izph'\n  age: 22,\n  gender: '男',\n  profession: 'Front End Developer',\n  experience: '1年',\n  address: '北京市',\n  education: '本科',\n  github: 'https://github.com/izph',\n  blog: 'http://blog.yolo-ui.xyz',\n  email: 'izph@foxmail.com',\n  description: '来自HQU、信息与计算科学（数学方向）、前端开发程序员',\n\n  skills: [\n    ['HTML', 'CSS', 'JavaScript', 'ES6'],\n    ['Webpack', 'Git'],\n    ['React', 'Node']\n  ],\n\n  devTools: [\n    ['Visual Studio Code', 'Chrome DevTools'],\n  ]  \n}\n```\n\n","date":"2022-07-10T08:46:45.363Z","updated":"2022-07-10T08:46:45.363Z","path":"about/index.html","_id":"cl5f0biho0000v4uwden803am","layout":"page","content":"<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'izph'</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">profession</span><span class=\"token operator\">:</span> <span class=\"token string\">'Front End Developer'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">experience</span><span class=\"token operator\">:</span> <span class=\"token string\">'1年'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">'北京市'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">education</span><span class=\"token operator\">:</span> <span class=\"token string\">'本科'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">github</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://github.com/izph'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">blog</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://blog.yolo-ui.xyz'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">'izph@foxmail.com'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">'来自HQU、信息与计算科学（数学方向）、前端开发程序员'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">skills</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'HTML'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CSS'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ES6'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Webpack'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Git'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'React'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Node'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">devTools</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Visual Studio Code'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Chrome DevTools'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'izph'</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">profession</span><span class=\"token operator\">:</span> <span class=\"token string\">'Front End Developer'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">experience</span><span class=\"token operator\">:</span> <span class=\"token string\">'1年'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span> <span class=\"token string\">'北京市'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">education</span><span class=\"token operator\">:</span> <span class=\"token string\">'本科'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">github</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://github.com/izph'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">blog</span><span class=\"token operator\">:</span> <span class=\"token string\">'http://blog.yolo-ui.xyz'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">'izph@foxmail.com'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">description</span><span class=\"token operator\">:</span> <span class=\"token string\">'来自HQU、信息与计算科学（数学方向）、前端开发程序员'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">skills</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'HTML'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'CSS'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'JavaScript'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ES6'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Webpack'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Git'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'React'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Node'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token literal-property property\">devTools</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'Visual Studio Code'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Chrome DevTools'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"},{"title":"categories","layout":"categories","date":"2016-09-05T23:41:55.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\nlayout: categories\ndate: 2016-09-05 23:41:55\ntype: \"categories\"\ncomments: false\n---","updated":"2022-06-29T17:04:15.671Z","path":"categories/index.html","_id":"cl5f0bihs0002v4uwevkj9415","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\ncomments: true\nsidebar: none\n---","date":"2022-06-29T17:04:15.722Z","updated":"2022-06-29T17:04:15.722Z","path":"links/index.html","layout":"page","_id":"cl5f0bihv0006v4uwdxm1h171","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"推荐阅读书单","comments":0,"sidebar":"none","copyright":false,"_content":"# JavaScript高级程序设计（第4版）\n<img src=\"/images/book/javascript-advanced4.png\" width=\"20%\">\n\n# 学习JavaScript数据结构与算法（第3版）\n<img src=\"/images/book/stydy-js-algo3.png\" width=\"20%\">\n","source":"books/index.md","raw":"---\ntitle: 推荐阅读书单\ncomments: false\nsidebar: none\ncopyright: false\n---\n# JavaScript高级程序设计（第4版）\n<img src=\"/images/book/javascript-advanced4.png\" width=\"20%\">\n\n# 学习JavaScript数据结构与算法（第3版）\n<img src=\"/images/book/stydy-js-algo3.png\" width=\"20%\">\n","date":"2022-07-10T09:02:31.490Z","updated":"2022-07-10T09:02:31.490Z","path":"books/index.html","_id":"cl5f0bihw0008v4uw9xi925rz","layout":"page","content":"<h1 id=\"JavaScript高级程序设计（第4版）\"><a href=\"#JavaScript高级程序设计（第4版）\" class=\"headerlink\" title=\"JavaScript高级程序设计（第4版）\"></a>JavaScript高级程序设计（第4版）</h1><img src=\"/images/book/javascript-advanced4.png\" width=\"20%\">\n\n<h1 id=\"学习JavaScript数据结构与算法（第3版）\"><a href=\"#学习JavaScript数据结构与算法（第3版）\" class=\"headerlink\" title=\"学习JavaScript数据结构与算法（第3版）\"></a>学习JavaScript数据结构与算法（第3版）</h1><img src=\"/images/book/stydy-js-algo3.png\" width=\"20%\">\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JavaScript高级程序设计（第4版）\"><a href=\"#JavaScript高级程序设计（第4版）\" class=\"headerlink\" title=\"JavaScript高级程序设计（第4版）\"></a>JavaScript高级程序设计（第4版）</h1><img src=\"/images/book/javascript-advanced4.png\" width=\"20%\">\n\n<h1 id=\"学习JavaScript数据结构与算法（第3版）\"><a href=\"#学习JavaScript数据结构与算法（第3版）\" class=\"headerlink\" title=\"学习JavaScript数据结构与算法（第3版）\"></a>学习JavaScript数据结构与算法（第3版）</h1><img src=\"/images/book/stydy-js-algo3.png\" width=\"20%\">\n"},{"title":"pageName","date":"2022-07-03T16:35:17.000Z","_content":"","source":"pageName/index.md","raw":"---\ntitle: pageName\ndate: 2022-07-03 16:35:17\n---\n","updated":"2022-07-03T08:35:17.141Z","path":"pageName/index.html","comments":1,"layout":"page","_id":"cl5f0bihx000av4uweztlfyps","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2022-06-29T17:04:15.723Z","updated":"2022-06-29T17:04:15.723Z","path":"repository/index.html","_id":"cl5f0bihz000fv4uw0sp070t2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\n---","date":"2022-06-29T17:04:15.726Z","updated":"2022-06-29T17:04:15.726Z","path":"tags/index.html","_id":"cl5f0bii0000hv4uw99ohboea","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"【计算机基础】常见数据结构与算法","date":"2020-05-22T10:35:29.000Z","toc":true,"comments":1,"copyright":false,"_content":"# 常用的数据结构\n\n## 字符串\n\n## 数组\n\n## 队列\n\n## 栈\n\n## 哈希表\n[哈希算法之美](https://juejin.cn/post/6874708801208254478)\n\n## 堆\n\n## 链表\n[链表的9个基本操作](https://juejin.cn/post/6850418120755494925)\n\n## 二叉树\n[二叉树之美](https://juejin.cn/post/6890680584033533960)\n\n# 算法\n\n## 排序算法\n[梳理6大排序算法](https://juejin.cn/post/6856546833025237006)\n\n## 查找\n### 二分\n\n## 搜索算法\n\n### 回溯算法\n[带你看回溯算法之美](https://juejin.cn/post/6882394656148045838)\n\n### 剪枝\n\n### 递归\n\n### DFS和BFS\n[DFS和BFS算法之美](https://juejin.cn/post/6861376131615227912)\n\n## 动态规划\n[动态规划算法之美](https://juejin.cn/post/6872115031501340679)\n\n# 分治思想\n[分治算法之美](https://juejin.cn/post/6885104477297344525)\n\n# 贪心思想\n\n\n# 参考\n- [awesome-coding-js](https://www.conardli.top)\n- [前端算法与数据结构总结](https://juejin.cn/post/6900698814093459463)","source":"_posts/computer_base/algorithm.md","raw":"---\ntitle: 【计算机基础】常见数据结构与算法\ndate: 2020-05-22 10:35:29\ncategories:\n  - 计算机基础\ntags:\n  - 数据结构与算法\ntoc: true # 是否启用内容索引\ncomments: true\ncopyright: false\n---\n# 常用的数据结构\n\n## 字符串\n\n## 数组\n\n## 队列\n\n## 栈\n\n## 哈希表\n[哈希算法之美](https://juejin.cn/post/6874708801208254478)\n\n## 堆\n\n## 链表\n[链表的9个基本操作](https://juejin.cn/post/6850418120755494925)\n\n## 二叉树\n[二叉树之美](https://juejin.cn/post/6890680584033533960)\n\n# 算法\n\n## 排序算法\n[梳理6大排序算法](https://juejin.cn/post/6856546833025237006)\n\n## 查找\n### 二分\n\n## 搜索算法\n\n### 回溯算法\n[带你看回溯算法之美](https://juejin.cn/post/6882394656148045838)\n\n### 剪枝\n\n### 递归\n\n### DFS和BFS\n[DFS和BFS算法之美](https://juejin.cn/post/6861376131615227912)\n\n## 动态规划\n[动态规划算法之美](https://juejin.cn/post/6872115031501340679)\n\n# 分治思想\n[分治算法之美](https://juejin.cn/post/6885104477297344525)\n\n# 贪心思想\n\n\n# 参考\n- [awesome-coding-js](https://www.conardli.top)\n- [前端算法与数据结构总结](https://juejin.cn/post/6900698814093459463)","slug":"computer_base/algorithm","published":1,"updated":"2022-07-10T03:54:50.471Z","layout":"post","photos":[],"link":"","_id":"cl5f0bihq0001v4uwdk2ydiha","content":"<h1 id=\"常用的数据结构\"><a href=\"#常用的数据结构\" class=\"headerlink\" title=\"常用的数据结构\"></a>常用的数据结构</h1><h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><p><a href=\"https://juejin.cn/post/6874708801208254478\">哈希算法之美</a></p>\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p><a href=\"https://juejin.cn/post/6850418120755494925\">链表的9个基本操作</a></p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p><a href=\"https://juejin.cn/post/6890680584033533960\">二叉树之美</a></p>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><p><a href=\"https://juejin.cn/post/6856546833025237006\">梳理6大排序算法</a></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h3 id=\"二分\"><a href=\"#二分\" class=\"headerlink\" title=\"二分\"></a>二分</h3><h2 id=\"搜索算法\"><a href=\"#搜索算法\" class=\"headerlink\" title=\"搜索算法\"></a>搜索算法</h2><h3 id=\"回溯算法\"><a href=\"#回溯算法\" class=\"headerlink\" title=\"回溯算法\"></a>回溯算法</h3><p><a href=\"https://juejin.cn/post/6882394656148045838\">带你看回溯算法之美</a></p>\n<h3 id=\"剪枝\"><a href=\"#剪枝\" class=\"headerlink\" title=\"剪枝\"></a>剪枝</h3><h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><h3 id=\"DFS和BFS\"><a href=\"#DFS和BFS\" class=\"headerlink\" title=\"DFS和BFS\"></a>DFS和BFS</h3><p><a href=\"https://juejin.cn/post/6861376131615227912\">DFS和BFS算法之美</a></p>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p><a href=\"https://juejin.cn/post/6872115031501340679\">动态规划算法之美</a></p>\n<h1 id=\"分治思想\"><a href=\"#分治思想\" class=\"headerlink\" title=\"分治思想\"></a>分治思想</h1><p><a href=\"https://juejin.cn/post/6885104477297344525\">分治算法之美</a></p>\n<h1 id=\"贪心思想\"><a href=\"#贪心思想\" class=\"headerlink\" title=\"贪心思想\"></a>贪心思想</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.conardli.top/\">awesome-coding-js</a></li>\n<li><a href=\"https://juejin.cn/post/6900698814093459463\">前端算法与数据结构总结</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"常用的数据结构\"><a href=\"#常用的数据结构\" class=\"headerlink\" title=\"常用的数据结构\"></a>常用的数据结构</h1><h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><p><a href=\"https://juejin.cn/post/6874708801208254478\">哈希算法之美</a></p>\n<h2 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h2><h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><p><a href=\"https://juejin.cn/post/6850418120755494925\">链表的9个基本操作</a></p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p><a href=\"https://juejin.cn/post/6890680584033533960\">二叉树之美</a></p>\n<h1 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h1><h2 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h2><p><a href=\"https://juejin.cn/post/6856546833025237006\">梳理6大排序算法</a></p>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h3 id=\"二分\"><a href=\"#二分\" class=\"headerlink\" title=\"二分\"></a>二分</h3><h2 id=\"搜索算法\"><a href=\"#搜索算法\" class=\"headerlink\" title=\"搜索算法\"></a>搜索算法</h2><h3 id=\"回溯算法\"><a href=\"#回溯算法\" class=\"headerlink\" title=\"回溯算法\"></a>回溯算法</h3><p><a href=\"https://juejin.cn/post/6882394656148045838\">带你看回溯算法之美</a></p>\n<h3 id=\"剪枝\"><a href=\"#剪枝\" class=\"headerlink\" title=\"剪枝\"></a>剪枝</h3><h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><h3 id=\"DFS和BFS\"><a href=\"#DFS和BFS\" class=\"headerlink\" title=\"DFS和BFS\"></a>DFS和BFS</h3><p><a href=\"https://juejin.cn/post/6861376131615227912\">DFS和BFS算法之美</a></p>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p><a href=\"https://juejin.cn/post/6872115031501340679\">动态规划算法之美</a></p>\n<h1 id=\"分治思想\"><a href=\"#分治思想\" class=\"headerlink\" title=\"分治思想\"></a>分治思想</h1><p><a href=\"https://juejin.cn/post/6885104477297344525\">分治算法之美</a></p>\n<h1 id=\"贪心思想\"><a href=\"#贪心思想\" class=\"headerlink\" title=\"贪心思想\"></a>贪心思想</h1><h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://www.conardli.top/\">awesome-coding-js</a></li>\n<li><a href=\"https://juejin.cn/post/6900698814093459463\">前端算法与数据结构总结</a></li>\n</ul>\n"},{"title":"【webpack】手写loader和plugin","date":"2021-03-24T12:10:21.000Z","toc":true,"comments":1,"copyright":false,"_content":"# loader\n\n- loader的作用：loader可以看成为一个转换器，将非js/json的文件转化为可执行的JS字符串。\n- loader本质上是一个函数，上一个loader处理完source之后会把处理结果传给下一个loader来处理。\n- loader执行的顺序是在use数组内从右到左（从后往前）\n- Compose(webpack采用的函数组合)：`compose = (f, g) => (...args) => f(g(...args))`\n\n# 手写清除console的loader\n参考文档: [手写清除console的loader](https://juejin.cn/post/7039258932845477925)\n\n- 手写loader源码\n```js\n// 路径 /loaders/console-loader/index.js\n\n/** \n * 手写清除console的loader\n * 参考：https://juejin.cn/post/7038413043084034062\n * loader实际上就是一个函数，但他不能是一个箭头函数，因为它需要继承webpack的this。\n * 多个loader是从右向左调用，上一个loader将结果返回给下一个loader使用\n * 输入输出都是字符串或者二进制数据，在loader函数中直接返回数字类型，会报错\n */\n\n\n// webpack5 已经可以通过this.query直接获取loader的options配置，所以不需要利用loader-utils工具获取\n// webpack5 内置了terser-webpack-plugin，如果使用的是webpack5，同时需要自定义配置，那么仍需要安装terser-webpack-plugin\n// uglifyjs-webpack-plugin只支持ES5，terser-webpack-plugin支持ES6，压缩js，清除console前缀的语句\n\n// source：表示当前要处理的内容\nconst reg = /(console.log()(.*)())/g;\n\n// Webpack5在loader的上下文中，会带有内置的this.getOptions方法\nfunction ConsoleLoader(source) {\n    const { data } = this.query;\n    console.log('data', data)\n    // 通过正则表达式将当前处理内容中的console替换为空字符串\n    source = source.replace(reg, \"\")\n    // 再把处理好的内容return出去，坚守输入输出都是字符串的原则，并可达到链式调用的目的供下一个loader处理\n    return source;\n}\n\nmodule.exports = ConsoleLoader;\n```\n- 在webpack.config.js中使用该loader\n```js\nconst path = require('path');\nmodule.exports = {\n    mode: 'development',\n    entry: path.join(__dirname, 'src/index.js'),\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: 'index.js',\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: {\n                    // path.resolve(__dirname, 'loaders/console-loader/index.js')\n                    loader: 'console-loader',\n                    options: {\n                        data: \"console-loader\"\n                    }\n                }\n            }\n        ]\n    },\n    resolveLoader: {\n        modules: ['node_modules', path.resolve(__dirname, 'loaders')]\n    }\n}\n```\n# plugin\n\nplugins是增强webpack功能，打包输出js文件（bundle）的一个优化，作用于整个构建过程。可以理解为任何loader没办法做的事情，都可以用plugins去完成。\n\n# 手写一个md转成html的plugin\n\n## 如何创建 Plugin\n\n参考：[手把手带你入门WebpackPlugin](https://juejin.cn/post/6968988552075952141)\n\n```js\nconst pluginName = 'md-to-html-plugin';\n\nclass MdToHtmlPlugin {\n    apply(compiler) {\n        // 代表开始读取 records 之前执行\n        compiler.hooks.emit.tap(pluginName, (compilation) => {\n            console.log(\"webpack 构建过程开始！\");\n\n            // _assets 打包的资源详情\n            const _assets = compilation.assets;\n        });\n    }\n}\n```\n\n- compiler 对象包含了 Webpack 环境所有的的配置信息，包含 options，loaders，plugins 这些信息，这个对象在 Webpack 启动时候被实例化，它是全局唯一的，可以简单地把它理解为 Webpack 实例；\n- webpack会提供一个apply方法，接受一个编译器compiler，编译的时候都是在apply里执行，是执行具体的插件方法。\n- apply 方法的入参注入了一个 compiler 实例，compiler 实例是 Webpack 的支柱引擎，代表了 CLI 和 Node API 传递的所有配置项。\n- compiler会有钩子hooks，钩子hooks会有一个发布器emit（类似node的EmitterEvent发布订阅）\n  tap第一个参数是插件的名字，第二个参数是回调函数，回调函数的参数是一个compilation。\n- compilation 对象包含了当前的模块资源、编译生成资源、变化的文件等。当 Webpack 以开发模式运行时，每当检测到一个文件变化，一次新的 compilation 将被创建。compilation 对象也提供了很多事件回调供插件做扩展。通过 compilation 也能读取到 Compiler 对象。Compilation 上的assets可以用于文件写入，可以将资源设置到compilation.assets对象上。\n- Hook 上还暴露了 3 个方法供使用，分别是 tap、tapAsync 和 tapPromise。这三个方法用于定义如何执行 Hook，比如 tap 表示注册同步 Hook，tapAsync 代表 callback 方式注册异步 hook，而 tapPromise 代表 Promise 方式注册异步 Hook。\n\n## 常见Complier Hooks\n\n参考: [webpack](https://www.webpackjs.com/api/compiler-hooks/?fileGuid=3tGHdrykRgwCyTP8)\n\n|  Hook  |      type      |                调用                |\n| :-----: | :-------------: | :---------------------------------: |\n|   run   | AsyncSeriesHook |        开始读取 records 之前        |\n| compile |    SyncHook    | 一个新的编译 (compilation) 创建之后 |\n|  emit  | AsyncSeriesHook |     生成资源到 output 目录之前     |\n|  done  |    SyncHook    |       编译 (compilation) 完成       |\n\n## 实现MdToHtmlPlugin\n\n### 1、创建MdToHtmlPlugin\n\n在根目录下创建plugin文件夹，在plugin下新建md-to-html-plugin文件夹，并在该文件夹下新建index.js入口文件，compiler.js文件，constant.js声明常量文件，util.js公共方法文件，template.html模板文件\n\n#### index.js文件\n\n```js\nconst { readFileSync } = require('fs');\nconst { resolve, dirname, join } = require('path');\nconst { compileHTML } = require('./compiler');\nconst { TEMPLATE_MARK, PLUGIN_NAME } = require('./constant');\n\nclass MdToHtmlPlugin {\n  constructor({ template, filename }) {\n    // 没传template\n    if (!template) {\n      throw new Error('Please input the markdown template file');\n    }\n    this.template = template;\n    // 没传filename 默认为 index.html\n    this.filename = filename ? filename : 'index.html';\n  }\n  apply(compiler) {\n    // tap第一个参数是插件的名字，第二个参数是回调函数，回调函数的参数是一个compilation\n    compiler.hooks.emit.tap(PLUGIN_NAME, (compilation) => {\n\n      // _assets 打包的资源详情\n      const _assets = compilation.assets;\n\n      // fs的api readFileSync 同步读取文件 readFile是异步的\n      const templateContent = readFileSync(this.template, 'utf-8'); // 目录文件，编码方式\n\n      // 将templateContent（md文件的内容） 变为数组\n      const templateContentArr = templateContent.split('\\n');\n\n      // 核心方法： 将数组内容 编译为 html标签   \n      const { htmlStr, staticSource } = compileHTML(templateContentArr);\n\n      // 找到当前目录下的template.html\n      const templateHtml = readFileSync(resolve(__dirname, \"template.html\"), 'utf-8');\n\n      // 将template.html的模板字符串替换\n      const fileHtml = templateHtml.replace(TEMPLATE_MARK, htmlStr);\n\n      // _assets增加资源，this.filename 就是_assets的一个属性\n      _assets[this.filename] = {\n        //  source不是一个普通的函数，它会把放到_assets[this.filename]对象中\n        //  将资源放到我们定义filename的html文件中\n        source() {\n          return fileHtml;\n        },\n        // 资源的长度  \n        size() {\n          return fileHtml.length;\n        }\n      }\n\n      // 处理静态文件\n      if (staticSource && staticSource.length > 0) {\n        // 获取md文件所在的目录\n        const tplDirName = dirname(this.template);\n        staticSource.map((staticItem) => {\n          const { filename, staticPath } = staticItem;\n          // 拼接md文件引用的静态资源路径\n          const staticsourcepath = join(tplDirName, staticPath);\n          // 读取静态资源\n          const statics = readFileSync(staticsourcepath);\n          // _assets增加资源\n          _assets[`${filename}`] = {\n            source() {\n              return statics;\n            },\n            size() {\n              return statics.length;\n            }\n          }\n        })\n      }\n\n    })\n  }\n}\n\nmodule.exports = MdToHtmlPlugin;\n```\n\n#### index.js中做了哪些事件？\n\n- 读取md文件，用到了node内置模块fs的方法，将md内容存到为数组中；\n- 将数组传入编译文件compiler的compileHTML中进行编译，返回html字符串和静态资源的路径，htmlStr如下：\n  ![htmlStr](images/engineering/mdtohtml009.png)\n- 读取template模板html文件，将文件内的模板替换为htmlStr\n- 最后把html文件和静态资源放到_assets中，交由webpack处理\n\n### 2、compiler模板编译文件\n\n```js\n// compiler.js\nconst { guid } = require('./util');\nconst { basename } = require('path');\nconst {\n  REG_MARK,\n  REG_TITLE,\n  REG_ORDER,\n  REG_DISORDER,\n  REG_LINK,\n  REG_IMG,\n  TAGTYPE_SIMPLE,\n  TAGTYPE_NESTING,\n  REG_LINK_STYLE\n} = require('./constant');\n\nfunction createTree(tplArr) {\n  // 存放结果\n  let htmlTree = {};\n\n  // 上一个标识符\n  let lastMark = '';\n\n  let uid = 0;\n\n  // 字符串相关的东西最好不要做封装，老老实实的写最好，不同的标签有不同的处理方法\n  tplArr.forEach((tplItem) => {\n    // 去掉\\r回车的影响\n    tplItem = tplItem.replace(/\\r/, '');\n\n    // 正则\n    const matched_mark = tplItem.match(REG_MARK);\n    const matched_link = tplItem.match(REG_LINK);\n    const matched_img = tplItem.match(REG_IMG);\n\n    // 匹配到md语法，不为空\n    if (matched_mark) {\n      // matched_mark[1]就是去掉空格的 md标识\n      const mark = matched_mark[1];\n\n      // input就是匹配到的md语法，input: '# h1标题\\r'\n      const input = matched_mark['input'];\n\n      // 匹配到#号的\n      if (REG_TITLE.test(mark)) {\n\n        // 根据#号的个数  判断是h几\n        const tag = `h${mark.length}`;\n\n        //将'# h1标题\\r'中的'# '干掉，最终得到'h1标题\\r'\n        const tagContent = input.replace(REG_MARK, '')\n\n        // REG_TITLE.test(lastMark)\n        if ((lastMark === mark)) {\n          htmlTree[tag].children = [...htmlTree[`${tag}-${uid}`], `<${tag}>${tagContent}</${tag}>`]\n        } else {\n          lastMark = mark;\n          uid = guid();\n          htmlTree[`${tag}-${uid}`] = {\n            type: TAGTYPE_SIMPLE,\n            children: [`<${tag}>${tagContent}</${tag}>`]\n          }\n        }\n      }\n\n      // 无序列表\n      if (REG_DISORDER.test(mark)) {\n        //将'- ul第一项\\r'中的'- '干掉，最终得到'ul第一项\\r'\n        const tagContent = input.replace(REG_MARK, '');\n        const tag = `li`;\n        // 上一个是不是`-`\n        if (REG_DISORDER.test(lastMark)) {\n          // '- ul第i项\\r' 放到一起\n          htmlTree[`ul-${uid}`].children = [...htmlTree[`ul-${uid}`].children, `<${tag}>${tagContent}</${tag}>`]\n        } else {\n          uid = guid();\n          lastMark = mark;\n          // 加一个随机后缀key\n          htmlTree[`ul-${uid}`] = {\n            type: TAGTYPE_NESTING, // 外层需要一个ul\n            children: [`<${tag}>${tagContent}</${tag}>`]\n          }\n        }\n      }\n\n      // 有序列表  是不是以数字开头的，如果是数字开头，没有.呢？\n      if (REG_ORDER.test(mark)) {\n        const tagContent = input.replace(REG_MARK, '');\n        const tag = `li`;\n        if (REG_ORDER.test(lastMark)) {\n          htmlTree[`ol-${uid}`].children = [...htmlTree[`ol-${uid}`].children, `<${tag}>${tagContent}</${tag}>`]\n        } else {\n          lastMark = mark;\n          uid = guid();\n          htmlTree[`ol-${uid}`] = {\n            type: TAGTYPE_NESTING,\n            children: [`<${tag}>${tagContent}</${tag}>`]\n          }\n        }\n      }\n    } else if (matched_link) { // 超链接的处理\n      // '百度'\n      const link_title = matched_link[1];\n      // 'http://www.baidu.com'\n      const link_href = matched_link[2];\n      // '[百度](http://www.baidu.com)'\n      const input = matched_link['input'];\n      const tag = `a`;\n      uid = guid();\n      htmlTree[`${tag}-${uid}`] = {\n        type: TAGTYPE_SIMPLE,\n        children: [`<${tag} href=\"${link_href}\" target=\"_blank\" style=\"${REG_LINK_STYLE}\">${link_title}</${tag}>`]\n      }\n    } else if (matched_img) { // 图片的处理\n      const tag = `img`;\n      // '图片'\n      const img_title = matched_img[1];\n      // 'public/testimages.png'\n      const img_src = matched_img[2];\n      // 'testimages'\n      const img_file = basename(img_src);\n      uid = guid();\n      htmlTree[`${tag}-${uid}`] = {\n        type: TAGTYPE_SIMPLE,\n        staticResources: {\n          filename: img_file,\n          staticPath: img_src\n        },\n        children: [`<${tag} src=\"./${img_file}\"  alt=\"${img_title}\"></${tag}>`]\n      }\n    }\n  })\n\n  return htmlTree;\n}\n\n// 转成树形结构 或者AST\nfunction compileHTML(templateContentArr) { // templateContentArr数组内容\n  // 转成树形结构\n  const htmlTree = createTree(templateContentArr)\n\n  // static资源\n  const staticSource = [];\n\n  // 拼接结果\n  let htmlStr = '';\n\n  // 保存当前遍历到的 key\n  let currItem;\n  for (let key in htmlTree) {\n    currItem = htmlTree[key];\n    htmlTree[key]?.staticResources && staticSource.push(htmlTree[key]?.staticResources)\n    // 等于single，直接拼接\n    if (currItem.type === TAGTYPE_SIMPLE) {\n      currItem.children.forEach(tag => {\n        htmlStr += tag;\n      });\n    } else if (currItem.type === TAGTYPE_NESTING) { // 外层要套一个标签的，不能直接拼接\n      // 获取外层的标签，就是htmlTree的key\n      const outerTag_Start = `<${key.split('-')[0]}>`;\n      const outerTag_End = `</${key.split('-')[0]}>`;\n      let currStr = \"\" + outerTag_Start;\n      currItem.children.forEach(tag => {\n        currStr += tag;\n      })\n      // 结束标签\n      currStr += outerTag_End;\n\n      htmlStr += currStr;\n    }\n\n  }\n\n  return { htmlStr, staticSource };\n}\n\nmodule.exports = {\n  compileHTML\n}\n```\n\n#### compiler做了什么？\n\n1. compileHTML方法中，调用createTree方法将数组转化为树形结构，htmlTree如下：\n   ![htmlTree](images/engineering/mdtohtml008.png)\n2. createTree的作用\n\n- 遍历数组，匹配不同的md标识符，如 `#`号代表标题，`(num.)`代表有序列表，`(-)`代表无序列表，`![]()`代表图片标识等，对不同的标识做不同的处理，如果是列表，需要在外层嵌套ul、ol。匹配md标识，用到了正则表达式。\n- 如果是超链接，则设置a标签，设置a标签默认样式，href属性。\n- 如果是图片，则设置img标签，获取图片的路径，设置src、alt等属性。\n- 最后返回htmlTree\n\n3. 遍历htmlTree的所有value，如果是simple类型，则直接拼接结果，如果是nesting类型，则需要在外面嵌套ol、ul\n4. 最后返回处理结果htmlStr、staticSource。\n\n### 3、其他文件说明\n\n#### constant.js\n\n```js\n// 以空字符串开头，以空格结尾，找到里边的所有字符\nconst REG_MARK = /^(.+?)\\s/;\n// 以#号开头的，最终转化成h标签，有可能是1个、2个、3个。。。\nconst REG_TITLE = /^\\#/;\n\n// 以数字开头 有序列表\nconst REG_ORDER = /^\\d/;\n\n// 以-开头的  最终转化成li\nconst REG_DISORDER = /^\\-/;\n\n// 匹配 []() 超链接\nconst REG_LINK = /^\\[(.+?)\\]\\((.+?)\\)$/;\n\n// 匹配 []() 超链接\nconst REG_IMG = /^\\!\\[(.+?)\\]\\((.+?)\\)$/;\n\n// 简单类型\nconst TAGTYPE_SIMPLE = 'simple';\n\n// 需要嵌套包裹\nconst TAGTYPE_NESTING = 'nesting';\n\n// 超链接默认样式\nconst REG_LINK_STYLE = `color: #3489fd;font-weight: 500;text-decoration: none;`\n\n// 需要替换 模板html文件里的字符串\nconst TEMPLATE_MARK = '<!--templateString-->';\n\n// 插件名称\nconst PLUGIN_NAME = 'md-to-html-plugin';\n\nmodule.exports = {\n    REG_MARK,\n    REG_TITLE,\n    REG_ORDER,\n    REG_DISORDER,\n    REG_LINK,\n    REG_IMG,\n    TAGTYPE_SIMPLE,\n    TAGTYPE_NESTING,\n    REG_LINK_STYLE,\n    TEMPLATE_MARK,\n    PLUGIN_NAME\n}\n```\n\n#### template.html\n\n![template.html](images/engineering/mdtohtml010.png)\n\n#### util.js\n\n```js\n// 生成uid\nfunction guid() {\n    let res = \"\";\n    for (let i = 1; i <= 8; i++) {\n        let n = Math.floor(Math.random() * 16.0).toString(16);\n        res += n;\n    }\n    return res;\n}\nmodule.exports = {\n    guid\n}\n```\n\n### 4、创建webpack.config.js文件\n\n在根目录下新建notebook.md，并写入简单的md标记，引入MdToHtmlPlugin插件，\n配置MdToHtmlPlugin的template和filename\n\n```js\nconst { resolve } = require('path')\nconst MdToHtmlPlugin = require('./plugins/md-to-html-plugin');\n\nconst config = {\n    // 模式\n    mode: \"development\",\n    // 入口文件\n    entry: resolve(__dirname, 'src/app.js'),\n    output: {\n        path: resolve(__dirname, 'dist'),\n        filename: \"app.js\"\n    },\n    // 配置自定义插件\n    plugins: [\n        new MdToHtmlPlugin({\n            template: resolve(__dirname, 'notebook.md'), // 我们需要解析的文件\n            filename: 'notebook.html' // 解析后的文件名\n        })\n    ]\n}\n\nmodule.exports = config;\n```\n\nnotebook.md文件内容如下：\n![notebook.png](images/engineering/mdtohtml011.png)\n\n### 5、调试和运行\n\n- 执行 `npm run build`\n- 在dist文件夹下输出打包后文件\n- 打开notebook.html看结果\n  ![notebook.html](images/engineering/mdtphtml012.png)\n\n\n\n","source":"_posts/engineering/loader-and-plugin.md","raw":"---\ntitle: 【webpack】手写loader和plugin \ndate: 2021-03-24 12:10:21\ncategories:\n  - 工程化\ntags:\n  - Webpack\ntoc: true # 是否启用内容索引\ncomments: true\ncopyright: false\n---\n# loader\n\n- loader的作用：loader可以看成为一个转换器，将非js/json的文件转化为可执行的JS字符串。\n- loader本质上是一个函数，上一个loader处理完source之后会把处理结果传给下一个loader来处理。\n- loader执行的顺序是在use数组内从右到左（从后往前）\n- Compose(webpack采用的函数组合)：`compose = (f, g) => (...args) => f(g(...args))`\n\n# 手写清除console的loader\n参考文档: [手写清除console的loader](https://juejin.cn/post/7039258932845477925)\n\n- 手写loader源码\n```js\n// 路径 /loaders/console-loader/index.js\n\n/** \n * 手写清除console的loader\n * 参考：https://juejin.cn/post/7038413043084034062\n * loader实际上就是一个函数，但他不能是一个箭头函数，因为它需要继承webpack的this。\n * 多个loader是从右向左调用，上一个loader将结果返回给下一个loader使用\n * 输入输出都是字符串或者二进制数据，在loader函数中直接返回数字类型，会报错\n */\n\n\n// webpack5 已经可以通过this.query直接获取loader的options配置，所以不需要利用loader-utils工具获取\n// webpack5 内置了terser-webpack-plugin，如果使用的是webpack5，同时需要自定义配置，那么仍需要安装terser-webpack-plugin\n// uglifyjs-webpack-plugin只支持ES5，terser-webpack-plugin支持ES6，压缩js，清除console前缀的语句\n\n// source：表示当前要处理的内容\nconst reg = /(console.log()(.*)())/g;\n\n// Webpack5在loader的上下文中，会带有内置的this.getOptions方法\nfunction ConsoleLoader(source) {\n    const { data } = this.query;\n    console.log('data', data)\n    // 通过正则表达式将当前处理内容中的console替换为空字符串\n    source = source.replace(reg, \"\")\n    // 再把处理好的内容return出去，坚守输入输出都是字符串的原则，并可达到链式调用的目的供下一个loader处理\n    return source;\n}\n\nmodule.exports = ConsoleLoader;\n```\n- 在webpack.config.js中使用该loader\n```js\nconst path = require('path');\nmodule.exports = {\n    mode: 'development',\n    entry: path.join(__dirname, 'src/index.js'),\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: 'index.js',\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: {\n                    // path.resolve(__dirname, 'loaders/console-loader/index.js')\n                    loader: 'console-loader',\n                    options: {\n                        data: \"console-loader\"\n                    }\n                }\n            }\n        ]\n    },\n    resolveLoader: {\n        modules: ['node_modules', path.resolve(__dirname, 'loaders')]\n    }\n}\n```\n# plugin\n\nplugins是增强webpack功能，打包输出js文件（bundle）的一个优化，作用于整个构建过程。可以理解为任何loader没办法做的事情，都可以用plugins去完成。\n\n# 手写一个md转成html的plugin\n\n## 如何创建 Plugin\n\n参考：[手把手带你入门WebpackPlugin](https://juejin.cn/post/6968988552075952141)\n\n```js\nconst pluginName = 'md-to-html-plugin';\n\nclass MdToHtmlPlugin {\n    apply(compiler) {\n        // 代表开始读取 records 之前执行\n        compiler.hooks.emit.tap(pluginName, (compilation) => {\n            console.log(\"webpack 构建过程开始！\");\n\n            // _assets 打包的资源详情\n            const _assets = compilation.assets;\n        });\n    }\n}\n```\n\n- compiler 对象包含了 Webpack 环境所有的的配置信息，包含 options，loaders，plugins 这些信息，这个对象在 Webpack 启动时候被实例化，它是全局唯一的，可以简单地把它理解为 Webpack 实例；\n- webpack会提供一个apply方法，接受一个编译器compiler，编译的时候都是在apply里执行，是执行具体的插件方法。\n- apply 方法的入参注入了一个 compiler 实例，compiler 实例是 Webpack 的支柱引擎，代表了 CLI 和 Node API 传递的所有配置项。\n- compiler会有钩子hooks，钩子hooks会有一个发布器emit（类似node的EmitterEvent发布订阅）\n  tap第一个参数是插件的名字，第二个参数是回调函数，回调函数的参数是一个compilation。\n- compilation 对象包含了当前的模块资源、编译生成资源、变化的文件等。当 Webpack 以开发模式运行时，每当检测到一个文件变化，一次新的 compilation 将被创建。compilation 对象也提供了很多事件回调供插件做扩展。通过 compilation 也能读取到 Compiler 对象。Compilation 上的assets可以用于文件写入，可以将资源设置到compilation.assets对象上。\n- Hook 上还暴露了 3 个方法供使用，分别是 tap、tapAsync 和 tapPromise。这三个方法用于定义如何执行 Hook，比如 tap 表示注册同步 Hook，tapAsync 代表 callback 方式注册异步 hook，而 tapPromise 代表 Promise 方式注册异步 Hook。\n\n## 常见Complier Hooks\n\n参考: [webpack](https://www.webpackjs.com/api/compiler-hooks/?fileGuid=3tGHdrykRgwCyTP8)\n\n|  Hook  |      type      |                调用                |\n| :-----: | :-------------: | :---------------------------------: |\n|   run   | AsyncSeriesHook |        开始读取 records 之前        |\n| compile |    SyncHook    | 一个新的编译 (compilation) 创建之后 |\n|  emit  | AsyncSeriesHook |     生成资源到 output 目录之前     |\n|  done  |    SyncHook    |       编译 (compilation) 完成       |\n\n## 实现MdToHtmlPlugin\n\n### 1、创建MdToHtmlPlugin\n\n在根目录下创建plugin文件夹，在plugin下新建md-to-html-plugin文件夹，并在该文件夹下新建index.js入口文件，compiler.js文件，constant.js声明常量文件，util.js公共方法文件，template.html模板文件\n\n#### index.js文件\n\n```js\nconst { readFileSync } = require('fs');\nconst { resolve, dirname, join } = require('path');\nconst { compileHTML } = require('./compiler');\nconst { TEMPLATE_MARK, PLUGIN_NAME } = require('./constant');\n\nclass MdToHtmlPlugin {\n  constructor({ template, filename }) {\n    // 没传template\n    if (!template) {\n      throw new Error('Please input the markdown template file');\n    }\n    this.template = template;\n    // 没传filename 默认为 index.html\n    this.filename = filename ? filename : 'index.html';\n  }\n  apply(compiler) {\n    // tap第一个参数是插件的名字，第二个参数是回调函数，回调函数的参数是一个compilation\n    compiler.hooks.emit.tap(PLUGIN_NAME, (compilation) => {\n\n      // _assets 打包的资源详情\n      const _assets = compilation.assets;\n\n      // fs的api readFileSync 同步读取文件 readFile是异步的\n      const templateContent = readFileSync(this.template, 'utf-8'); // 目录文件，编码方式\n\n      // 将templateContent（md文件的内容） 变为数组\n      const templateContentArr = templateContent.split('\\n');\n\n      // 核心方法： 将数组内容 编译为 html标签   \n      const { htmlStr, staticSource } = compileHTML(templateContentArr);\n\n      // 找到当前目录下的template.html\n      const templateHtml = readFileSync(resolve(__dirname, \"template.html\"), 'utf-8');\n\n      // 将template.html的模板字符串替换\n      const fileHtml = templateHtml.replace(TEMPLATE_MARK, htmlStr);\n\n      // _assets增加资源，this.filename 就是_assets的一个属性\n      _assets[this.filename] = {\n        //  source不是一个普通的函数，它会把放到_assets[this.filename]对象中\n        //  将资源放到我们定义filename的html文件中\n        source() {\n          return fileHtml;\n        },\n        // 资源的长度  \n        size() {\n          return fileHtml.length;\n        }\n      }\n\n      // 处理静态文件\n      if (staticSource && staticSource.length > 0) {\n        // 获取md文件所在的目录\n        const tplDirName = dirname(this.template);\n        staticSource.map((staticItem) => {\n          const { filename, staticPath } = staticItem;\n          // 拼接md文件引用的静态资源路径\n          const staticsourcepath = join(tplDirName, staticPath);\n          // 读取静态资源\n          const statics = readFileSync(staticsourcepath);\n          // _assets增加资源\n          _assets[`${filename}`] = {\n            source() {\n              return statics;\n            },\n            size() {\n              return statics.length;\n            }\n          }\n        })\n      }\n\n    })\n  }\n}\n\nmodule.exports = MdToHtmlPlugin;\n```\n\n#### index.js中做了哪些事件？\n\n- 读取md文件，用到了node内置模块fs的方法，将md内容存到为数组中；\n- 将数组传入编译文件compiler的compileHTML中进行编译，返回html字符串和静态资源的路径，htmlStr如下：\n  ![htmlStr](images/engineering/mdtohtml009.png)\n- 读取template模板html文件，将文件内的模板替换为htmlStr\n- 最后把html文件和静态资源放到_assets中，交由webpack处理\n\n### 2、compiler模板编译文件\n\n```js\n// compiler.js\nconst { guid } = require('./util');\nconst { basename } = require('path');\nconst {\n  REG_MARK,\n  REG_TITLE,\n  REG_ORDER,\n  REG_DISORDER,\n  REG_LINK,\n  REG_IMG,\n  TAGTYPE_SIMPLE,\n  TAGTYPE_NESTING,\n  REG_LINK_STYLE\n} = require('./constant');\n\nfunction createTree(tplArr) {\n  // 存放结果\n  let htmlTree = {};\n\n  // 上一个标识符\n  let lastMark = '';\n\n  let uid = 0;\n\n  // 字符串相关的东西最好不要做封装，老老实实的写最好，不同的标签有不同的处理方法\n  tplArr.forEach((tplItem) => {\n    // 去掉\\r回车的影响\n    tplItem = tplItem.replace(/\\r/, '');\n\n    // 正则\n    const matched_mark = tplItem.match(REG_MARK);\n    const matched_link = tplItem.match(REG_LINK);\n    const matched_img = tplItem.match(REG_IMG);\n\n    // 匹配到md语法，不为空\n    if (matched_mark) {\n      // matched_mark[1]就是去掉空格的 md标识\n      const mark = matched_mark[1];\n\n      // input就是匹配到的md语法，input: '# h1标题\\r'\n      const input = matched_mark['input'];\n\n      // 匹配到#号的\n      if (REG_TITLE.test(mark)) {\n\n        // 根据#号的个数  判断是h几\n        const tag = `h${mark.length}`;\n\n        //将'# h1标题\\r'中的'# '干掉，最终得到'h1标题\\r'\n        const tagContent = input.replace(REG_MARK, '')\n\n        // REG_TITLE.test(lastMark)\n        if ((lastMark === mark)) {\n          htmlTree[tag].children = [...htmlTree[`${tag}-${uid}`], `<${tag}>${tagContent}</${tag}>`]\n        } else {\n          lastMark = mark;\n          uid = guid();\n          htmlTree[`${tag}-${uid}`] = {\n            type: TAGTYPE_SIMPLE,\n            children: [`<${tag}>${tagContent}</${tag}>`]\n          }\n        }\n      }\n\n      // 无序列表\n      if (REG_DISORDER.test(mark)) {\n        //将'- ul第一项\\r'中的'- '干掉，最终得到'ul第一项\\r'\n        const tagContent = input.replace(REG_MARK, '');\n        const tag = `li`;\n        // 上一个是不是`-`\n        if (REG_DISORDER.test(lastMark)) {\n          // '- ul第i项\\r' 放到一起\n          htmlTree[`ul-${uid}`].children = [...htmlTree[`ul-${uid}`].children, `<${tag}>${tagContent}</${tag}>`]\n        } else {\n          uid = guid();\n          lastMark = mark;\n          // 加一个随机后缀key\n          htmlTree[`ul-${uid}`] = {\n            type: TAGTYPE_NESTING, // 外层需要一个ul\n            children: [`<${tag}>${tagContent}</${tag}>`]\n          }\n        }\n      }\n\n      // 有序列表  是不是以数字开头的，如果是数字开头，没有.呢？\n      if (REG_ORDER.test(mark)) {\n        const tagContent = input.replace(REG_MARK, '');\n        const tag = `li`;\n        if (REG_ORDER.test(lastMark)) {\n          htmlTree[`ol-${uid}`].children = [...htmlTree[`ol-${uid}`].children, `<${tag}>${tagContent}</${tag}>`]\n        } else {\n          lastMark = mark;\n          uid = guid();\n          htmlTree[`ol-${uid}`] = {\n            type: TAGTYPE_NESTING,\n            children: [`<${tag}>${tagContent}</${tag}>`]\n          }\n        }\n      }\n    } else if (matched_link) { // 超链接的处理\n      // '百度'\n      const link_title = matched_link[1];\n      // 'http://www.baidu.com'\n      const link_href = matched_link[2];\n      // '[百度](http://www.baidu.com)'\n      const input = matched_link['input'];\n      const tag = `a`;\n      uid = guid();\n      htmlTree[`${tag}-${uid}`] = {\n        type: TAGTYPE_SIMPLE,\n        children: [`<${tag} href=\"${link_href}\" target=\"_blank\" style=\"${REG_LINK_STYLE}\">${link_title}</${tag}>`]\n      }\n    } else if (matched_img) { // 图片的处理\n      const tag = `img`;\n      // '图片'\n      const img_title = matched_img[1];\n      // 'public/testimages.png'\n      const img_src = matched_img[2];\n      // 'testimages'\n      const img_file = basename(img_src);\n      uid = guid();\n      htmlTree[`${tag}-${uid}`] = {\n        type: TAGTYPE_SIMPLE,\n        staticResources: {\n          filename: img_file,\n          staticPath: img_src\n        },\n        children: [`<${tag} src=\"./${img_file}\"  alt=\"${img_title}\"></${tag}>`]\n      }\n    }\n  })\n\n  return htmlTree;\n}\n\n// 转成树形结构 或者AST\nfunction compileHTML(templateContentArr) { // templateContentArr数组内容\n  // 转成树形结构\n  const htmlTree = createTree(templateContentArr)\n\n  // static资源\n  const staticSource = [];\n\n  // 拼接结果\n  let htmlStr = '';\n\n  // 保存当前遍历到的 key\n  let currItem;\n  for (let key in htmlTree) {\n    currItem = htmlTree[key];\n    htmlTree[key]?.staticResources && staticSource.push(htmlTree[key]?.staticResources)\n    // 等于single，直接拼接\n    if (currItem.type === TAGTYPE_SIMPLE) {\n      currItem.children.forEach(tag => {\n        htmlStr += tag;\n      });\n    } else if (currItem.type === TAGTYPE_NESTING) { // 外层要套一个标签的，不能直接拼接\n      // 获取外层的标签，就是htmlTree的key\n      const outerTag_Start = `<${key.split('-')[0]}>`;\n      const outerTag_End = `</${key.split('-')[0]}>`;\n      let currStr = \"\" + outerTag_Start;\n      currItem.children.forEach(tag => {\n        currStr += tag;\n      })\n      // 结束标签\n      currStr += outerTag_End;\n\n      htmlStr += currStr;\n    }\n\n  }\n\n  return { htmlStr, staticSource };\n}\n\nmodule.exports = {\n  compileHTML\n}\n```\n\n#### compiler做了什么？\n\n1. compileHTML方法中，调用createTree方法将数组转化为树形结构，htmlTree如下：\n   ![htmlTree](images/engineering/mdtohtml008.png)\n2. createTree的作用\n\n- 遍历数组，匹配不同的md标识符，如 `#`号代表标题，`(num.)`代表有序列表，`(-)`代表无序列表，`![]()`代表图片标识等，对不同的标识做不同的处理，如果是列表，需要在外层嵌套ul、ol。匹配md标识，用到了正则表达式。\n- 如果是超链接，则设置a标签，设置a标签默认样式，href属性。\n- 如果是图片，则设置img标签，获取图片的路径，设置src、alt等属性。\n- 最后返回htmlTree\n\n3. 遍历htmlTree的所有value，如果是simple类型，则直接拼接结果，如果是nesting类型，则需要在外面嵌套ol、ul\n4. 最后返回处理结果htmlStr、staticSource。\n\n### 3、其他文件说明\n\n#### constant.js\n\n```js\n// 以空字符串开头，以空格结尾，找到里边的所有字符\nconst REG_MARK = /^(.+?)\\s/;\n// 以#号开头的，最终转化成h标签，有可能是1个、2个、3个。。。\nconst REG_TITLE = /^\\#/;\n\n// 以数字开头 有序列表\nconst REG_ORDER = /^\\d/;\n\n// 以-开头的  最终转化成li\nconst REG_DISORDER = /^\\-/;\n\n// 匹配 []() 超链接\nconst REG_LINK = /^\\[(.+?)\\]\\((.+?)\\)$/;\n\n// 匹配 []() 超链接\nconst REG_IMG = /^\\!\\[(.+?)\\]\\((.+?)\\)$/;\n\n// 简单类型\nconst TAGTYPE_SIMPLE = 'simple';\n\n// 需要嵌套包裹\nconst TAGTYPE_NESTING = 'nesting';\n\n// 超链接默认样式\nconst REG_LINK_STYLE = `color: #3489fd;font-weight: 500;text-decoration: none;`\n\n// 需要替换 模板html文件里的字符串\nconst TEMPLATE_MARK = '<!--templateString-->';\n\n// 插件名称\nconst PLUGIN_NAME = 'md-to-html-plugin';\n\nmodule.exports = {\n    REG_MARK,\n    REG_TITLE,\n    REG_ORDER,\n    REG_DISORDER,\n    REG_LINK,\n    REG_IMG,\n    TAGTYPE_SIMPLE,\n    TAGTYPE_NESTING,\n    REG_LINK_STYLE,\n    TEMPLATE_MARK,\n    PLUGIN_NAME\n}\n```\n\n#### template.html\n\n![template.html](images/engineering/mdtohtml010.png)\n\n#### util.js\n\n```js\n// 生成uid\nfunction guid() {\n    let res = \"\";\n    for (let i = 1; i <= 8; i++) {\n        let n = Math.floor(Math.random() * 16.0).toString(16);\n        res += n;\n    }\n    return res;\n}\nmodule.exports = {\n    guid\n}\n```\n\n### 4、创建webpack.config.js文件\n\n在根目录下新建notebook.md，并写入简单的md标记，引入MdToHtmlPlugin插件，\n配置MdToHtmlPlugin的template和filename\n\n```js\nconst { resolve } = require('path')\nconst MdToHtmlPlugin = require('./plugins/md-to-html-plugin');\n\nconst config = {\n    // 模式\n    mode: \"development\",\n    // 入口文件\n    entry: resolve(__dirname, 'src/app.js'),\n    output: {\n        path: resolve(__dirname, 'dist'),\n        filename: \"app.js\"\n    },\n    // 配置自定义插件\n    plugins: [\n        new MdToHtmlPlugin({\n            template: resolve(__dirname, 'notebook.md'), // 我们需要解析的文件\n            filename: 'notebook.html' // 解析后的文件名\n        })\n    ]\n}\n\nmodule.exports = config;\n```\n\nnotebook.md文件内容如下：\n![notebook.png](images/engineering/mdtohtml011.png)\n\n### 5、调试和运行\n\n- 执行 `npm run build`\n- 在dist文件夹下输出打包后文件\n- 打开notebook.html看结果\n  ![notebook.html](images/engineering/mdtphtml012.png)\n\n\n\n","slug":"engineering/loader-and-plugin","published":1,"updated":"2022-07-08T17:48:18.429Z","layout":"post","photos":[],"link":"","_id":"cl5f0biht0003v4uw3eiu9q0s","content":"<h1 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h1><ul>\n<li>loader的作用：loader可以看成为一个转换器，将非js&#x2F;json的文件转化为可执行的JS字符串。</li>\n<li>loader本质上是一个函数，上一个loader处理完source之后会把处理结果传给下一个loader来处理。</li>\n<li>loader执行的顺序是在use数组内从右到左（从后往前）</li>\n<li>Compose(webpack采用的函数组合)：<code>compose = (f, g) =&gt; (...args) =&gt; f(g(...args))</code></li>\n</ul>\n<h1 id=\"手写清除console的loader\"><a href=\"#手写清除console的loader\" class=\"headerlink\" title=\"手写清除console的loader\"></a>手写清除console的loader</h1><p>参考文档: <a href=\"https://juejin.cn/post/7039258932845477925\">手写清除console的loader</a></p>\n<ul>\n<li>手写loader源码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 路径 /loaders/console-loader/index.js</span>\n\n<span class=\"token comment\">/** \n * 手写清除console的loader\n * 参考：https://juejin.cn/post/7038413043084034062\n * loader实际上就是一个函数，但他不能是一个箭头函数，因为它需要继承webpack的this。\n * 多个loader是从右向左调用，上一个loader将结果返回给下一个loader使用\n * 输入输出都是字符串或者二进制数据，在loader函数中直接返回数字类型，会报错\n */</span>\n\n\n<span class=\"token comment\">// webpack5 已经可以通过this.query直接获取loader的options配置，所以不需要利用loader-utils工具获取</span>\n<span class=\"token comment\">// webpack5 内置了terser-webpack-plugin，如果使用的是webpack5，同时需要自定义配置，那么仍需要安装terser-webpack-plugin</span>\n<span class=\"token comment\">// uglifyjs-webpack-plugin只支持ES5，terser-webpack-plugin支持ES6，压缩js，清除console前缀的语句</span>\n\n<span class=\"token comment\">// source：表示当前要处理的内容</span>\n<span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(console.log()(.*)())</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Webpack5在loader的上下文中，会带有内置的this.getOptions方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ConsoleLoader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 通过正则表达式将当前处理内容中的console替换为空字符串</span>\n    source <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 再把处理好的内容return出去，坚守输入输出都是字符串的原则，并可达到链式调用的目的供下一个loader处理</span>\n    <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> ConsoleLoader<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>在webpack.config.js中使用该loader<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// path.resolve(__dirname, 'loaders/console-loader/index.js')</span>\n                    <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'console-loader'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token string\">\"console-loader\"</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">resolveLoader</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">modules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'loaders'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h1 id=\"plugin\"><a href=\"#plugin\" class=\"headerlink\" title=\"plugin\"></a>plugin</h1><p>plugins是增强webpack功能，打包输出js文件（bundle）的一个优化，作用于整个构建过程。可以理解为任何loader没办法做的事情，都可以用plugins去完成。</p>\n<h1 id=\"手写一个md转成html的plugin\"><a href=\"#手写一个md转成html的plugin\" class=\"headerlink\" title=\"手写一个md转成html的plugin\"></a>手写一个md转成html的plugin</h1><h2 id=\"如何创建-Plugin\"><a href=\"#如何创建-Plugin\" class=\"headerlink\" title=\"如何创建 Plugin\"></a>如何创建 Plugin</h2><p>参考：<a href=\"https://juejin.cn/post/6968988552075952141\">手把手带你入门WebpackPlugin</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> pluginName <span class=\"token operator\">=</span> <span class=\"token string\">'md-to-html-plugin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MdToHtmlPlugin</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 代表开始读取 records 之前执行</span>\n        compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>pluginName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webpack 构建过程开始！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// _assets 打包的资源详情</span>\n            <span class=\"token keyword\">const</span> _assets <span class=\"token operator\">=</span> compilation<span class=\"token punctuation\">.</span>assets<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>compiler 对象包含了 Webpack 环境所有的的配置信息，包含 options，loaders，plugins 这些信息，这个对象在 Webpack 启动时候被实例化，它是全局唯一的，可以简单地把它理解为 Webpack 实例；</li>\n<li>webpack会提供一个apply方法，接受一个编译器compiler，编译的时候都是在apply里执行，是执行具体的插件方法。</li>\n<li>apply 方法的入参注入了一个 compiler 实例，compiler 实例是 Webpack 的支柱引擎，代表了 CLI 和 Node API 传递的所有配置项。</li>\n<li>compiler会有钩子hooks，钩子hooks会有一个发布器emit（类似node的EmitterEvent发布订阅）<br>tap第一个参数是插件的名字，第二个参数是回调函数，回调函数的参数是一个compilation。</li>\n<li>compilation 对象包含了当前的模块资源、编译生成资源、变化的文件等。当 Webpack 以开发模式运行时，每当检测到一个文件变化，一次新的 compilation 将被创建。compilation 对象也提供了很多事件回调供插件做扩展。通过 compilation 也能读取到 Compiler 对象。Compilation 上的assets可以用于文件写入，可以将资源设置到compilation.assets对象上。</li>\n<li>Hook 上还暴露了 3 个方法供使用，分别是 tap、tapAsync 和 tapPromise。这三个方法用于定义如何执行 Hook，比如 tap 表示注册同步 Hook，tapAsync 代表 callback 方式注册异步 hook，而 tapPromise 代表 Promise 方式注册异步 Hook。</li>\n</ul>\n<h2 id=\"常见Complier-Hooks\"><a href=\"#常见Complier-Hooks\" class=\"headerlink\" title=\"常见Complier Hooks\"></a>常见Complier Hooks</h2><p>参考: <a href=\"https://www.webpackjs.com/api/compiler-hooks/?fileGuid=3tGHdrykRgwCyTP8\">webpack</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Hook</th>\n<th align=\"center\">type</th>\n<th align=\"center\">调用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">run</td>\n<td align=\"center\">AsyncSeriesHook</td>\n<td align=\"center\">开始读取 records 之前</td>\n</tr>\n<tr>\n<td align=\"center\">compile</td>\n<td align=\"center\">SyncHook</td>\n<td align=\"center\">一个新的编译 (compilation) 创建之后</td>\n</tr>\n<tr>\n<td align=\"center\">emit</td>\n<td align=\"center\">AsyncSeriesHook</td>\n<td align=\"center\">生成资源到 output 目录之前</td>\n</tr>\n<tr>\n<td align=\"center\">done</td>\n<td align=\"center\">SyncHook</td>\n<td align=\"center\">编译 (compilation) 完成</td>\n</tr>\n</tbody></table>\n<h2 id=\"实现MdToHtmlPlugin\"><a href=\"#实现MdToHtmlPlugin\" class=\"headerlink\" title=\"实现MdToHtmlPlugin\"></a>实现MdToHtmlPlugin</h2><h3 id=\"1、创建MdToHtmlPlugin\"><a href=\"#1、创建MdToHtmlPlugin\" class=\"headerlink\" title=\"1、创建MdToHtmlPlugin\"></a>1、创建MdToHtmlPlugin</h3><p>在根目录下创建plugin文件夹，在plugin下新建md-to-html-plugin文件夹，并在该文件夹下新建index.js入口文件，compiler.js文件，constant.js声明常量文件，util.js公共方法文件，template.html模板文件</p>\n<h4 id=\"index-js文件\"><a href=\"#index-js文件\" class=\"headerlink\" title=\"index.js文件\"></a>index.js文件</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> readFileSync <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> resolve<span class=\"token punctuation\">,</span> dirname<span class=\"token punctuation\">,</span> join <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> compileHTML <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./compiler'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">TEMPLATE_MARK</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PLUGIN_NAME</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./constant'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MdToHtmlPlugin</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> template<span class=\"token punctuation\">,</span> filename <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 没传template</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>template<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please input the markdown template file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template <span class=\"token operator\">=</span> template<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 没传filename 默认为 index.html</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filename <span class=\"token operator\">=</span> filename <span class=\"token operator\">?</span> filename <span class=\"token operator\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// tap第一个参数是插件的名字，第二个参数是回调函数，回调函数的参数是一个compilation</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PLUGIN_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n      <span class=\"token comment\">// _assets 打包的资源详情</span>\n      <span class=\"token keyword\">const</span> _assets <span class=\"token operator\">=</span> compilation<span class=\"token punctuation\">.</span>assets<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// fs的api readFileSync 同步读取文件 readFile是异步的</span>\n      <span class=\"token keyword\">const</span> templateContent <span class=\"token operator\">=</span> <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 目录文件，编码方式</span>\n\n      <span class=\"token comment\">// 将templateContent（md文件的内容） 变为数组</span>\n      <span class=\"token keyword\">const</span> templateContentArr <span class=\"token operator\">=</span> templateContent<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 核心方法： 将数组内容 编译为 html标签   </span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> htmlStr<span class=\"token punctuation\">,</span> staticSource <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">compileHTML</span><span class=\"token punctuation\">(</span>templateContentArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 找到当前目录下的template.html</span>\n      <span class=\"token keyword\">const</span> templateHtml <span class=\"token operator\">=</span> <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"template.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 将template.html的模板字符串替换</span>\n      <span class=\"token keyword\">const</span> fileHtml <span class=\"token operator\">=</span> templateHtml<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TEMPLATE_MARK</span><span class=\"token punctuation\">,</span> htmlStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// _assets增加资源，this.filename 就是_assets的一个属性</span>\n      _assets<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//  source不是一个普通的函数，它会把放到_assets[this.filename]对象中</span>\n        <span class=\"token comment\">//  将资源放到我们定义filename的html文件中</span>\n        <span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> fileHtml<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 资源的长度  </span>\n        <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> fileHtml<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token comment\">// 处理静态文件</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>staticSource <span class=\"token operator\">&amp;&amp;</span> staticSource<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 获取md文件所在的目录</span>\n        <span class=\"token keyword\">const</span> tplDirName <span class=\"token operator\">=</span> <span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        staticSource<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">staticItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> filename<span class=\"token punctuation\">,</span> staticPath <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> staticItem<span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// 拼接md文件引用的静态资源路径</span>\n          <span class=\"token keyword\">const</span> staticsourcepath <span class=\"token operator\">=</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>tplDirName<span class=\"token punctuation\">,</span> staticPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// 读取静态资源</span>\n          <span class=\"token keyword\">const</span> statics <span class=\"token operator\">=</span> <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>staticsourcepath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// _assets增加资源</span>\n          _assets<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>filename<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span> statics<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span> statics<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> MdToHtmlPlugin<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"index-js中做了哪些事件？\"><a href=\"#index-js中做了哪些事件？\" class=\"headerlink\" title=\"index.js中做了哪些事件？\"></a>index.js中做了哪些事件？</h4><ul>\n<li>读取md文件，用到了node内置模块fs的方法，将md内容存到为数组中；</li>\n<li>将数组传入编译文件compiler的compileHTML中进行编译，返回html字符串和静态资源的路径，htmlStr如下：<br><img src=\"/images/engineering/mdtohtml009.png\" alt=\"htmlStr\"></li>\n<li>读取template模板html文件，将文件内的模板替换为htmlStr</li>\n<li>最后把html文件和静态资源放到_assets中，交由webpack处理</li>\n</ul>\n<h3 id=\"2、compiler模板编译文件\"><a href=\"#2、compiler模板编译文件\" class=\"headerlink\" title=\"2、compiler模板编译文件\"></a>2、compiler模板编译文件</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// compiler.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> guid <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> basename <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token constant\">REG_MARK</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REG_TITLE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REG_ORDER</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REG_DISORDER</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REG_LINK</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REG_IMG</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">TAGTYPE_SIMPLE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">TAGTYPE_NESTING</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REG_LINK_STYLE</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./constant'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tplArr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 存放结果</span>\n  <span class=\"token keyword\">let</span> htmlTree <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 上一个标识符</span>\n  <span class=\"token keyword\">let</span> lastMark <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> uid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 字符串相关的东西最好不要做封装，老老实实的写最好，不同的标签有不同的处理方法</span>\n  tplArr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tplItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 去掉\\r回车的影响</span>\n    tplItem <span class=\"token operator\">=</span> tplItem<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\r</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 正则</span>\n    <span class=\"token keyword\">const</span> matched_mark <span class=\"token operator\">=</span> tplItem<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REG_MARK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> matched_link <span class=\"token operator\">=</span> tplItem<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REG_LINK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> matched_img <span class=\"token operator\">=</span> tplItem<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REG_IMG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 匹配到md语法，不为空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matched_mark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// matched_mark[1]就是去掉空格的 md标识</span>\n      <span class=\"token keyword\">const</span> mark <span class=\"token operator\">=</span> matched_mark<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// input就是匹配到的md语法，input: '# h1标题\\r'</span>\n      <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> matched_mark<span class=\"token punctuation\">[</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 匹配到#号的</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">REG_TITLE</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>mark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">// 根据#号的个数  判断是h几</span>\n        <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">h</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>mark<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//将'# h1标题\\r'中的'# '干掉，最终得到'h1标题\\r'</span>\n        <span class=\"token keyword\">const</span> tagContent <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REG_MARK</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// REG_TITLE.test(lastMark)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lastMark <span class=\"token operator\">===</span> mark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          htmlTree<span class=\"token punctuation\">[</span>tag<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tagContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          lastMark <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">;</span>\n          uid <span class=\"token operator\">=</span> <span class=\"token function\">guid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">TAGTYPE_SIMPLE</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tagContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token comment\">// 无序列表</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">REG_DISORDER</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>mark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//将'- ul第一项\\r'中的'- '干掉，最终得到'ul第一项\\r'</span>\n        <span class=\"token keyword\">const</span> tagContent <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REG_MARK</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">li</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 上一个是不是`-`</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">REG_DISORDER</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>lastMark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// '- ul第i项\\r' 放到一起</span>\n          htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ul-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ul-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tagContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          uid <span class=\"token operator\">=</span> <span class=\"token function\">guid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          lastMark <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// 加一个随机后缀key</span>\n          htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ul-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">TAGTYPE_NESTING</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 外层需要一个ul</span>\n            <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tagContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token comment\">// 有序列表  是不是以数字开头的，如果是数字开头，没有.呢？</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">REG_ORDER</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>mark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> tagContent <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REG_MARK</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">li</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">REG_ORDER</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>lastMark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ol-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ol-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tagContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          lastMark <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">;</span>\n          uid <span class=\"token operator\">=</span> <span class=\"token function\">guid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ol-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">TAGTYPE_NESTING</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tagContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matched_link<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 超链接的处理</span>\n      <span class=\"token comment\">// '百度'</span>\n      <span class=\"token keyword\">const</span> link_title <span class=\"token operator\">=</span> matched_link<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 'http://www.baidu.com'</span>\n      <span class=\"token keyword\">const</span> link_href <span class=\"token operator\">=</span> matched_link<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// '[百度](http://www.baidu.com)'</span>\n      <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> matched_link<span class=\"token punctuation\">[</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      uid <span class=\"token operator\">=</span> <span class=\"token function\">guid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">TAGTYPE_SIMPLE</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> href=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>link_href<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\" target=\"_blank\" style=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">REG_LINK_STYLE</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>link_title<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matched_img<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 图片的处理</span>\n      <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">img</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// '图片'</span>\n      <span class=\"token keyword\">const</span> img_title <span class=\"token operator\">=</span> matched_img<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 'public/testimages.png'</span>\n      <span class=\"token keyword\">const</span> img_src <span class=\"token operator\">=</span> matched_img<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 'testimages'</span>\n      <span class=\"token keyword\">const</span> img_file <span class=\"token operator\">=</span> <span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>img_src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      uid <span class=\"token operator\">=</span> <span class=\"token function\">guid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">TAGTYPE_SIMPLE</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">staticResources</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> img_file<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">staticPath</span><span class=\"token operator\">:</span> img_src\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> src=\"./</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>img_file<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"  alt=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>img_title<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> htmlTree<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 转成树形结构 或者AST</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">compileHTML</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">templateContentArr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// templateContentArr数组内容</span>\n  <span class=\"token comment\">// 转成树形结构</span>\n  <span class=\"token keyword\">const</span> htmlTree <span class=\"token operator\">=</span> <span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span>templateContentArr<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// static资源</span>\n  <span class=\"token keyword\">const</span> staticSource <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 拼接结果</span>\n  <span class=\"token keyword\">let</span> htmlStr <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 保存当前遍历到的 key</span>\n  <span class=\"token keyword\">let</span> currItem<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> htmlTree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    currItem <span class=\"token operator\">=</span> htmlTree<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    htmlTree<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span>staticResources <span class=\"token operator\">&amp;&amp;</span> staticSource<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>htmlTree<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span>staticResources<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 等于single，直接拼接</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currItem<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token constant\">TAGTYPE_SIMPLE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      currItem<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        htmlStr <span class=\"token operator\">+=</span> tag<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currItem<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token constant\">TAGTYPE_NESTING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 外层要套一个标签的，不能直接拼接</span>\n      <span class=\"token comment\">// 获取外层的标签，就是htmlTree的key</span>\n      <span class=\"token keyword\">const</span> outerTag_Start <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> outerTag_End <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> currStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> outerTag_Start<span class=\"token punctuation\">;</span>\n      currItem<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        currStr <span class=\"token operator\">+=</span> tag<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 结束标签</span>\n      currStr <span class=\"token operator\">+=</span> outerTag_End<span class=\"token punctuation\">;</span>\n\n      htmlStr <span class=\"token operator\">+=</span> currStr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> htmlStr<span class=\"token punctuation\">,</span> staticSource <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  compileHTML\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"compiler做了什么？\"><a href=\"#compiler做了什么？\" class=\"headerlink\" title=\"compiler做了什么？\"></a>compiler做了什么？</h4><ol>\n<li>compileHTML方法中，调用createTree方法将数组转化为树形结构，htmlTree如下：<br><img src=\"/images/engineering/mdtohtml008.png\" alt=\"htmlTree\"></li>\n<li>createTree的作用</li>\n</ol>\n<ul>\n<li>遍历数组，匹配不同的md标识符，如 <code>#</code>号代表标题，<code>(num.)</code>代表有序列表，<code>(-)</code>代表无序列表，<code>![]()</code>代表图片标识等，对不同的标识做不同的处理，如果是列表，需要在外层嵌套ul、ol。匹配md标识，用到了正则表达式。</li>\n<li>如果是超链接，则设置a标签，设置a标签默认样式，href属性。</li>\n<li>如果是图片，则设置img标签，获取图片的路径，设置src、alt等属性。</li>\n<li>最后返回htmlTree</li>\n</ul>\n<ol start=\"3\">\n<li>遍历htmlTree的所有value，如果是simple类型，则直接拼接结果，如果是nesting类型，则需要在外面嵌套ol、ul</li>\n<li>最后返回处理结果htmlStr、staticSource。</li>\n</ol>\n<h3 id=\"3、其他文件说明\"><a href=\"#3、其他文件说明\" class=\"headerlink\" title=\"3、其他文件说明\"></a>3、其他文件说明</h3><h4 id=\"constant-js\"><a href=\"#constant-js\" class=\"headerlink\" title=\"constant.js\"></a>constant.js</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 以空字符串开头，以空格结尾，找到里边的所有字符</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_MARK</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(.+?)\\s</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 以#号开头的，最终转化成h标签，有可能是1个、2个、3个。。。</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_TITLE</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\#</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 以数字开头 有序列表</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_ORDER</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\d</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 以-开头的  最终转化成li</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_DISORDER</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\-</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 匹配 []() 超链接</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_LINK</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\[(.+?)\\]\\((.+?)\\)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 匹配 []() 超链接</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_IMG</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\!\\[(.+?)\\]\\((.+?)\\)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 简单类型</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TAGTYPE_SIMPLE</span> <span class=\"token operator\">=</span> <span class=\"token string\">'simple'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 需要嵌套包裹</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TAGTYPE_NESTING</span> <span class=\"token operator\">=</span> <span class=\"token string\">'nesting'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 超链接默认样式</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_LINK_STYLE</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">color: #3489fd;font-weight: 500;text-decoration: none;</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// 需要替换 模板html文件里的字符串</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TEMPLATE_MARK</span> <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;!--templateString-->'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 插件名称</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PLUGIN_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'md-to-html-plugin'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token constant\">REG_MARK</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REG_TITLE</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REG_ORDER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REG_DISORDER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REG_LINK</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REG_IMG</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">TAGTYPE_SIMPLE</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">TAGTYPE_NESTING</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REG_LINK_STYLE</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">TEMPLATE_MARK</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">PLUGIN_NAME</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"template-html\"><a href=\"#template-html\" class=\"headerlink\" title=\"template.html\"></a>template.html</h4><p><img src=\"/images/engineering/mdtohtml010.png\" alt=\"template.html\"></p>\n<h4 id=\"util-js\"><a href=\"#util-js\" class=\"headerlink\" title=\"util.js\"></a>util.js</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 生成uid</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">guid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">16.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    guid\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4、创建webpack-config-js文件\"><a href=\"#4、创建webpack-config-js文件\" class=\"headerlink\" title=\"4、创建webpack.config.js文件\"></a>4、创建webpack.config.js文件</h3><p>在根目录下新建notebook.md，并写入简单的md标记，引入MdToHtmlPlugin插件，<br>配置MdToHtmlPlugin的template和filename</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> resolve <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> MdToHtmlPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./plugins/md-to-html-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 模式</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 入口文件</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/app.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"app.js\"</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 配置自定义插件</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MdToHtmlPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'notebook.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 我们需要解析的文件</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'notebook.html'</span> <span class=\"token comment\">// 解析后的文件名</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>notebook.md文件内容如下：<br><img src=\"/images/engineering/mdtohtml011.png\" alt=\"notebook.png\"></p>\n<h3 id=\"5、调试和运行\"><a href=\"#5、调试和运行\" class=\"headerlink\" title=\"5、调试和运行\"></a>5、调试和运行</h3><ul>\n<li>执行 <code>npm run build</code></li>\n<li>在dist文件夹下输出打包后文件</li>\n<li>打开notebook.html看结果<br><img src=\"/images/engineering/mdtphtml012.png\" alt=\"notebook.html\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h1><ul>\n<li>loader的作用：loader可以看成为一个转换器，将非js&#x2F;json的文件转化为可执行的JS字符串。</li>\n<li>loader本质上是一个函数，上一个loader处理完source之后会把处理结果传给下一个loader来处理。</li>\n<li>loader执行的顺序是在use数组内从右到左（从后往前）</li>\n<li>Compose(webpack采用的函数组合)：<code>compose = (f, g) =&gt; (...args) =&gt; f(g(...args))</code></li>\n</ul>\n<h1 id=\"手写清除console的loader\"><a href=\"#手写清除console的loader\" class=\"headerlink\" title=\"手写清除console的loader\"></a>手写清除console的loader</h1><p>参考文档: <a href=\"https://juejin.cn/post/7039258932845477925\">手写清除console的loader</a></p>\n<ul>\n<li>手写loader源码<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 路径 /loaders/console-loader/index.js</span>\n\n<span class=\"token comment\">/** \n * 手写清除console的loader\n * 参考：https://juejin.cn/post/7038413043084034062\n * loader实际上就是一个函数，但他不能是一个箭头函数，因为它需要继承webpack的this。\n * 多个loader是从右向左调用，上一个loader将结果返回给下一个loader使用\n * 输入输出都是字符串或者二进制数据，在loader函数中直接返回数字类型，会报错\n */</span>\n\n\n<span class=\"token comment\">// webpack5 已经可以通过this.query直接获取loader的options配置，所以不需要利用loader-utils工具获取</span>\n<span class=\"token comment\">// webpack5 内置了terser-webpack-plugin，如果使用的是webpack5，同时需要自定义配置，那么仍需要安装terser-webpack-plugin</span>\n<span class=\"token comment\">// uglifyjs-webpack-plugin只支持ES5，terser-webpack-plugin支持ES6，压缩js，清除console前缀的语句</span>\n\n<span class=\"token comment\">// source：表示当前要处理的内容</span>\n<span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(console.log()(.*)())</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Webpack5在loader的上下文中，会带有内置的this.getOptions方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">ConsoleLoader</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 通过正则表达式将当前处理内容中的console替换为空字符串</span>\n    source <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 再把处理好的内容return出去，坚守输入输出都是字符串的原则，并可达到链式调用的目的供下一个loader处理</span>\n    <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> ConsoleLoader<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>在webpack.config.js中使用该loader<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// path.resolve(__dirname, 'loaders/console-loader/index.js')</span>\n                    <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'console-loader'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token string\">\"console-loader\"</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">resolveLoader</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">modules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'loaders'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h1 id=\"plugin\"><a href=\"#plugin\" class=\"headerlink\" title=\"plugin\"></a>plugin</h1><p>plugins是增强webpack功能，打包输出js文件（bundle）的一个优化，作用于整个构建过程。可以理解为任何loader没办法做的事情，都可以用plugins去完成。</p>\n<h1 id=\"手写一个md转成html的plugin\"><a href=\"#手写一个md转成html的plugin\" class=\"headerlink\" title=\"手写一个md转成html的plugin\"></a>手写一个md转成html的plugin</h1><h2 id=\"如何创建-Plugin\"><a href=\"#如何创建-Plugin\" class=\"headerlink\" title=\"如何创建 Plugin\"></a>如何创建 Plugin</h2><p>参考：<a href=\"https://juejin.cn/post/6968988552075952141\">手把手带你入门WebpackPlugin</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> pluginName <span class=\"token operator\">=</span> <span class=\"token string\">'md-to-html-plugin'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MdToHtmlPlugin</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 代表开始读取 records 之前执行</span>\n        compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span>pluginName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webpack 构建过程开始！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// _assets 打包的资源详情</span>\n            <span class=\"token keyword\">const</span> _assets <span class=\"token operator\">=</span> compilation<span class=\"token punctuation\">.</span>assets<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>compiler 对象包含了 Webpack 环境所有的的配置信息，包含 options，loaders，plugins 这些信息，这个对象在 Webpack 启动时候被实例化，它是全局唯一的，可以简单地把它理解为 Webpack 实例；</li>\n<li>webpack会提供一个apply方法，接受一个编译器compiler，编译的时候都是在apply里执行，是执行具体的插件方法。</li>\n<li>apply 方法的入参注入了一个 compiler 实例，compiler 实例是 Webpack 的支柱引擎，代表了 CLI 和 Node API 传递的所有配置项。</li>\n<li>compiler会有钩子hooks，钩子hooks会有一个发布器emit（类似node的EmitterEvent发布订阅）<br>tap第一个参数是插件的名字，第二个参数是回调函数，回调函数的参数是一个compilation。</li>\n<li>compilation 对象包含了当前的模块资源、编译生成资源、变化的文件等。当 Webpack 以开发模式运行时，每当检测到一个文件变化，一次新的 compilation 将被创建。compilation 对象也提供了很多事件回调供插件做扩展。通过 compilation 也能读取到 Compiler 对象。Compilation 上的assets可以用于文件写入，可以将资源设置到compilation.assets对象上。</li>\n<li>Hook 上还暴露了 3 个方法供使用，分别是 tap、tapAsync 和 tapPromise。这三个方法用于定义如何执行 Hook，比如 tap 表示注册同步 Hook，tapAsync 代表 callback 方式注册异步 hook，而 tapPromise 代表 Promise 方式注册异步 Hook。</li>\n</ul>\n<h2 id=\"常见Complier-Hooks\"><a href=\"#常见Complier-Hooks\" class=\"headerlink\" title=\"常见Complier Hooks\"></a>常见Complier Hooks</h2><p>参考: <a href=\"https://www.webpackjs.com/api/compiler-hooks/?fileGuid=3tGHdrykRgwCyTP8\">webpack</a></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Hook</th>\n<th align=\"center\">type</th>\n<th align=\"center\">调用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">run</td>\n<td align=\"center\">AsyncSeriesHook</td>\n<td align=\"center\">开始读取 records 之前</td>\n</tr>\n<tr>\n<td align=\"center\">compile</td>\n<td align=\"center\">SyncHook</td>\n<td align=\"center\">一个新的编译 (compilation) 创建之后</td>\n</tr>\n<tr>\n<td align=\"center\">emit</td>\n<td align=\"center\">AsyncSeriesHook</td>\n<td align=\"center\">生成资源到 output 目录之前</td>\n</tr>\n<tr>\n<td align=\"center\">done</td>\n<td align=\"center\">SyncHook</td>\n<td align=\"center\">编译 (compilation) 完成</td>\n</tr>\n</tbody></table>\n<h2 id=\"实现MdToHtmlPlugin\"><a href=\"#实现MdToHtmlPlugin\" class=\"headerlink\" title=\"实现MdToHtmlPlugin\"></a>实现MdToHtmlPlugin</h2><h3 id=\"1、创建MdToHtmlPlugin\"><a href=\"#1、创建MdToHtmlPlugin\" class=\"headerlink\" title=\"1、创建MdToHtmlPlugin\"></a>1、创建MdToHtmlPlugin</h3><p>在根目录下创建plugin文件夹，在plugin下新建md-to-html-plugin文件夹，并在该文件夹下新建index.js入口文件，compiler.js文件，constant.js声明常量文件，util.js公共方法文件，template.html模板文件</p>\n<h4 id=\"index-js文件\"><a href=\"#index-js文件\" class=\"headerlink\" title=\"index.js文件\"></a>index.js文件</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> readFileSync <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> resolve<span class=\"token punctuation\">,</span> dirname<span class=\"token punctuation\">,</span> join <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> compileHTML <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./compiler'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">TEMPLATE_MARK</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PLUGIN_NAME</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./constant'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MdToHtmlPlugin</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> template<span class=\"token punctuation\">,</span> filename <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 没传template</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>template<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please input the markdown template file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template <span class=\"token operator\">=</span> template<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 没传filename 默认为 index.html</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filename <span class=\"token operator\">=</span> filename <span class=\"token operator\">?</span> filename <span class=\"token operator\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">compiler</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// tap第一个参数是插件的名字，第二个参数是回调函数，回调函数的参数是一个compilation</span>\n    compiler<span class=\"token punctuation\">.</span>hooks<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">.</span><span class=\"token function\">tap</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PLUGIN_NAME</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">compilation</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n      <span class=\"token comment\">// _assets 打包的资源详情</span>\n      <span class=\"token keyword\">const</span> _assets <span class=\"token operator\">=</span> compilation<span class=\"token punctuation\">.</span>assets<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// fs的api readFileSync 同步读取文件 readFile是异步的</span>\n      <span class=\"token keyword\">const</span> templateContent <span class=\"token operator\">=</span> <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 目录文件，编码方式</span>\n\n      <span class=\"token comment\">// 将templateContent（md文件的内容） 变为数组</span>\n      <span class=\"token keyword\">const</span> templateContentArr <span class=\"token operator\">=</span> templateContent<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 核心方法： 将数组内容 编译为 html标签   </span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> htmlStr<span class=\"token punctuation\">,</span> staticSource <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">compileHTML</span><span class=\"token punctuation\">(</span>templateContentArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 找到当前目录下的template.html</span>\n      <span class=\"token keyword\">const</span> templateHtml <span class=\"token operator\">=</span> <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"template.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 将template.html的模板字符串替换</span>\n      <span class=\"token keyword\">const</span> fileHtml <span class=\"token operator\">=</span> templateHtml<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TEMPLATE_MARK</span><span class=\"token punctuation\">,</span> htmlStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// _assets增加资源，this.filename 就是_assets的一个属性</span>\n      _assets<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//  source不是一个普通的函数，它会把放到_assets[this.filename]对象中</span>\n        <span class=\"token comment\">//  将资源放到我们定义filename的html文件中</span>\n        <span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> fileHtml<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 资源的长度  </span>\n        <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">return</span> fileHtml<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token comment\">// 处理静态文件</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>staticSource <span class=\"token operator\">&amp;&amp;</span> staticSource<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 获取md文件所在的目录</span>\n        <span class=\"token keyword\">const</span> tplDirName <span class=\"token operator\">=</span> <span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        staticSource<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">staticItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> filename<span class=\"token punctuation\">,</span> staticPath <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> staticItem<span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// 拼接md文件引用的静态资源路径</span>\n          <span class=\"token keyword\">const</span> staticsourcepath <span class=\"token operator\">=</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>tplDirName<span class=\"token punctuation\">,</span> staticPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// 读取静态资源</span>\n          <span class=\"token keyword\">const</span> statics <span class=\"token operator\">=</span> <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>staticsourcepath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// _assets增加资源</span>\n          _assets<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>filename<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span> statics<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token keyword\">return</span> statics<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> MdToHtmlPlugin<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"index-js中做了哪些事件？\"><a href=\"#index-js中做了哪些事件？\" class=\"headerlink\" title=\"index.js中做了哪些事件？\"></a>index.js中做了哪些事件？</h4><ul>\n<li>读取md文件，用到了node内置模块fs的方法，将md内容存到为数组中；</li>\n<li>将数组传入编译文件compiler的compileHTML中进行编译，返回html字符串和静态资源的路径，htmlStr如下：<br><img src=\"/images/engineering/mdtohtml009.png\" alt=\"htmlStr\"></li>\n<li>读取template模板html文件，将文件内的模板替换为htmlStr</li>\n<li>最后把html文件和静态资源放到_assets中，交由webpack处理</li>\n</ul>\n<h3 id=\"2、compiler模板编译文件\"><a href=\"#2、compiler模板编译文件\" class=\"headerlink\" title=\"2、compiler模板编译文件\"></a>2、compiler模板编译文件</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// compiler.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> guid <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> basename <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token constant\">REG_MARK</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REG_TITLE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REG_ORDER</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REG_DISORDER</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REG_LINK</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REG_IMG</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">TAGTYPE_SIMPLE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">TAGTYPE_NESTING</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">REG_LINK_STYLE</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./constant'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tplArr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 存放结果</span>\n  <span class=\"token keyword\">let</span> htmlTree <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 上一个标识符</span>\n  <span class=\"token keyword\">let</span> lastMark <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> uid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 字符串相关的东西最好不要做封装，老老实实的写最好，不同的标签有不同的处理方法</span>\n  tplArr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tplItem</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 去掉\\r回车的影响</span>\n    tplItem <span class=\"token operator\">=</span> tplItem<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\r</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 正则</span>\n    <span class=\"token keyword\">const</span> matched_mark <span class=\"token operator\">=</span> tplItem<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REG_MARK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> matched_link <span class=\"token operator\">=</span> tplItem<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REG_LINK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> matched_img <span class=\"token operator\">=</span> tplItem<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REG_IMG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 匹配到md语法，不为空</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matched_mark<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// matched_mark[1]就是去掉空格的 md标识</span>\n      <span class=\"token keyword\">const</span> mark <span class=\"token operator\">=</span> matched_mark<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// input就是匹配到的md语法，input: '# h1标题\\r'</span>\n      <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> matched_mark<span class=\"token punctuation\">[</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// 匹配到#号的</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">REG_TITLE</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>mark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">// 根据#号的个数  判断是h几</span>\n        <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">h</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>mark<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//将'# h1标题\\r'中的'# '干掉，最终得到'h1标题\\r'</span>\n        <span class=\"token keyword\">const</span> tagContent <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REG_MARK</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\">// REG_TITLE.test(lastMark)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>lastMark <span class=\"token operator\">===</span> mark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          htmlTree<span class=\"token punctuation\">[</span>tag<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tagContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          lastMark <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">;</span>\n          uid <span class=\"token operator\">=</span> <span class=\"token function\">guid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">TAGTYPE_SIMPLE</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tagContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token comment\">// 无序列表</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">REG_DISORDER</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>mark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//将'- ul第一项\\r'中的'- '干掉，最终得到'ul第一项\\r'</span>\n        <span class=\"token keyword\">const</span> tagContent <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REG_MARK</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">li</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 上一个是不是`-`</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">REG_DISORDER</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>lastMark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// '- ul第i项\\r' 放到一起</span>\n          htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ul-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ul-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tagContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          uid <span class=\"token operator\">=</span> <span class=\"token function\">guid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          lastMark <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// 加一个随机后缀key</span>\n          htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ul-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">TAGTYPE_NESTING</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 外层需要一个ul</span>\n            <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tagContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n\n      <span class=\"token comment\">// 有序列表  是不是以数字开头的，如果是数字开头，没有.呢？</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">REG_ORDER</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>mark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">const</span> tagContent <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REG_MARK</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">li</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">REG_ORDER</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>lastMark<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ol-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ol-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tagContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n          lastMark <span class=\"token operator\">=</span> mark<span class=\"token punctuation\">;</span>\n          uid <span class=\"token operator\">=</span> <span class=\"token function\">guid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ol-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">TAGTYPE_NESTING</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tagContent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matched_link<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 超链接的处理</span>\n      <span class=\"token comment\">// '百度'</span>\n      <span class=\"token keyword\">const</span> link_title <span class=\"token operator\">=</span> matched_link<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 'http://www.baidu.com'</span>\n      <span class=\"token keyword\">const</span> link_href <span class=\"token operator\">=</span> matched_link<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// '[百度](http://www.baidu.com)'</span>\n      <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> matched_link<span class=\"token punctuation\">[</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      uid <span class=\"token operator\">=</span> <span class=\"token function\">guid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">TAGTYPE_SIMPLE</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> href=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>link_href<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\" target=\"_blank\" style=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">REG_LINK_STYLE</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>link_title<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>matched_img<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 图片的处理</span>\n      <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">img</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// '图片'</span>\n      <span class=\"token keyword\">const</span> img_title <span class=\"token operator\">=</span> matched_img<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 'public/testimages.png'</span>\n      <span class=\"token keyword\">const</span> img_src <span class=\"token operator\">=</span> matched_img<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 'testimages'</span>\n      <span class=\"token keyword\">const</span> img_file <span class=\"token operator\">=</span> <span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>img_src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      uid <span class=\"token operator\">=</span> <span class=\"token function\">guid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      htmlTree<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>uid<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">TAGTYPE_SIMPLE</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">staticResources</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> img_file<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">staticPath</span><span class=\"token operator\">:</span> img_src\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> src=\"./</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>img_file<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"  alt=\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>img_title<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>tag<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> htmlTree<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 转成树形结构 或者AST</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">compileHTML</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">templateContentArr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// templateContentArr数组内容</span>\n  <span class=\"token comment\">// 转成树形结构</span>\n  <span class=\"token keyword\">const</span> htmlTree <span class=\"token operator\">=</span> <span class=\"token function\">createTree</span><span class=\"token punctuation\">(</span>templateContentArr<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// static资源</span>\n  <span class=\"token keyword\">const</span> staticSource <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 拼接结果</span>\n  <span class=\"token keyword\">let</span> htmlStr <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 保存当前遍历到的 key</span>\n  <span class=\"token keyword\">let</span> currItem<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> htmlTree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    currItem <span class=\"token operator\">=</span> htmlTree<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    htmlTree<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span>staticResources <span class=\"token operator\">&amp;&amp;</span> staticSource<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>htmlTree<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span>staticResources<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 等于single，直接拼接</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currItem<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token constant\">TAGTYPE_SIMPLE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      currItem<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        htmlStr <span class=\"token operator\">+=</span> tag<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currItem<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token constant\">TAGTYPE_NESTING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 外层要套一个标签的，不能直接拼接</span>\n      <span class=\"token comment\">// 获取外层的标签，就是htmlTree的key</span>\n      <span class=\"token keyword\">const</span> outerTag_Start <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> outerTag_End <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> currStr <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> outerTag_Start<span class=\"token punctuation\">;</span>\n      currItem<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        currStr <span class=\"token operator\">+=</span> tag<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 结束标签</span>\n      currStr <span class=\"token operator\">+=</span> outerTag_End<span class=\"token punctuation\">;</span>\n\n      htmlStr <span class=\"token operator\">+=</span> currStr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> htmlStr<span class=\"token punctuation\">,</span> staticSource <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  compileHTML\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"compiler做了什么？\"><a href=\"#compiler做了什么？\" class=\"headerlink\" title=\"compiler做了什么？\"></a>compiler做了什么？</h4><ol>\n<li>compileHTML方法中，调用createTree方法将数组转化为树形结构，htmlTree如下：<br><img src=\"/images/engineering/mdtohtml008.png\" alt=\"htmlTree\"></li>\n<li>createTree的作用</li>\n</ol>\n<ul>\n<li>遍历数组，匹配不同的md标识符，如 <code>#</code>号代表标题，<code>(num.)</code>代表有序列表，<code>(-)</code>代表无序列表，<code>![]()</code>代表图片标识等，对不同的标识做不同的处理，如果是列表，需要在外层嵌套ul、ol。匹配md标识，用到了正则表达式。</li>\n<li>如果是超链接，则设置a标签，设置a标签默认样式，href属性。</li>\n<li>如果是图片，则设置img标签，获取图片的路径，设置src、alt等属性。</li>\n<li>最后返回htmlTree</li>\n</ul>\n<ol start=\"3\">\n<li>遍历htmlTree的所有value，如果是simple类型，则直接拼接结果，如果是nesting类型，则需要在外面嵌套ol、ul</li>\n<li>最后返回处理结果htmlStr、staticSource。</li>\n</ol>\n<h3 id=\"3、其他文件说明\"><a href=\"#3、其他文件说明\" class=\"headerlink\" title=\"3、其他文件说明\"></a>3、其他文件说明</h3><h4 id=\"constant-js\"><a href=\"#constant-js\" class=\"headerlink\" title=\"constant.js\"></a>constant.js</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 以空字符串开头，以空格结尾，找到里边的所有字符</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_MARK</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(.+?)\\s</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 以#号开头的，最终转化成h标签，有可能是1个、2个、3个。。。</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_TITLE</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\#</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 以数字开头 有序列表</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_ORDER</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\d</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 以-开头的  最终转化成li</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_DISORDER</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\-</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 匹配 []() 超链接</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_LINK</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\[(.+?)\\]\\((.+?)\\)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 匹配 []() 超链接</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_IMG</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\!\\[(.+?)\\]\\((.+?)\\)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 简单类型</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TAGTYPE_SIMPLE</span> <span class=\"token operator\">=</span> <span class=\"token string\">'simple'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 需要嵌套包裹</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TAGTYPE_NESTING</span> <span class=\"token operator\">=</span> <span class=\"token string\">'nesting'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 超链接默认样式</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REG_LINK_STYLE</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">color: #3489fd;font-weight: 500;text-decoration: none;</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// 需要替换 模板html文件里的字符串</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TEMPLATE_MARK</span> <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;!--templateString-->'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 插件名称</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PLUGIN_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'md-to-html-plugin'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token constant\">REG_MARK</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REG_TITLE</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REG_ORDER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REG_DISORDER</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REG_LINK</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REG_IMG</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">TAGTYPE_SIMPLE</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">TAGTYPE_NESTING</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">REG_LINK_STYLE</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">TEMPLATE_MARK</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">PLUGIN_NAME</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"template-html\"><a href=\"#template-html\" class=\"headerlink\" title=\"template.html\"></a>template.html</h4><p><img src=\"/images/engineering/mdtohtml010.png\" alt=\"template.html\"></p>\n<h4 id=\"util-js\"><a href=\"#util-js\" class=\"headerlink\" title=\"util.js\"></a>util.js</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 生成uid</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">guid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">16.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    guid\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4、创建webpack-config-js文件\"><a href=\"#4、创建webpack-config-js文件\" class=\"headerlink\" title=\"4、创建webpack.config.js文件\"></a>4、创建webpack.config.js文件</h3><p>在根目录下新建notebook.md，并写入简单的md标记，引入MdToHtmlPlugin插件，<br>配置MdToHtmlPlugin的template和filename</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> resolve <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> MdToHtmlPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./plugins/md-to-html-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 模式</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 入口文件</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/app.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"app.js\"</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 配置自定义插件</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MdToHtmlPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'notebook.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 我们需要解析的文件</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'notebook.html'</span> <span class=\"token comment\">// 解析后的文件名</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>notebook.md文件内容如下：<br><img src=\"/images/engineering/mdtohtml011.png\" alt=\"notebook.png\"></p>\n<h3 id=\"5、调试和运行\"><a href=\"#5、调试和运行\" class=\"headerlink\" title=\"5、调试和运行\"></a>5、调试和运行</h3><ul>\n<li>执行 <code>npm run build</code></li>\n<li>在dist文件夹下输出打包后文件</li>\n<li>打开notebook.html看结果<br><img src=\"/images/engineering/mdtphtml012.png\" alt=\"notebook.html\"></li>\n</ul>\n"},{"title":"【前端工程化】从0-1搭建react脚手架","date":"2021-01-25T19:29:58.000Z","toc":true,"comments":1,"copyright":false,"_content":"# 前言\n\n# 介绍模块的使用\n## chalk\n## commander\n## inquirer\n\n# Webpack5 + React\n- [Webpack5 + React 脚手架的配置](https://juejin.cn/post/7080874840202313742)\n- [webpack(v5.7)+React(v18.0)+react-router(v6.3)+Mobx(v6.5)+TS(v4.6)从零开始构建](https://juejin.cn/post/7094900059493367845)\n\n# 参考\n- [从0-1搭建react + ts脚手架](https://juejin.cn/post/6919308174151385096)\n- [从0到1构建cli脚手架](https://juejin.cn/post/7051851544391598094)\n- [React入门———react脚手架](https://juejin.cn/post/6844903573503868941)\n","source":"_posts/engineering/build-cli.md","raw":"---\ntitle: 【前端工程化】从0-1搭建react脚手架\ndate: 2021-01-25 19:29:58\ncategories:\n  - 工程化\ntags:\n  - React\ntoc: true # 是否启用内容索引\ncomments: true\ncopyright: false\n---\n# 前言\n\n# 介绍模块的使用\n## chalk\n## commander\n## inquirer\n\n# Webpack5 + React\n- [Webpack5 + React 脚手架的配置](https://juejin.cn/post/7080874840202313742)\n- [webpack(v5.7)+React(v18.0)+react-router(v6.3)+Mobx(v6.5)+TS(v4.6)从零开始构建](https://juejin.cn/post/7094900059493367845)\n\n# 参考\n- [从0-1搭建react + ts脚手架](https://juejin.cn/post/6919308174151385096)\n- [从0到1构建cli脚手架](https://juejin.cn/post/7051851544391598094)\n- [React入门———react脚手架](https://juejin.cn/post/6844903573503868941)\n","slug":"engineering/build-cli","published":1,"updated":"2022-07-09T16:04:02.310Z","layout":"post","photos":[],"link":"","_id":"cl5f0bihw0007v4uw8drm9j95","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h1 id=\"介绍模块的使用\"><a href=\"#介绍模块的使用\" class=\"headerlink\" title=\"介绍模块的使用\"></a>介绍模块的使用</h1><h2 id=\"chalk\"><a href=\"#chalk\" class=\"headerlink\" title=\"chalk\"></a>chalk</h2><h2 id=\"commander\"><a href=\"#commander\" class=\"headerlink\" title=\"commander\"></a>commander</h2><h2 id=\"inquirer\"><a href=\"#inquirer\" class=\"headerlink\" title=\"inquirer\"></a>inquirer</h2><h1 id=\"Webpack5-React\"><a href=\"#Webpack5-React\" class=\"headerlink\" title=\"Webpack5 + React\"></a>Webpack5 + React</h1><ul>\n<li><a href=\"https://juejin.cn/post/7080874840202313742\">Webpack5 + React 脚手架的配置</a></li>\n<li><a href=\"https://juejin.cn/post/7094900059493367845\">webpack(v5.7)+React(v18.0)+react-router(v6.3)+Mobx(v6.5)+TS(v4.6)从零开始构建</a></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://juejin.cn/post/6919308174151385096\">从0-1搭建react + ts脚手架</a></li>\n<li><a href=\"https://juejin.cn/post/7051851544391598094\">从0到1构建cli脚手架</a></li>\n<li><a href=\"https://juejin.cn/post/6844903573503868941\">React入门———react脚手架</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h1 id=\"介绍模块的使用\"><a href=\"#介绍模块的使用\" class=\"headerlink\" title=\"介绍模块的使用\"></a>介绍模块的使用</h1><h2 id=\"chalk\"><a href=\"#chalk\" class=\"headerlink\" title=\"chalk\"></a>chalk</h2><h2 id=\"commander\"><a href=\"#commander\" class=\"headerlink\" title=\"commander\"></a>commander</h2><h2 id=\"inquirer\"><a href=\"#inquirer\" class=\"headerlink\" title=\"inquirer\"></a>inquirer</h2><h1 id=\"Webpack5-React\"><a href=\"#Webpack5-React\" class=\"headerlink\" title=\"Webpack5 + React\"></a>Webpack5 + React</h1><ul>\n<li><a href=\"https://juejin.cn/post/7080874840202313742\">Webpack5 + React 脚手架的配置</a></li>\n<li><a href=\"https://juejin.cn/post/7094900059493367845\">webpack(v5.7)+React(v18.0)+react-router(v6.3)+Mobx(v6.5)+TS(v4.6)从零开始构建</a></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://juejin.cn/post/6919308174151385096\">从0-1搭建react + ts脚手架</a></li>\n<li><a href=\"https://juejin.cn/post/7051851544391598094\">从0到1构建cli脚手架</a></li>\n<li><a href=\"https://juejin.cn/post/6844903573503868941\">React入门———react脚手架</a></li>\n</ul>\n"},{"title":"如何搭建一个通用的基础组件库","date":"2022-03-29T20:39:18.000Z","toc":true,"comments":1,"copyright":true,"_content":"# 前言\n\n作为一名前端程序员，一直以来，我都只是停留在会使用各种优秀的组件库，包括开源和公司内部自研的，从来没有了解过这些组件库是如何开发的。直到现在，自己参考了多个开源组件库，由浅入深，尝试去实现一个简单的组件库，学习和探索组件库设计以及开发思路。\n\n# 技术选择\n\n经过查阅资料，觉得dumi非常的合适。dumi是专门为组件开发场景而生的文档工具，开箱即用，支持TypeScript 和 Markdown，可以将更多的精力集中在组件开发上，核心技术栈为：`React + TypeScript + less + dumi`\n\n# 环境准备\n\n## 安装\n\n### 初始化项目\n\n```bash\n$ mkdir project-name && cd project-name # 创建空目录\n```\n### 组件开发脚手架\n\n```js\n$ npx @umijs/create-dumi-lib --site # 初始化一个站点模式的组件库开发脚手架\n# or\n$ yarn create @umijs/dumi-lib --site\n```\n## 目录结构说明\n\n<img src=\"/images/engineering/component001.png\">\n\n## 运行\n- 执行 `npm install`，安装依赖。\n- 执行 `npm run start` 或 `npx dumi dev` ，开始调试组件或编写文档，预览效果如下图：\n\n<img src=\"/images/engineering/project-name001.png\">\n\n# 组件的开发\n\n## 全局样式搭建\n新建`src/style`文件夹，放在全局的样式文件。其中theme文件下放通用的基础样式，`global.less`中引用`style/inde.less`的样式，dumi默认引入全局样式`global.less`。\n\n<img src=\"/images/engineering/component002.png\">\n\n### 定义基础样式\n\n- 基础色彩样式，primary、default、success、warning、danger、info；\n- 字体样式，默认font-family、默认font-size(1rem)、默认font-weight(400)、字体颜色、h1-h6(h6 默认是 1rem)；\n- 超链接样式(默认primary，无下划线)；\n- line-height(行高默认是字体的1.5倍大小)；\n- body(字体大小是1rem、背景白色、字体淡黑色)；\n- border边框(宽度1px、颜色@gray-300、radius是0.25rem)；\n- 盒子阴影(@box-shadow: 0 0.5rem 1rem rgba(@black, 0.15))；\n\n## 约定单个组件的文件结构\n以button组件为例，其中`src/button/style/index.less`为单个组件的内部样式文件，需要在`src/style/index.less`中引入，目录结构如下：\n\n<img src=\"/images/engineering/component003.png\">\n\n## 组件的开发步骤\n\n组件正确的开发流程：组件属性的分析 -> 组件的开发 -> (上生产环境需要组件测试) -> 组件的使用说明文档\n\n- 组件的分析：去定义一些接口或者类型别名，接口是用来描述props，声明组件的时候通过泛型传入；\n- 组件的开发：不同的组件有不同的实现方式，相似的组件可以复用，编写组件基础样式；\n- 组件的使用说明：描述一些需要通过props传入组件的属性，方便定制不同场景；\n\n# Button按钮\n\n## 类型声明\n类型声明在`src/button/interface.ts`文件中写入，设置不同按钮的大小、按钮的主题类型、按钮的原生类型等\n```ts\n// 按钮大小\nexport type ButtonSize = 'lg' | 'md' | 'sm';\n\n// 按钮的主题类型\nexport type ButtonType = 'primary' | 'default' | 'danger' | 'link' | 'info' | 'dashed' | 'warning';\n\n// 按钮的原生类型\nexport type ButtonHTMLTypes = 'submit' | 'button' | 'reset';\n\nexport interface BaseButtonProps {\n  className?: string;\n  /** 按钮禁用 */\n  disabled?: boolean;\n  /** 按钮大小 */\n  size?: ButtonSize;\n  /** 按钮类型 */\n  type?: ButtonType;\n  /** 按钮children */\n  children: React.ReactNode;\n  /** type为link时的url */\n  href?: string;\n}\n\n// button 和 a链接 的原生属性太多了，可以直接把全部属性加上\n// 从哪里可以找到button所有的props？react已经提供好的\n\n// 合并交叉类型\ntype NativeButtonProps = {\n  htmlType?: ButtonHTMLTypes;\n  target?: string;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n} & BaseButtonProps &\n  Omit<React.ButtonHTMLAttributes<HTMLElement>, 'type'>; // ButtonHTMLAttributes<HTMLElement> 所有button属性\n\ntype AnchorButtonProps = {\n  href?: string;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n} & BaseButtonProps &\n  Omit<React.AnchorHTMLAttributes<HTMLElement>, 'type'>; // AnchorHTMLAttributes<HTMLElement> 所有a标签属性\n\n// Partial<T> 将类型的属性变成可选，只支持处理第一层的属性\nexport type ButtonProps = Partial<NativeButtonProps & AnchorButtonProps>;\n```\n## Button按钮实现\n在`src/button/index.tsx`写入核心代码，需要考虑`padding`的大小、`lineHeight`高度、`color`颜色、`textAlien`文字居中、`box-shadow`盒子阴影，`disabled`时的特殊样式，鼠标的`cursor`的变化。\n- 使用`button`标签和`a`标签实现；\n- `Button Size`的大小其实就是`padding`控制，`font-size`不同、`border`的不同；\n- `Button Type`是变化`background-color`、`border-color`、字体颜色`color`；\n- 添加不同的状态：`hover`之后要颜色发生一定的变化，`focus`颜色变化，`disabled`颜色也发生变化(`cursor: not-allowed`和`opacity: .65`)。\n```tsx\nimport React from 'react';\nimport classNames from 'classnames';\nimport { ButtonProps } from './interface';\n\nconst Button: React.FC<ButtonProps> = (props) => {\n  // className用户自定义的\n  const { type, className, disabled, size, children, href, ...restProps } = props;\n\n  // yolo-btn yolo-btn-lg yolo-btn-primary\n  // 因为我们的key是变化的，所有用[`${ }`]\n  const classes = classNames('yolo-btn', className, {\n    [`yolo-btn-${type}`]: type,\n    [`yolo-btn-${size}`]: size,\n    disabled: type === 'link' && disabled,\n  });\n\n  if (type === 'link' && href) {\n    return (\n      <a className={classes} href={href} {...restProps}>\n        {children}\n      </a>\n    );\n  } else {\n    return (\n      <button className={classes} disabled={disabled} {...restProps}>\n        {children}\n      </button>\n    );\n  }\n};\n\nButton.defaultProps = {\n  disabled: false,\n  type: 'default',\n};\n\nexport default Button;\n```\n## Button使用说明\n`src/button/index.md`\n\n### 按钮的类型\n\n按钮分为七种类型 `type`，默认是 `default`。\n\n`default` | `primary` | `info` | `warning` | `danger` | `dashed` | `link`\n\n```tsx\nimport React from 'react';\nimport { Button } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <div id=\"button-demo-display-type\">\n      <Button type=\"default\">default</Button>\n      <Button type=\"primary\">primary</Button>\n      <Button type=\"info\">info</Button>\n      <Button type=\"warning\">warning</Button>\n      <Button type=\"danger\">danger</Button>\n      <Button type=\"dashed\">dashed</Button>\n      <Button type=\"link\" href=\"https://github.com/izph\">\n        link\n      </Button>\n    </div>\n  );\n};\n```\n\n### 按钮尺寸\n\n尺寸 `size`分为 `lg` | `md` | `sm`，即大、中、小，默认的尺寸是中。\n\n```tsx\nimport React from 'react';\nimport { Button } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <div id=\"button-demo-display-size\">\n      <Button size=\"lg\" type=\"primary\">\n        Large\n      </Button>\n      <Button size=\"md\" type=\"danger\">\n        Medium\n      </Button>\n      <Button size=\"sm\" type=\"warning\">\n        Small\n      </Button>\n    </div>\n  );\n};\n```\n\n### 按钮的禁用状态\n\n添加 `disabled`属性即可让按钮处于禁用状态，同时按钮样式也会改变。\n\n```tsx\nimport React from 'react';\nimport { Button } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <div id=\"button-demo-display-size\">\n      <Button type=\"primary\" disabled>\n        primary\n      </Button>\n      <Button type=\"danger\" disabled>\n        danger\n      </Button>\n      <Button disabled>default</Button>\n      <Button type=\"link\" disabled>\n        link\n      </Button>\n    </div>\n  );\n};\n```\n\n### API\n\n通过设置 `Button`的属性来产生不同的按钮样式，按钮的属性说明如下：\n\n| 属性     | 说明                                                     | 类型                                                                                       | 默认值      |\n| -------- | -------------------------------------------------------- | ------------------------------------------------------------------------------------------ | ----------- |\n| type     | 设置按钮类型                                             | `default`、`primary`、`info`、 `warning`、`danger`、`dashed`、`link` | `default` |\n| size     | 设置按钮大小                                             | `lg`、`md`、`sm`，非必填                                                             | `md`      |\n| disabled | 按钮禁用状态                                             | `boolean`                                                                                | `false`   |\n| href     | 点击跳转的地址，指定此属性 `button`的行为和 a 链接一致 | `string`                                                                                 | -           |\n| onClick  | 点击按钮时的回调                                         | `(event) => void`                                                                        | -           |\n\n### Button文档预览\n<img src=\"/images/engineering/component-btn-001.png\">\n\n# Progress进度条\n## 类型声明\n类型声明在`src/progress/interface.ts`文件中写入，设置进度条主题颜色的类型、进度条组件的类型`ProgressProps`。percent代表当前进度条的百分比，strokeHeight设置高度，showText是否显示百分比数字。\n```ts\nimport React from 'react';\n\nexport type ProgressThemeProps =\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'info'\n  | 'warning'\n  | 'danger'\n  | 'light'\n  | 'dark';\n\nexport interface ProgressProps {\n  /* 百分比 */\n  percent: number;\n  /* 设置高度 */\n  strokeHeight?: number;\n  /* 是否显示百分比文字 */\n  showText?: boolean;\n  /* 用户自定义样式 */\n  style?: React.CSSProperties;\n  /* 进度条主题颜色 */\n  theme?: ProgressThemeProps;\n}\n```\n## Progress进度条实现\n在`src/progress/index.tsx`写入核心代码，根据传入的数字，来控制一个进度条长度；最外面有一个灰色progress-outer，它的高度可以配置，progress-outer内有一个子元素progress-inner，通过该元素的width来显示当前进度颜色，这个宽度是继承父元素progress-outer的，并悬浮到progress-outer上；通过在progress-inner设置flex布局，flex-end表示子项目从后往前排列，设置百分比数字显示在进度条右边，百分比数字也是支持显示和隐藏。\n```tsx\n// progress/index.tsx\nimport React, { FC } from 'react';\nimport { ProgressProps } from './interface';\n\n/* \n  percent: number 百分比\n  strokeHeight: number 高度\n  showText: boolean 是否显示百分比数字\n  theme: string 进度条主题色\n  style: React.CSSProperties 用户自定义样式\n*/\nconst Progress: FC<ProgressProps> = ({\n  percent,\n  strokeHeight,\n  showText,\n  style,\n  theme,\n  ...restProps\n}) => {\n  return (\n    <div className=\"yolo-progress\" style={style} {...restProps}>\n      {/* 灰色最外层 */}\n      <div className=\"yolo-progress-outer\" style={{ height: `${strokeHeight}px` }}>\n        <div className={`yolo-progress-inner color-${theme}`} style={{ width: `${percent}%` }}>\n          {showText && <span className=\"inner-text\">{`${percent}%`}</span>}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/* \n  初始化默认值\n*/\nProgress.defaultProps = {\n  strokeHeight: 15,\n  showText: true,\n  theme: 'primary',\n};\n\nexport default Progress;\n```\n## Progress进度条说明文档\n`src/progress/index.md`\n\n### 基本使用\n\n基本样式分为 7 种，默认类型为 `primary`。\n\n`primary` | `secondary` | `success` | `info` | `warning` | `danger` | `dark`\n\n```tsx\nimport React from 'react';\nimport { Progress } from 'yolo-ui';\n\nexport default () => (\n  <div>\n    <Progress percent={20} />\n    <br />\n    <Progress theme=\"secondary\" percent={30} />\n    <br />\n    <Progress theme=\"success\" percent={40} />\n    <br />\n    <Progress theme=\"info\" percent={50} />\n    <br />\n    <Progress theme=\"warning\" percent={60} />\n    <br />\n    <Progress theme=\"danger\" percent={70} />\n    <br />\n    <Progress theme=\"dark\" percent={80} />\n    <br />\n    <Progress theme=\"primary\" percent={100} />\n  </div>\n);\n```\n\n### 自定义高度\n\n```tsx\nimport React from 'react';\nimport { Progress } from 'yolo-ui';\n\nexport default () => (\n  <div>\n    <Progress percent={20} strokeHeight={15} />\n    <br />\n    <Progress theme=\"success\" percent={40} strokeHeight={20} />\n    <br />\n    <Progress theme=\"warning\" percent={60} strokeHeight={30} />\n    <br />\n    <Progress theme=\"danger\" percent={70} strokeHeight={40} />\n  </div>\n);\n```\n\n### 是否显示百分比文字\n\n通过设置 `showText`属性。\n\n```tsx\nimport React from 'react';\nimport { Progress } from 'yolo-ui';\n\nexport default () => (\n  <div>\n    <Progress percent={30} showText={false} />\n    <br />\n    <Progress theme=\"success\" percent={40} strokeHeight={20} showText={true} />\n    <br />\n    <Progress theme=\"warning\" percent={60} strokeHeight={30} showText={true} />\n  </div>\n);\n```\n\n### API\n\n| 属性         | 说明               | 类型                                                                                                     | 默认值      |\n| ------------ | ------------------ | -------------------------------------------------------------------------------------------------------- | ----------- |\n| theme        | 主题颜色           | `primary` \\| `secondary` \\| `success` \\| `info` \\| `warning` \\| `danger` \\| `dark`，非必填 | `primary` |\n| percent      | 百分比             | `number`                                                                                               | -           |\n| strokeHeight | 进度条高度         | `number`                                                                                               | -           |\n| showText     | 是否显示百分比文字 | `boolean`                                                                                              | `true`    |\n| style        | 自定义样式         | `React.CSSProperties`                                                                                  | -           |\n\n### Progress文档预览\n<img src=\"/images/engineering/component-progress001.png\">\n\n<img src=\"/images/engineering/component-progress002.png\">\n\n\n# Switch开关\n## 类型声明\n类型声明在`src/switch/interface.ts`文件中写入，checked属性是最开始是否被选中，disabled是否可以被禁用，onText开启状态的文本，offText关闭状态的文本，size是组件的尺寸大小，theme组件的颜色，onChange是状态切换时执行的回调函数。\n```ts\nimport React from 'react';\nexport type SwitchSize = 'default' | 'sm';\n\nexport type SwitchChangeEventHandler = (\n  checked: boolean,\n  event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLButtonElement>,\n) => void;\nexport interface SwitchProps {\n  /* 用户自定义样式 */\n  style?: React.CSSProperties;\n  /** 是否被选中 */\n  checked?: boolean;\n  /* 用户自定义类名 */\n  className?: string;\n  /** 组件的尺寸 */\n  size?: SwitchSize;\n  /** 是否被禁用 */\n  disabled?: boolean;\n  /** 开启状态的文本 */\n  onText?: string;\n  /** 关闭状态的文本 */\n  offText?: string;\n  /** 状态切换时的回调 */\n  onChange?: SwitchChangeEventHandler;\n}\n```\n## Switch开关实现\n在`src/switch/index.tsx`写入核心代码，基于button标签实现的，它有两个子元素`div`和`span`。div是一个白色的滑块，使用绝对定位，通过计算left值实现左右的切换，例如点击的时候，滑块的left值是`left: calc(100% - 20px);`，通过calc计算出的，这就是左右滑动的核心。同时还需要考虑`background-color`和`background-image`的优先级问题，最后span标签用来显示文本。\n```tsx\n// switch/index.tsx\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { SwitchProps } from './interface';\n\n/**\n * switch\n * @param {checked} bool 是否被选中\n * @param {disabled} bool 是否被禁用\n * @param {onText} string 开启状态的文本\n * @param {offText} string 关闭状态的文本\n * @param {onChange} func 状态切换时的回调\n * @param {size} string Switch组件的尺寸大小\n * @param {theme} string 组件的颜色\n */\nconst Switch: React.FC<SwitchProps> = (props) => {\n  const { size, checked, disabled, onText, offText, onChange, className, style, ...restProps } =\n    props;\n  /** \n   * 设置初始背景色\n  */\n  const defaultStyle = {\n    ...style,\n    backgroundColor: style?.backgroundColor || '#0099ff'\n  }\n\n  const [isChecked, setChecked] = useState<boolean>(!!checked);\n  const classes = classNames('yolo-switch', className, {\n    'yolo-switch-checked': !!isChecked,\n    'yolo-switch-disabled': disabled,\n    [`yolo-switch-${size}`]: size,\n  });\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!disabled) {\n      onChange && onChange(!isChecked, e);\n      setChecked(!isChecked);\n    }\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className={classes}\n      onClick={handleClick}\n      style={defaultStyle}\n      {...restProps}\n    >\n      <div className=\"yolo-switch-handle\"></div>\n      <span className=\"yolo-switch-inner\">{isChecked ? onText : offText}</span>\n    </button>\n  );\n};\n\n\nexport default Switch;\n```\n## Switch说明文档\n`src/switch/index.md`\n\n### 基本使用\n\n```tsx\nimport React from 'react';\nimport { Switch } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <>\n      <Switch checked />\n      <br />\n      <br />\n      <Switch/>\n    </>\n  );\n};\n```\n\n### 禁止使用\n\n```tsx\nimport React from 'react';\nimport { Switch } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <>\n      <Switch disabled />\n      <br />\n      <br />\n      <Switch disabled checked />\n    </>\n  );\n};\n```\n\n### 定制主题颜色\n\n```tsx\nimport React from 'react';\nimport { Switch } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <>\n      <Switch checked style={{ backgroundColor: 'green'}}/>\n      <br />\n      <br />\n      <Switch  checked style={{backgroundColor: 'red'}}/>\n      <br />\n      <br />\n      <Switch  checked style={{backgroundColor: 'yellow'}}/>\n      <br />\n      <br />\n      <Switch  checked style={{backgroundColor: 'pink'}}/>\n      <br />\n      <br />\n      <Switch  checked style={{backgroundColor: 'blue'}}/>\n    </>\n  );\n};\n```\n\n### 组件尺寸\n\n```tsx\nimport React from 'react';\nimport { Switch } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <>\n      <Switch checked size=\"sm\" />\n      <br />\n      <br />\n      <Switch checked />\n    </>\n  );\n};\n```\n\n### 开关内容\n\n```tsx\nimport React from 'react';\nimport { Switch } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <>\n      <Switch\n        onText={'开'}\n        offText={'关'}\n        onChange={(checked, e) => {\n          console.log(checked, e);\n        }}\n        checked\n      />\n    </>\n  );\n};\n```\n\n### API\n\n| 参数     | 说明                 | 类型                                         | 默认值    |\n| -------- | -------------------- | -------------------------------------------- | --------- |\n| style   | 自定义样式，`backgroundColor`可自定义颜色| `string`                                   | `#09f`  |\n| checked  | 是否被选中           | `boolean`                                  | `false` |\n| size     | 开关大学             | `default \\| sm`                             | -         |\n| disabled | 是否被禁用           | `boolean`                                  | `false` |\n| onText   | 开启状态的文本       | `string \\| ReactNode`                       | -         |\n| offText  | 关闭状态的文本       | `string \\| ReactNode`                       | -         |\n| onChange | 选中值发生变化时触发 | `function(checked: boolean, event: Event)` | -         |\n\n### Switch文档预览\n<img src=\"/images/engineering/component-switch001.png\">\n\n# 代码打包输出和发布\n\n## 组件库的入口文件\n\n- 组件库的入口文件为 ``src/index.ts``\n- 组件库的全局样式文件为 ``src/style/index.less``或者 ``src/global.less``，两者都可以用来全局样式的提取。\n\n## 组件的打包\n\n### 在根目录新建tsconfig.build.json文件\n\n```json\n{\n  \"compilerOptions\": {\n    \"outDir\": \"dist\", // 编译之后的存放路径\n    \"module\": \"ESNext\",\n    \"target\": \"ES5\", // 指定编译之后的目标版本\n    \"declaration\": true, // 为每一个js文件生成 .d.ts类型声明文件\n    \"jsx\": \"react\",\n    \"moduleResolution\": \"node\", // classic 和 Node\n    \"allowSyntheticDefaultImports\": true //  true 支持 defalut 引入的方式\n  },\n  \"include\": [\"src/\"],\n  \"exclude\": [\"src/**/style\", \"src/**/*.md\"]\n}\n```\n\n### 在package.json文件中添加命令\n\n分别安装`lessc`和`rimraf`依赖，`lessc`将`less`转化为`css`，`rimraf`用来删除`dist`目录。\n\n```json\n{ \n  \"scripts\": {\n    \"clean\": \"rimraf ./dist\",\n    \"build:lib\": \"npm run clean && npm run build-ts && npm run build-css\",\n    \"build-ts\": \"tsc -p tsconfig.build.json\",\n    \"build-css\": \"lessc ./src/style/index.less ./dist/index.css\",\n  }\n}\n```\n\n在执行`build-ts`发生了很多个报错如下，经过在[stackoverflow](https://stackoverflow.com/)上查找相关资料得知，是 `@types/react-router-dom`和 `@types/react-router`的版本太低了导致了，把这两个依赖升级到最新版本后，就可以正常打包了。\n\n```js\nxxx/node_modules/@types/react-router-dom/index.d.ts(59,34): error TS2694: Namespace '\"/node_modules/history/index\"' has no exported member 'LocationState'.\n```\n\n## 本地测试(npm link)\n\n- 在`yolo-ui`的根目录下执行`npm link`命令，`npm link`的作用是可以让未发布的npm包，做本地测试，映射脚本；\n- 在`yolo-ui-test`（create-react-app生成的测试项目）工程下执行`npm link yolo-ui`；\n- 在`yolo-ui-test`的`package.json`中加入`yolo-ui`依赖。\n\n```json\n{ \n  \"dependencies\": {\n    \"yolo-ui\": \"^0.1.0\"\n  },\n}\n```\n\n- 分别在 `App.tsx`和 `index.tsx`引入组件和组件的样式\n\n```tsx\n// App.tsx\nimport { Button } from 'yolo-ui';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button type=\"primary\">Hello Yolo</Button>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n```tsx\n// index.tsx\nimport \"yolo-ui/dist/index.css\";\n```\n\n- 测试结果如下，本地测试没问题。\n\n<img src=\"/images/engineering/yolo-build-001.png\">\n\n## 将yolo-ui发布到npm\n\n- 切换npm的源镜像为npm的原生源\n- 在命令行工具执行npm adduser，填写username、password and email 登录(sign in)\n- 在package.json添加一些必要信息\n\n```json\n{ \n  \"files\": [\n    \"dist\"\n  ], // 发布哪些文件到npm\n  // 添加prepublish命令\n  \"scripts\": {\n    \"clean\": \"rimraf ./dist\",\n    \"build:lib\": \"npm run clean && npm run build-ts && npm run build-css\",\n    \"build-ts\": \"tsc -p tsconfig.build.json\",\n    \"build-css\": \"lessc ./src/style/index.less ./dist/index.css\",\n    \"prepublish\": \"npm run build:lib\"\n  },\n}\n```\n\n- 执行npm publish即可发布到npm\n\n  <img src=\"/images/engineering/yolo-npm-publish.png\">\n\n- 此外，还可以在`peerDependencies`中告诉用户，要使用某某依赖需要安装什么依赖，如下：\n  要使用`yolo-ui`库，需要安装`react`和`react-dom`的16.8.0版本以上。当`npm i yolo-ui`时，`peerDependencies`里面的依赖不会被安装，会有一个日志输出，`npm warning`会提示用户需要安装`react`和`react-dom`的依赖。\n\n```json\n// package.json\n{ \n  \"peerDependencies\": {\n    \"react\": \"≥16.8.0\",\n    \"react-dom\": \"≥16.8.0\"\n  },\n}\n```\n\n# yolo-ui静态文档上传至阿里云服务器\n\n## 购买服务器\n\n本人买的是阿里云服务器\n\n## 远程登录服务器桌面(windows)\n\n- 在window桌面上按 `win + R`，输入 `mstsc`，进入远程桌面连接\n- 如果没有添加windows凭据的，先在 `控制面板->凭据管理器->windows凭据里添加服务器的凭据`\n- 输入账号和密码即可登录服务器远程桌面\n\n## 安装node环境\n\n- 将node的安装包上传到云服务器，并安装，`node -v`可以查看版本和是否安装成功\n\n## 启动静态服务器\n\n- 在根目录下 `npm init -y`，初始化 `package.json`文件，新建index.js文件\n- 上传静态文件docs-dist（dumi 打包的产物）到根目录，docs-dist文件内容如下：\n\n  <img src=\"/images/engineering/yolo-upload001.png\">\n\n- 安装 `koa`和 `koa-static`，用来启动一个静态资源服务器。\n- 在index.js写入代码：\n\n```js\nconst Koa = require('koa');\nconst path = require('path');\nconst static = require('koa-static');\nconst app = new Koa();\n\n// 静态资源目录对于相对入口文件index.js的路径\nconst staticPath = './docs-dist';\n\napp.use(static(\n    path.join(__dirname, staticPath)\n))\n\napp.listen(80, () => {\n    console.log('server is running, port is 80');\n})\n```\n\n- 在根目录下执行 `node index.js`，开启服务器成功\n- 最后在浏览器地址输入云服务器ip地址即可访问\n\n## 域名的注册和备案\n\n# nginx开启静态服务，并配置二级域名访问\n\n## 安装nginx（windows版）\n\n- 进入nginx官网下载安装包: [nginx下载](http://nginx.org/en/download.html)\n- 解压下载完成的nginx压缩包\n- 打开`cmd`，进入nginx安装包根路径\n- 输入命令`nginx -t`：检查nginx是否配置成功\n- 输入命令`start nginx`：启动nginx服务\n\n## nginx其他常用命令\n\n- 修改了配置文件，如nginx.conf，要使修改生效，重启Nginx服务\n```bash\nnginx -s reload\n```\n\n- 关闭nginx服务\n```bash\nnginx -s quit\n```\n\n- 强制关闭Nginx服务\n```bash\nnginx -s stop\n```\n\n## nginx.conf配置文件\n\n- nginx的配置在根目录conf文件夹下的nginx.conf文件中\n- server：代理服务器，可以设定多个代理服务器（每一个server就是一个虚拟服务器），请求进来之后由server的server_name决定该请求访问哪一个服务。\n\n- 以下是在阿里云服务器nginx配置不同域名，访问不同的静态资源的例子，比如访问home和detial，我们只需要把静态文件分别放到`C:/v1/home`和`C:/v1/detial`目录下，即可通过`http://home.xxxxx.com`和`http://detial.xxxxx.com`分别访问对应的静态资源。\n\n- 与此同时，需要在云服务器官网添加记录，二级域名的`home`和`detial`的解析设置\n```conf\nserver {\n    # 设置监听端口\n    listen      80;\n    server_name  home.xxxxx.com;\n    \n    # 设置url编码格式，解决参数中文乱码问题\n    charset utf-8;\n\t\t\n    location / {\n        root C:/v1/home;  # 设置 root-指定请求资源在服务器上的真实路径，可以写相对路径（相对于nginx安装目录）也可写绝对路径；\n        index index.html index.htm;  # 指定访问主页，会在root设定目录下去找，后面可跟多个页面，依次查找，找到一个即返回；\n    } \n}\n\nserver {\n    # 设置监听端口\n    listen      80;\n    server_name  detial.xxxxx.com;\n    \n    # 设置url编码格式，解决参数中文乱码问题\n    charset utf-8;\n\t\t\n    location / {\n        root C:/v1/detial;  \n        index index.html index.htm;  \n    } \n}\n```\n# YoloUI预览地址\n[YoloUI官网](http://yolo-ui.xyz/)\n\n# 参考\n- [dumi官方网站](https://d.umijs.org/zh-CN/guide)\n- [ant-design](https://ant.design/index-cn)\n- [arco-design](https://arco.design/)\n- [monki-ui](https://github.com/Jacky-Summer/monki-ui)\n- [最详细的React组件库搭建总结](https://juejin.cn/post/6844904160568016910)\n- [Nginx在windows下的安装、运行，以及配置文件讲解](https://blog.csdn.net/zorro_jin/article/details/84927408?spm=1001.2014.3001.5506)\n\n\n\n\n\n\n\n\n\n","source":"_posts/engineering/component-library.md","raw":"---\ntitle: 如何搭建一个通用的基础组件库\ndate: 2022-03-29 20:39:18\ncategories:\n  - 工程化\ntags:\n  - React\ntoc: true\ncomments: true\ncopyright: true\n---\n# 前言\n\n作为一名前端程序员，一直以来，我都只是停留在会使用各种优秀的组件库，包括开源和公司内部自研的，从来没有了解过这些组件库是如何开发的。直到现在，自己参考了多个开源组件库，由浅入深，尝试去实现一个简单的组件库，学习和探索组件库设计以及开发思路。\n\n# 技术选择\n\n经过查阅资料，觉得dumi非常的合适。dumi是专门为组件开发场景而生的文档工具，开箱即用，支持TypeScript 和 Markdown，可以将更多的精力集中在组件开发上，核心技术栈为：`React + TypeScript + less + dumi`\n\n# 环境准备\n\n## 安装\n\n### 初始化项目\n\n```bash\n$ mkdir project-name && cd project-name # 创建空目录\n```\n### 组件开发脚手架\n\n```js\n$ npx @umijs/create-dumi-lib --site # 初始化一个站点模式的组件库开发脚手架\n# or\n$ yarn create @umijs/dumi-lib --site\n```\n## 目录结构说明\n\n<img src=\"/images/engineering/component001.png\">\n\n## 运行\n- 执行 `npm install`，安装依赖。\n- 执行 `npm run start` 或 `npx dumi dev` ，开始调试组件或编写文档，预览效果如下图：\n\n<img src=\"/images/engineering/project-name001.png\">\n\n# 组件的开发\n\n## 全局样式搭建\n新建`src/style`文件夹，放在全局的样式文件。其中theme文件下放通用的基础样式，`global.less`中引用`style/inde.less`的样式，dumi默认引入全局样式`global.less`。\n\n<img src=\"/images/engineering/component002.png\">\n\n### 定义基础样式\n\n- 基础色彩样式，primary、default、success、warning、danger、info；\n- 字体样式，默认font-family、默认font-size(1rem)、默认font-weight(400)、字体颜色、h1-h6(h6 默认是 1rem)；\n- 超链接样式(默认primary，无下划线)；\n- line-height(行高默认是字体的1.5倍大小)；\n- body(字体大小是1rem、背景白色、字体淡黑色)；\n- border边框(宽度1px、颜色@gray-300、radius是0.25rem)；\n- 盒子阴影(@box-shadow: 0 0.5rem 1rem rgba(@black, 0.15))；\n\n## 约定单个组件的文件结构\n以button组件为例，其中`src/button/style/index.less`为单个组件的内部样式文件，需要在`src/style/index.less`中引入，目录结构如下：\n\n<img src=\"/images/engineering/component003.png\">\n\n## 组件的开发步骤\n\n组件正确的开发流程：组件属性的分析 -> 组件的开发 -> (上生产环境需要组件测试) -> 组件的使用说明文档\n\n- 组件的分析：去定义一些接口或者类型别名，接口是用来描述props，声明组件的时候通过泛型传入；\n- 组件的开发：不同的组件有不同的实现方式，相似的组件可以复用，编写组件基础样式；\n- 组件的使用说明：描述一些需要通过props传入组件的属性，方便定制不同场景；\n\n# Button按钮\n\n## 类型声明\n类型声明在`src/button/interface.ts`文件中写入，设置不同按钮的大小、按钮的主题类型、按钮的原生类型等\n```ts\n// 按钮大小\nexport type ButtonSize = 'lg' | 'md' | 'sm';\n\n// 按钮的主题类型\nexport type ButtonType = 'primary' | 'default' | 'danger' | 'link' | 'info' | 'dashed' | 'warning';\n\n// 按钮的原生类型\nexport type ButtonHTMLTypes = 'submit' | 'button' | 'reset';\n\nexport interface BaseButtonProps {\n  className?: string;\n  /** 按钮禁用 */\n  disabled?: boolean;\n  /** 按钮大小 */\n  size?: ButtonSize;\n  /** 按钮类型 */\n  type?: ButtonType;\n  /** 按钮children */\n  children: React.ReactNode;\n  /** type为link时的url */\n  href?: string;\n}\n\n// button 和 a链接 的原生属性太多了，可以直接把全部属性加上\n// 从哪里可以找到button所有的props？react已经提供好的\n\n// 合并交叉类型\ntype NativeButtonProps = {\n  htmlType?: ButtonHTMLTypes;\n  target?: string;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n} & BaseButtonProps &\n  Omit<React.ButtonHTMLAttributes<HTMLElement>, 'type'>; // ButtonHTMLAttributes<HTMLElement> 所有button属性\n\ntype AnchorButtonProps = {\n  href?: string;\n  onClick?: React.MouseEventHandler<HTMLElement>;\n} & BaseButtonProps &\n  Omit<React.AnchorHTMLAttributes<HTMLElement>, 'type'>; // AnchorHTMLAttributes<HTMLElement> 所有a标签属性\n\n// Partial<T> 将类型的属性变成可选，只支持处理第一层的属性\nexport type ButtonProps = Partial<NativeButtonProps & AnchorButtonProps>;\n```\n## Button按钮实现\n在`src/button/index.tsx`写入核心代码，需要考虑`padding`的大小、`lineHeight`高度、`color`颜色、`textAlien`文字居中、`box-shadow`盒子阴影，`disabled`时的特殊样式，鼠标的`cursor`的变化。\n- 使用`button`标签和`a`标签实现；\n- `Button Size`的大小其实就是`padding`控制，`font-size`不同、`border`的不同；\n- `Button Type`是变化`background-color`、`border-color`、字体颜色`color`；\n- 添加不同的状态：`hover`之后要颜色发生一定的变化，`focus`颜色变化，`disabled`颜色也发生变化(`cursor: not-allowed`和`opacity: .65`)。\n```tsx\nimport React from 'react';\nimport classNames from 'classnames';\nimport { ButtonProps } from './interface';\n\nconst Button: React.FC<ButtonProps> = (props) => {\n  // className用户自定义的\n  const { type, className, disabled, size, children, href, ...restProps } = props;\n\n  // yolo-btn yolo-btn-lg yolo-btn-primary\n  // 因为我们的key是变化的，所有用[`${ }`]\n  const classes = classNames('yolo-btn', className, {\n    [`yolo-btn-${type}`]: type,\n    [`yolo-btn-${size}`]: size,\n    disabled: type === 'link' && disabled,\n  });\n\n  if (type === 'link' && href) {\n    return (\n      <a className={classes} href={href} {...restProps}>\n        {children}\n      </a>\n    );\n  } else {\n    return (\n      <button className={classes} disabled={disabled} {...restProps}>\n        {children}\n      </button>\n    );\n  }\n};\n\nButton.defaultProps = {\n  disabled: false,\n  type: 'default',\n};\n\nexport default Button;\n```\n## Button使用说明\n`src/button/index.md`\n\n### 按钮的类型\n\n按钮分为七种类型 `type`，默认是 `default`。\n\n`default` | `primary` | `info` | `warning` | `danger` | `dashed` | `link`\n\n```tsx\nimport React from 'react';\nimport { Button } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <div id=\"button-demo-display-type\">\n      <Button type=\"default\">default</Button>\n      <Button type=\"primary\">primary</Button>\n      <Button type=\"info\">info</Button>\n      <Button type=\"warning\">warning</Button>\n      <Button type=\"danger\">danger</Button>\n      <Button type=\"dashed\">dashed</Button>\n      <Button type=\"link\" href=\"https://github.com/izph\">\n        link\n      </Button>\n    </div>\n  );\n};\n```\n\n### 按钮尺寸\n\n尺寸 `size`分为 `lg` | `md` | `sm`，即大、中、小，默认的尺寸是中。\n\n```tsx\nimport React from 'react';\nimport { Button } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <div id=\"button-demo-display-size\">\n      <Button size=\"lg\" type=\"primary\">\n        Large\n      </Button>\n      <Button size=\"md\" type=\"danger\">\n        Medium\n      </Button>\n      <Button size=\"sm\" type=\"warning\">\n        Small\n      </Button>\n    </div>\n  );\n};\n```\n\n### 按钮的禁用状态\n\n添加 `disabled`属性即可让按钮处于禁用状态，同时按钮样式也会改变。\n\n```tsx\nimport React from 'react';\nimport { Button } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <div id=\"button-demo-display-size\">\n      <Button type=\"primary\" disabled>\n        primary\n      </Button>\n      <Button type=\"danger\" disabled>\n        danger\n      </Button>\n      <Button disabled>default</Button>\n      <Button type=\"link\" disabled>\n        link\n      </Button>\n    </div>\n  );\n};\n```\n\n### API\n\n通过设置 `Button`的属性来产生不同的按钮样式，按钮的属性说明如下：\n\n| 属性     | 说明                                                     | 类型                                                                                       | 默认值      |\n| -------- | -------------------------------------------------------- | ------------------------------------------------------------------------------------------ | ----------- |\n| type     | 设置按钮类型                                             | `default`、`primary`、`info`、 `warning`、`danger`、`dashed`、`link` | `default` |\n| size     | 设置按钮大小                                             | `lg`、`md`、`sm`，非必填                                                             | `md`      |\n| disabled | 按钮禁用状态                                             | `boolean`                                                                                | `false`   |\n| href     | 点击跳转的地址，指定此属性 `button`的行为和 a 链接一致 | `string`                                                                                 | -           |\n| onClick  | 点击按钮时的回调                                         | `(event) => void`                                                                        | -           |\n\n### Button文档预览\n<img src=\"/images/engineering/component-btn-001.png\">\n\n# Progress进度条\n## 类型声明\n类型声明在`src/progress/interface.ts`文件中写入，设置进度条主题颜色的类型、进度条组件的类型`ProgressProps`。percent代表当前进度条的百分比，strokeHeight设置高度，showText是否显示百分比数字。\n```ts\nimport React from 'react';\n\nexport type ProgressThemeProps =\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'info'\n  | 'warning'\n  | 'danger'\n  | 'light'\n  | 'dark';\n\nexport interface ProgressProps {\n  /* 百分比 */\n  percent: number;\n  /* 设置高度 */\n  strokeHeight?: number;\n  /* 是否显示百分比文字 */\n  showText?: boolean;\n  /* 用户自定义样式 */\n  style?: React.CSSProperties;\n  /* 进度条主题颜色 */\n  theme?: ProgressThemeProps;\n}\n```\n## Progress进度条实现\n在`src/progress/index.tsx`写入核心代码，根据传入的数字，来控制一个进度条长度；最外面有一个灰色progress-outer，它的高度可以配置，progress-outer内有一个子元素progress-inner，通过该元素的width来显示当前进度颜色，这个宽度是继承父元素progress-outer的，并悬浮到progress-outer上；通过在progress-inner设置flex布局，flex-end表示子项目从后往前排列，设置百分比数字显示在进度条右边，百分比数字也是支持显示和隐藏。\n```tsx\n// progress/index.tsx\nimport React, { FC } from 'react';\nimport { ProgressProps } from './interface';\n\n/* \n  percent: number 百分比\n  strokeHeight: number 高度\n  showText: boolean 是否显示百分比数字\n  theme: string 进度条主题色\n  style: React.CSSProperties 用户自定义样式\n*/\nconst Progress: FC<ProgressProps> = ({\n  percent,\n  strokeHeight,\n  showText,\n  style,\n  theme,\n  ...restProps\n}) => {\n  return (\n    <div className=\"yolo-progress\" style={style} {...restProps}>\n      {/* 灰色最外层 */}\n      <div className=\"yolo-progress-outer\" style={{ height: `${strokeHeight}px` }}>\n        <div className={`yolo-progress-inner color-${theme}`} style={{ width: `${percent}%` }}>\n          {showText && <span className=\"inner-text\">{`${percent}%`}</span>}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/* \n  初始化默认值\n*/\nProgress.defaultProps = {\n  strokeHeight: 15,\n  showText: true,\n  theme: 'primary',\n};\n\nexport default Progress;\n```\n## Progress进度条说明文档\n`src/progress/index.md`\n\n### 基本使用\n\n基本样式分为 7 种，默认类型为 `primary`。\n\n`primary` | `secondary` | `success` | `info` | `warning` | `danger` | `dark`\n\n```tsx\nimport React from 'react';\nimport { Progress } from 'yolo-ui';\n\nexport default () => (\n  <div>\n    <Progress percent={20} />\n    <br />\n    <Progress theme=\"secondary\" percent={30} />\n    <br />\n    <Progress theme=\"success\" percent={40} />\n    <br />\n    <Progress theme=\"info\" percent={50} />\n    <br />\n    <Progress theme=\"warning\" percent={60} />\n    <br />\n    <Progress theme=\"danger\" percent={70} />\n    <br />\n    <Progress theme=\"dark\" percent={80} />\n    <br />\n    <Progress theme=\"primary\" percent={100} />\n  </div>\n);\n```\n\n### 自定义高度\n\n```tsx\nimport React from 'react';\nimport { Progress } from 'yolo-ui';\n\nexport default () => (\n  <div>\n    <Progress percent={20} strokeHeight={15} />\n    <br />\n    <Progress theme=\"success\" percent={40} strokeHeight={20} />\n    <br />\n    <Progress theme=\"warning\" percent={60} strokeHeight={30} />\n    <br />\n    <Progress theme=\"danger\" percent={70} strokeHeight={40} />\n  </div>\n);\n```\n\n### 是否显示百分比文字\n\n通过设置 `showText`属性。\n\n```tsx\nimport React from 'react';\nimport { Progress } from 'yolo-ui';\n\nexport default () => (\n  <div>\n    <Progress percent={30} showText={false} />\n    <br />\n    <Progress theme=\"success\" percent={40} strokeHeight={20} showText={true} />\n    <br />\n    <Progress theme=\"warning\" percent={60} strokeHeight={30} showText={true} />\n  </div>\n);\n```\n\n### API\n\n| 属性         | 说明               | 类型                                                                                                     | 默认值      |\n| ------------ | ------------------ | -------------------------------------------------------------------------------------------------------- | ----------- |\n| theme        | 主题颜色           | `primary` \\| `secondary` \\| `success` \\| `info` \\| `warning` \\| `danger` \\| `dark`，非必填 | `primary` |\n| percent      | 百分比             | `number`                                                                                               | -           |\n| strokeHeight | 进度条高度         | `number`                                                                                               | -           |\n| showText     | 是否显示百分比文字 | `boolean`                                                                                              | `true`    |\n| style        | 自定义样式         | `React.CSSProperties`                                                                                  | -           |\n\n### Progress文档预览\n<img src=\"/images/engineering/component-progress001.png\">\n\n<img src=\"/images/engineering/component-progress002.png\">\n\n\n# Switch开关\n## 类型声明\n类型声明在`src/switch/interface.ts`文件中写入，checked属性是最开始是否被选中，disabled是否可以被禁用，onText开启状态的文本，offText关闭状态的文本，size是组件的尺寸大小，theme组件的颜色，onChange是状态切换时执行的回调函数。\n```ts\nimport React from 'react';\nexport type SwitchSize = 'default' | 'sm';\n\nexport type SwitchChangeEventHandler = (\n  checked: boolean,\n  event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<HTMLButtonElement>,\n) => void;\nexport interface SwitchProps {\n  /* 用户自定义样式 */\n  style?: React.CSSProperties;\n  /** 是否被选中 */\n  checked?: boolean;\n  /* 用户自定义类名 */\n  className?: string;\n  /** 组件的尺寸 */\n  size?: SwitchSize;\n  /** 是否被禁用 */\n  disabled?: boolean;\n  /** 开启状态的文本 */\n  onText?: string;\n  /** 关闭状态的文本 */\n  offText?: string;\n  /** 状态切换时的回调 */\n  onChange?: SwitchChangeEventHandler;\n}\n```\n## Switch开关实现\n在`src/switch/index.tsx`写入核心代码，基于button标签实现的，它有两个子元素`div`和`span`。div是一个白色的滑块，使用绝对定位，通过计算left值实现左右的切换，例如点击的时候，滑块的left值是`left: calc(100% - 20px);`，通过calc计算出的，这就是左右滑动的核心。同时还需要考虑`background-color`和`background-image`的优先级问题，最后span标签用来显示文本。\n```tsx\n// switch/index.tsx\nimport React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { SwitchProps } from './interface';\n\n/**\n * switch\n * @param {checked} bool 是否被选中\n * @param {disabled} bool 是否被禁用\n * @param {onText} string 开启状态的文本\n * @param {offText} string 关闭状态的文本\n * @param {onChange} func 状态切换时的回调\n * @param {size} string Switch组件的尺寸大小\n * @param {theme} string 组件的颜色\n */\nconst Switch: React.FC<SwitchProps> = (props) => {\n  const { size, checked, disabled, onText, offText, onChange, className, style, ...restProps } =\n    props;\n  /** \n   * 设置初始背景色\n  */\n  const defaultStyle = {\n    ...style,\n    backgroundColor: style?.backgroundColor || '#0099ff'\n  }\n\n  const [isChecked, setChecked] = useState<boolean>(!!checked);\n  const classes = classNames('yolo-switch', className, {\n    'yolo-switch-checked': !!isChecked,\n    'yolo-switch-disabled': disabled,\n    [`yolo-switch-${size}`]: size,\n  });\n\n  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!disabled) {\n      onChange && onChange(!isChecked, e);\n      setChecked(!isChecked);\n    }\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className={classes}\n      onClick={handleClick}\n      style={defaultStyle}\n      {...restProps}\n    >\n      <div className=\"yolo-switch-handle\"></div>\n      <span className=\"yolo-switch-inner\">{isChecked ? onText : offText}</span>\n    </button>\n  );\n};\n\n\nexport default Switch;\n```\n## Switch说明文档\n`src/switch/index.md`\n\n### 基本使用\n\n```tsx\nimport React from 'react';\nimport { Switch } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <>\n      <Switch checked />\n      <br />\n      <br />\n      <Switch/>\n    </>\n  );\n};\n```\n\n### 禁止使用\n\n```tsx\nimport React from 'react';\nimport { Switch } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <>\n      <Switch disabled />\n      <br />\n      <br />\n      <Switch disabled checked />\n    </>\n  );\n};\n```\n\n### 定制主题颜色\n\n```tsx\nimport React from 'react';\nimport { Switch } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <>\n      <Switch checked style={{ backgroundColor: 'green'}}/>\n      <br />\n      <br />\n      <Switch  checked style={{backgroundColor: 'red'}}/>\n      <br />\n      <br />\n      <Switch  checked style={{backgroundColor: 'yellow'}}/>\n      <br />\n      <br />\n      <Switch  checked style={{backgroundColor: 'pink'}}/>\n      <br />\n      <br />\n      <Switch  checked style={{backgroundColor: 'blue'}}/>\n    </>\n  );\n};\n```\n\n### 组件尺寸\n\n```tsx\nimport React from 'react';\nimport { Switch } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <>\n      <Switch checked size=\"sm\" />\n      <br />\n      <br />\n      <Switch checked />\n    </>\n  );\n};\n```\n\n### 开关内容\n\n```tsx\nimport React from 'react';\nimport { Switch } from 'yolo-ui';\n\nexport default () => {\n  return (\n    <>\n      <Switch\n        onText={'开'}\n        offText={'关'}\n        onChange={(checked, e) => {\n          console.log(checked, e);\n        }}\n        checked\n      />\n    </>\n  );\n};\n```\n\n### API\n\n| 参数     | 说明                 | 类型                                         | 默认值    |\n| -------- | -------------------- | -------------------------------------------- | --------- |\n| style   | 自定义样式，`backgroundColor`可自定义颜色| `string`                                   | `#09f`  |\n| checked  | 是否被选中           | `boolean`                                  | `false` |\n| size     | 开关大学             | `default \\| sm`                             | -         |\n| disabled | 是否被禁用           | `boolean`                                  | `false` |\n| onText   | 开启状态的文本       | `string \\| ReactNode`                       | -         |\n| offText  | 关闭状态的文本       | `string \\| ReactNode`                       | -         |\n| onChange | 选中值发生变化时触发 | `function(checked: boolean, event: Event)` | -         |\n\n### Switch文档预览\n<img src=\"/images/engineering/component-switch001.png\">\n\n# 代码打包输出和发布\n\n## 组件库的入口文件\n\n- 组件库的入口文件为 ``src/index.ts``\n- 组件库的全局样式文件为 ``src/style/index.less``或者 ``src/global.less``，两者都可以用来全局样式的提取。\n\n## 组件的打包\n\n### 在根目录新建tsconfig.build.json文件\n\n```json\n{\n  \"compilerOptions\": {\n    \"outDir\": \"dist\", // 编译之后的存放路径\n    \"module\": \"ESNext\",\n    \"target\": \"ES5\", // 指定编译之后的目标版本\n    \"declaration\": true, // 为每一个js文件生成 .d.ts类型声明文件\n    \"jsx\": \"react\",\n    \"moduleResolution\": \"node\", // classic 和 Node\n    \"allowSyntheticDefaultImports\": true //  true 支持 defalut 引入的方式\n  },\n  \"include\": [\"src/\"],\n  \"exclude\": [\"src/**/style\", \"src/**/*.md\"]\n}\n```\n\n### 在package.json文件中添加命令\n\n分别安装`lessc`和`rimraf`依赖，`lessc`将`less`转化为`css`，`rimraf`用来删除`dist`目录。\n\n```json\n{ \n  \"scripts\": {\n    \"clean\": \"rimraf ./dist\",\n    \"build:lib\": \"npm run clean && npm run build-ts && npm run build-css\",\n    \"build-ts\": \"tsc -p tsconfig.build.json\",\n    \"build-css\": \"lessc ./src/style/index.less ./dist/index.css\",\n  }\n}\n```\n\n在执行`build-ts`发生了很多个报错如下，经过在[stackoverflow](https://stackoverflow.com/)上查找相关资料得知，是 `@types/react-router-dom`和 `@types/react-router`的版本太低了导致了，把这两个依赖升级到最新版本后，就可以正常打包了。\n\n```js\nxxx/node_modules/@types/react-router-dom/index.d.ts(59,34): error TS2694: Namespace '\"/node_modules/history/index\"' has no exported member 'LocationState'.\n```\n\n## 本地测试(npm link)\n\n- 在`yolo-ui`的根目录下执行`npm link`命令，`npm link`的作用是可以让未发布的npm包，做本地测试，映射脚本；\n- 在`yolo-ui-test`（create-react-app生成的测试项目）工程下执行`npm link yolo-ui`；\n- 在`yolo-ui-test`的`package.json`中加入`yolo-ui`依赖。\n\n```json\n{ \n  \"dependencies\": {\n    \"yolo-ui\": \"^0.1.0\"\n  },\n}\n```\n\n- 分别在 `App.tsx`和 `index.tsx`引入组件和组件的样式\n\n```tsx\n// App.tsx\nimport { Button } from 'yolo-ui';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Button type=\"primary\">Hello Yolo</Button>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n```tsx\n// index.tsx\nimport \"yolo-ui/dist/index.css\";\n```\n\n- 测试结果如下，本地测试没问题。\n\n<img src=\"/images/engineering/yolo-build-001.png\">\n\n## 将yolo-ui发布到npm\n\n- 切换npm的源镜像为npm的原生源\n- 在命令行工具执行npm adduser，填写username、password and email 登录(sign in)\n- 在package.json添加一些必要信息\n\n```json\n{ \n  \"files\": [\n    \"dist\"\n  ], // 发布哪些文件到npm\n  // 添加prepublish命令\n  \"scripts\": {\n    \"clean\": \"rimraf ./dist\",\n    \"build:lib\": \"npm run clean && npm run build-ts && npm run build-css\",\n    \"build-ts\": \"tsc -p tsconfig.build.json\",\n    \"build-css\": \"lessc ./src/style/index.less ./dist/index.css\",\n    \"prepublish\": \"npm run build:lib\"\n  },\n}\n```\n\n- 执行npm publish即可发布到npm\n\n  <img src=\"/images/engineering/yolo-npm-publish.png\">\n\n- 此外，还可以在`peerDependencies`中告诉用户，要使用某某依赖需要安装什么依赖，如下：\n  要使用`yolo-ui`库，需要安装`react`和`react-dom`的16.8.0版本以上。当`npm i yolo-ui`时，`peerDependencies`里面的依赖不会被安装，会有一个日志输出，`npm warning`会提示用户需要安装`react`和`react-dom`的依赖。\n\n```json\n// package.json\n{ \n  \"peerDependencies\": {\n    \"react\": \"≥16.8.0\",\n    \"react-dom\": \"≥16.8.0\"\n  },\n}\n```\n\n# yolo-ui静态文档上传至阿里云服务器\n\n## 购买服务器\n\n本人买的是阿里云服务器\n\n## 远程登录服务器桌面(windows)\n\n- 在window桌面上按 `win + R`，输入 `mstsc`，进入远程桌面连接\n- 如果没有添加windows凭据的，先在 `控制面板->凭据管理器->windows凭据里添加服务器的凭据`\n- 输入账号和密码即可登录服务器远程桌面\n\n## 安装node环境\n\n- 将node的安装包上传到云服务器，并安装，`node -v`可以查看版本和是否安装成功\n\n## 启动静态服务器\n\n- 在根目录下 `npm init -y`，初始化 `package.json`文件，新建index.js文件\n- 上传静态文件docs-dist（dumi 打包的产物）到根目录，docs-dist文件内容如下：\n\n  <img src=\"/images/engineering/yolo-upload001.png\">\n\n- 安装 `koa`和 `koa-static`，用来启动一个静态资源服务器。\n- 在index.js写入代码：\n\n```js\nconst Koa = require('koa');\nconst path = require('path');\nconst static = require('koa-static');\nconst app = new Koa();\n\n// 静态资源目录对于相对入口文件index.js的路径\nconst staticPath = './docs-dist';\n\napp.use(static(\n    path.join(__dirname, staticPath)\n))\n\napp.listen(80, () => {\n    console.log('server is running, port is 80');\n})\n```\n\n- 在根目录下执行 `node index.js`，开启服务器成功\n- 最后在浏览器地址输入云服务器ip地址即可访问\n\n## 域名的注册和备案\n\n# nginx开启静态服务，并配置二级域名访问\n\n## 安装nginx（windows版）\n\n- 进入nginx官网下载安装包: [nginx下载](http://nginx.org/en/download.html)\n- 解压下载完成的nginx压缩包\n- 打开`cmd`，进入nginx安装包根路径\n- 输入命令`nginx -t`：检查nginx是否配置成功\n- 输入命令`start nginx`：启动nginx服务\n\n## nginx其他常用命令\n\n- 修改了配置文件，如nginx.conf，要使修改生效，重启Nginx服务\n```bash\nnginx -s reload\n```\n\n- 关闭nginx服务\n```bash\nnginx -s quit\n```\n\n- 强制关闭Nginx服务\n```bash\nnginx -s stop\n```\n\n## nginx.conf配置文件\n\n- nginx的配置在根目录conf文件夹下的nginx.conf文件中\n- server：代理服务器，可以设定多个代理服务器（每一个server就是一个虚拟服务器），请求进来之后由server的server_name决定该请求访问哪一个服务。\n\n- 以下是在阿里云服务器nginx配置不同域名，访问不同的静态资源的例子，比如访问home和detial，我们只需要把静态文件分别放到`C:/v1/home`和`C:/v1/detial`目录下，即可通过`http://home.xxxxx.com`和`http://detial.xxxxx.com`分别访问对应的静态资源。\n\n- 与此同时，需要在云服务器官网添加记录，二级域名的`home`和`detial`的解析设置\n```conf\nserver {\n    # 设置监听端口\n    listen      80;\n    server_name  home.xxxxx.com;\n    \n    # 设置url编码格式，解决参数中文乱码问题\n    charset utf-8;\n\t\t\n    location / {\n        root C:/v1/home;  # 设置 root-指定请求资源在服务器上的真实路径，可以写相对路径（相对于nginx安装目录）也可写绝对路径；\n        index index.html index.htm;  # 指定访问主页，会在root设定目录下去找，后面可跟多个页面，依次查找，找到一个即返回；\n    } \n}\n\nserver {\n    # 设置监听端口\n    listen      80;\n    server_name  detial.xxxxx.com;\n    \n    # 设置url编码格式，解决参数中文乱码问题\n    charset utf-8;\n\t\t\n    location / {\n        root C:/v1/detial;  \n        index index.html index.htm;  \n    } \n}\n```\n# YoloUI预览地址\n[YoloUI官网](http://yolo-ui.xyz/)\n\n# 参考\n- [dumi官方网站](https://d.umijs.org/zh-CN/guide)\n- [ant-design](https://ant.design/index-cn)\n- [arco-design](https://arco.design/)\n- [monki-ui](https://github.com/Jacky-Summer/monki-ui)\n- [最详细的React组件库搭建总结](https://juejin.cn/post/6844904160568016910)\n- [Nginx在windows下的安装、运行，以及配置文件讲解](https://blog.csdn.net/zorro_jin/article/details/84927408?spm=1001.2014.3001.5506)\n\n\n\n\n\n\n\n\n\n","slug":"engineering/component-library","published":1,"updated":"2022-07-10T09:18:13.112Z","_id":"cl5f0bihx0009v4uwbpbb9lg9","layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>作为一名前端程序员，一直以来，我都只是停留在会使用各种优秀的组件库，包括开源和公司内部自研的，从来没有了解过这些组件库是如何开发的。直到现在，自己参考了多个开源组件库，由浅入深，尝试去实现一个简单的组件库，学习和探索组件库设计以及开发思路。</p>\n<h1 id=\"技术选择\"><a href=\"#技术选择\" class=\"headerlink\" title=\"技术选择\"></a>技术选择</h1><p>经过查阅资料，觉得dumi非常的合适。dumi是专门为组件开发场景而生的文档工具，开箱即用，支持TypeScript 和 Markdown，可以将更多的精力集中在组件开发上，核心技术栈为：<code>React + TypeScript + less + dumi</code></p>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> project-name <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> project-name <span class=\"token comment\"># 创建空目录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"组件开发脚手架\"><a href=\"#组件开发脚手架\" class=\"headerlink\" title=\"组件开发脚手架\"></a>组件开发脚手架</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">$ npx @umijs<span class=\"token operator\">/</span>create<span class=\"token operator\">-</span>dumi<span class=\"token operator\">-</span>lib <span class=\"token operator\">--</span>site # 初始化一个站点模式的组件库开发脚手架\n# or\n$ yarn create @umijs<span class=\"token operator\">/</span>dumi<span class=\"token operator\">-</span>lib <span class=\"token operator\">--</span>site<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"目录结构说明\"><a href=\"#目录结构说明\" class=\"headerlink\" title=\"目录结构说明\"></a>目录结构说明</h2><img src=\"/images/engineering/component001.png\">\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ul>\n<li>执行 <code>npm install</code>，安装依赖。</li>\n<li>执行 <code>npm run start</code> 或 <code>npx dumi dev</code> ，开始调试组件或编写文档，预览效果如下图：</li>\n</ul>\n<img src=\"/images/engineering/project-name001.png\">\n\n<h1 id=\"组件的开发\"><a href=\"#组件的开发\" class=\"headerlink\" title=\"组件的开发\"></a>组件的开发</h1><h2 id=\"全局样式搭建\"><a href=\"#全局样式搭建\" class=\"headerlink\" title=\"全局样式搭建\"></a>全局样式搭建</h2><p>新建<code>src/style</code>文件夹，放在全局的样式文件。其中theme文件下放通用的基础样式，<code>global.less</code>中引用<code>style/inde.less</code>的样式，dumi默认引入全局样式<code>global.less</code>。</p>\n<img src=\"/images/engineering/component002.png\">\n\n<h3 id=\"定义基础样式\"><a href=\"#定义基础样式\" class=\"headerlink\" title=\"定义基础样式\"></a>定义基础样式</h3><ul>\n<li>基础色彩样式，primary、default、success、warning、danger、info；</li>\n<li>字体样式，默认font-family、默认font-size(1rem)、默认font-weight(400)、字体颜色、h1-h6(h6 默认是 1rem)；</li>\n<li>超链接样式(默认primary，无下划线)；</li>\n<li>line-height(行高默认是字体的1.5倍大小)；</li>\n<li>body(字体大小是1rem、背景白色、字体淡黑色)；</li>\n<li>border边框(宽度1px、颜色@gray-300、radius是0.25rem)；</li>\n<li>盒子阴影(@box-shadow: 0 0.5rem 1rem rgba(@black, 0.15))；</li>\n</ul>\n<h2 id=\"约定单个组件的文件结构\"><a href=\"#约定单个组件的文件结构\" class=\"headerlink\" title=\"约定单个组件的文件结构\"></a>约定单个组件的文件结构</h2><p>以button组件为例，其中<code>src/button/style/index.less</code>为单个组件的内部样式文件，需要在<code>src/style/index.less</code>中引入，目录结构如下：</p>\n<img src=\"/images/engineering/component003.png\">\n\n<h2 id=\"组件的开发步骤\"><a href=\"#组件的开发步骤\" class=\"headerlink\" title=\"组件的开发步骤\"></a>组件的开发步骤</h2><p>组件正确的开发流程：组件属性的分析 -&gt; 组件的开发 -&gt; (上生产环境需要组件测试) -&gt; 组件的使用说明文档</p>\n<ul>\n<li>组件的分析：去定义一些接口或者类型别名，接口是用来描述props，声明组件的时候通过泛型传入；</li>\n<li>组件的开发：不同的组件有不同的实现方式，相似的组件可以复用，编写组件基础样式；</li>\n<li>组件的使用说明：描述一些需要通过props传入组件的属性，方便定制不同场景；</li>\n</ul>\n<h1 id=\"Button按钮\"><a href=\"#Button按钮\" class=\"headerlink\" title=\"Button按钮\"></a>Button按钮</h1><h2 id=\"类型声明\"><a href=\"#类型声明\" class=\"headerlink\" title=\"类型声明\"></a>类型声明</h2><p>类型声明在<code>src/button/interface.ts</code>文件中写入，设置不同按钮的大小、按钮的主题类型、按钮的原生类型等</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 按钮大小</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ButtonSize</span> <span class=\"token operator\">=</span> <span class=\"token string\">'lg'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'md'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'sm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 按钮的主题类型</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ButtonType</span> <span class=\"token operator\">=</span> <span class=\"token string\">'primary'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'default'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'danger'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'link'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'info'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'dashed'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'warning'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 按钮的原生类型</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ButtonHTMLTypes</span> <span class=\"token operator\">=</span> <span class=\"token string\">'submit'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'button'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BaseButtonProps</span> <span class=\"token punctuation\">&#123;</span>\n  className<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 按钮禁用 */</span>\n  disabled<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 按钮大小 */</span>\n  size<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ButtonSize<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 按钮类型 */</span>\n  type<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ButtonType<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 按钮children */</span>\n  children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** type为link时的url */</span>\n  href<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// button 和 a链接 的原生属性太多了，可以直接把全部属性加上</span>\n<span class=\"token comment\">// 从哪里可以找到button所有的props？react已经提供好的</span>\n\n<span class=\"token comment\">// 合并交叉类型</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NativeButtonProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  htmlType<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ButtonHTMLTypes<span class=\"token punctuation\">;</span>\n  target<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  onClick<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>MouseEventHandler<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span> BaseButtonProps <span class=\"token operator\">&amp;</span>\n  Omit<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>ButtonHTMLAttributes<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ButtonHTMLAttributes&lt;HTMLElement> 所有button属性</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AnchorButtonProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  href<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  onClick<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>MouseEventHandler<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span> BaseButtonProps <span class=\"token operator\">&amp;</span>\n  Omit<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>AnchorHTMLAttributes<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// AnchorHTMLAttributes&lt;HTMLElement> 所有a标签属性</span>\n\n<span class=\"token comment\">// Partial&lt;T> 将类型的属性变成可选，只支持处理第一层的属性</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>NativeButtonProps <span class=\"token operator\">&amp;</span> AnchorButtonProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Button按钮实现\"><a href=\"#Button按钮实现\" class=\"headerlink\" title=\"Button按钮实现\"></a>Button按钮实现</h2><p>在<code>src/button/index.tsx</code>写入核心代码，需要考虑<code>padding</code>的大小、<code>lineHeight</code>高度、<code>color</code>颜色、<code>textAlien</code>文字居中、<code>box-shadow</code>盒子阴影，<code>disabled</code>时的特殊样式，鼠标的<code>cursor</code>的变化。</p>\n<ul>\n<li>使用<code>button</code>标签和<code>a</code>标签实现；</li>\n<li><code>Button Size</code>的大小其实就是<code>padding</code>控制，<code>font-size</code>不同、<code>border</code>的不同；</li>\n<li><code>Button Type</code>是变化<code>background-color</code>、<code>border-color</code>、字体颜色<code>color</code>；</li>\n<li>添加不同的状态：<code>hover</code>之后要颜色发生一定的变化，<code>focus</code>颜色变化，<code>disabled</code>颜色也发生变化(<code>cursor: not-allowed</code>和<code>opacity: .65</code>)。<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> classNames <span class=\"token keyword\">from</span> <span class=\"token string\">'classnames'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ButtonProps <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./interface'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Button<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>ButtonProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// className用户自定义的</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> disabled<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> href<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restProps <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// yolo-btn yolo-btn-lg yolo-btn-primary</span>\n  <span class=\"token comment\">// 因为我们的key是变化的，所有用[`$&#123; &#125;`]</span>\n  <span class=\"token keyword\">const</span> classes <span class=\"token operator\">=</span> <span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yolo-btn'</span><span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">yolo-btn-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">type</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> type<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">yolo-btn-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>size<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> size<span class=\"token punctuation\">,</span>\n    disabled<span class=\"token operator\">:</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'link'</span> <span class=\"token operator\">&amp;&amp;</span> disabled<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'link'</span> <span class=\"token operator\">&amp;&amp;</span> href<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>classes<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>href<span class=\"token punctuation\">&#125;</span></span> <span class=\"token spread\"><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">&#123;</span>children<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>classes<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>disabled<span class=\"token punctuation\">&#125;</span></span> <span class=\"token spread\"><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">&#123;</span>children<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nButton<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  disabled<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"Button使用说明\"><a href=\"#Button使用说明\" class=\"headerlink\" title=\"Button使用说明\"></a>Button使用说明</h2><p><code>src/button/index.md</code></p>\n<h3 id=\"按钮的类型\"><a href=\"#按钮的类型\" class=\"headerlink\" title=\"按钮的类型\"></a>按钮的类型</h3><p>按钮分为七种类型 <code>type</code>，默认是 <code>default</code>。</p>\n<p><code>default</code> | <code>primary</code> | <code>info</code> | <code>warning</code> | <code>danger</code> | <code>dashed</code> | <code>link</code></p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Button <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-demo-display-type<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>default<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">default</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">primary</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">info</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">warning</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">danger</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dashed<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">dashed</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://github.com/izph<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        link\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"按钮尺寸\"><a href=\"#按钮尺寸\" class=\"headerlink\" title=\"按钮尺寸\"></a>按钮尺寸</h3><p>尺寸 <code>size</code>分为 <code>lg</code> | <code>md</code> | <code>sm</code>，即大、中、小，默认的尺寸是中。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Button <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-demo-display-size<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Large\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Medium\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Small\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"按钮的禁用状态\"><a href=\"#按钮的禁用状态\" class=\"headerlink\" title=\"按钮的禁用状态\"></a>按钮的禁用状态</h3><p>添加 <code>disabled</code>属性即可让按钮处于禁用状态，同时按钮样式也会改变。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Button <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-demo-display-size<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        primary\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        danger\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">default</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        link\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>通过设置 <code>Button</code>的属性来产生不同的按钮样式，按钮的属性说明如下：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>设置按钮类型</td>\n<td><code>default</code>、<code>primary</code>、<code>info</code>、 <code>warning</code>、<code>danger</code>、<code>dashed</code>、<code>link</code></td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>size</td>\n<td>设置按钮大小</td>\n<td><code>lg</code>、<code>md</code>、<code>sm</code>，非必填</td>\n<td><code>md</code></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>按钮禁用状态</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>href</td>\n<td>点击跳转的地址，指定此属性 <code>button</code>的行为和 a 链接一致</td>\n<td><code>string</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>点击按钮时的回调</td>\n<td><code>(event) =&gt; void</code></td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h3 id=\"Button文档预览\"><a href=\"#Button文档预览\" class=\"headerlink\" title=\"Button文档预览\"></a>Button文档预览</h3><img src=\"/images/engineering/component-btn-001.png\">\n\n<h1 id=\"Progress进度条\"><a href=\"#Progress进度条\" class=\"headerlink\" title=\"Progress进度条\"></a>Progress进度条</h1><h2 id=\"类型声明-1\"><a href=\"#类型声明-1\" class=\"headerlink\" title=\"类型声明\"></a>类型声明</h2><p>类型声明在<code>src/progress/interface.ts</code>文件中写入，设置进度条主题颜色的类型、进度条组件的类型<code>ProgressProps</code>。percent代表当前进度条的百分比，strokeHeight设置高度，showText是否显示百分比数字。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ProgressThemeProps</span> <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'primary'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'secondary'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'success'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'info'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'warning'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'danger'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'light'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'dark'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProgressProps</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/* 百分比 */</span>\n  percent<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 设置高度 */</span>\n  strokeHeight<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 是否显示百分比文字 */</span>\n  showText<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 用户自定义样式 */</span>\n  style<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 进度条主题颜色 */</span>\n  theme<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ProgressThemeProps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Progress进度条实现\"><a href=\"#Progress进度条实现\" class=\"headerlink\" title=\"Progress进度条实现\"></a>Progress进度条实现</h2><p>在<code>src/progress/index.tsx</code>写入核心代码，根据传入的数字，来控制一个进度条长度；最外面有一个灰色progress-outer，它的高度可以配置，progress-outer内有一个子元素progress-inner，通过该元素的width来显示当前进度颜色，这个宽度是继承父元素progress-outer的，并悬浮到progress-outer上；通过在progress-inner设置flex布局，flex-end表示子项目从后往前排列，设置百分比数字显示在进度条右边，百分比数字也是支持显示和隐藏。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// progress/index.tsx</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">FC</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ProgressProps <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./interface'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* \n  percent: number 百分比\n  strokeHeight: number 高度\n  showText: boolean 是否显示百分比数字\n  theme: string 进度条主题色\n  style: React.CSSProperties 用户自定义样式\n*/</span>\n<span class=\"token keyword\">const</span> Progress<span class=\"token operator\">:</span> <span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>ProgressProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  percent<span class=\"token punctuation\">,</span>\n  strokeHeight<span class=\"token punctuation\">,</span>\n  showText<span class=\"token punctuation\">,</span>\n  style<span class=\"token punctuation\">,</span>\n  theme<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>restProps\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yolo-progress<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>style<span class=\"token punctuation\">&#125;</span></span> <span class=\"token spread\"><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 灰色最外层 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yolo-progress-outer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> height<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>strokeHeight<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">yolo-progress-inner color-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>theme<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> width<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>percent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">%</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">&#123;</span>showText <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inner-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>percent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">%</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* \n  初始化默认值\n*/</span>\nProgress<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  strokeHeight<span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n  showText<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  theme<span class=\"token operator\">:</span> <span class=\"token string\">'primary'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Progress<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Progress进度条说明文档\"><a href=\"#Progress进度条说明文档\" class=\"headerlink\" title=\"Progress进度条说明文档\"></a>Progress进度条说明文档</h2><p><code>src/progress/index.md</code></p>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p>基本样式分为 7 种，默认类型为 <code>primary</code>。</p>\n<p><code>primary</code> | <code>secondary</code> | <code>success</code> | <code>info</code> | <code>warning</code> | <code>danger</code> | <code>dark</code></p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Progress <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>secondary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">40</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>info<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">50</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">60</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">70</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dark<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">80</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"自定义高度\"><a href=\"#自定义高度\" class=\"headerlink\" title=\"自定义高度\"></a>自定义高度</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Progress <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">strokeHeight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">15</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">40</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">strokeHeight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">60</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">strokeHeight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">70</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">strokeHeight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">40</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"是否显示百分比文字\"><a href=\"#是否显示百分比文字\" class=\"headerlink\" title=\"是否显示百分比文字\"></a>是否显示百分比文字</h3><p>通过设置 <code>showText</code>属性。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Progress <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">showText</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">40</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">strokeHeight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">showText</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">60</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">strokeHeight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">showText</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"API-1\"><a href=\"#API-1\" class=\"headerlink\" title=\"API\"></a>API</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>theme</td>\n<td>主题颜色</td>\n<td><code>primary</code> | <code>secondary</code> | <code>success</code> | <code>info</code> | <code>warning</code> | <code>danger</code> | <code>dark</code>，非必填</td>\n<td><code>primary</code></td>\n</tr>\n<tr>\n<td>percent</td>\n<td>百分比</td>\n<td><code>number</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>strokeHeight</td>\n<td>进度条高度</td>\n<td><code>number</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>showText</td>\n<td>是否显示百分比文字</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td><code>React.CSSProperties</code></td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h3 id=\"Progress文档预览\"><a href=\"#Progress文档预览\" class=\"headerlink\" title=\"Progress文档预览\"></a>Progress文档预览</h3><img src=\"/images/engineering/component-progress001.png\">\n\n<img src=\"/images/engineering/component-progress002.png\">\n\n\n<h1 id=\"Switch开关\"><a href=\"#Switch开关\" class=\"headerlink\" title=\"Switch开关\"></a>Switch开关</h1><h2 id=\"类型声明-2\"><a href=\"#类型声明-2\" class=\"headerlink\" title=\"类型声明\"></a>类型声明</h2><p>类型声明在<code>src/switch/interface.ts</code>文件中写入，checked属性是最开始是否被选中，disabled是否可以被禁用，onText开启状态的文本，offText关闭状态的文本，size是组件的尺寸大小，theme组件的颜色，onChange是状态切换时执行的回调函数。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">SwitchSize</span> <span class=\"token operator\">=</span> <span class=\"token string\">'default'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'sm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">SwitchChangeEventHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  checked<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span>\n  event<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent<span class=\"token operator\">&lt;</span>HTMLButtonElement<span class=\"token operator\">></span> <span class=\"token operator\">|</span> React<span class=\"token punctuation\">.</span>KeyboardEvent<span class=\"token operator\">&lt;</span>HTMLButtonElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SwitchProps</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/* 用户自定义样式 */</span>\n  style<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 是否被选中 */</span>\n  checked<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 用户自定义类名 */</span>\n  className<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 组件的尺寸 */</span>\n  size<span class=\"token operator\">?</span><span class=\"token operator\">:</span> SwitchSize<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 是否被禁用 */</span>\n  disabled<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 开启状态的文本 */</span>\n  onText<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 关闭状态的文本 */</span>\n  offText<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 状态切换时的回调 */</span>\n  onChange<span class=\"token operator\">?</span><span class=\"token operator\">:</span> SwitchChangeEventHandler<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Switch开关实现\"><a href=\"#Switch开关实现\" class=\"headerlink\" title=\"Switch开关实现\"></a>Switch开关实现</h2><p>在<code>src/switch/index.tsx</code>写入核心代码，基于button标签实现的，它有两个子元素<code>div</code>和<code>span</code>。div是一个白色的滑块，使用绝对定位，通过计算left值实现左右的切换，例如点击的时候，滑块的left值是<code>left: calc(100% - 20px);</code>，通过calc计算出的，这就是左右滑动的核心。同时还需要考虑<code>background-color</code>和<code>background-image</code>的优先级问题，最后span标签用来显示文本。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// switch/index.tsx</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> classNames <span class=\"token keyword\">from</span> <span class=\"token string\">'classnames'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> SwitchProps <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./interface'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * switch\n * @param &#123;checked&#125; bool 是否被选中\n * @param &#123;disabled&#125; bool 是否被禁用\n * @param &#123;onText&#125; string 开启状态的文本\n * @param &#123;offText&#125; string 关闭状态的文本\n * @param &#123;onChange&#125; func 状态切换时的回调\n * @param &#123;size&#125; string Switch组件的尺寸大小\n * @param &#123;theme&#125; string 组件的颜色\n */</span>\n<span class=\"token keyword\">const</span> Switch<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>SwitchProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> size<span class=\"token punctuation\">,</span> checked<span class=\"token punctuation\">,</span> disabled<span class=\"token punctuation\">,</span> onText<span class=\"token punctuation\">,</span> offText<span class=\"token punctuation\">,</span> onChange<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restProps <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span>\n    props<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** \n   * 设置初始背景色\n  */</span>\n  <span class=\"token keyword\">const</span> defaultStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">...</span>style<span class=\"token punctuation\">,</span>\n    backgroundColor<span class=\"token operator\">:</span> style<span class=\"token operator\">?.</span>backgroundColor <span class=\"token operator\">||</span> <span class=\"token string\">'#0099ff'</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isChecked<span class=\"token punctuation\">,</span> setChecked<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> classes <span class=\"token operator\">=</span> <span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yolo-switch'</span><span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">'yolo-switch-checked'</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>isChecked<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'yolo-switch-disabled'</span><span class=\"token operator\">:</span> disabled<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">yolo-switch-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>size<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> size<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent<span class=\"token operator\">&lt;</span>HTMLButtonElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>disabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      onChange <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isChecked<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setChecked</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isChecked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>classes<span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>handleClick<span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>defaultStyle<span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token spread\"><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">&#125;</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yolo-switch-handle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yolo-switch-inner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>isChecked <span class=\"token operator\">?</span> onText <span class=\"token operator\">:</span> offText<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Switch<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Switch说明文档\"><a href=\"#Switch说明文档\" class=\"headerlink\" title=\"Switch说明文档\"></a>Switch说明文档</h2><p><code>src/switch/index.md</code></p>\n<h3 id=\"基本使用-1\"><a href=\"#基本使用-1\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Switch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span> <span class=\"token attr-name\">checked</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"禁止使用\"><a href=\"#禁止使用\" class=\"headerlink\" title=\"禁止使用\"></a>禁止使用</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Switch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span> <span class=\"token attr-name\">disabled</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span> <span class=\"token attr-name\">disabled</span> <span class=\"token attr-name\">checked</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"定制主题颜色\"><a href=\"#定制主题颜色\" class=\"headerlink\" title=\"定制主题颜色\"></a>定制主题颜色</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Switch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span> <span class=\"token attr-name\">checked</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span>  <span class=\"token attr-name\">checked</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span>  <span class=\"token attr-name\">checked</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span>  <span class=\"token attr-name\">checked</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span>  <span class=\"token attr-name\">checked</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"组件尺寸\"><a href=\"#组件尺寸\" class=\"headerlink\" title=\"组件尺寸\"></a>组件尺寸</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Switch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span> <span class=\"token attr-name\">checked</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sm<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span> <span class=\"token attr-name\">checked</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"开关内容\"><a href=\"#开关内容\" class=\"headerlink\" title=\"开关内容\"></a>开关内容</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Switch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span>\n        <span class=\"token attr-name\">onText</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'开'</span><span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">offText</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'关'</span><span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span>checked<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>checked<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">checked</span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"API-2\"><a href=\"#API-2\" class=\"headerlink\" title=\"API\"></a>API</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>style</td>\n<td>自定义样式，<code>backgroundColor</code>可自定义颜色</td>\n<td><code>string</code></td>\n<td><code>#09f</code></td>\n</tr>\n<tr>\n<td>checked</td>\n<td>是否被选中</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>size</td>\n<td>开关大学</td>\n<td><code>default | sm</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否被禁用</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>onText</td>\n<td>开启状态的文本</td>\n<td><code>string | ReactNode</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>offText</td>\n<td>关闭状态的文本</td>\n<td><code>string | ReactNode</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选中值发生变化时触发</td>\n<td><code>function(checked: boolean, event: Event)</code></td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h3 id=\"Switch文档预览\"><a href=\"#Switch文档预览\" class=\"headerlink\" title=\"Switch文档预览\"></a>Switch文档预览</h3><img src=\"/images/engineering/component-switch001.png\">\n\n<h1 id=\"代码打包输出和发布\"><a href=\"#代码打包输出和发布\" class=\"headerlink\" title=\"代码打包输出和发布\"></a>代码打包输出和发布</h1><h2 id=\"组件库的入口文件\"><a href=\"#组件库的入口文件\" class=\"headerlink\" title=\"组件库的入口文件\"></a>组件库的入口文件</h2><ul>\n<li>组件库的入口文件为 <code>src/index.ts</code></li>\n<li>组件库的全局样式文件为 <code>src/style/index.less</code>或者 <code>src/global.less</code>，两者都可以用来全局样式的提取。</li>\n</ul>\n<h2 id=\"组件的打包\"><a href=\"#组件的打包\" class=\"headerlink\" title=\"组件的打包\"></a>组件的打包</h2><h3 id=\"在根目录新建tsconfig-build-json文件\"><a href=\"#在根目录新建tsconfig-build-json文件\" class=\"headerlink\" title=\"在根目录新建tsconfig.build.json文件\"></a>在根目录新建tsconfig.build.json文件</h3><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 编译之后的存放路径</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ESNext\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES5\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 指定编译之后的目标版本</span>\n    <span class=\"token property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 为每一个js文件生成 .d.ts类型声明文件</span>\n    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// classic 和 Node</span>\n    <span class=\"token property\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//  true 支持 defalut 引入的方式</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/style\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/**/*.md\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"在package-json文件中添加命令\"><a href=\"#在package-json文件中添加命令\" class=\"headerlink\" title=\"在package.json文件中添加命令\"></a>在package.json文件中添加命令</h3><p>分别安装<code>lessc</code>和<code>rimraf</code>依赖，<code>lessc</code>将<code>less</code>转化为<code>css</code>，<code>rimraf</code>用来删除<code>dist</code>目录。</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span> \n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"clean\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rimraf ./dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build:lib\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run clean &amp;&amp; npm run build-ts &amp;&amp; npm run build-css\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build-ts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc -p tsconfig.build.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build-css\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lessc ./src/style/index.less ./dist/index.css\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在执行<code>build-ts</code>发生了很多个报错如下，经过在<a href=\"https://stackoverflow.com/\">stackoverflow</a>上查找相关资料得知，是 <code>@types/react-router-dom</code>和 <code>@types/react-router</code>的版本太低了导致了，把这两个依赖升级到最新版本后，就可以正常打包了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xxx<span class=\"token operator\">/</span>node_modules<span class=\"token operator\">/</span>@types<span class=\"token operator\">/</span>react<span class=\"token operator\">-</span>router<span class=\"token operator\">-</span>dom<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">ts</span><span class=\"token punctuation\">(</span><span class=\"token number\">59</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> error <span class=\"token constant\">TS2694</span><span class=\"token operator\">:</span> Namespace <span class=\"token string\">'\"/node_modules/history/index\"'</span> has no exported member <span class=\"token string\">'LocationState'</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"本地测试-npm-link\"><a href=\"#本地测试-npm-link\" class=\"headerlink\" title=\"本地测试(npm link)\"></a>本地测试(npm link)</h2><ul>\n<li>在<code>yolo-ui</code>的根目录下执行<code>npm link</code>命令，<code>npm link</code>的作用是可以让未发布的npm包，做本地测试，映射脚本；</li>\n<li>在<code>yolo-ui-test</code>（create-react-app生成的测试项目）工程下执行<code>npm link yolo-ui</code>；</li>\n<li>在<code>yolo-ui-test</code>的<code>package.json</code>中加入<code>yolo-ui</code>依赖。</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span> \n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"yolo-ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.1.0\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>分别在 <code>App.tsx</code>和 <code>index.tsx</code>引入组件和组件的样式</li>\n</ul>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// App.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Button <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello Yolo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// index.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"yolo-ui/dist/index.css\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>测试结果如下，本地测试没问题。</li>\n</ul>\n<img src=\"/images/engineering/yolo-build-001.png\">\n\n<h2 id=\"将yolo-ui发布到npm\"><a href=\"#将yolo-ui发布到npm\" class=\"headerlink\" title=\"将yolo-ui发布到npm\"></a>将yolo-ui发布到npm</h2><ul>\n<li>切换npm的源镜像为npm的原生源</li>\n<li>在命令行工具执行npm adduser，填写username、password and email 登录(sign in)</li>\n<li>在package.json添加一些必要信息</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span> \n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"dist\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 发布哪些文件到npm</span>\n  <span class=\"token comment\">// 添加prepublish命令</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"clean\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rimraf ./dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build:lib\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run clean &amp;&amp; npm run build-ts &amp;&amp; npm run build-css\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build-ts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc -p tsconfig.build.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build-css\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lessc ./src/style/index.less ./dist/index.css\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"prepublish\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build:lib\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>执行npm publish即可发布到npm</p>\n<img src=\"/images/engineering/yolo-npm-publish.png\">\n</li>\n<li><p>此外，还可以在<code>peerDependencies</code>中告诉用户，要使用某某依赖需要安装什么依赖，如下：<br>要使用<code>yolo-ui</code>库，需要安装<code>react</code>和<code>react-dom</code>的16.8.0版本以上。当<code>npm i yolo-ui</code>时，<code>peerDependencies</code>里面的依赖不会被安装，会有一个日志输出，<code>npm warning</code>会提示用户需要安装<code>react</code>和<code>react-dom</code>的依赖。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">&#123;</span> \n  <span class=\"token property\">\"peerDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"≥16.8.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"≥16.8.0\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"yolo-ui静态文档上传至阿里云服务器\"><a href=\"#yolo-ui静态文档上传至阿里云服务器\" class=\"headerlink\" title=\"yolo-ui静态文档上传至阿里云服务器\"></a>yolo-ui静态文档上传至阿里云服务器</h1><h2 id=\"购买服务器\"><a href=\"#购买服务器\" class=\"headerlink\" title=\"购买服务器\"></a>购买服务器</h2><p>本人买的是阿里云服务器</p>\n<h2 id=\"远程登录服务器桌面-windows\"><a href=\"#远程登录服务器桌面-windows\" class=\"headerlink\" title=\"远程登录服务器桌面(windows)\"></a>远程登录服务器桌面(windows)</h2><ul>\n<li>在window桌面上按 <code>win + R</code>，输入 <code>mstsc</code>，进入远程桌面连接</li>\n<li>如果没有添加windows凭据的，先在 <code>控制面板-&gt;凭据管理器-&gt;windows凭据里添加服务器的凭据</code></li>\n<li>输入账号和密码即可登录服务器远程桌面</li>\n</ul>\n<h2 id=\"安装node环境\"><a href=\"#安装node环境\" class=\"headerlink\" title=\"安装node环境\"></a>安装node环境</h2><ul>\n<li>将node的安装包上传到云服务器，并安装，<code>node -v</code>可以查看版本和是否安装成功</li>\n</ul>\n<h2 id=\"启动静态服务器\"><a href=\"#启动静态服务器\" class=\"headerlink\" title=\"启动静态服务器\"></a>启动静态服务器</h2><ul>\n<li><p>在根目录下 <code>npm init -y</code>，初始化 <code>package.json</code>文件，新建index.js文件</p>\n</li>\n<li><p>上传静态文件docs-dist（dumi 打包的产物）到根目录，docs-dist文件内容如下：</p>\n<img src=\"/images/engineering/yolo-upload001.png\">\n</li>\n<li><p>安装 <code>koa</code>和 <code>koa-static</code>，用来启动一个静态资源服务器。</p>\n</li>\n<li><p>在index.js写入代码：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">static</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 静态资源目录对于相对入口文件index.js的路径</span>\n<span class=\"token keyword\">const</span> staticPath <span class=\"token operator\">=</span> <span class=\"token string\">'./docs-dist'</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> staticPath<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server is running, port is 80'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在根目录下执行 <code>node index.js</code>，开启服务器成功</li>\n<li>最后在浏览器地址输入云服务器ip地址即可访问</li>\n</ul>\n<h2 id=\"域名的注册和备案\"><a href=\"#域名的注册和备案\" class=\"headerlink\" title=\"域名的注册和备案\"></a>域名的注册和备案</h2><h1 id=\"nginx开启静态服务，并配置二级域名访问\"><a href=\"#nginx开启静态服务，并配置二级域名访问\" class=\"headerlink\" title=\"nginx开启静态服务，并配置二级域名访问\"></a>nginx开启静态服务，并配置二级域名访问</h1><h2 id=\"安装nginx（windows版）\"><a href=\"#安装nginx（windows版）\" class=\"headerlink\" title=\"安装nginx（windows版）\"></a>安装nginx（windows版）</h2><ul>\n<li>进入nginx官网下载安装包: <a href=\"http://nginx.org/en/download.html\">nginx下载</a></li>\n<li>解压下载完成的nginx压缩包</li>\n<li>打开<code>cmd</code>，进入nginx安装包根路径</li>\n<li>输入命令<code>nginx -t</code>：检查nginx是否配置成功</li>\n<li>输入命令<code>start nginx</code>：启动nginx服务</li>\n</ul>\n<h2 id=\"nginx其他常用命令\"><a href=\"#nginx其他常用命令\" class=\"headerlink\" title=\"nginx其他常用命令\"></a>nginx其他常用命令</h2><ul>\n<li><p>修改了配置文件，如nginx.conf，要使修改生效，重启Nginx服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>关闭nginx服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>强制关闭Nginx服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s stop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"nginx-conf配置文件\"><a href=\"#nginx-conf配置文件\" class=\"headerlink\" title=\"nginx.conf配置文件\"></a>nginx.conf配置文件</h2><ul>\n<li><p>nginx的配置在根目录conf文件夹下的nginx.conf文件中</p>\n</li>\n<li><p>server：代理服务器，可以设定多个代理服务器（每一个server就是一个虚拟服务器），请求进来之后由server的server_name决定该请求访问哪一个服务。</p>\n</li>\n<li><p>以下是在阿里云服务器nginx配置不同域名，访问不同的静态资源的例子，比如访问home和detial，我们只需要把静态文件分别放到<code>C:/v1/home</code>和<code>C:/v1/detial</code>目录下，即可通过<code>http://home.xxxxx.com</code>和<code>http://detial.xxxxx.com</code>分别访问对应的静态资源。</p>\n</li>\n<li><p>与此同时，需要在云服务器官网添加记录，二级域名的<code>home</code>和<code>detial</code>的解析设置</p>\n<pre class=\"line-numbers language-conf\" data-language=\"conf\"><code class=\"language-conf\">server &#123;\n    # 设置监听端口\n    listen      80;\n    server_name  home.xxxxx.com;\n    \n    # 设置url编码格式，解决参数中文乱码问题\n    charset utf-8;\n\t\t\n    location &#x2F; &#123;\n        root C:&#x2F;v1&#x2F;home;  # 设置 root-指定请求资源在服务器上的真实路径，可以写相对路径（相对于nginx安装目录）也可写绝对路径；\n        index index.html index.htm;  # 指定访问主页，会在root设定目录下去找，后面可跟多个页面，依次查找，找到一个即返回；\n    &#125; \n&#125;\n\nserver &#123;\n    # 设置监听端口\n    listen      80;\n    server_name  detial.xxxxx.com;\n    \n    # 设置url编码格式，解决参数中文乱码问题\n    charset utf-8;\n\t\t\n    location &#x2F; &#123;\n        root C:&#x2F;v1&#x2F;detial;  \n        index index.html index.htm;  \n    &#125; \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h1 id=\"YoloUI预览地址\"><a href=\"#YoloUI预览地址\" class=\"headerlink\" title=\"YoloUI预览地址\"></a>YoloUI预览地址</h1><p><a href=\"http://yolo-ui.xyz/\">YoloUI官网</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://d.umijs.org/zh-CN/guide\">dumi官方网站</a></li>\n<li><a href=\"https://ant.design/index-cn\">ant-design</a></li>\n<li><a href=\"https://arco.design/\">arco-design</a></li>\n<li><a href=\"https://github.com/Jacky-Summer/monki-ui\">monki-ui</a></li>\n<li><a href=\"https://juejin.cn/post/6844904160568016910\">最详细的React组件库搭建总结</a></li>\n<li><a href=\"https://blog.csdn.net/zorro_jin/article/details/84927408?spm=1001.2014.3001.5506\">Nginx在windows下的安装、运行，以及配置文件讲解</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>作为一名前端程序员，一直以来，我都只是停留在会使用各种优秀的组件库，包括开源和公司内部自研的，从来没有了解过这些组件库是如何开发的。直到现在，自己参考了多个开源组件库，由浅入深，尝试去实现一个简单的组件库，学习和探索组件库设计以及开发思路。</p>\n<h1 id=\"技术选择\"><a href=\"#技术选择\" class=\"headerlink\" title=\"技术选择\"></a>技术选择</h1><p>经过查阅资料，觉得dumi非常的合适。dumi是专门为组件开发场景而生的文档工具，开箱即用，支持TypeScript 和 Markdown，可以将更多的精力集中在组件开发上，核心技术栈为：<code>React + TypeScript + less + dumi</code></p>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> project-name <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> project-name <span class=\"token comment\"># 创建空目录</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"组件开发脚手架\"><a href=\"#组件开发脚手架\" class=\"headerlink\" title=\"组件开发脚手架\"></a>组件开发脚手架</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">$ npx @umijs<span class=\"token operator\">/</span>create<span class=\"token operator\">-</span>dumi<span class=\"token operator\">-</span>lib <span class=\"token operator\">--</span>site # 初始化一个站点模式的组件库开发脚手架\n# or\n$ yarn create @umijs<span class=\"token operator\">/</span>dumi<span class=\"token operator\">-</span>lib <span class=\"token operator\">--</span>site<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"目录结构说明\"><a href=\"#目录结构说明\" class=\"headerlink\" title=\"目录结构说明\"></a>目录结构说明</h2><img src=\"/images/engineering/component001.png\">\n\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ul>\n<li>执行 <code>npm install</code>，安装依赖。</li>\n<li>执行 <code>npm run start</code> 或 <code>npx dumi dev</code> ，开始调试组件或编写文档，预览效果如下图：</li>\n</ul>\n<img src=\"/images/engineering/project-name001.png\">\n\n<h1 id=\"组件的开发\"><a href=\"#组件的开发\" class=\"headerlink\" title=\"组件的开发\"></a>组件的开发</h1><h2 id=\"全局样式搭建\"><a href=\"#全局样式搭建\" class=\"headerlink\" title=\"全局样式搭建\"></a>全局样式搭建</h2><p>新建<code>src/style</code>文件夹，放在全局的样式文件。其中theme文件下放通用的基础样式，<code>global.less</code>中引用<code>style/inde.less</code>的样式，dumi默认引入全局样式<code>global.less</code>。</p>\n<img src=\"/images/engineering/component002.png\">\n\n<h3 id=\"定义基础样式\"><a href=\"#定义基础样式\" class=\"headerlink\" title=\"定义基础样式\"></a>定义基础样式</h3><ul>\n<li>基础色彩样式，primary、default、success、warning、danger、info；</li>\n<li>字体样式，默认font-family、默认font-size(1rem)、默认font-weight(400)、字体颜色、h1-h6(h6 默认是 1rem)；</li>\n<li>超链接样式(默认primary，无下划线)；</li>\n<li>line-height(行高默认是字体的1.5倍大小)；</li>\n<li>body(字体大小是1rem、背景白色、字体淡黑色)；</li>\n<li>border边框(宽度1px、颜色@gray-300、radius是0.25rem)；</li>\n<li>盒子阴影(@box-shadow: 0 0.5rem 1rem rgba(@black, 0.15))；</li>\n</ul>\n<h2 id=\"约定单个组件的文件结构\"><a href=\"#约定单个组件的文件结构\" class=\"headerlink\" title=\"约定单个组件的文件结构\"></a>约定单个组件的文件结构</h2><p>以button组件为例，其中<code>src/button/style/index.less</code>为单个组件的内部样式文件，需要在<code>src/style/index.less</code>中引入，目录结构如下：</p>\n<img src=\"/images/engineering/component003.png\">\n\n<h2 id=\"组件的开发步骤\"><a href=\"#组件的开发步骤\" class=\"headerlink\" title=\"组件的开发步骤\"></a>组件的开发步骤</h2><p>组件正确的开发流程：组件属性的分析 -&gt; 组件的开发 -&gt; (上生产环境需要组件测试) -&gt; 组件的使用说明文档</p>\n<ul>\n<li>组件的分析：去定义一些接口或者类型别名，接口是用来描述props，声明组件的时候通过泛型传入；</li>\n<li>组件的开发：不同的组件有不同的实现方式，相似的组件可以复用，编写组件基础样式；</li>\n<li>组件的使用说明：描述一些需要通过props传入组件的属性，方便定制不同场景；</li>\n</ul>\n<h1 id=\"Button按钮\"><a href=\"#Button按钮\" class=\"headerlink\" title=\"Button按钮\"></a>Button按钮</h1><h2 id=\"类型声明\"><a href=\"#类型声明\" class=\"headerlink\" title=\"类型声明\"></a>类型声明</h2><p>类型声明在<code>src/button/interface.ts</code>文件中写入，设置不同按钮的大小、按钮的主题类型、按钮的原生类型等</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 按钮大小</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ButtonSize</span> <span class=\"token operator\">=</span> <span class=\"token string\">'lg'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'md'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'sm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 按钮的主题类型</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ButtonType</span> <span class=\"token operator\">=</span> <span class=\"token string\">'primary'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'default'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'danger'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'link'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'info'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'dashed'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'warning'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 按钮的原生类型</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ButtonHTMLTypes</span> <span class=\"token operator\">=</span> <span class=\"token string\">'submit'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'button'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">BaseButtonProps</span> <span class=\"token punctuation\">&#123;</span>\n  className<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 按钮禁用 */</span>\n  disabled<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 按钮大小 */</span>\n  size<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ButtonSize<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 按钮类型 */</span>\n  type<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ButtonType<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 按钮children */</span>\n  children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** type为link时的url */</span>\n  href<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// button 和 a链接 的原生属性太多了，可以直接把全部属性加上</span>\n<span class=\"token comment\">// 从哪里可以找到button所有的props？react已经提供好的</span>\n\n<span class=\"token comment\">// 合并交叉类型</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NativeButtonProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  htmlType<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ButtonHTMLTypes<span class=\"token punctuation\">;</span>\n  target<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  onClick<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>MouseEventHandler<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span> BaseButtonProps <span class=\"token operator\">&amp;</span>\n  Omit<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>ButtonHTMLAttributes<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ButtonHTMLAttributes&lt;HTMLElement> 所有button属性</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">AnchorButtonProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  href<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  onClick<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>MouseEventHandler<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">&amp;</span> BaseButtonProps <span class=\"token operator\">&amp;</span>\n  Omit<span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>AnchorHTMLAttributes<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// AnchorHTMLAttributes&lt;HTMLElement> 所有a标签属性</span>\n\n<span class=\"token comment\">// Partial&lt;T> 将类型的属性变成可选，只支持处理第一层的属性</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ButtonProps</span> <span class=\"token operator\">=</span> Partial<span class=\"token operator\">&lt;</span>NativeButtonProps <span class=\"token operator\">&amp;</span> AnchorButtonProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Button按钮实现\"><a href=\"#Button按钮实现\" class=\"headerlink\" title=\"Button按钮实现\"></a>Button按钮实现</h2><p>在<code>src/button/index.tsx</code>写入核心代码，需要考虑<code>padding</code>的大小、<code>lineHeight</code>高度、<code>color</code>颜色、<code>textAlien</code>文字居中、<code>box-shadow</code>盒子阴影，<code>disabled</code>时的特殊样式，鼠标的<code>cursor</code>的变化。</p>\n<ul>\n<li>使用<code>button</code>标签和<code>a</code>标签实现；</li>\n<li><code>Button Size</code>的大小其实就是<code>padding</code>控制，<code>font-size</code>不同、<code>border</code>的不同；</li>\n<li><code>Button Type</code>是变化<code>background-color</code>、<code>border-color</code>、字体颜色<code>color</code>；</li>\n<li>添加不同的状态：<code>hover</code>之后要颜色发生一定的变化，<code>focus</code>颜色变化，<code>disabled</code>颜色也发生变化(<code>cursor: not-allowed</code>和<code>opacity: .65</code>)。<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> classNames <span class=\"token keyword\">from</span> <span class=\"token string\">'classnames'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ButtonProps <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./interface'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> Button<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>ButtonProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// className用户自定义的</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> disabled<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> href<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restProps <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// yolo-btn yolo-btn-lg yolo-btn-primary</span>\n  <span class=\"token comment\">// 因为我们的key是变化的，所有用[`$&#123; &#125;`]</span>\n  <span class=\"token keyword\">const</span> classes <span class=\"token operator\">=</span> <span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yolo-btn'</span><span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">yolo-btn-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">type</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> type<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">yolo-btn-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>size<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> size<span class=\"token punctuation\">,</span>\n    disabled<span class=\"token operator\">:</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'link'</span> <span class=\"token operator\">&amp;&amp;</span> disabled<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'link'</span> <span class=\"token operator\">&amp;&amp;</span> href<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>classes<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>href<span class=\"token punctuation\">&#125;</span></span> <span class=\"token spread\"><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">&#123;</span>children<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>classes<span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>disabled<span class=\"token punctuation\">&#125;</span></span> <span class=\"token spread\"><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">&#123;</span>children<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\nButton<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  disabled<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Button<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"Button使用说明\"><a href=\"#Button使用说明\" class=\"headerlink\" title=\"Button使用说明\"></a>Button使用说明</h2><p><code>src/button/index.md</code></p>\n<h3 id=\"按钮的类型\"><a href=\"#按钮的类型\" class=\"headerlink\" title=\"按钮的类型\"></a>按钮的类型</h3><p>按钮分为七种类型 <code>type</code>，默认是 <code>default</code>。</p>\n<p><code>default</code> | <code>primary</code> | <code>info</code> | <code>warning</code> | <code>danger</code> | <code>dashed</code> | <code>link</code></p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Button <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-demo-display-type<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>default<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">default</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">primary</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>info<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">info</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">warning</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">danger</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dashed<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">dashed</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://github.com/izph<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        link\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"按钮尺寸\"><a href=\"#按钮尺寸\" class=\"headerlink\" title=\"按钮尺寸\"></a>按钮尺寸</h3><p>尺寸 <code>size</code>分为 <code>lg</code> | <code>md</code> | <code>sm</code>，即大、中、小，默认的尺寸是中。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Button <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-demo-display-size<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Large\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Medium\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Small\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"按钮的禁用状态\"><a href=\"#按钮的禁用状态\" class=\"headerlink\" title=\"按钮的禁用状态\"></a>按钮的禁用状态</h3><p>添加 <code>disabled</code>属性即可让按钮处于禁用状态，同时按钮样式也会改变。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Button <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button-demo-display-size<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        primary\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        danger\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">default</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">disabled</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        link\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>通过设置 <code>Button</code>的属性来产生不同的按钮样式，按钮的属性说明如下：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type</td>\n<td>设置按钮类型</td>\n<td><code>default</code>、<code>primary</code>、<code>info</code>、 <code>warning</code>、<code>danger</code>、<code>dashed</code>、<code>link</code></td>\n<td><code>default</code></td>\n</tr>\n<tr>\n<td>size</td>\n<td>设置按钮大小</td>\n<td><code>lg</code>、<code>md</code>、<code>sm</code>，非必填</td>\n<td><code>md</code></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>按钮禁用状态</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>href</td>\n<td>点击跳转的地址，指定此属性 <code>button</code>的行为和 a 链接一致</td>\n<td><code>string</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>点击按钮时的回调</td>\n<td><code>(event) =&gt; void</code></td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h3 id=\"Button文档预览\"><a href=\"#Button文档预览\" class=\"headerlink\" title=\"Button文档预览\"></a>Button文档预览</h3><img src=\"/images/engineering/component-btn-001.png\">\n\n<h1 id=\"Progress进度条\"><a href=\"#Progress进度条\" class=\"headerlink\" title=\"Progress进度条\"></a>Progress进度条</h1><h2 id=\"类型声明-1\"><a href=\"#类型声明-1\" class=\"headerlink\" title=\"类型声明\"></a>类型声明</h2><p>类型声明在<code>src/progress/interface.ts</code>文件中写入，设置进度条主题颜色的类型、进度条组件的类型<code>ProgressProps</code>。percent代表当前进度条的百分比，strokeHeight设置高度，showText是否显示百分比数字。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ProgressThemeProps</span> <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'primary'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'secondary'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'success'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'info'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'warning'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'danger'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'light'</span>\n  <span class=\"token operator\">|</span> <span class=\"token string\">'dark'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProgressProps</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/* 百分比 */</span>\n  percent<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 设置高度 */</span>\n  strokeHeight<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 是否显示百分比文字 */</span>\n  showText<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 用户自定义样式 */</span>\n  style<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 进度条主题颜色 */</span>\n  theme<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ProgressThemeProps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Progress进度条实现\"><a href=\"#Progress进度条实现\" class=\"headerlink\" title=\"Progress进度条实现\"></a>Progress进度条实现</h2><p>在<code>src/progress/index.tsx</code>写入核心代码，根据传入的数字，来控制一个进度条长度；最外面有一个灰色progress-outer，它的高度可以配置，progress-outer内有一个子元素progress-inner，通过该元素的width来显示当前进度颜色，这个宽度是继承父元素progress-outer的，并悬浮到progress-outer上；通过在progress-inner设置flex布局，flex-end表示子项目从后往前排列，设置百分比数字显示在进度条右边，百分比数字也是支持显示和隐藏。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// progress/index.tsx</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token constant\">FC</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ProgressProps <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./interface'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* \n  percent: number 百分比\n  strokeHeight: number 高度\n  showText: boolean 是否显示百分比数字\n  theme: string 进度条主题色\n  style: React.CSSProperties 用户自定义样式\n*/</span>\n<span class=\"token keyword\">const</span> Progress<span class=\"token operator\">:</span> <span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>ProgressProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  percent<span class=\"token punctuation\">,</span>\n  strokeHeight<span class=\"token punctuation\">,</span>\n  showText<span class=\"token punctuation\">,</span>\n  style<span class=\"token punctuation\">,</span>\n  theme<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>restProps\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yolo-progress<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>style<span class=\"token punctuation\">&#125;</span></span> <span class=\"token spread\"><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 灰色最外层 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yolo-progress-outer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> height<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>strokeHeight<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">yolo-progress-inner color-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>theme<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> width<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>percent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">%</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">&#123;</span>showText <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inner-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>percent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">%</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* \n  初始化默认值\n*/</span>\nProgress<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  strokeHeight<span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n  showText<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  theme<span class=\"token operator\">:</span> <span class=\"token string\">'primary'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Progress<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Progress进度条说明文档\"><a href=\"#Progress进度条说明文档\" class=\"headerlink\" title=\"Progress进度条说明文档\"></a>Progress进度条说明文档</h2><p><code>src/progress/index.md</code></p>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><p>基本样式分为 7 种，默认类型为 <code>primary</code>。</p>\n<p><code>primary</code> | <code>secondary</code> | <code>success</code> | <code>info</code> | <code>warning</code> | <code>danger</code> | <code>dark</code></p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Progress <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>secondary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">40</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>info<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">50</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">60</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">70</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dark<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">80</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">100</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"自定义高度\"><a href=\"#自定义高度\" class=\"headerlink\" title=\"自定义高度\"></a>自定义高度</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Progress <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">strokeHeight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">15</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">40</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">strokeHeight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">60</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">strokeHeight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>danger<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">70</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">strokeHeight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">40</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"是否显示百分比文字\"><a href=\"#是否显示百分比文字\" class=\"headerlink\" title=\"是否显示百分比文字\"></a>是否显示百分比文字</h3><p>通过设置 <code>showText</code>属性。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Progress <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">showText</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>success<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">40</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">strokeHeight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">20</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">showText</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Progress</span></span> <span class=\"token attr-name\">theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>warning<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">percent</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">60</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">strokeHeight</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">30</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token attr-name\">showText</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"API-1\"><a href=\"#API-1\" class=\"headerlink\" title=\"API\"></a>API</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>theme</td>\n<td>主题颜色</td>\n<td><code>primary</code> | <code>secondary</code> | <code>success</code> | <code>info</code> | <code>warning</code> | <code>danger</code> | <code>dark</code>，非必填</td>\n<td><code>primary</code></td>\n</tr>\n<tr>\n<td>percent</td>\n<td>百分比</td>\n<td><code>number</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>strokeHeight</td>\n<td>进度条高度</td>\n<td><code>number</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>showText</td>\n<td>是否显示百分比文字</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义样式</td>\n<td><code>React.CSSProperties</code></td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h3 id=\"Progress文档预览\"><a href=\"#Progress文档预览\" class=\"headerlink\" title=\"Progress文档预览\"></a>Progress文档预览</h3><img src=\"/images/engineering/component-progress001.png\">\n\n<img src=\"/images/engineering/component-progress002.png\">\n\n\n<h1 id=\"Switch开关\"><a href=\"#Switch开关\" class=\"headerlink\" title=\"Switch开关\"></a>Switch开关</h1><h2 id=\"类型声明-2\"><a href=\"#类型声明-2\" class=\"headerlink\" title=\"类型声明\"></a>类型声明</h2><p>类型声明在<code>src/switch/interface.ts</code>文件中写入，checked属性是最开始是否被选中，disabled是否可以被禁用，onText开启状态的文本，offText关闭状态的文本，size是组件的尺寸大小，theme组件的颜色，onChange是状态切换时执行的回调函数。</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">SwitchSize</span> <span class=\"token operator\">=</span> <span class=\"token string\">'default'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'sm'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">SwitchChangeEventHandler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  checked<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span>\n  event<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent<span class=\"token operator\">&lt;</span>HTMLButtonElement<span class=\"token operator\">></span> <span class=\"token operator\">|</span> React<span class=\"token punctuation\">.</span>KeyboardEvent<span class=\"token operator\">&lt;</span>HTMLButtonElement<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SwitchProps</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">/* 用户自定义样式 */</span>\n  style<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 是否被选中 */</span>\n  checked<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/* 用户自定义类名 */</span>\n  className<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 组件的尺寸 */</span>\n  size<span class=\"token operator\">?</span><span class=\"token operator\">:</span> SwitchSize<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 是否被禁用 */</span>\n  disabled<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 开启状态的文本 */</span>\n  onText<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 关闭状态的文本 */</span>\n  offText<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** 状态切换时的回调 */</span>\n  onChange<span class=\"token operator\">?</span><span class=\"token operator\">:</span> SwitchChangeEventHandler<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Switch开关实现\"><a href=\"#Switch开关实现\" class=\"headerlink\" title=\"Switch开关实现\"></a>Switch开关实现</h2><p>在<code>src/switch/index.tsx</code>写入核心代码，基于button标签实现的，它有两个子元素<code>div</code>和<code>span</code>。div是一个白色的滑块，使用绝对定位，通过计算left值实现左右的切换，例如点击的时候，滑块的left值是<code>left: calc(100% - 20px);</code>，通过calc计算出的，这就是左右滑动的核心。同时还需要考虑<code>background-color</code>和<code>background-image</code>的优先级问题，最后span标签用来显示文本。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// switch/index.tsx</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> useState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> classNames <span class=\"token keyword\">from</span> <span class=\"token string\">'classnames'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> SwitchProps <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./interface'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * switch\n * @param &#123;checked&#125; bool 是否被选中\n * @param &#123;disabled&#125; bool 是否被禁用\n * @param &#123;onText&#125; string 开启状态的文本\n * @param &#123;offText&#125; string 关闭状态的文本\n * @param &#123;onChange&#125; func 状态切换时的回调\n * @param &#123;size&#125; string Switch组件的尺寸大小\n * @param &#123;theme&#125; string 组件的颜色\n */</span>\n<span class=\"token keyword\">const</span> Switch<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>SwitchProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> size<span class=\"token punctuation\">,</span> checked<span class=\"token punctuation\">,</span> disabled<span class=\"token punctuation\">,</span> onText<span class=\"token punctuation\">,</span> offText<span class=\"token punctuation\">,</span> onChange<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>restProps <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span>\n    props<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/** \n   * 设置初始背景色\n  */</span>\n  <span class=\"token keyword\">const</span> defaultStyle <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">...</span>style<span class=\"token punctuation\">,</span>\n    backgroundColor<span class=\"token operator\">:</span> style<span class=\"token operator\">?.</span>backgroundColor <span class=\"token operator\">||</span> <span class=\"token string\">'#0099ff'</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isChecked<span class=\"token punctuation\">,</span> setChecked<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> classes <span class=\"token operator\">=</span> <span class=\"token function\">classNames</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yolo-switch'</span><span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">'yolo-switch-checked'</span><span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>isChecked<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'yolo-switch-disabled'</span><span class=\"token operator\">:</span> disabled<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">yolo-switch-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>size<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> size<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>MouseEvent<span class=\"token operator\">&lt;</span>HTMLButtonElement<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>disabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      onChange <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isChecked<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">setChecked</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isChecked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n      <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>classes<span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>handleClick<span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>defaultStyle<span class=\"token punctuation\">&#125;</span></span>\n      <span class=\"token spread\"><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">&#125;</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yolo-switch-handle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>yolo-switch-inner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>isChecked <span class=\"token operator\">?</span> onText <span class=\"token operator\">:</span> offText<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Switch<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Switch说明文档\"><a href=\"#Switch说明文档\" class=\"headerlink\" title=\"Switch说明文档\"></a>Switch说明文档</h2><p><code>src/switch/index.md</code></p>\n<h3 id=\"基本使用-1\"><a href=\"#基本使用-1\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Switch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span> <span class=\"token attr-name\">checked</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"禁止使用\"><a href=\"#禁止使用\" class=\"headerlink\" title=\"禁止使用\"></a>禁止使用</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Switch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span> <span class=\"token attr-name\">disabled</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span> <span class=\"token attr-name\">disabled</span> <span class=\"token attr-name\">checked</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"定制主题颜色\"><a href=\"#定制主题颜色\" class=\"headerlink\" title=\"定制主题颜色\"></a>定制主题颜色</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Switch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span> <span class=\"token attr-name\">checked</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span> backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span>  <span class=\"token attr-name\">checked</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span>  <span class=\"token attr-name\">checked</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span>  <span class=\"token attr-name\">checked</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span>  <span class=\"token attr-name\">checked</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span>backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"组件尺寸\"><a href=\"#组件尺寸\" class=\"headerlink\" title=\"组件尺寸\"></a>组件尺寸</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Switch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span> <span class=\"token attr-name\">checked</span> <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sm<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span> <span class=\"token attr-name\">checked</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"开关内容\"><a href=\"#开关内容\" class=\"headerlink\" title=\"开关内容\"></a>开关内容</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Switch <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Switch</span></span>\n        <span class=\"token attr-name\">onText</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'开'</span><span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">offText</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'关'</span><span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span>checked<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>checked<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></span>\n        <span class=\"token attr-name\">checked</span>\n      <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"API-2\"><a href=\"#API-2\" class=\"headerlink\" title=\"API\"></a>API</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>style</td>\n<td>自定义样式，<code>backgroundColor</code>可自定义颜色</td>\n<td><code>string</code></td>\n<td><code>#09f</code></td>\n</tr>\n<tr>\n<td>checked</td>\n<td>是否被选中</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>size</td>\n<td>开关大学</td>\n<td><code>default | sm</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否被禁用</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>onText</td>\n<td>开启状态的文本</td>\n<td><code>string | ReactNode</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>offText</td>\n<td>关闭状态的文本</td>\n<td><code>string | ReactNode</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选中值发生变化时触发</td>\n<td><code>function(checked: boolean, event: Event)</code></td>\n<td>-</td>\n</tr>\n</tbody></table>\n<h3 id=\"Switch文档预览\"><a href=\"#Switch文档预览\" class=\"headerlink\" title=\"Switch文档预览\"></a>Switch文档预览</h3><img src=\"/images/engineering/component-switch001.png\">\n\n<h1 id=\"代码打包输出和发布\"><a href=\"#代码打包输出和发布\" class=\"headerlink\" title=\"代码打包输出和发布\"></a>代码打包输出和发布</h1><h2 id=\"组件库的入口文件\"><a href=\"#组件库的入口文件\" class=\"headerlink\" title=\"组件库的入口文件\"></a>组件库的入口文件</h2><ul>\n<li>组件库的入口文件为 <code>src/index.ts</code></li>\n<li>组件库的全局样式文件为 <code>src/style/index.less</code>或者 <code>src/global.less</code>，两者都可以用来全局样式的提取。</li>\n</ul>\n<h2 id=\"组件的打包\"><a href=\"#组件的打包\" class=\"headerlink\" title=\"组件的打包\"></a>组件的打包</h2><h3 id=\"在根目录新建tsconfig-build-json文件\"><a href=\"#在根目录新建tsconfig-build-json文件\" class=\"headerlink\" title=\"在根目录新建tsconfig.build.json文件\"></a>在根目录新建tsconfig.build.json文件</h3><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 编译之后的存放路径</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ESNext\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES5\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 指定编译之后的目标版本</span>\n    <span class=\"token property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 为每一个js文件生成 .d.ts类型声明文件</span>\n    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// classic 和 Node</span>\n    <span class=\"token property\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//  true 支持 defalut 引入的方式</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/style\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/**/*.md\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"在package-json文件中添加命令\"><a href=\"#在package-json文件中添加命令\" class=\"headerlink\" title=\"在package.json文件中添加命令\"></a>在package.json文件中添加命令</h3><p>分别安装<code>lessc</code>和<code>rimraf</code>依赖，<code>lessc</code>将<code>less</code>转化为<code>css</code>，<code>rimraf</code>用来删除<code>dist</code>目录。</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span> \n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"clean\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rimraf ./dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build:lib\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run clean &amp;&amp; npm run build-ts &amp;&amp; npm run build-css\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build-ts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc -p tsconfig.build.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build-css\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lessc ./src/style/index.less ./dist/index.css\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在执行<code>build-ts</code>发生了很多个报错如下，经过在<a href=\"https://stackoverflow.com/\">stackoverflow</a>上查找相关资料得知，是 <code>@types/react-router-dom</code>和 <code>@types/react-router</code>的版本太低了导致了，把这两个依赖升级到最新版本后，就可以正常打包了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">xxx<span class=\"token operator\">/</span>node_modules<span class=\"token operator\">/</span>@types<span class=\"token operator\">/</span>react<span class=\"token operator\">-</span>router<span class=\"token operator\">-</span>dom<span class=\"token operator\">/</span>index<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">ts</span><span class=\"token punctuation\">(</span><span class=\"token number\">59</span><span class=\"token punctuation\">,</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> error <span class=\"token constant\">TS2694</span><span class=\"token operator\">:</span> Namespace <span class=\"token string\">'\"/node_modules/history/index\"'</span> has no exported member <span class=\"token string\">'LocationState'</span><span class=\"token punctuation\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"本地测试-npm-link\"><a href=\"#本地测试-npm-link\" class=\"headerlink\" title=\"本地测试(npm link)\"></a>本地测试(npm link)</h2><ul>\n<li>在<code>yolo-ui</code>的根目录下执行<code>npm link</code>命令，<code>npm link</code>的作用是可以让未发布的npm包，做本地测试，映射脚本；</li>\n<li>在<code>yolo-ui-test</code>（create-react-app生成的测试项目）工程下执行<code>npm link yolo-ui</code>；</li>\n<li>在<code>yolo-ui-test</code>的<code>package.json</code>中加入<code>yolo-ui</code>依赖。</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span> \n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"yolo-ui\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.1.0\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>分别在 <code>App.tsx</code>和 <code>index.tsx</code>引入组件和组件的样式</li>\n</ul>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// App.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Button <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'yolo-ui'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>App<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello Yolo</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// index.tsx</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"yolo-ui/dist/index.css\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>测试结果如下，本地测试没问题。</li>\n</ul>\n<img src=\"/images/engineering/yolo-build-001.png\">\n\n<h2 id=\"将yolo-ui发布到npm\"><a href=\"#将yolo-ui发布到npm\" class=\"headerlink\" title=\"将yolo-ui发布到npm\"></a>将yolo-ui发布到npm</h2><ul>\n<li>切换npm的源镜像为npm的原生源</li>\n<li>在命令行工具执行npm adduser，填写username、password and email 登录(sign in)</li>\n<li>在package.json添加一些必要信息</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span> \n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"dist\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 发布哪些文件到npm</span>\n  <span class=\"token comment\">// 添加prepublish命令</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"clean\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rimraf ./dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build:lib\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run clean &amp;&amp; npm run build-ts &amp;&amp; npm run build-css\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build-ts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc -p tsconfig.build.json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build-css\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lessc ./src/style/index.less ./dist/index.css\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"prepublish\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build:lib\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>执行npm publish即可发布到npm</p>\n<img src=\"/images/engineering/yolo-npm-publish.png\">\n</li>\n<li><p>此外，还可以在<code>peerDependencies</code>中告诉用户，要使用某某依赖需要安装什么依赖，如下：<br>要使用<code>yolo-ui</code>库，需要安装<code>react</code>和<code>react-dom</code>的16.8.0版本以上。当<code>npm i yolo-ui</code>时，<code>peerDependencies</code>里面的依赖不会被安装，会有一个日志输出，<code>npm warning</code>会提示用户需要安装<code>react</code>和<code>react-dom</code>的依赖。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n<span class=\"token punctuation\">&#123;</span> \n  <span class=\"token property\">\"peerDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"≥16.8.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"react-dom\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"≥16.8.0\"</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"yolo-ui静态文档上传至阿里云服务器\"><a href=\"#yolo-ui静态文档上传至阿里云服务器\" class=\"headerlink\" title=\"yolo-ui静态文档上传至阿里云服务器\"></a>yolo-ui静态文档上传至阿里云服务器</h1><h2 id=\"购买服务器\"><a href=\"#购买服务器\" class=\"headerlink\" title=\"购买服务器\"></a>购买服务器</h2><p>本人买的是阿里云服务器</p>\n<h2 id=\"远程登录服务器桌面-windows\"><a href=\"#远程登录服务器桌面-windows\" class=\"headerlink\" title=\"远程登录服务器桌面(windows)\"></a>远程登录服务器桌面(windows)</h2><ul>\n<li>在window桌面上按 <code>win + R</code>，输入 <code>mstsc</code>，进入远程桌面连接</li>\n<li>如果没有添加windows凭据的，先在 <code>控制面板-&gt;凭据管理器-&gt;windows凭据里添加服务器的凭据</code></li>\n<li>输入账号和密码即可登录服务器远程桌面</li>\n</ul>\n<h2 id=\"安装node环境\"><a href=\"#安装node环境\" class=\"headerlink\" title=\"安装node环境\"></a>安装node环境</h2><ul>\n<li>将node的安装包上传到云服务器，并安装，<code>node -v</code>可以查看版本和是否安装成功</li>\n</ul>\n<h2 id=\"启动静态服务器\"><a href=\"#启动静态服务器\" class=\"headerlink\" title=\"启动静态服务器\"></a>启动静态服务器</h2><ul>\n<li><p>在根目录下 <code>npm init -y</code>，初始化 <code>package.json</code>文件，新建index.js文件</p>\n</li>\n<li><p>上传静态文件docs-dist（dumi 打包的产物）到根目录，docs-dist文件内容如下：</p>\n<img src=\"/images/engineering/yolo-upload001.png\">\n</li>\n<li><p>安装 <code>koa</code>和 <code>koa-static</code>，用来启动一个静态资源服务器。</p>\n</li>\n<li><p>在index.js写入代码：</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">static</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 静态资源目录对于相对入口文件index.js的路径</span>\n<span class=\"token keyword\">const</span> staticPath <span class=\"token operator\">=</span> <span class=\"token string\">'./docs-dist'</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> staticPath<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server is running, port is 80'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在根目录下执行 <code>node index.js</code>，开启服务器成功</li>\n<li>最后在浏览器地址输入云服务器ip地址即可访问</li>\n</ul>\n<h2 id=\"域名的注册和备案\"><a href=\"#域名的注册和备案\" class=\"headerlink\" title=\"域名的注册和备案\"></a>域名的注册和备案</h2><h1 id=\"nginx开启静态服务，并配置二级域名访问\"><a href=\"#nginx开启静态服务，并配置二级域名访问\" class=\"headerlink\" title=\"nginx开启静态服务，并配置二级域名访问\"></a>nginx开启静态服务，并配置二级域名访问</h1><h2 id=\"安装nginx（windows版）\"><a href=\"#安装nginx（windows版）\" class=\"headerlink\" title=\"安装nginx（windows版）\"></a>安装nginx（windows版）</h2><ul>\n<li>进入nginx官网下载安装包: <a href=\"http://nginx.org/en/download.html\">nginx下载</a></li>\n<li>解压下载完成的nginx压缩包</li>\n<li>打开<code>cmd</code>，进入nginx安装包根路径</li>\n<li>输入命令<code>nginx -t</code>：检查nginx是否配置成功</li>\n<li>输入命令<code>start nginx</code>：启动nginx服务</li>\n</ul>\n<h2 id=\"nginx其他常用命令\"><a href=\"#nginx其他常用命令\" class=\"headerlink\" title=\"nginx其他常用命令\"></a>nginx其他常用命令</h2><ul>\n<li><p>修改了配置文件，如nginx.conf，要使修改生效，重启Nginx服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s reload<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>关闭nginx服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>强制关闭Nginx服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">nginx -s stop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"nginx-conf配置文件\"><a href=\"#nginx-conf配置文件\" class=\"headerlink\" title=\"nginx.conf配置文件\"></a>nginx.conf配置文件</h2><ul>\n<li><p>nginx的配置在根目录conf文件夹下的nginx.conf文件中</p>\n</li>\n<li><p>server：代理服务器，可以设定多个代理服务器（每一个server就是一个虚拟服务器），请求进来之后由server的server_name决定该请求访问哪一个服务。</p>\n</li>\n<li><p>以下是在阿里云服务器nginx配置不同域名，访问不同的静态资源的例子，比如访问home和detial，我们只需要把静态文件分别放到<code>C:/v1/home</code>和<code>C:/v1/detial</code>目录下，即可通过<code>http://home.xxxxx.com</code>和<code>http://detial.xxxxx.com</code>分别访问对应的静态资源。</p>\n</li>\n<li><p>与此同时，需要在云服务器官网添加记录，二级域名的<code>home</code>和<code>detial</code>的解析设置</p>\n<pre class=\"line-numbers language-conf\" data-language=\"conf\"><code class=\"language-conf\">server &#123;\n    # 设置监听端口\n    listen      80;\n    server_name  home.xxxxx.com;\n    \n    # 设置url编码格式，解决参数中文乱码问题\n    charset utf-8;\n\t\t\n    location &#x2F; &#123;\n        root C:&#x2F;v1&#x2F;home;  # 设置 root-指定请求资源在服务器上的真实路径，可以写相对路径（相对于nginx安装目录）也可写绝对路径；\n        index index.html index.htm;  # 指定访问主页，会在root设定目录下去找，后面可跟多个页面，依次查找，找到一个即返回；\n    &#125; \n&#125;\n\nserver &#123;\n    # 设置监听端口\n    listen      80;\n    server_name  detial.xxxxx.com;\n    \n    # 设置url编码格式，解决参数中文乱码问题\n    charset utf-8;\n\t\t\n    location &#x2F; &#123;\n        root C:&#x2F;v1&#x2F;detial;  \n        index index.html index.htm;  \n    &#125; \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h1 id=\"YoloUI预览地址\"><a href=\"#YoloUI预览地址\" class=\"headerlink\" title=\"YoloUI预览地址\"></a>YoloUI预览地址</h1><p><a href=\"http://yolo-ui.xyz/\">YoloUI官网</a></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://d.umijs.org/zh-CN/guide\">dumi官方网站</a></li>\n<li><a href=\"https://ant.design/index-cn\">ant-design</a></li>\n<li><a href=\"https://arco.design/\">arco-design</a></li>\n<li><a href=\"https://github.com/Jacky-Summer/monki-ui\">monki-ui</a></li>\n<li><a href=\"https://juejin.cn/post/6844904160568016910\">最详细的React组件库搭建总结</a></li>\n<li><a href=\"https://blog.csdn.net/zorro_jin/article/details/84927408?spm=1001.2014.3001.5506\">Nginx在windows下的安装、运行，以及配置文件讲解</a></li>\n</ul>\n"},{"title":"前端面试八股文","date":"2020-08-22T12:05:02.000Z","toc":true,"comments":1,"copyright":false,"_content":"# 前端面试复习\n- [中高级前端大厂面试秘籍](https://juejin.cn/post/6844903776512393224)\n- [聊聊前端面试](https://juejin.cn/post/6964658454543728647)\n- [「2021」高频前端面试题汇总之手写代码篇](https://juejin.cn/post/6946136940164939813)\n- [前端面试复习计划](https://juejin.cn/post/7061588533214969892)\n- [2022年我的前端面试准备](https://juejin.cn/post/7072158430294704135)\n- [XPoet's Blog](https://xpoet.cn/)\n","source":"_posts/interview/interview01.md","raw":"---\ntitle: 前端面试八股文\ndate: 2020-08-22 12:05:2\ncategories:\n  - 前端\ntags:\n  - 面试\ntoc: true # 是否启用内容索引\ncomments: true\ncopyright: false\n---\n# 前端面试复习\n- [中高级前端大厂面试秘籍](https://juejin.cn/post/6844903776512393224)\n- [聊聊前端面试](https://juejin.cn/post/6964658454543728647)\n- [「2021」高频前端面试题汇总之手写代码篇](https://juejin.cn/post/6946136940164939813)\n- [前端面试复习计划](https://juejin.cn/post/7061588533214969892)\n- [2022年我的前端面试准备](https://juejin.cn/post/7072158430294704135)\n- [XPoet's Blog](https://xpoet.cn/)\n","slug":"interview/interview01","published":1,"updated":"2022-07-09T17:38:16.516Z","layout":"post","photos":[],"link":"","_id":"cl5f0bihx000bv4uw0u87ed2o","content":"<h1 id=\"前端面试复习\"><a href=\"#前端面试复习\" class=\"headerlink\" title=\"前端面试复习\"></a>前端面试复习</h1><ul>\n<li><a href=\"https://juejin.cn/post/6844903776512393224\">中高级前端大厂面试秘籍</a></li>\n<li><a href=\"https://juejin.cn/post/6964658454543728647\">聊聊前端面试</a></li>\n<li><a href=\"https://juejin.cn/post/6946136940164939813\">「2021」高频前端面试题汇总之手写代码篇</a></li>\n<li><a href=\"https://juejin.cn/post/7061588533214969892\">前端面试复习计划</a></li>\n<li><a href=\"https://juejin.cn/post/7072158430294704135\">2022年我的前端面试准备</a></li>\n<li><a href=\"https://xpoet.cn/\">XPoet’s Blog</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前端面试复习\"><a href=\"#前端面试复习\" class=\"headerlink\" title=\"前端面试复习\"></a>前端面试复习</h1><ul>\n<li><a href=\"https://juejin.cn/post/6844903776512393224\">中高级前端大厂面试秘籍</a></li>\n<li><a href=\"https://juejin.cn/post/6964658454543728647\">聊聊前端面试</a></li>\n<li><a href=\"https://juejin.cn/post/6946136940164939813\">「2021」高频前端面试题汇总之手写代码篇</a></li>\n<li><a href=\"https://juejin.cn/post/7061588533214969892\">前端面试复习计划</a></li>\n<li><a href=\"https://juejin.cn/post/7072158430294704135\">2022年我的前端面试准备</a></li>\n<li><a href=\"https://xpoet.cn/\">XPoet’s Blog</a></li>\n</ul>\n"},{"title":"【JavaScript】写出高质量的JS代码","date":"2020-12-20T11:28:51.000Z","toc":true,"comments":1,"copyright":false,"_content":"- 尽量少用全局变量，带来的第三方的 JavaScript 库、不同js文件同名变量的冲突。\n- 尽量使用 === ，减少==的隐式转化\n- 构造函数和组件首字母要大写，其他一般采取小驼峰命名。\n- 使用空格分开所有的操作符和操作对象，在+，-，*，=，<，>，<=，>=，===，!==，&&，||，+=等前后都需要空格。\n\n### 一 、注释代码\n\n```javascript\n//1、一个函数解决一个问题的注释\nconst fun = () => {}\n\n//2、多个函数实现某个功能\n  //当按钮点击时——begin\n  const fun_01 = () => {}\n  const fun_02 = () => {}\n  const fun_03 = () => {}\n  //当按钮点击时——end\n```\n\n### 二、你更习惯哪种写法读取属性值？推荐——解构赋值\n\n#### 1、代码冗余、不高效、不直观代\n\n```javascript\nhandleResizerMove = (event) => {\n    if (this.props.visible) {\n        let newmoveX = this.state.moveX + (event.clientX - this.state.x);\n        if (this.props.defaultwidth + newmoveX < this.props.minwidth) {\n            newmoveX = this.props.minwidth - this.props.defaultwidth;\n            this.setState({\n                left: this.props.left + newmoveX,\n                x: event.clientX,\n                moveX: newmoveX\n            });\n            this.props.onChange && this.props.onChange(event, this.props.moveX, this.props.dataSource);\n            Event.stopPropagation(event);\n        }\n    }\n}\n```\n\n#### 2、推荐写法：解构赋值读取属性值\n\n```javascript\nhandleResizerMove = (event) => {\n    const { visible, left, dataSource, onChange, defaultwidth, minwidth } = this.props;\n    const { x, moveX } = this.state;\n    if (visible) {\n        //计算出移动的距离，向左移动则值小于0，右右移动则值大于0\n        let newmoveX = moveX + (event.clientX - x);\n        if (defaultwidth + newmoveX < minwidth) {\n            //超过最小宽度则使用最小宽度\n            newmoveX = minwidth - defaultWidth;\n        }\n        this.setState({ left: left + newmoveX, x: event.clientX, moveX: newmoveX });\n        onChange && onChange(event, moveX, dataSource);\n        Event.stopPropagation(event);\n    }\n}\n```\n\n### 三、if多条件简化写法\n\n```javascript\n  // 不推荐这样写：\n  let test;\n  if (x > 10) {\n     test = true;\n  } else {\n     test = false;\n  }\n\n  // 推荐做法：\n  let test = (x > 10) ? true : false;\n  // 或者\n  let test = x > 10;\n\n  // 不推荐:\n  if (x === 'a' || x === 'b' || x === 'c' || x ==='d') {\n     //do something\n  }\n\n  // 推荐做法：\n  if(['a', 'b', 'c', 'd'].includes(x)) {\n     //do something\n  }\n\n```\n\n### 四、方法调用简化写法\n\n```javascript\n// 不推荐：\nvar test = 1;\nif (test === 1) {\n   helper1();\n} else {\n   helper2();\n}\n\n// 推荐做法：\ntest === 1 ? helper1() : helper2();\n// 或者\n(test === 1 ? helper1 : helper2)();\n\n// 不推荐:\nif (condition) {\n   callMethod(); \n}\n// 推荐做法：\ncondition && callMethod();\n```\n\n### 五、默认属性写法\n\n```javascript\nlet test1 = 0;\nlet test2 = 'value';\nlet test3 = {};\n// 优化写法:\nlet [test1, test2, test3] = [0, 'value', {}];\n\n\nif (test === undefined){\n test = 1;\n}\n// 推荐写法:\ntest = test || 1;\n```\n\n### 六、属性排除写法\n\n排除某些对象的属性，不需要使用第三方库，可以直接使用解构赋值。\n\n```javascript\nimport omit from 'omit.js'; // 引入第三方库\n// 场景：去掉props对象的某些属性，把剩余属性放到other对象中。\nlet props={\n  'inputIcon':'a',\n  'removeIcon','b',\n  'clearIcon':'c',\n  'switcherIcon':'d',\n  'type':1,\n  'status':2,\n  info:{},\n  visible:true\n}\n// 不太推荐的做法：\nconst others= omit(props, ['inputIcon', 'removeIcon', 'clearIcon', 'switcherIcon']);\n\n// 推荐做法：利用解构赋值，把pros其他属性放到 other 中\nconst {inputIcon, removeIcon, clearIcon, switcherIcon, ...others} = props;\n```\n\n### 七、for循环/for...in循环/for...of循环\n\n哪个写法的效率更高——答案是：普通for循环\n\n- forEach 遍历列表值，不能使用 break 语句或使用 return 语句结束循环\n- for in 遍历对象键值(key)，或者数组下标，不推荐循环一个数组\n- for of 遍历列表值，允许遍历 Arrays，Strings，Map（哈希），Set（集合）等可迭代的数据结构，for of循环出的是value值，不能循环普通的对象（Object 没有 `Symbol.iterator`属性）\n\n```javascript\n// 测试数据\nlet arr = [];\nfor(let count = 0; count < 99999; count++){\n  arr[count] = count;\n}\n```\n\n```javascript\n\n\n// 在for循环过程中，提前获取数组长度，只检索了一次长度值。\nfor (let i = 0, len = arr.length; i < len; i++) {\n    // do something\n}\n\nfor (let key in arr) {\n    // do something\n}\n\nfor (let value in arr) {\n    // do something\n}\n\n// for: 2.4900375016 ms\n// for in: 17.1098265997 ms\n// for of: 7.4388625005 ms\n```\n\n### 八、求数组最大最小值\n\n```javascript\nconst arr = [1, 2, 3, 4, 5, 6];\nMath.max(…arr); \nMath.min(…arr);\n```\n\n### 九、查找匹配\n\n```javascript\nconst data = [\n    { type: 'boy', name: 'Mark' },\n    { type: 'girl', name: 'Amy' },\n    { type: 'boy', name: 'Bob' }\n]\n\nfunction findData(type, name) {\n    for (let i = 0; i < data.length; ++i) {\n        if (data[i].type === type && data[i].name === name) {\n            return data[i];\n        }\n    }\n}\nlet result = findData('boy', 'Mark');\n\n// 优化方法\nfunction findData(data, type, name) {\n    return data.find((item) => { return item.type === type && item.name === name });\n}\nlet result = findData(data, 'boy', 'Mark');\n```\n\n### 十、事件代理\n\n```html\n    <ul>\n        <li>test01</li>\n        <li>test02</li>\n        <li>test03</li>\n        <li>test04</li>\n        <li>test05</li>\n    </ul>\n```\n\n```javascript\ndocument.querySelectorAll('li').forEach((e) => {\n   e.onclick = function() {\n   //do something\n   }\n})\n\n//(addEventLstener) 推荐做法: \ndocument.querySelector('ul').onclick = (e) => {\n   if (e.target.nodeName === 'li') {\n  \t\t//do something \n   }\n}\n```\n\n### 十一、DOM操作写法\n\n##### （1）DOM写入操作写法\n\n```javascript\n// 非常不推荐：\nfor (let i = 0; i < 99999; i++) {\n    let test = document.getElementById('test').innerHTML;\n    //do something\n}\n//推荐写法：先获取DOM节点，再用该节点进行doSomething\nvar test = document.getElementById('test');\nfor (let i = 0; i < 99999; i++) {\n    let title = test.innerHTML;\n    //do something\n}\n\n// 非常不推荐：\nfor (let i = 0; i < 99999; i++) {\n    document.getElementById('test').innerHTML = '<span>' + i + '</span>';\n}\n//推荐写法：\nvar html = '';\nfor (let i = 0; i < 99999; i++) {\n    html += '<span>' + i + '</span>';\n}\ndocument.getElementById('test').innerHTML = html;\n\n//document.createDocumentFragment\n```\n\n### 十二、If Else / Switch 写法\n\n```javascript\n// if-else做法：\nif (type === 1) {\n    return '已提交';\n} else if (type === 2) {\n    return '审批中';\n} else if (type === 3) {\n    return '审批通过';\n} else if (type === 0) {\n    return '审批驳回';\n}\n// switch做法：\nswitch (type) {\n    case 1:\n        return '已提交';\n    case 2:\n        return '审批中';\n    case 3:\n        return '审批通过';\n    case 0: return '审批驳回';\n}\n//推荐做法:将键值存在对象中，再获取\nlet map = {\n    1: '已提交',\n    2: '审批中',\n    3: '审批通过',\n    0: '审批驳回'\n};\nlet typeStr = map[type];\n\n\n// if-else做法：\nif (type === 'add') {\n    doAdd();\n} else if (type === 'delete') {\n    doDelete();\n} else if (type === 'edit') {\n    doEdit();\n} else if (type === 'view') {\n    doView();\n}\n// switch做法：\nswitch (type) {\n    case 'add':\n        doAdd();\n        break;\n    case 'delete':\n        doDelete();\n        break;\n    case 'edit':\n        doEdit();\n        break;\n    case 'view':\n        doView();\n        break;\n}\n\n//推荐做法:将键值存在对象中，再获取\nvar map = {\n    'add': doAdd,\n    'delete': doDelete,\n    'edit': doEdit,\n    'view': doView\n};\nmap[type] && map[type]();\n\n```\n","source":"_posts/front_end/high-quality-code.md","raw":"---\ntitle: 【JavaScript】写出高质量的JS代码\ndate: 2020-12-20 11:28:51\ncategories:\n  - 前端\ntags:\n  - JavaScript\ntoc: true # 是否启用内容索引\ncomments: true\ncopyright: false\n---\n- 尽量少用全局变量，带来的第三方的 JavaScript 库、不同js文件同名变量的冲突。\n- 尽量使用 === ，减少==的隐式转化\n- 构造函数和组件首字母要大写，其他一般采取小驼峰命名。\n- 使用空格分开所有的操作符和操作对象，在+，-，*，=，<，>，<=，>=，===，!==，&&，||，+=等前后都需要空格。\n\n### 一 、注释代码\n\n```javascript\n//1、一个函数解决一个问题的注释\nconst fun = () => {}\n\n//2、多个函数实现某个功能\n  //当按钮点击时——begin\n  const fun_01 = () => {}\n  const fun_02 = () => {}\n  const fun_03 = () => {}\n  //当按钮点击时——end\n```\n\n### 二、你更习惯哪种写法读取属性值？推荐——解构赋值\n\n#### 1、代码冗余、不高效、不直观代\n\n```javascript\nhandleResizerMove = (event) => {\n    if (this.props.visible) {\n        let newmoveX = this.state.moveX + (event.clientX - this.state.x);\n        if (this.props.defaultwidth + newmoveX < this.props.minwidth) {\n            newmoveX = this.props.minwidth - this.props.defaultwidth;\n            this.setState({\n                left: this.props.left + newmoveX,\n                x: event.clientX,\n                moveX: newmoveX\n            });\n            this.props.onChange && this.props.onChange(event, this.props.moveX, this.props.dataSource);\n            Event.stopPropagation(event);\n        }\n    }\n}\n```\n\n#### 2、推荐写法：解构赋值读取属性值\n\n```javascript\nhandleResizerMove = (event) => {\n    const { visible, left, dataSource, onChange, defaultwidth, minwidth } = this.props;\n    const { x, moveX } = this.state;\n    if (visible) {\n        //计算出移动的距离，向左移动则值小于0，右右移动则值大于0\n        let newmoveX = moveX + (event.clientX - x);\n        if (defaultwidth + newmoveX < minwidth) {\n            //超过最小宽度则使用最小宽度\n            newmoveX = minwidth - defaultWidth;\n        }\n        this.setState({ left: left + newmoveX, x: event.clientX, moveX: newmoveX });\n        onChange && onChange(event, moveX, dataSource);\n        Event.stopPropagation(event);\n    }\n}\n```\n\n### 三、if多条件简化写法\n\n```javascript\n  // 不推荐这样写：\n  let test;\n  if (x > 10) {\n     test = true;\n  } else {\n     test = false;\n  }\n\n  // 推荐做法：\n  let test = (x > 10) ? true : false;\n  // 或者\n  let test = x > 10;\n\n  // 不推荐:\n  if (x === 'a' || x === 'b' || x === 'c' || x ==='d') {\n     //do something\n  }\n\n  // 推荐做法：\n  if(['a', 'b', 'c', 'd'].includes(x)) {\n     //do something\n  }\n\n```\n\n### 四、方法调用简化写法\n\n```javascript\n// 不推荐：\nvar test = 1;\nif (test === 1) {\n   helper1();\n} else {\n   helper2();\n}\n\n// 推荐做法：\ntest === 1 ? helper1() : helper2();\n// 或者\n(test === 1 ? helper1 : helper2)();\n\n// 不推荐:\nif (condition) {\n   callMethod(); \n}\n// 推荐做法：\ncondition && callMethod();\n```\n\n### 五、默认属性写法\n\n```javascript\nlet test1 = 0;\nlet test2 = 'value';\nlet test3 = {};\n// 优化写法:\nlet [test1, test2, test3] = [0, 'value', {}];\n\n\nif (test === undefined){\n test = 1;\n}\n// 推荐写法:\ntest = test || 1;\n```\n\n### 六、属性排除写法\n\n排除某些对象的属性，不需要使用第三方库，可以直接使用解构赋值。\n\n```javascript\nimport omit from 'omit.js'; // 引入第三方库\n// 场景：去掉props对象的某些属性，把剩余属性放到other对象中。\nlet props={\n  'inputIcon':'a',\n  'removeIcon','b',\n  'clearIcon':'c',\n  'switcherIcon':'d',\n  'type':1,\n  'status':2,\n  info:{},\n  visible:true\n}\n// 不太推荐的做法：\nconst others= omit(props, ['inputIcon', 'removeIcon', 'clearIcon', 'switcherIcon']);\n\n// 推荐做法：利用解构赋值，把pros其他属性放到 other 中\nconst {inputIcon, removeIcon, clearIcon, switcherIcon, ...others} = props;\n```\n\n### 七、for循环/for...in循环/for...of循环\n\n哪个写法的效率更高——答案是：普通for循环\n\n- forEach 遍历列表值，不能使用 break 语句或使用 return 语句结束循环\n- for in 遍历对象键值(key)，或者数组下标，不推荐循环一个数组\n- for of 遍历列表值，允许遍历 Arrays，Strings，Map（哈希），Set（集合）等可迭代的数据结构，for of循环出的是value值，不能循环普通的对象（Object 没有 `Symbol.iterator`属性）\n\n```javascript\n// 测试数据\nlet arr = [];\nfor(let count = 0; count < 99999; count++){\n  arr[count] = count;\n}\n```\n\n```javascript\n\n\n// 在for循环过程中，提前获取数组长度，只检索了一次长度值。\nfor (let i = 0, len = arr.length; i < len; i++) {\n    // do something\n}\n\nfor (let key in arr) {\n    // do something\n}\n\nfor (let value in arr) {\n    // do something\n}\n\n// for: 2.4900375016 ms\n// for in: 17.1098265997 ms\n// for of: 7.4388625005 ms\n```\n\n### 八、求数组最大最小值\n\n```javascript\nconst arr = [1, 2, 3, 4, 5, 6];\nMath.max(…arr); \nMath.min(…arr);\n```\n\n### 九、查找匹配\n\n```javascript\nconst data = [\n    { type: 'boy', name: 'Mark' },\n    { type: 'girl', name: 'Amy' },\n    { type: 'boy', name: 'Bob' }\n]\n\nfunction findData(type, name) {\n    for (let i = 0; i < data.length; ++i) {\n        if (data[i].type === type && data[i].name === name) {\n            return data[i];\n        }\n    }\n}\nlet result = findData('boy', 'Mark');\n\n// 优化方法\nfunction findData(data, type, name) {\n    return data.find((item) => { return item.type === type && item.name === name });\n}\nlet result = findData(data, 'boy', 'Mark');\n```\n\n### 十、事件代理\n\n```html\n    <ul>\n        <li>test01</li>\n        <li>test02</li>\n        <li>test03</li>\n        <li>test04</li>\n        <li>test05</li>\n    </ul>\n```\n\n```javascript\ndocument.querySelectorAll('li').forEach((e) => {\n   e.onclick = function() {\n   //do something\n   }\n})\n\n//(addEventLstener) 推荐做法: \ndocument.querySelector('ul').onclick = (e) => {\n   if (e.target.nodeName === 'li') {\n  \t\t//do something \n   }\n}\n```\n\n### 十一、DOM操作写法\n\n##### （1）DOM写入操作写法\n\n```javascript\n// 非常不推荐：\nfor (let i = 0; i < 99999; i++) {\n    let test = document.getElementById('test').innerHTML;\n    //do something\n}\n//推荐写法：先获取DOM节点，再用该节点进行doSomething\nvar test = document.getElementById('test');\nfor (let i = 0; i < 99999; i++) {\n    let title = test.innerHTML;\n    //do something\n}\n\n// 非常不推荐：\nfor (let i = 0; i < 99999; i++) {\n    document.getElementById('test').innerHTML = '<span>' + i + '</span>';\n}\n//推荐写法：\nvar html = '';\nfor (let i = 0; i < 99999; i++) {\n    html += '<span>' + i + '</span>';\n}\ndocument.getElementById('test').innerHTML = html;\n\n//document.createDocumentFragment\n```\n\n### 十二、If Else / Switch 写法\n\n```javascript\n// if-else做法：\nif (type === 1) {\n    return '已提交';\n} else if (type === 2) {\n    return '审批中';\n} else if (type === 3) {\n    return '审批通过';\n} else if (type === 0) {\n    return '审批驳回';\n}\n// switch做法：\nswitch (type) {\n    case 1:\n        return '已提交';\n    case 2:\n        return '审批中';\n    case 3:\n        return '审批通过';\n    case 0: return '审批驳回';\n}\n//推荐做法:将键值存在对象中，再获取\nlet map = {\n    1: '已提交',\n    2: '审批中',\n    3: '审批通过',\n    0: '审批驳回'\n};\nlet typeStr = map[type];\n\n\n// if-else做法：\nif (type === 'add') {\n    doAdd();\n} else if (type === 'delete') {\n    doDelete();\n} else if (type === 'edit') {\n    doEdit();\n} else if (type === 'view') {\n    doView();\n}\n// switch做法：\nswitch (type) {\n    case 'add':\n        doAdd();\n        break;\n    case 'delete':\n        doDelete();\n        break;\n    case 'edit':\n        doEdit();\n        break;\n    case 'view':\n        doView();\n        break;\n}\n\n//推荐做法:将键值存在对象中，再获取\nvar map = {\n    'add': doAdd,\n    'delete': doDelete,\n    'edit': doEdit,\n    'view': doView\n};\nmap[type] && map[type]();\n\n```\n","slug":"front_end/high-quality-code","published":1,"updated":"2022-07-04T14:38:08.454Z","layout":"post","photos":[],"link":"","_id":"cl5f0bihz000gv4uw3iibal85","content":"<ul>\n<li>尽量少用全局变量，带来的第三方的 JavaScript 库、不同js文件同名变量的冲突。</li>\n<li>尽量使用 &#x3D;&#x3D;&#x3D; ，减少&#x3D;&#x3D;的隐式转化</li>\n<li>构造函数和组件首字母要大写，其他一般采取小驼峰命名。</li>\n<li>使用空格分开所有的操作符和操作对象，在+，-，*，&#x3D;，&lt;，&gt;，&lt;&#x3D;，&gt;&#x3D;，&#x3D;&#x3D;&#x3D;，!&#x3D;&#x3D;，&amp;&amp;，||，+&#x3D;等前后都需要空格。</li>\n</ul>\n<h3 id=\"一-、注释代码\"><a href=\"#一-、注释代码\" class=\"headerlink\" title=\"一 、注释代码\"></a>一 、注释代码</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//1、一个函数解决一个问题的注释</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//2、多个函数实现某个功能</span>\n  <span class=\"token comment\">//当按钮点击时——begin</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fun_01</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fun_02</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fun_03</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">//当按钮点击时——end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"二、你更习惯哪种写法读取属性值？推荐——解构赋值\"><a href=\"#二、你更习惯哪种写法读取属性值？推荐——解构赋值\" class=\"headerlink\" title=\"二、你更习惯哪种写法读取属性值？推荐——解构赋值\"></a>二、你更习惯哪种写法读取属性值？推荐——解构赋值</h3><h4 id=\"1、代码冗余、不高效、不直观代\"><a href=\"#1、代码冗余、不高效、不直观代\" class=\"headerlink\" title=\"1、代码冗余、不高效、不直观代\"></a>1、代码冗余、不高效、不直观代</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">handleResizerMove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> newmoveX <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>moveX <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>defaultwidth <span class=\"token operator\">+</span> newmoveX <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>minwidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            newmoveX <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>minwidth <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>defaultwidth<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+</span> newmoveX<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">moveX</span><span class=\"token operator\">:</span> newmoveX\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>onChange <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>moveX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Event<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2、推荐写法：解构赋值读取属性值\"><a href=\"#2、推荐写法：解构赋值读取属性值\" class=\"headerlink\" title=\"2、推荐写法：解构赋值读取属性值\"></a>2、推荐写法：解构赋值读取属性值</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">handleResizerMove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> visible<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> dataSource<span class=\"token punctuation\">,</span> onChange<span class=\"token punctuation\">,</span> defaultwidth<span class=\"token punctuation\">,</span> minwidth <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token punctuation\">,</span> moveX <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//计算出移动的距离，向左移动则值小于0，右右移动则值大于0</span>\n        <span class=\"token keyword\">let</span> newmoveX <span class=\"token operator\">=</span> moveX <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">-</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>defaultwidth <span class=\"token operator\">+</span> newmoveX <span class=\"token operator\">&lt;</span> minwidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//超过最小宽度则使用最小宽度</span>\n            newmoveX <span class=\"token operator\">=</span> minwidth <span class=\"token operator\">-</span> defaultWidth<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> left <span class=\"token operator\">+</span> newmoveX<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">moveX</span><span class=\"token operator\">:</span> newmoveX <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        onChange <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> moveX<span class=\"token punctuation\">,</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Event<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"三、if多条件简化写法\"><a href=\"#三、if多条件简化写法\" class=\"headerlink\" title=\"三、if多条件简化写法\"></a>三、if多条件简化写法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 不推荐这样写：</span>\n<span class=\"token keyword\">let</span> test<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   test <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n   test <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 推荐做法：</span>\n<span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> x <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 不推荐:</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'c'</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//do something</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 推荐做法：</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//do something</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"四、方法调用简化写法\"><a href=\"#四、方法调用简化写法\" class=\"headerlink\" title=\"四、方法调用简化写法\"></a>四、方法调用简化写法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 不推荐：</span>\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">helper1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">helper2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 推荐做法：</span>\ntest <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token function\">helper1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">helper2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token punctuation\">(</span>test <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> helper1 <span class=\"token operator\">:</span> helper2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 不推荐:</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">callMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 推荐做法：</span>\ncondition <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"五、默认属性写法\"><a href=\"#五、默认属性写法\" class=\"headerlink\" title=\"五、默认属性写法\"></a>五、默认属性写法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> test1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> test2 <span class=\"token operator\">=</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> test3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 优化写法:</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>test1<span class=\"token punctuation\">,</span> test2<span class=\"token punctuation\">,</span> test3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n test <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 推荐写法:</span>\ntest <span class=\"token operator\">=</span> test <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"六、属性排除写法\"><a href=\"#六、属性排除写法\" class=\"headerlink\" title=\"六、属性排除写法\"></a>六、属性排除写法</h3><p>排除某些对象的属性，不需要使用第三方库，可以直接使用解构赋值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> omit <span class=\"token keyword\">from</span> <span class=\"token string\">'omit.js'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入第三方库</span>\n<span class=\"token comment\">// 场景：去掉props对象的某些属性，把剩余属性放到other对象中。</span>\n<span class=\"token keyword\">let</span> props<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string-property property\">'inputIcon'</span><span class=\"token operator\">:</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'removeIcon'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'clearIcon'</span><span class=\"token operator\">:</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'switcherIcon'</span><span class=\"token operator\">:</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'type'</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'status'</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">visible</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 不太推荐的做法：</span>\n<span class=\"token keyword\">const</span> others<span class=\"token operator\">=</span> <span class=\"token function\">omit</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'inputIcon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'removeIcon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'clearIcon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'switcherIcon'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 推荐做法：利用解构赋值，把pros其他属性放到 other 中</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>inputIcon<span class=\"token punctuation\">,</span> removeIcon<span class=\"token punctuation\">,</span> clearIcon<span class=\"token punctuation\">,</span> switcherIcon<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>others<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"七、for循环-x2F-for…in循环-x2F-for…of循环\"><a href=\"#七、for循环-x2F-for…in循环-x2F-for…of循环\" class=\"headerlink\" title=\"七、for循环&#x2F;for…in循环&#x2F;for…of循环\"></a>七、for循环&#x2F;for…in循环&#x2F;for…of循环</h3><p>哪个写法的效率更高——答案是：普通for循环</p>\n<ul>\n<li>forEach 遍历列表值，不能使用 break 语句或使用 return 语句结束循环</li>\n<li>for in 遍历对象键值(key)，或者数组下标，不推荐循环一个数组</li>\n<li>for of 遍历列表值，允许遍历 Arrays，Strings，Map（哈希），Set（集合）等可迭代的数据结构，for of循环出的是value值，不能循环普通的对象（Object 没有 <code>Symbol.iterator</code>属性）</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 测试数据</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">99999</span><span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  arr<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n\n<span class=\"token comment\">// 在for循环过程中，提前获取数组长度，只检索了一次长度值。</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// for: 2.4900375016 ms</span>\n<span class=\"token comment\">// for in: 17.1098265997 ms</span>\n<span class=\"token comment\">// for of: 7.4388625005 ms</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"八、求数组最大最小值\"><a href=\"#八、求数组最大最小值\" class=\"headerlink\" title=\"八、求数组最大最小值\"></a>八、求数组最大最小值</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>…arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nMath<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>…arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"九、查找匹配\"><a href=\"#九、查找匹配\" class=\"headerlink\" title=\"九、查找匹配\"></a>九、查找匹配</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'boy'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mark'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'girl'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Amy'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'boy'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">findData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> type <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">findData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'boy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 优化方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">findData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> type <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> name <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">findData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'boy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"十、事件代理\"><a href=\"#十、事件代理\" class=\"headerlink\" title=\"十、事件代理\"></a>十、事件代理</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>test01<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>test02<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>test03<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>test04<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>test05<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n   e<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//do something</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//(addEventLstener) 推荐做法: </span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">===</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  \t\t<span class=\"token comment\">//do something </span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"十一、DOM操作写法\"><a href=\"#十一、DOM操作写法\" class=\"headerlink\" title=\"十一、DOM操作写法\"></a>十一、DOM操作写法</h3><h5 id=\"（1）DOM写入操作写法\"><a href=\"#（1）DOM写入操作写法\" class=\"headerlink\" title=\"（1）DOM写入操作写法\"></a>（1）DOM写入操作写法</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 非常不推荐：</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">99999</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//do something</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//推荐写法：先获取DOM节点，再用该节点进行doSomething</span>\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">99999</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> title <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//do something</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 非常不推荐：</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">99999</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;span>'</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/span>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//推荐写法：</span>\n<span class=\"token keyword\">var</span> html <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">99999</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    html <span class=\"token operator\">+=</span> <span class=\"token string\">'&lt;span>'</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/span>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> html<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//document.createDocumentFragment</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"十二、If-Else-x2F-Switch-写法\"><a href=\"#十二、If-Else-x2F-Switch-写法\" class=\"headerlink\" title=\"十二、If Else &#x2F; Switch 写法\"></a>十二、If Else &#x2F; Switch 写法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// if-else做法：</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'已提交'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'审批中'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'审批通过'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'审批驳回'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// switch做法：</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'已提交'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'审批中'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'审批通过'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'审批驳回'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//推荐做法:将键值存在对象中，再获取</span>\n<span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">'已提交'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">'审批中'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token string\">'审批通过'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">'审批驳回'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> typeStr <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// if-else做法：</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">doAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">doDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'edit'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">doEdit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'view'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">doView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// switch做法：</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'add'</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">doAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'delete'</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">doDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'edit'</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">doEdit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'view'</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">doView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//推荐做法:将键值存在对象中，再获取</span>\n<span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">'add'</span><span class=\"token operator\">:</span> doAdd<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'delete'</span><span class=\"token operator\">:</span> doDelete<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'edit'</span><span class=\"token operator\">:</span> doEdit<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'view'</span><span class=\"token operator\">:</span> doView\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>尽量少用全局变量，带来的第三方的 JavaScript 库、不同js文件同名变量的冲突。</li>\n<li>尽量使用 &#x3D;&#x3D;&#x3D; ，减少&#x3D;&#x3D;的隐式转化</li>\n<li>构造函数和组件首字母要大写，其他一般采取小驼峰命名。</li>\n<li>使用空格分开所有的操作符和操作对象，在+，-，*，&#x3D;，&lt;，&gt;，&lt;&#x3D;，&gt;&#x3D;，&#x3D;&#x3D;&#x3D;，!&#x3D;&#x3D;，&amp;&amp;，||，+&#x3D;等前后都需要空格。</li>\n</ul>\n<h3 id=\"一-、注释代码\"><a href=\"#一-、注释代码\" class=\"headerlink\" title=\"一 、注释代码\"></a>一 、注释代码</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//1、一个函数解决一个问题的注释</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//2、多个函数实现某个功能</span>\n  <span class=\"token comment\">//当按钮点击时——begin</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fun_01</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fun_02</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fun_03</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">//当按钮点击时——end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"二、你更习惯哪种写法读取属性值？推荐——解构赋值\"><a href=\"#二、你更习惯哪种写法读取属性值？推荐——解构赋值\" class=\"headerlink\" title=\"二、你更习惯哪种写法读取属性值？推荐——解构赋值\"></a>二、你更习惯哪种写法读取属性值？推荐——解构赋值</h3><h4 id=\"1、代码冗余、不高效、不直观代\"><a href=\"#1、代码冗余、不高效、不直观代\" class=\"headerlink\" title=\"1、代码冗余、不高效、不直观代\"></a>1、代码冗余、不高效、不直观代</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">handleResizerMove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>visible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> newmoveX <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>moveX <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>defaultwidth <span class=\"token operator\">+</span> newmoveX <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>minwidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            newmoveX <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>minwidth <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>defaultwidth<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>left <span class=\"token operator\">+</span> newmoveX<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">moveX</span><span class=\"token operator\">:</span> newmoveX\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>onChange <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>moveX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Event<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2、推荐写法：解构赋值读取属性值\"><a href=\"#2、推荐写法：解构赋值读取属性值\" class=\"headerlink\" title=\"2、推荐写法：解构赋值读取属性值\"></a>2、推荐写法：解构赋值读取属性值</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function-variable function\">handleResizerMove</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> visible<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> dataSource<span class=\"token punctuation\">,</span> onChange<span class=\"token punctuation\">,</span> defaultwidth<span class=\"token punctuation\">,</span> minwidth <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token punctuation\">,</span> moveX <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>visible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//计算出移动的距离，向左移动则值小于0，右右移动则值大于0</span>\n        <span class=\"token keyword\">let</span> newmoveX <span class=\"token operator\">=</span> moveX <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">-</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>defaultwidth <span class=\"token operator\">+</span> newmoveX <span class=\"token operator\">&lt;</span> minwidth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//超过最小宽度则使用最小宽度</span>\n            newmoveX <span class=\"token operator\">=</span> minwidth <span class=\"token operator\">-</span> defaultWidth<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">left</span><span class=\"token operator\">:</span> left <span class=\"token operator\">+</span> newmoveX<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>clientX<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">moveX</span><span class=\"token operator\">:</span> newmoveX <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        onChange <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> moveX<span class=\"token punctuation\">,</span> dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Event<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"三、if多条件简化写法\"><a href=\"#三、if多条件简化写法\" class=\"headerlink\" title=\"三、if多条件简化写法\"></a>三、if多条件简化写法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 不推荐这样写：</span>\n<span class=\"token keyword\">let</span> test<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   test <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n   test <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 推荐做法：</span>\n<span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> x <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 不推荐:</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span> <span class=\"token string\">'c'</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//do something</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 推荐做法：</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//do something</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"四、方法调用简化写法\"><a href=\"#四、方法调用简化写法\" class=\"headerlink\" title=\"四、方法调用简化写法\"></a>四、方法调用简化写法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 不推荐：</span>\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">helper1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">helper2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 推荐做法：</span>\ntest <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token function\">helper1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">helper2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 或者</span>\n<span class=\"token punctuation\">(</span>test <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> helper1 <span class=\"token operator\">:</span> helper2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 不推荐:</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">callMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 推荐做法：</span>\ncondition <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">callMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"五、默认属性写法\"><a href=\"#五、默认属性写法\" class=\"headerlink\" title=\"五、默认属性写法\"></a>五、默认属性写法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> test1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> test2 <span class=\"token operator\">=</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> test3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 优化写法:</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>test1<span class=\"token punctuation\">,</span> test2<span class=\"token punctuation\">,</span> test3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>test <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n test <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 推荐写法:</span>\ntest <span class=\"token operator\">=</span> test <span class=\"token operator\">||</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"六、属性排除写法\"><a href=\"#六、属性排除写法\" class=\"headerlink\" title=\"六、属性排除写法\"></a>六、属性排除写法</h3><p>排除某些对象的属性，不需要使用第三方库，可以直接使用解构赋值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> omit <span class=\"token keyword\">from</span> <span class=\"token string\">'omit.js'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入第三方库</span>\n<span class=\"token comment\">// 场景：去掉props对象的某些属性，把剩余属性放到other对象中。</span>\n<span class=\"token keyword\">let</span> props<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string-property property\">'inputIcon'</span><span class=\"token operator\">:</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'removeIcon'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'clearIcon'</span><span class=\"token operator\">:</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'switcherIcon'</span><span class=\"token operator\">:</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'type'</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'status'</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">info</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">visible</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 不太推荐的做法：</span>\n<span class=\"token keyword\">const</span> others<span class=\"token operator\">=</span> <span class=\"token function\">omit</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'inputIcon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'removeIcon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'clearIcon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'switcherIcon'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 推荐做法：利用解构赋值，把pros其他属性放到 other 中</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>inputIcon<span class=\"token punctuation\">,</span> removeIcon<span class=\"token punctuation\">,</span> clearIcon<span class=\"token punctuation\">,</span> switcherIcon<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>others<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"七、for循环-x2F-for…in循环-x2F-for…of循环\"><a href=\"#七、for循环-x2F-for…in循环-x2F-for…of循环\" class=\"headerlink\" title=\"七、for循环&#x2F;for…in循环&#x2F;for…of循环\"></a>七、for循环&#x2F;for…in循环&#x2F;for…of循环</h3><p>哪个写法的效率更高——答案是：普通for循环</p>\n<ul>\n<li>forEach 遍历列表值，不能使用 break 语句或使用 return 语句结束循环</li>\n<li>for in 遍历对象键值(key)，或者数组下标，不推荐循环一个数组</li>\n<li>for of 遍历列表值，允许遍历 Arrays，Strings，Map（哈希），Set（集合）等可迭代的数据结构，for of循环出的是value值，不能循环普通的对象（Object 没有 <code>Symbol.iterator</code>属性）</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 测试数据</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> count <span class=\"token operator\">&lt;</span> <span class=\"token number\">99999</span><span class=\"token punctuation\">;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  arr<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n\n<span class=\"token comment\">// 在for循环过程中，提前获取数组长度，只检索了一次长度值。</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// do something</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// for: 2.4900375016 ms</span>\n<span class=\"token comment\">// for in: 17.1098265997 ms</span>\n<span class=\"token comment\">// for of: 7.4388625005 ms</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"八、求数组最大最小值\"><a href=\"#八、求数组最大最小值\" class=\"headerlink\" title=\"八、求数组最大最小值\"></a>八、求数组最大最小值</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>…arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nMath<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>…arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"九、查找匹配\"><a href=\"#九、查找匹配\" class=\"headerlink\" title=\"九、查找匹配\"></a>九、查找匹配</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'boy'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Mark'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'girl'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Amy'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'boy'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span> <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">findData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> type <span class=\"token operator\">&amp;&amp;</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">findData</span><span class=\"token punctuation\">(</span><span class=\"token string\">'boy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 优化方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">findData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> type <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> name <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">findData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'boy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"十、事件代理\"><a href=\"#十、事件代理\" class=\"headerlink\" title=\"十、事件代理\"></a>十、事件代理</h3><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>test01<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>test02<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>test03<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>test04<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>test05<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n   e<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//do something</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//(addEventLstener) 推荐做法: </span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">===</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  \t\t<span class=\"token comment\">//do something </span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"十一、DOM操作写法\"><a href=\"#十一、DOM操作写法\" class=\"headerlink\" title=\"十一、DOM操作写法\"></a>十一、DOM操作写法</h3><h5 id=\"（1）DOM写入操作写法\"><a href=\"#（1）DOM写入操作写法\" class=\"headerlink\" title=\"（1）DOM写入操作写法\"></a>（1）DOM写入操作写法</h5><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 非常不推荐：</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">99999</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> test <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//do something</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//推荐写法：先获取DOM节点，再用该节点进行doSomething</span>\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">99999</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> title <span class=\"token operator\">=</span> test<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//do something</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 非常不推荐：</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">99999</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;span>'</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/span>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//推荐写法：</span>\n<span class=\"token keyword\">var</span> html <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">99999</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    html <span class=\"token operator\">+=</span> <span class=\"token string\">'&lt;span>'</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/span>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> html<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//document.createDocumentFragment</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"十二、If-Else-x2F-Switch-写法\"><a href=\"#十二、If-Else-x2F-Switch-写法\" class=\"headerlink\" title=\"十二、If Else &#x2F; Switch 写法\"></a>十二、If Else &#x2F; Switch 写法</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// if-else做法：</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'已提交'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'审批中'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'审批通过'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'审批驳回'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// switch做法：</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'已提交'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'审批中'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'审批通过'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'审批驳回'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//推荐做法:将键值存在对象中，再获取</span>\n<span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token string\">'已提交'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token string\">'审批中'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token string\">'审批通过'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token string\">'审批驳回'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> typeStr <span class=\"token operator\">=</span> map<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// if-else做法：</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'add'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">doAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">doDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'edit'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">doEdit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'view'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">doView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// switch做法：</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'add'</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">doAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'delete'</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">doDelete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'edit'</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">doEdit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'view'</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">doView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//推荐做法:将键值存在对象中，再获取</span>\n<span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">'add'</span><span class=\"token operator\">:</span> doAdd<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'delete'</span><span class=\"token operator\">:</span> doDelete<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'edit'</span><span class=\"token operator\">:</span> doEdit<span class=\"token punctuation\">,</span>\n    <span class=\"token string-property property\">'view'</span><span class=\"token operator\">:</span> doView\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nmap<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> map<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"【JavaScript】Object对象常用方法","date":"2020-11-10T10:22:34.000Z","toc":true,"comments":1,"copyright":false,"_content":"# Object.defineProperty\n\n作用：劫持或者修改对象的属性\n\n```javascript\nObject.defineProperty(obj, attr, { options });\n```\n\noptions参数包含如下属性：\n\n- value：就是属性的值。\n- writable：`<boolean>`，决定属性能否被赋值。\n- enumerable：`<boolean>`，决定 for in 能否枚举该属性。\n- configurable：`<boolean>`，决定该属性能否被删除或者改变特征值(key)。\n\n# Object.hasOwnProperty\n\n检测一个对象是否含有attr的属性，不会去原型查找，不包括原型链上的属性\n\n```javascript\n// 封装深拷贝时常用该方法\nobj.hasOwnProperty(attr);\n```\n\n# Object.assgin\n\nObject.assign只拷贝源对象的自身属性，不拷贝继承属性，也不拷贝不可枚举的属性(enumerable: false)。属性名为Symbol值的属性也会被Object.assign拷贝\n\n```js\nObject.assgin(target, obj1, obj2, ...);\n```\n\n- Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，后面的属性就会覆盖前面的属性。\n- 单层是深拷贝，会开辟一个新的内存空间和地址；多层是浅拷贝，会引用原来的地址。\n- 如果只有一个参数，Object.assign会直接返回该参数。如果该参数不是对象，就会先转成对象，然后返回。\n- 由于undefined和 null无法转成对象，因此如果它们作为参数，就会报错。如果undefined和null不在首参数，就不会报错。\n\n```js\nobject.assign(undefined)    //报错\nobject.assign(null) //报错\n\nobject.assign(obj, undefined)   //不报错\nobject.assign(obj, null)    // 不报错\n```\n\n- 其他类型的值（数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式拷贝入目标对象外，其他值都不会产生效果。\n  vl、v2、v3分别是字符串、布尔值和数值，结果只有字符串可以合并到目标对象中(以字符数组的形式)，数值和布尔值都会被忽略。\n\n```js\nlet vl = 'abc';\nlet v2 = true;\nlet v3 = 10;\nconst obj = object.assign ({}, vl, v2, v3);\nconsole.log(obj); // {\"0\": \"a\"，\"l\":\"b\"，\"2\": \"c\"}\n```\n\n## Object.assagin方法很多的用处\n\n- 为对象添加属性\n\n```js\n// 1\nclass Point{\n    constructor(x, y){\n        Object.assign(this, x, y);\n    }\n}\n\n// 2\nObject.assign(someClass.prototype, {\n    someMethod(arg1, arg2){},\n    anotherMethod(arg1, arg2){},\n    attr: 'hello'\n})\n\n// 2的等同于\nsomeClass.prototype.someMethod = function(arg1, arg2){}\nsomeClass.prototype.anotherMethod = function(arg1, arg2){}\nsomeClass.prototype.attr = 'hello';\n```\n\n- 克隆对象\n\n```js\nfunction clone(origin){\n    return Object.assign({}, origin);\n}\n// 采用这种方法克隆只能克隆原始对象自身的值，不能克隆它继承的值。\n\n// 如果想要保持继承链，可以采用下面的代码。\nfunction clone(origin){\n    let originProto = Object.getPrototypeof(origin);\n    return Object.assign(0bjObjectect.create(originProto), origin);\n}\n```\n\n- 合并多个对象，将多个对象合并到某个对象。\n\n```js\nconst merge = (target, ...sources) => 0bject.assign(target, ...sources);\n\n// 如果希望合并后返回一个新对象，可以改写上面的函数，对一个空对象合并\nconst merge = (...sources) => Object.assign({}, ...sources);\n```\n\n# Object.keys\n\n获取对象的key值，以数组存放返回\n\n```javascript\n// 使用\nObject.keys(obj)\n\n// 原理\nfunction keys(object) {\n    const result = [];\n    for (let key in object){\n        object.hasOwnProperty(key) && result.push(key);\n    }\n    return result;\n}\n```\n\n# Object.values\n\n获取对象的value值，以数组存放返回（不会遍历继承的属性，并且会过滤属性名为Symbol值的属性）\n\n- 如果Object.values方法的参数是一个字符串，就会返回各个字符组成的一个数组。object.values('foo') => ['f', 'o', 'o']\n- 如果参数不是对象，Object.values就会先将其转为对象。由于数值和布尔值的包装对象都不会为实例添加非继承的属性，因此Object.values会返回空数组。\n\n```js\n// 使用\nObject.values(obj)\n\nObject.values(42) //  []\nObject.values(true) // []\n```\n\n# Object.entries\n\n获取对象可枚举的[key, value]键值对，以数组存放返回\n\n```js\nfor(let [key, value] in Object.entries(obj)){\n    // \n}\n```\n\n## 实现entries\n\n```js\nfunction entries(obj){\n    let arr = [];\n    for(let key of Object.keys(obj)){\n        arr.push([key, obj[key]]);\n    }\n    return arr;\n}\n```\n\n# Object.getOwnPropertyNames\n\n获取对象所有属性的key值，包括不可枚举属性，但是不包括Symbol属性\n\n```js\nconst obj = {\n  a: 1,\n  b: 2\n}\nObject.getOwnPropertyNames(obj) // ['a', 'b']\n```\n\n# Object.getOwnPropertySymbols\n\n获取一个对象所有Symbol属性\n\n# Object.getOwnPropertyDescriptor\n\n获取对象的数据属性描述\n\n```javascript\nconst obj = { a: 1 };\nobj.b = 2;\n// a和b皆为数据属性\nObject.getOwnPropertyDescriptor(obj, \"a\") \n// {value: 1, writable: true, enumerable: true, configurable: true}\n\nObject.getOwnPropertyDescriptor(obj, \"b\") \n// {value: 2, writable: true, enumerable: true, configurable: true}\n```\n\n# Object.create\n\n根据指定的原型创建实例对象，实例完全继承原型对象，原型可以是null。\n\n```js\n// 原型对象\nconst obj1 = {};\n\n// 实例对象\nconst obj2 = Object.create(obj1);\n\nobj2.__proto__ === obj1 // true\n// Object.getPrototypeOf(obj2) === obj1\n```\n\n## 动手实现Object.create\n\n```javascript\nObject.create = function(prototype){\n    function F(){};\n    F.prototype = prototype;\n    F.prototype.constructor = F;\n    return new F();\n}\n```\n\n# Object.getPrototypeOf\n\n获取一个对象的原型\n\n```javascript\n// Object.getPrototypeOf(obj)\nfunction F() {};\nconst f = new F();\nObject.getPrototypeOf(f) === F.prototype // true\n```\n\n# Object.setPrototypeOf\n\n为第一个参数对象设置原型，第二个参数是原型对象，\n\n```js\nObject.setPrototypeOf(obj, prototype);\n```\n\n# Object.isPrototypeOf\n\n判断该对象是否为参数对象的原型\n\n```js\nfunction F(){};\nconst f = new F();\nF.prototype.isPrototypeOf(f) // true\n```\n\n# Object.freeze\n\n冻结的对象是只读的，不能修改、不能添加新的属性。\n\n```js\nObject.freeze(obj)\n```\n\n# 属性的可枚举性\n\n对象的每个属性都有一个描述对象(Descriptor)，用来控制该属性的行为。Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。\n\n```js\nlet obj = { foo: 123 };\nObject.getOwnPropertyDescriptor(obj, 'foo')\n// { value: 123, writable: true, enumerable: true, configurable: true}\n```\n\n会忽略enumerable为false的属性的操作\n\n- for...in循环: 只遍历对象自身的和继承的可枚举的属性。\n- Object.keys(): 返回对象自身的所有可枚举的属性的键名。\n- JSON.stringify(): 只串行化对象自身的可枚举的属性。\n- Object.assign()，会忽略enumerable为 false的属性，只拷贝对象自身可枚举的属性。\n\n只有for...in 会返回继承的属性。实际上，引入enumerable的最初目的就是让某些属性可以规避掉for..in操作。比如，对象原型的toString方法以及数组的length属性就通过这种手段避免被for...in遍历到。\n\n```js\nobject.getOwnPropertyDescriptor(Object.prototype, 'toString').enumerablel //  false\nobject.getOwnPropertyDescriptor([], 'length').enumerable // false\n```\n\n另外，ES6规定，所有Class的原型的方法都是不可枚举的。\n\n```js\n0bject.getOwnPropertyDescriptor(class{ foo(){} }.prototype, 'foo').enumerable // false\n// class中声明的发法是 挂载到prototype上的\n```\n\n尽量不要用for...in循环，而用Object.keys()代替。\n\n# 属性的遍历\n\nES6一共有5种方法可以遍历对象的属性。\n\n- (1) for...in\n  for...in循环遍历对象自身的和继承的可枚举属性(不含Symbol属性)。\n- (2)Object.keys(obj)\n  Object.keys返回一个数组，包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性)。\n- (3)Object.getOwnPropertyNames(obj)\n  Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性)。\n- (4)Object.getOwnPropertySymbols(obj)\n  Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。\n- (5)Reflect.ownKeys(obj)\n  Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是Symbol或字符串，也不管是否可枚举。\n\n以上的5种方法遍历对象的属性遵守同样的属性遍历的次序规则:\n\n- 首先遍历所有属性名为数值的属性，按照数字排序。\n- 其次遍历所有属性名为字符串的属性，按照生成时间排序。\n- 最后遍历所有属性名为Symbol值的属性，按照生成时间排序。\n\n# 参考\n\n- [MDN-Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)\n- 《Node.js12 实战》\n","source":"_posts/front_end/js-object.md","raw":"---\ntitle: 【JavaScript】Object对象常用方法\ndate: 2020-11-10 10:22:34\ncategories:\n  - 前端\ntags:\n  - JavaScript\ntoc: true # 是否启用内容索引\ncomments: true\ncopyright: false\n---\n# Object.defineProperty\n\n作用：劫持或者修改对象的属性\n\n```javascript\nObject.defineProperty(obj, attr, { options });\n```\n\noptions参数包含如下属性：\n\n- value：就是属性的值。\n- writable：`<boolean>`，决定属性能否被赋值。\n- enumerable：`<boolean>`，决定 for in 能否枚举该属性。\n- configurable：`<boolean>`，决定该属性能否被删除或者改变特征值(key)。\n\n# Object.hasOwnProperty\n\n检测一个对象是否含有attr的属性，不会去原型查找，不包括原型链上的属性\n\n```javascript\n// 封装深拷贝时常用该方法\nobj.hasOwnProperty(attr);\n```\n\n# Object.assgin\n\nObject.assign只拷贝源对象的自身属性，不拷贝继承属性，也不拷贝不可枚举的属性(enumerable: false)。属性名为Symbol值的属性也会被Object.assign拷贝\n\n```js\nObject.assgin(target, obj1, obj2, ...);\n```\n\n- Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，后面的属性就会覆盖前面的属性。\n- 单层是深拷贝，会开辟一个新的内存空间和地址；多层是浅拷贝，会引用原来的地址。\n- 如果只有一个参数，Object.assign会直接返回该参数。如果该参数不是对象，就会先转成对象，然后返回。\n- 由于undefined和 null无法转成对象，因此如果它们作为参数，就会报错。如果undefined和null不在首参数，就不会报错。\n\n```js\nobject.assign(undefined)    //报错\nobject.assign(null) //报错\n\nobject.assign(obj, undefined)   //不报错\nobject.assign(obj, null)    // 不报错\n```\n\n- 其他类型的值（数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式拷贝入目标对象外，其他值都不会产生效果。\n  vl、v2、v3分别是字符串、布尔值和数值，结果只有字符串可以合并到目标对象中(以字符数组的形式)，数值和布尔值都会被忽略。\n\n```js\nlet vl = 'abc';\nlet v2 = true;\nlet v3 = 10;\nconst obj = object.assign ({}, vl, v2, v3);\nconsole.log(obj); // {\"0\": \"a\"，\"l\":\"b\"，\"2\": \"c\"}\n```\n\n## Object.assagin方法很多的用处\n\n- 为对象添加属性\n\n```js\n// 1\nclass Point{\n    constructor(x, y){\n        Object.assign(this, x, y);\n    }\n}\n\n// 2\nObject.assign(someClass.prototype, {\n    someMethod(arg1, arg2){},\n    anotherMethod(arg1, arg2){},\n    attr: 'hello'\n})\n\n// 2的等同于\nsomeClass.prototype.someMethod = function(arg1, arg2){}\nsomeClass.prototype.anotherMethod = function(arg1, arg2){}\nsomeClass.prototype.attr = 'hello';\n```\n\n- 克隆对象\n\n```js\nfunction clone(origin){\n    return Object.assign({}, origin);\n}\n// 采用这种方法克隆只能克隆原始对象自身的值，不能克隆它继承的值。\n\n// 如果想要保持继承链，可以采用下面的代码。\nfunction clone(origin){\n    let originProto = Object.getPrototypeof(origin);\n    return Object.assign(0bjObjectect.create(originProto), origin);\n}\n```\n\n- 合并多个对象，将多个对象合并到某个对象。\n\n```js\nconst merge = (target, ...sources) => 0bject.assign(target, ...sources);\n\n// 如果希望合并后返回一个新对象，可以改写上面的函数，对一个空对象合并\nconst merge = (...sources) => Object.assign({}, ...sources);\n```\n\n# Object.keys\n\n获取对象的key值，以数组存放返回\n\n```javascript\n// 使用\nObject.keys(obj)\n\n// 原理\nfunction keys(object) {\n    const result = [];\n    for (let key in object){\n        object.hasOwnProperty(key) && result.push(key);\n    }\n    return result;\n}\n```\n\n# Object.values\n\n获取对象的value值，以数组存放返回（不会遍历继承的属性，并且会过滤属性名为Symbol值的属性）\n\n- 如果Object.values方法的参数是一个字符串，就会返回各个字符组成的一个数组。object.values('foo') => ['f', 'o', 'o']\n- 如果参数不是对象，Object.values就会先将其转为对象。由于数值和布尔值的包装对象都不会为实例添加非继承的属性，因此Object.values会返回空数组。\n\n```js\n// 使用\nObject.values(obj)\n\nObject.values(42) //  []\nObject.values(true) // []\n```\n\n# Object.entries\n\n获取对象可枚举的[key, value]键值对，以数组存放返回\n\n```js\nfor(let [key, value] in Object.entries(obj)){\n    // \n}\n```\n\n## 实现entries\n\n```js\nfunction entries(obj){\n    let arr = [];\n    for(let key of Object.keys(obj)){\n        arr.push([key, obj[key]]);\n    }\n    return arr;\n}\n```\n\n# Object.getOwnPropertyNames\n\n获取对象所有属性的key值，包括不可枚举属性，但是不包括Symbol属性\n\n```js\nconst obj = {\n  a: 1,\n  b: 2\n}\nObject.getOwnPropertyNames(obj) // ['a', 'b']\n```\n\n# Object.getOwnPropertySymbols\n\n获取一个对象所有Symbol属性\n\n# Object.getOwnPropertyDescriptor\n\n获取对象的数据属性描述\n\n```javascript\nconst obj = { a: 1 };\nobj.b = 2;\n// a和b皆为数据属性\nObject.getOwnPropertyDescriptor(obj, \"a\") \n// {value: 1, writable: true, enumerable: true, configurable: true}\n\nObject.getOwnPropertyDescriptor(obj, \"b\") \n// {value: 2, writable: true, enumerable: true, configurable: true}\n```\n\n# Object.create\n\n根据指定的原型创建实例对象，实例完全继承原型对象，原型可以是null。\n\n```js\n// 原型对象\nconst obj1 = {};\n\n// 实例对象\nconst obj2 = Object.create(obj1);\n\nobj2.__proto__ === obj1 // true\n// Object.getPrototypeOf(obj2) === obj1\n```\n\n## 动手实现Object.create\n\n```javascript\nObject.create = function(prototype){\n    function F(){};\n    F.prototype = prototype;\n    F.prototype.constructor = F;\n    return new F();\n}\n```\n\n# Object.getPrototypeOf\n\n获取一个对象的原型\n\n```javascript\n// Object.getPrototypeOf(obj)\nfunction F() {};\nconst f = new F();\nObject.getPrototypeOf(f) === F.prototype // true\n```\n\n# Object.setPrototypeOf\n\n为第一个参数对象设置原型，第二个参数是原型对象，\n\n```js\nObject.setPrototypeOf(obj, prototype);\n```\n\n# Object.isPrototypeOf\n\n判断该对象是否为参数对象的原型\n\n```js\nfunction F(){};\nconst f = new F();\nF.prototype.isPrototypeOf(f) // true\n```\n\n# Object.freeze\n\n冻结的对象是只读的，不能修改、不能添加新的属性。\n\n```js\nObject.freeze(obj)\n```\n\n# 属性的可枚举性\n\n对象的每个属性都有一个描述对象(Descriptor)，用来控制该属性的行为。Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。\n\n```js\nlet obj = { foo: 123 };\nObject.getOwnPropertyDescriptor(obj, 'foo')\n// { value: 123, writable: true, enumerable: true, configurable: true}\n```\n\n会忽略enumerable为false的属性的操作\n\n- for...in循环: 只遍历对象自身的和继承的可枚举的属性。\n- Object.keys(): 返回对象自身的所有可枚举的属性的键名。\n- JSON.stringify(): 只串行化对象自身的可枚举的属性。\n- Object.assign()，会忽略enumerable为 false的属性，只拷贝对象自身可枚举的属性。\n\n只有for...in 会返回继承的属性。实际上，引入enumerable的最初目的就是让某些属性可以规避掉for..in操作。比如，对象原型的toString方法以及数组的length属性就通过这种手段避免被for...in遍历到。\n\n```js\nobject.getOwnPropertyDescriptor(Object.prototype, 'toString').enumerablel //  false\nobject.getOwnPropertyDescriptor([], 'length').enumerable // false\n```\n\n另外，ES6规定，所有Class的原型的方法都是不可枚举的。\n\n```js\n0bject.getOwnPropertyDescriptor(class{ foo(){} }.prototype, 'foo').enumerable // false\n// class中声明的发法是 挂载到prototype上的\n```\n\n尽量不要用for...in循环，而用Object.keys()代替。\n\n# 属性的遍历\n\nES6一共有5种方法可以遍历对象的属性。\n\n- (1) for...in\n  for...in循环遍历对象自身的和继承的可枚举属性(不含Symbol属性)。\n- (2)Object.keys(obj)\n  Object.keys返回一个数组，包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性)。\n- (3)Object.getOwnPropertyNames(obj)\n  Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性)。\n- (4)Object.getOwnPropertySymbols(obj)\n  Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。\n- (5)Reflect.ownKeys(obj)\n  Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是Symbol或字符串，也不管是否可枚举。\n\n以上的5种方法遍历对象的属性遵守同样的属性遍历的次序规则:\n\n- 首先遍历所有属性名为数值的属性，按照数字排序。\n- 其次遍历所有属性名为字符串的属性，按照生成时间排序。\n- 最后遍历所有属性名为Symbol值的属性，按照生成时间排序。\n\n# 参考\n\n- [MDN-Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)\n- 《Node.js12 实战》\n","slug":"front_end/js-object","published":1,"updated":"2022-07-07T15:03:51.447Z","layout":"post","photos":[],"link":"","_id":"cl5f0bii0000iv4uw5yandon6","content":"<h1 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h1><p>作用：劫持或者修改对象的属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> options <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>options参数包含如下属性：</p>\n<ul>\n<li>value：就是属性的值。</li>\n<li>writable：<code>&lt;boolean&gt;</code>，决定属性能否被赋值。</li>\n<li>enumerable：<code>&lt;boolean&gt;</code>，决定 for in 能否枚举该属性。</li>\n<li>configurable：<code>&lt;boolean&gt;</code>，决定该属性能否被删除或者改变特征值(key)。</li>\n</ul>\n<h1 id=\"Object-hasOwnProperty\"><a href=\"#Object-hasOwnProperty\" class=\"headerlink\" title=\"Object.hasOwnProperty\"></a>Object.hasOwnProperty</h1><p>检测一个对象是否含有attr的属性，不会去原型查找，不包括原型链上的属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 封装深拷贝时常用该方法</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-assgin\"><a href=\"#Object-assgin\" class=\"headerlink\" title=\"Object.assgin\"></a>Object.assgin</h1><p>Object.assign只拷贝源对象的自身属性，不拷贝继承属性，也不拷贝不可枚举的属性(enumerable: false)。属性名为Symbol值的属性也会被Object.assign拷贝</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">assgin</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，后面的属性就会覆盖前面的属性。</li>\n<li>单层是深拷贝，会开辟一个新的内存空间和地址；多层是浅拷贝，会引用原来的地址。</li>\n<li>如果只有一个参数，Object.assign会直接返回该参数。如果该参数不是对象，就会先转成对象，然后返回。</li>\n<li>由于undefined和 null无法转成对象，因此如果它们作为参数，就会报错。如果undefined和null不在首参数，就不会报错。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//报错</span>\nobject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//报错</span>\n\nobject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//不报错</span>\nobject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 不报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>其他类型的值（数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式拷贝入目标对象外，其他值都不会产生效果。<br>vl、v2、v3分别是字符串、布尔值和数值，结果只有字符串可以合并到目标对象中(以字符数组的形式)，数值和布尔值都会被忽略。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> vl <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v2 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v3 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> vl<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;\"0\": \"a\"，\"l\":\"b\"，\"2\": \"c\"&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Object-assagin方法很多的用处\"><a href=\"#Object-assagin方法很多的用处\" class=\"headerlink\" title=\"Object.assagin方法很多的用处\"></a>Object.assagin方法很多的用处</h2><ul>\n<li>为对象添加属性</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 2</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>someClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">anotherMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">attr</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 2的等同于</span>\nsomeClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">someMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nsomeClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">anotherMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nsomeClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>attr <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>克隆对象</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">origin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 采用这种方法克隆只能克隆原始对象自身的值，不能克隆它继承的值。</span>\n\n<span class=\"token comment\">// 如果想要保持继承链，可以采用下面的代码。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">origin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> originProto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeof</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>0bjObjectect<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>originProto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>合并多个对象，将多个对象合并到某个对象。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">merge</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>sources</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> 0bject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>sources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 如果希望合并后返回一个新对象，可以改写上面的函数，对一个空对象合并</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">merge</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>sources</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>sources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-keys\"><a href=\"#Object-keys\" class=\"headerlink\" title=\"Object.keys\"></a>Object.keys</h1><p>获取对象的key值，以数组存放返回</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 原理</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        object<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-values\"><a href=\"#Object-values\" class=\"headerlink\" title=\"Object.values\"></a>Object.values</h1><p>获取对象的value值，以数组存放返回（不会遍历继承的属性，并且会过滤属性名为Symbol值的属性）</p>\n<ul>\n<li>如果Object.values方法的参数是一个字符串，就会返回各个字符组成的一个数组。object.values(‘foo’) &#x3D;&gt; [‘f’, ‘o’, ‘o’]</li>\n<li>如果参数不是对象，Object.values就会先将其转为对象。由于数值和布尔值的包装对象都不会为实例添加非继承的属性，因此Object.values会返回空数组。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//  []</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// []</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-entries\"><a href=\"#Object-entries\" class=\"headerlink\" title=\"Object.entries\"></a>Object.entries</h1><p>获取对象可枚举的[key, value]键值对，以数组存放返回</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// </span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"实现entries\"><a href=\"#实现entries\" class=\"headerlink\" title=\"实现entries\"></a>实现entries</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-getOwnPropertyNames\"><a href=\"#Object-getOwnPropertyNames\" class=\"headerlink\" title=\"Object.getOwnPropertyNames\"></a>Object.getOwnPropertyNames</h1><p>获取对象所有属性的key值，包括不可枚举属性，但是不包括Symbol属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">&#125;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['a', 'b']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-getOwnPropertySymbols\"><a href=\"#Object-getOwnPropertySymbols\" class=\"headerlink\" title=\"Object.getOwnPropertySymbols\"></a>Object.getOwnPropertySymbols</h1><p>获取一个对象所有Symbol属性</p>\n<h1 id=\"Object-getOwnPropertyDescriptor\"><a href=\"#Object-getOwnPropertyDescriptor\" class=\"headerlink\" title=\"Object.getOwnPropertyDescriptor\"></a>Object.getOwnPropertyDescriptor</h1><p>获取对象的数据属性描述</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a和b皆为数据属性</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// &#123;value: 2, writable: true, enumerable: true, configurable: true&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-create\"><a href=\"#Object-create\" class=\"headerlink\" title=\"Object.create\"></a>Object.create</h1><p>根据指定的原型创建实例对象，实例完全继承原型对象，原型可以是null。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 原型对象</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 实例对象</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj2<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> obj1 <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// Object.getPrototypeOf(obj2) === obj1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"动手实现Object-create\"><a href=\"#动手实现Object-create\" class=\"headerlink\" title=\"动手实现Object.create\"></a>动手实现Object.create</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prototype</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> prototype<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-getPrototypeOf\"><a href=\"#Object-getPrototypeOf\" class=\"headerlink\" title=\"Object.getPrototypeOf\"></a>Object.getPrototypeOf</h1><p>获取一个对象的原型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Object.getPrototypeOf(obj)</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-setPrototypeOf\"><a href=\"#Object-setPrototypeOf\" class=\"headerlink\" title=\"Object.setPrototypeOf\"></a>Object.setPrototypeOf</h1><p>为第一个参数对象设置原型，第二个参数是原型对象，</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"Object-isPrototypeOf\"><a href=\"#Object-isPrototypeOf\" class=\"headerlink\" title=\"Object.isPrototypeOf\"></a>Object.isPrototypeOf</h1><p>判断该对象是否为参数对象的原型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-freeze\"><a href=\"#Object-freeze\" class=\"headerlink\" title=\"Object.freeze\"></a>Object.freeze</h1><p>冻结的对象是只读的，不能修改、不能添加新的属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"属性的可枚举性\"><a href=\"#属性的可枚举性\" class=\"headerlink\" title=\"属性的可枚举性\"></a>属性的可枚举性</h1><p>对象的每个属性都有一个描述对象(Descriptor)，用来控制该属性的行为。Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// &#123; value: 123, writable: true, enumerable: true, configurable: true&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>会忽略enumerable为false的属性的操作</p>\n<ul>\n<li>for…in循环: 只遍历对象自身的和继承的可枚举的属性。</li>\n<li>Object.keys(): 返回对象自身的所有可枚举的属性的键名。</li>\n<li>JSON.stringify(): 只串行化对象自身的可枚举的属性。</li>\n<li>Object.assign()，会忽略enumerable为 false的属性，只拷贝对象自身可枚举的属性。</li>\n</ul>\n<p>只有for…in 会返回继承的属性。实际上，引入enumerable的最初目的就是让某些属性可以规避掉for..in操作。比如，对象原型的toString方法以及数组的length属性就通过这种手段避免被for…in遍历到。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">'toString'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enumerablel <span class=\"token comment\">//  false</span>\nobject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enumerable <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>另外，ES6规定，所有Class的原型的方法都是不可枚举的。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">0bject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#123;</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enumerable <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// class中声明的发法是 挂载到prototype上的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>尽量不要用for…in循环，而用Object.keys()代替。</p>\n<h1 id=\"属性的遍历\"><a href=\"#属性的遍历\" class=\"headerlink\" title=\"属性的遍历\"></a>属性的遍历</h1><p>ES6一共有5种方法可以遍历对象的属性。</p>\n<ul>\n<li>(1) for…in<br>for…in循环遍历对象自身的和继承的可枚举属性(不含Symbol属性)。</li>\n<li>(2)Object.keys(obj)<br>Object.keys返回一个数组，包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性)。</li>\n<li>(3)Object.getOwnPropertyNames(obj)<br>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性)。</li>\n<li>(4)Object.getOwnPropertySymbols(obj)<br>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。</li>\n<li>(5)Reflect.ownKeys(obj)<br>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是Symbol或字符串，也不管是否可枚举。</li>\n</ul>\n<p>以上的5种方法遍历对象的属性遵守同样的属性遍历的次序规则:</p>\n<ul>\n<li>首先遍历所有属性名为数值的属性，按照数字排序。</li>\n<li>其次遍历所有属性名为字符串的属性，按照生成时间排序。</li>\n<li>最后遍历所有属性名为Symbol值的属性，按照生成时间排序。</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\">MDN-Object</a></li>\n<li>《Node.js12 实战》</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Object-defineProperty\"><a href=\"#Object-defineProperty\" class=\"headerlink\" title=\"Object.defineProperty\"></a>Object.defineProperty</h1><p>作用：劫持或者修改对象的属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> options <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>options参数包含如下属性：</p>\n<ul>\n<li>value：就是属性的值。</li>\n<li>writable：<code>&lt;boolean&gt;</code>，决定属性能否被赋值。</li>\n<li>enumerable：<code>&lt;boolean&gt;</code>，决定 for in 能否枚举该属性。</li>\n<li>configurable：<code>&lt;boolean&gt;</code>，决定该属性能否被删除或者改变特征值(key)。</li>\n</ul>\n<h1 id=\"Object-hasOwnProperty\"><a href=\"#Object-hasOwnProperty\" class=\"headerlink\" title=\"Object.hasOwnProperty\"></a>Object.hasOwnProperty</h1><p>检测一个对象是否含有attr的属性，不会去原型查找，不包括原型链上的属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 封装深拷贝时常用该方法</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-assgin\"><a href=\"#Object-assgin\" class=\"headerlink\" title=\"Object.assgin\"></a>Object.assgin</h1><p>Object.assign只拷贝源对象的自身属性，不拷贝继承属性，也不拷贝不可枚举的属性(enumerable: false)。属性名为Symbol值的属性也会被Object.assign拷贝</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">assgin</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> obj1<span class=\"token punctuation\">,</span> obj2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，后面的属性就会覆盖前面的属性。</li>\n<li>单层是深拷贝，会开辟一个新的内存空间和地址；多层是浅拷贝，会引用原来的地址。</li>\n<li>如果只有一个参数，Object.assign会直接返回该参数。如果该参数不是对象，就会先转成对象，然后返回。</li>\n<li>由于undefined和 null无法转成对象，因此如果它们作为参数，就会报错。如果undefined和null不在首参数，就不会报错。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//报错</span>\nobject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//报错</span>\n\nobject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//不报错</span>\nobject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 不报错</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>其他类型的值（数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式拷贝入目标对象外，其他值都不会产生效果。<br>vl、v2、v3分别是字符串、布尔值和数值，结果只有字符串可以合并到目标对象中(以字符数组的形式)，数值和布尔值都会被忽略。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> vl <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v2 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v3 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> vl<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;\"0\": \"a\"，\"l\":\"b\"，\"2\": \"c\"&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Object-assagin方法很多的用处\"><a href=\"#Object-assagin方法很多的用处\" class=\"headerlink\" title=\"Object.assagin方法很多的用处\"></a>Object.assagin方法很多的用处</h2><ul>\n<li>为对象添加属性</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 1</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 2</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>someClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">someMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">anotherMethod</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">attr</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 2的等同于</span>\nsomeClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">someMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nsomeClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">anotherMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\nsomeClass<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>attr <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>克隆对象</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">origin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 采用这种方法克隆只能克隆原始对象自身的值，不能克隆它继承的值。</span>\n\n<span class=\"token comment\">// 如果想要保持继承链，可以采用下面的代码。</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">origin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> originProto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeof</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>0bjObjectect<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>originProto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>合并多个对象，将多个对象合并到某个对象。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">merge</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>sources</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> 0bject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>sources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 如果希望合并后返回一个新对象，可以改写上面的函数，对一个空对象合并</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">merge</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>sources</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>sources<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-keys\"><a href=\"#Object-keys\" class=\"headerlink\" title=\"Object.keys\"></a>Object.keys</h1><p>获取对象的key值，以数组存放返回</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 原理</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        object<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-values\"><a href=\"#Object-values\" class=\"headerlink\" title=\"Object.values\"></a>Object.values</h1><p>获取对象的value值，以数组存放返回（不会遍历继承的属性，并且会过滤属性名为Symbol值的属性）</p>\n<ul>\n<li>如果Object.values方法的参数是一个字符串，就会返回各个字符组成的一个数组。object.values(‘foo’) &#x3D;&gt; [‘f’, ‘o’, ‘o’]</li>\n<li>如果参数不是对象，Object.values就会先将其转为对象。由于数值和布尔值的包装对象都不会为实例添加非继承的属性，因此Object.values会返回空数组。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//  []</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// []</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-entries\"><a href=\"#Object-entries\" class=\"headerlink\" title=\"Object.entries\"></a>Object.entries</h1><p>获取对象可枚举的[key, value]键值对，以数组存放返回</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// </span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"实现entries\"><a href=\"#实现entries\" class=\"headerlink\" title=\"实现entries\"></a>实现entries</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-getOwnPropertyNames\"><a href=\"#Object-getOwnPropertyNames\" class=\"headerlink\" title=\"Object.getOwnPropertyNames\"></a>Object.getOwnPropertyNames</h1><p>获取对象所有属性的key值，包括不可枚举属性，但是不包括Symbol属性</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">&#125;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['a', 'b']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-getOwnPropertySymbols\"><a href=\"#Object-getOwnPropertySymbols\" class=\"headerlink\" title=\"Object.getOwnPropertySymbols\"></a>Object.getOwnPropertySymbols</h1><p>获取一个对象所有Symbol属性</p>\n<h1 id=\"Object-getOwnPropertyDescriptor\"><a href=\"#Object-getOwnPropertyDescriptor\" class=\"headerlink\" title=\"Object.getOwnPropertyDescriptor\"></a>Object.getOwnPropertyDescriptor</h1><p>获取对象的数据属性描述</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// a和b皆为数据属性</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token comment\">// &#123;value: 2, writable: true, enumerable: true, configurable: true&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-create\"><a href=\"#Object-create\" class=\"headerlink\" title=\"Object.create\"></a>Object.create</h1><p>根据指定的原型创建实例对象，实例完全继承原型对象，原型可以是null。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 原型对象</span>\n<span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 实例对象</span>\n<span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nobj2<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> obj1 <span class=\"token comment\">// true</span>\n<span class=\"token comment\">// Object.getPrototypeOf(obj2) === obj1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"动手实现Object-create\"><a href=\"#动手实现Object-create\" class=\"headerlink\" title=\"动手实现Object.create\"></a>动手实现Object.create</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prototype</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> prototype<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-getPrototypeOf\"><a href=\"#Object-getPrototypeOf\" class=\"headerlink\" title=\"Object.getPrototypeOf\"></a>Object.getPrototypeOf</h1><p>获取一个对象的原型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Object.getPrototypeOf(obj)</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-setPrototypeOf\"><a href=\"#Object-setPrototypeOf\" class=\"headerlink\" title=\"Object.setPrototypeOf\"></a>Object.setPrototypeOf</h1><p>为第一个参数对象设置原型，第二个参数是原型对象，</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"Object-isPrototypeOf\"><a href=\"#Object-isPrototypeOf\" class=\"headerlink\" title=\"Object.isPrototypeOf\"></a>Object.isPrototypeOf</h1><p>判断该对象是否为参数对象的原型</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Object-freeze\"><a href=\"#Object-freeze\" class=\"headerlink\" title=\"Object.freeze\"></a>Object.freeze</h1><p>冻结的对象是只读的，不能修改、不能添加新的属性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"属性的可枚举性\"><a href=\"#属性的可枚举性\" class=\"headerlink\" title=\"属性的可枚举性\"></a>属性的可枚举性</h1><p>对象的每个属性都有一个描述对象(Descriptor)，用来控制该属性的行为。Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token number\">123</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// &#123; value: 123, writable: true, enumerable: true, configurable: true&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>会忽略enumerable为false的属性的操作</p>\n<ul>\n<li>for…in循环: 只遍历对象自身的和继承的可枚举的属性。</li>\n<li>Object.keys(): 返回对象自身的所有可枚举的属性的键名。</li>\n<li>JSON.stringify(): 只串行化对象自身的可枚举的属性。</li>\n<li>Object.assign()，会忽略enumerable为 false的属性，只拷贝对象自身可枚举的属性。</li>\n</ul>\n<p>只有for…in 会返回继承的属性。实际上，引入enumerable的最初目的就是让某些属性可以规避掉for..in操作。比如，对象原型的toString方法以及数组的length属性就通过这种手段避免被for…in遍历到。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">'toString'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enumerablel <span class=\"token comment\">//  false</span>\nobject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'length'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enumerable <span class=\"token comment\">// false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>另外，ES6规定，所有Class的原型的方法都是不可枚举的。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">0bject<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#123;</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>enumerable <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// class中声明的发法是 挂载到prototype上的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>尽量不要用for…in循环，而用Object.keys()代替。</p>\n<h1 id=\"属性的遍历\"><a href=\"#属性的遍历\" class=\"headerlink\" title=\"属性的遍历\"></a>属性的遍历</h1><p>ES6一共有5种方法可以遍历对象的属性。</p>\n<ul>\n<li>(1) for…in<br>for…in循环遍历对象自身的和继承的可枚举属性(不含Symbol属性)。</li>\n<li>(2)Object.keys(obj)<br>Object.keys返回一个数组，包括对象自身的(不含继承的)所有可枚举属性(不含Symbol属性)。</li>\n<li>(3)Object.getOwnPropertyNames(obj)<br>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性)。</li>\n<li>(4)Object.getOwnPropertySymbols(obj)<br>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。</li>\n<li>(5)Reflect.ownKeys(obj)<br>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管属性名是Symbol或字符串，也不管是否可枚举。</li>\n</ul>\n<p>以上的5种方法遍历对象的属性遵守同样的属性遍历的次序规则:</p>\n<ul>\n<li>首先遍历所有属性名为数值的属性，按照数字排序。</li>\n<li>其次遍历所有属性名为字符串的属性，按照生成时间排序。</li>\n<li>最后遍历所有属性名为Symbol值的属性，按照生成时间排序。</li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\">MDN-Object</a></li>\n<li>《Node.js12 实战》</li>\n</ul>\n"},{"title":"Koa 基础开发","date":"2022-02-20T19:35:10.000Z","toc":true,"comments":1,"copyright":false,"_content":"[koa官网文档](https://koa.bootcss.com/#)\n\nkoa是一个基于http模块进行封装的框架，koa本身没有内置任何中间件，需要手动下载中间件（约定了中间件的写法），可以用来做服务端接口，也可以做接口的转发和聚合，RPC服务组装、SSR。\n\nkoa导出的是一个类，需要通过new 来实例化，koa也是继承了Events模块，性能非常好，代码量少，易于定制，很多框架都是基于koa进行定制开发（egg，thinkjs、midway都是基于koa2）。\n\n# 基于koa框架的web开发要点\n\nES6语法、异步流程控制、数据库操作、API接口转发、HTTP集成、Koa中间件\n\n# koa与express的区别\n\n- koa中间件可以对请求和响应同时进行拦截，express只能对请求进行拦截，而且是有顺序的，不能对响应进行拦截。\n- koa和express都内置了cookies模块、http模块，此外，express还内置了路由、视图模块。相对于express，koa还是比较轻量的。\n\n# koa中间件写法\n\n- 中间件可以分为全局中间件和局部中间件，局部中间件在对应的路由里生效，比如静态资源服务，在特定的路由才执行\n- 中间件是框架的扩展机制，对请求响应过程中加入中间件，应对处理复杂的业务逻辑。挂载在入口文件的中间件，会按照顺序执行。\n- koa中间件是洋葱模型，跳转的信号是next()，通过compose实现，最终的返回值是一个 function(context, next)。\n```js\ncompose([fl, f2,..,fn])转化为了f1(..f(n-1)(fn(noop()))\n```\n- 在koa引入的中间件，需要使用app.use将中间件挂载到app上\n```js\napp.use(async (ctx, next) => {\n  console.log(1)\n  await next()\n  console.log(2)\n})\n\napp.use(async (ctx, next) => {\n  console.log(3)\n  await next()\n  console.log(4)\n})\n\n// 输出的结果是1342\n```\n## koa中间件的工作过程\n中间件类似一个过滤器，koa中间件的工作大致过程可以分为三部分：\n- 处理请求前先完成一些准备工作。\n- 进行业务逻辑处理或通过next将业务交由下一个中间件处理。\n- 后面的中间件完成处理后会进行回溯，执行处理后的操作。\n\n# ctx 参数\n\n## ctx头部信息\n\n- 设置头部信息：`ctx.header(ctx.headers)`\n- 获取头部信息：`ctx.get('key')`\n- ctx.method，获取请求方法\n- ctx.status或者ctx.response.status，获取状态码和设置状态码\n- ctx.type，设置Content-Type\n- ctx.response.header = ctx.request.header = ctx.header\n- ctx.req = ctx.res = ctx.request = ctx.response\n\n## ctx地址参数\n\nkoa解析`http://127.0.0.1:3000/api/v1/getUser?a=1&b=2#abc`地址后，会将返回的结果赋值给ctx对象。\n\n|       API       |                       示例值                       |\n| :-------------: | :------------------------------------------------: |\n|    ctx.href（不包括hash） | `http://127.0.0.1:3000/api/v1/getUser?a=1&b=2` |\n|    ctx.path    |               /api/v1/getUser               |\n|     ctx.url     |           /api/v1/getUser?a=1&b=2           |\n|   ctx.search   |                      ?a=1&b=2                      |\n| ctx.querystring |                      a=1&b=2                      |\n|    ctx.query    |                 `{\"a\": \"1\",\"b\": \"2\"} `             |\n|   ctx.origin   |               `http://127.0.0.1:3000`               |\n|    ctx.host    |                   127.0.0.1:3000                   |\n|  ctx.hostname  |                     127.0.0.1                     |\n|  ctx.protocol  |                        http                        |\n|   ctx.secure（https为true）   |          false                       |\n\n## 获取不同的参数\n\n| 参数名称 |                          描述                          | Express获取方法 | Koa获取方法 |                                依赖模块                                |\n| :------: | :----------------------------------: | :-----------------: | :--------------: | :--------------------------------------------------------------------: |\n|  params  |                具名参数，比如`/users/:id`                |     req.params     |    ctx.params    | Koa需要依赖koa-router内置的ctx.params，而Express中有内置路由，无须依赖 |\n|  query  |                   查询字符串`?a=1&b=2`                   |      req.query      |    ctx.query    |                             内置，无须依赖                             |\n|   body   | 带有body请求的POST类方法，请求体body内容 |      req.body      | ctx.request.body |          Express依赖bodyparser模块，Koa依赖koa-bodyparser模块          |\n\n## koa写入cookie\n\ncookie的value默认是不能中文，可以使用buffer将中文转化后使用（通用的方法）\n\n```js\n// 设置signed: true  必须要app.keys = ['xxx'] 设置加密秘钥\n// app.keys = ['xxx'] \n\nctx.cookies.set('name', 'value', { \n    // signed: true,\n    httpOnly: true,\n    maxAge: 1000 * 30, // 30秒过期\n});\n// maxAge: 一个数字, 表示从 Date.now() 得到的毫秒数.\n// expires: 一个 Date 对象, 表示 cookie 的到期日期 (默认情况下在会话结束时过期).\n// path: 一个字符串, 表示 cookie 的路径 (默认是/).\n// domain: 一个字符串, 指示 cookie 的域 (无默认值).\n// secure: 一个布尔值, 表示 cookie 是否仅通过 HTTPS 发送 (HTTP 下默认为 false, HTTPS 下默认为 true).\n// httpOnly: 一个布尔值,  客户端无法操作cookie (默认为 true).\n// sameSite: 一个布尔值或字符串, 表示该 cookie 是否为 \"相同站点\" cookie (默认为 false). 可以设置为 'strict', 'lax', 'none', 或 true (映射为 'strict').\n// signed: 一个布尔值, 表示是否要对 cookie 进行签名 (默认为 false).  此签名密钥用于检测下次接收 cookie 时的篡改.\n// overwrite: 一个布尔值, 表示是否覆盖以前设置的同名的 cookie (默认是 false). 如果是 true, 在同一个请求中设置相同名称的所有 Cookie（无论路径或域）是否在设置此Cookie 时从 Set-Cookie 消息头中过滤掉.\n```\n\n# koa-router中间件\n```js\nconst Koa = require('koa');\nconst app = new Koa();\nconst router = require('koa-router')()\n\n// 指定路由前缀\n// router.prefix('/users')\n\nrouter.get('/', async (ctx, next) => {\n    ctx.body = '<h1>koa-router</h1>' // 返回HTML\n    // ctx.body = 'koa-router' // 返回 文本\n    // ctx.body = { a: 1, b: 2} // 返回json\n    // await ctx.render('index', { title: 'hello koa2'})\n})\n\n// 将路由挂载到app上\napp.use(router.routes()).(router.allowedMethods());\n\napp.listen(8888);\n```\n## ctx.body的工作原理\n根据body的类型设置对应的Content-Type，根据Content-Type调用res.write，将数据写入浏览器。可以知道，赋予ctx.body不同类型的值时会返回不同的结果：\n- 为ctx.body赋值JSON对象时，服务器会返回JSON接口；\n- 为ctx.body赋值字符串时，服务器会返回 HTML文本；\n- ctx.render是因为添加了koa-views 中间件而绑定到ctx上的，原本的ctx上是没有render函数的。也就是说，我们可以通过中间件在ctx上绑定我们要使用的功能对象方法。\n\n## koa-router路由实现原理\n\n- 本质上就是对ctx.path进行封装。定义路由，路由的路径会被转义成正则表达式，匹配请求，使用中间件进行处理。\n- koa-router的核心是路由的解析，使用的是path-to-regexp模块（express也使用了该模块），express路由和koa-router路由的区别是中间件的写法不同\n- 匹配请求时，只和路径有关。qureyString参数是不会考虑在内的。比如\n\n```js\nrouter.get('/v1') // GET /v1?name=zhongph  也会匹配上\n```\n- 具名参数，:xxx会被从正则表达式提前处理，具名参数通过ctx.params.xxx获取\n\n```js\nrouter.get('/user/:id', (ctx, next) => {\n    console.log(ctx.params.id)\n}) \n```\n\n- 路由也是中间件，可以定义多个中间件，在这个例子里，第一个中间件根据ID查询到的用户，先被绑定到了ctx对象上，然后交给了下一个中间件进行处理。接着，第二个中间件根据第一个中间件产生的ctx.user完成某些内容，最终决定返回何值。\n\n```js\nrouter.get('/users/:id', \n    function (ctx, next){\n        return User.find0ne (ctx.params.id).then(function (user) {\n            ctx.user = user;\n            return next();\n        })\n    },\n    function (ctx){\n        console.log(ctx.user);\n        //  { id: '001', name:\"zhongph\" }\n    }\n)  \n```\n# koa-static静态服务\n静态服务器是通过静态HTTP服务器来提供HTML、JavaScript、CSS文件及图片的托管服务的.Node.js世界里的 koa-static、http-server等模块和常见的Apache、Nginx功能类似。线上通用做法是将静态资源放到CDN上，利用CDN就近访问来提高访问效率。实际开发环境，通过koa-static等模块能快速实现静态服务器功能。\n\nkoa-static的做法是：\n- 判断请求的文件是否存在，如果存在读取文件返回；如果请求的文件不存在，默认返回当前路径下的index.html\n- 不要把static中间件放到Koa的全局中间件上（如果对于每个请求都要判断一次是不是静态资源，会影响QPS)，最好结合koa-router来处理，按需挂载\n- （QPS：每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准）\n```js\nconst staticServer = require('koa-static');\nconst router = require('koa-router')();\nrouter.get('/public/*', async (ctx, next) => {\n    ctx.url = path.basename(ctx.url)\n    await next()\n}, staticServer(resolve('./public'), { gzip: true})\n)\n```\n## koa-static的底层实现\nkoa-static的底层使用的是koa-send\n### koa-send原理\n- 根据文件后缀名，进行设置 Content-Type。\n- 以 stream 的形式为 ctx.body 赋值，这种方式比 fs.readFileSync 更高效。\n```js\nif (!ctx.type) {\n    ctx.type = type(path, encodingExt);\n}\nctx.body = fs.createReadStream(path);\n```\n其中 ctx.type是根据文件后缀来设置Content-Type的便捷方法，代码如下。\n```js\n// extname 和 basename 是path模块的方法\nfunction type(file, ext){\n    return ext !== '' ? extname(basename(file, ext)) : extname(file);\n}\n```\n\n## 静态服务原理\n根目录下有static文件夹和index.js，static目录下有index.html文件、image和css文件夹，分别放置对应文件。\n```js\nconst Koa = require('koa')\nconst fs = require('fs')\nconst path = require('path')\n\n// 设置一个mime map，设计三种测试类型\nconst MIMES_MAP = {\n  'css': 'text/css',\n  'html': 'text/html',\n  'jpg': 'image/jpeg'\n}\n\nconst app = new Koa()\n\n// 静态资源目录对于相对入口文件index.js的路径\nconst staticPath = './static'\n\n// 解析资源类型\nfunction parseMime(url) {\n  let extName = path.extname(url)\n  extName = extName ? extName.slice(1) : 'unknown'\n  return MIMES_MAP[extName]\n}\n\napp.use(async (ctx) => {\n  // 静态资源目录在本地的绝对路径\n  let fullStaticPath = path.join(__dirname, staticPath)\n\n  // 获取静态资源内容，有可能是文件内容，目录，或404\n  let content = fs.readFileSync(path.join(fullStaticPath, ctx.url), 'binary')\n\n  // 解析请求内容的类型\n  let mime = parseMime(ctx.url)\n\n  // 如果有对应的文件类型，就配置上下文的类型\n  if (mime) {\n    ctx.type = mime\n  }\n\n  // 输出静态资源内容\n  if (mime && mime.indexOf('image/') >= 0) {\n    // 如果是图片，则用node原生res，输出二进制数据\n    ctx.res.writeHead(200)\n    ctx.res.write(content, 'binary')\n    ctx.res.end()\n  } else {\n    // 其他则输出文本\n    ctx.body = content\n  }\n})\n\napp.listen(4000, () => {\n  console.log('server is running, port is 4000')\n})\n```\n# koa-mount\nkoa-static不能用来设置请求前缀，如果想实现这个功能，就需要用到koa-mount，koa-mount是一个将中间件挂载到指定路径的Koa中间件，它可以挂载任意koa中间件。koa-mount和koa-static结合，就可以实现和Express一样的静态服务器带有请求前缀的功能，代码如下。\n\n```js\nconst Koa = require('koa');\nconst koaStatic = require('koa-static');\nconst mount = require('koa-mount');\nconst app = new Koa();\n// app.use(koaStatic('.'))\n\n// 设置请求前缀\napp.use(mount('/static', koaStatic('.'))\napp.listen (3000);\n\n// 访问 http:/127.0.0.1:3000/static/package.json\n```\n# koa-views\n\n- koa-views是一个koa的动态模板引擎渲染中间件，主要用于简单的前后端不分离的项目。通过控制路由的方式，返回不同的页面。以前的服务端渲染页面，如JSP/PHP，就是指模板引擎。\n\n- 模板引擎采取了一种复用思想，通过定义模板，在使用时和数据一起编译，生成HTML页面，以便浏览器渲染。`编译(模板＋数据) = HTML`，模板是不可变的，可变的是数据，然而数据是从哪里来的呢? 可以从数据库读取，可以访问接口获得，甚至可以模拟，具体取决于业务场景。\n\n- 模板推荐：ejs、pug（jade）\n\n```js\nconst views = require('koa-views');\n\n// 通过app.use绑定到app上，实际上是给app对象增加ctx.render方法的绑定\napp.use(views(__dirname + '/views', { \n    extension: 'pug'\n}))\n\n// 模板文件：views/index，相对位置在views目录下\nrouter.get('/', async (ctx, next) => {\n    await ctx.render('index', { title: 'hello koa2'}) // ctx.render渲染模板\n})\n```\n\n1. 这里的ctx.render就是用于渲染模板的方法，它有两个参数。\n\n- index: 模板，采用相对路径，对应的是views目录下的index.pug。\n- JSON对象: 需要传入到模板内的数据。\n\n2. ctx.render 执行的操作：\n\n- 通过文件读取 index.pug 模板。\n- 使用 pug 模板引擎编译器将数据和模板内容编译为 HTML 字符串。\n- 将 Content-Type 设置为 text/html。\n- 将 statusCode 状态码设置为200。\n- 通过 http模块 底层的 res.write 和 res.end 方法将 HTML 字符串写入浏览器\n\n## 模板引擎\n\n模板引擎的用途：用于动态渲染页面，与cli结合，作为模板使用\n\n### ejs\n\n- 语句的需要有 <%  %> （尖括号和百分号）\n- 如果需要填入变量，需要在<%添加一个等号，<%=\n\n```ejs\n<ul>\n    <% user.forEach(function(user){ %>\n        <li> <%= user.name %></li>\n    <% }) %>\n</ul>\n```\n### pug\n\n- （安装`npm i -s pug`）pug的基本使用：在这段模板定义代码里，if语句首先判断user对象是否存在，如果存在就显示`<h2>`标签，并把user.name作为变量嵌入`<h2>`标签的显示内容里。\n```pug\n//- user.pug\nif user\n    h2= user.name\n```\n- pug的编译：使用 pug-cli 或 pug-server 可以自动将模板文件编译为HTML文件，并提供HTTP静态服务。此外，在线转化工具 html2jade，它可以将已有的HTML 代码转换为pug模板，非常的使用。\n\n- 使用模板引擎（pug）时要注意：\n    - 引用公共模块时使用include。实现父子布局继承时使用extends。\n    - 定义布局模板时使用Layout，布局留空时使用block。缩进时使用Tab键而非空格。\n    - 不管有没有属性，标签和value之间都要有空格。\n    - 可以通过预编译来提高模板执行效率。\n\n\n- 编译pug\n\n```js\nconst pug = require('pug');\nconst fs = require('fs');\n\n// 通过fs.readFileSync读取模板文件\n// 当读取到的内容通过 toString 转化为字符串\nconst user_pug_str = fs.readFileSync('./user.pug').toString();\n\n// pug.render方法进行编译，编译后的结果是HTML代码\nvar user_html = pug.render(user_pug_str, {\n    user: {\n        name: 'yolo'\n    }\n})\n\nconsole.log(user_html) // 编译结果 <h2>yolo</h2>\n```\n\n- for循环显示列表\n\n```pug\n//- list.pug\nul\n    each item in users\n        li= item.name\n```\n\n### pug模板引擎规则\n\n1. 标签属性\n\n```pug\np#root.container\n//- 等价于\np(id='root', class='container')\n//- <p id='root' class='container'></p>\n```\n\n2. 标签内容value，标签与内容之间有空格\n\n```pug\np this is a tag\n//- <p>this is a tag</p>\n```\n\n3. 层级嵌套\n   原理：利用缩进来判断包含关系。缩进方式有两种：使用空格和使用Tab建（推荐Tab键）\n\n```pug\n<ul class=\"parent\">\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n</ul>\n\n//- pug写法\nul.parent\n    li 1\n    li 2\n    li 3\n```\n\n4. 变量\n\n```pug\n//- 代码里等号，表示后面接的是变量，子类extends继承该布局时，name变量在子页面里也可以使用\np= name \n\n//- 插写法\np #{ name }\n\n//- 不转义代码 !{ html }\n!{ \"<script></script>\" }\n```\n\n5. if和each\n\n```pug\n//- user.pug\nif user\n    h2= user.name\n\n//- list.pug  index是下标\nul\n    each item, index in users\n        li= item.name\n```\n\n6. 布局\n\n```pug\n//- extends指明了当前pug页面需要继承哪个layout布局\nextends ../layout\n\n//- 实现block模块，名字必须和layout里一致\nblock left_content\n\nblock main_content\n```\n\n7. 内嵌sctipt代码，script后面的点 `.`必须要有\n\n```pug\nscript.\n    function test(){}\n```\n\n# koa-compose\n\n可以将多个中间件合并成一个中间件\n\n```js\nconst compose= require('koa-compose')\n\nmodule.exports = (ctx, next) => {\nreturn compose([\n    (ctx,next) => {\n        //中间件\n        return next()\n    }\n    (ctx, next) => {\n        //中间件\n        return next()\n    }\n])(ctx, next)\n}\n```\n# koa-bodyparser\n\nkoa-bodyparser中默认只支持JSON、form两种格式的解析，其他类型的解析需要在enableTypes中配置，如`'text/plain'`配置为text。\n\n```js\nconst bodyparser = require('koa-bodyparser')\n// 将bodyparser挂载到app上\napp.use(bodyparser(\n    // 配置更多的类型\n    enableTypes: ['json', 'form', 'text']\n))\n// 访问 body参数\nctx.request.body\n// 如果post请求后面拼接了参数， 也可以通过ctx.query获取\n```\n\n# @koa/cors\n跨域问题\n```js\n// 安装 @koa/cors 或者 koa2-cors（很久没有更新）\n// npm i koa2-cors\nconst cors = require('@koa/cors') //  https://www.npmjs.com/package/@koa/cors\n\n// 这里cors中间件一定要写在路由之前\napp.use(cors());\napp.use(router.routes(), router.allowedMethods())\n```\n# @koa-multer（文件上传模块）\n文件上传有两种方式:\n- 调用CDN的 SDK将文件直接从前端上传到CDN上；\n- 采用常规上传方式，先将文件上传到Node.js服务器，再由 Node.js服务器转存到CDN；\n- 二者的差别在于是否需要通过服务器对文件进行定制，如果没有这样的需求，直接上传就是很不错的方式。\n\n@koa-multer是一个非常便于使用的文件上传模块，使用@koa-multer可以解析body中的流，并将其保存成文件。@koa-multer不会处理multipart/form-data以外的任何表单\n\n- [@koa/multer文件上传](https://blog.csdn.net/qq_42778001/article/details/104442163)\n\n```js\nconst Koa = require('koa')\nconst Router = require('koa-router')\nconst route = new Router()\nconst multer = require('@koa/multer')\nconst path = require('path')\n//上传⽂件存放路径、及⽂件命名\nconst storage = multer.diskStorage({\n    destination: function (req, file, cb) {\n        cb(null, path.join(__dirname ,'/public'))\n    },\n    filename: function (req, file, cb) {\n        let type = file.originalname.split('.')[1]\n        cb(null, `${file.fieldname}-${Date.now().toString(16)}.${type}`)\n    }\n})\n//⽂件上传限制\nconst limits = {\n    fields: 10,  // ⾮⽂件字段的数量\n    fileSize: 500 * 1024,  //⽂件⼤⼩单位 b\n    files: 1 // ⽂件数量\n}\nconst upload = multer({storage,limits})\n\n// 在路由中，可通过 ctx.file 获取上传完毕的⽂件信息，多⽂件上传可通过 ctx.files 获取\nroute.post('/user/file', async (ctx,next)=>{\n  // file名字前后端要一致\n    let err = await upload.single('file')(ctx, next)\n                .then(res=>res)\n                .catch(err=>err)\n    if(err){\n        ctx.body = {\n            code:0,\n            msg : err.message\n        }\n    }else{\n        ctx.body = {\n            code:1,\n            data:ctx.file\n        }\n    }\n  })\n})\napp.use(router.routes()).use(router.allowedMethods())\napp.listen(3000)\n  \n```\n# 在koa中发起请求（node-fetch和axios）\n## node-fetch\n- [node-fetch](https://www.npmjs.com/package/node-fetch)\n```js\n// npm i --save-dev node-fetch\nconst fetch = require('node-fetch')\nfetch('http://127.0.0.1:3000/users/post',\n    {   \n        method: 'POST',\n        body: JSON.stringify({\n            username: 'yourUsername',\n            password: 'yourPassword'\n        }),\n        headers:{\n            'Content-Type': 'application/json'\n        }\n    }).then(function(res) {\n        return res.json();\n    }.then(function (json){\n        console.log(json)\n    }\n```\n# API访问鉴权：JSON Web Tokens(JWT)\n\n## 直接使用原始的JWT进行鉴权\n\n- 客户端申请令牌时，使用jwt.sign进行签名，并将签名结果返回客户端；\n- 签名体(payload）会包含用户的必要信息，以便通过 jwt.verify进行校验时能获得该信息，作为后面的查询依据；\n- 当API请求携带令牌时，需要先使用jwt.verify进行校验，成功后才能根据用户信息查询并返回数据。\n\n```js\nconst jwt = require('jsonwebtoken');\nconst secret = 'secretxxx';\nvar token = jwti.sign({\n    data: {\n        user_id: 100000,\n        username: 'yolo',\n        user_email:'yolo.com'\n    }, secret, { expiresIn: '1h'});\n})\n\n// 获取令牌信息\n// 检查PoST的信息、URL查询参数、头部信息\nconst token = ctx.request.body.token || ctx.query.token || ctx.headers['x-access-token']\n\n\n// 验证\ntry{\n    var decoded = jwt.verify(token, secret)\n    console.log(decoded);\n}catch (err) {\n\n}\n```\n\n## 使用koa-jwt模块\n\n```js\nconst jwt = require('koa-jwt');\n\nrouter.get('/api', jwt({ secret: 'secretXXX'}), (ctx, next) => {\n\n})\n```\n\n# koa-etag（ETag处理）\n\nETag 是前端缓存优化的重要部分。ETag 在服务器端生成后，客户端将通过If-Match或If-None-Match条件判断请求来验证资源是否被修改，其中比较常用的是If-None-Match。如果资源没有被修改则返回304状态码，如果被修改则返回正常值。\n一般的静态 HTTP服务器都会根据文件内容来判断文件是否被修改，进而决定是否需要给客户端返回新内容。\n在Koa里，我们需要使用koa-conditional-get和 koa-etag插件来提供ETag 功能，示例如下。\n\n- 这里定义的变量etag就是在Koa中用于生成ETag 的中间件。\n- ETag缓存是通过conditional-get拦截才能生效的。\n- koa-conditional-get 一定要放在koa-etag 前面。\n\n```js\nconst conditional = require('koa-conditional-get');\nconst etag = require('koa-etag');\n t机市用\n// etag模块 通常和 conditional-get 模块一起使用\napp.use(conditional());\napp.use(etag());\n```\n\n### koa-session(会话session)\n\n1. koa-session + ioredis\n2. koa-generic-session + koa-redis(基于redis存储)\n\n- 依赖Redis，因此需要先启动Redis服务器。\n- 通过ctx.session进行会话信息处理。\n- TTL是Session Store的超时时间，这个值一般是30min。\n\n```js\nconst Koa = require('koa')\nconst session = require('koa-generic-session')\nconst RedisStore = require('koa-redis')\nconst app = new Koa()\n\napp.keys = ['keys', 'keykeys'];\n//加入全局中间件\napp.use(session({   \n    store: new RedisStore(),\n    ttl: 30 * 60 * 1000  // 半小时\n}))\n// Session Store其实就是将会话存储在不同持久化存储中以后抽象出来的通用层，其基本的存、取和销毁操作如下。\n// - get(sid): 根据sid来获取会话信息。\n// - set(sid, sess, ttl): 通过sid设置会话信息，ttl指的是会话可存活时间(ms\n// - destroy(sid): 根据sid销毁会话。\n\n// 在路由中可以直接通过ctx.session对后面的中间件进行操作\napp.use (ctx => {\nswitch (ctx, path){\n    case '/get':\n        ctx.session.user = { name: 'yolo' }\n        ctx.body = ctx.session.user\n        break;\n    case '/remove':\n        ctx.session =null\n        ctx.body = \"removed\"\n        break\n}\napp.listen (8080)\n```\n# log4js(日志处理)\n\n- [log4js](https://www.npmjs.com/package/log4js)\n\n```js\nconst log4js = require(\"log4js\");\nconst logger = log4js.getLogger();\nlogger.level = \"debug\";\nlogger.debug(\"Some debug messages\");\n```\n\n# 参考\n- [koa官网文档](https://koa.bootcss.com/#)\n- 《Koa开发 入门、进阶与实战》\n- 《Node.js12 实战》\n- 《狼叔卷2》","source":"_posts/front_end/koa-base.md","raw":"---\ntitle: Koa 基础开发 \ndate: 2022-02-20 19:35:10\ncategories:\n  - 前端\ntags:\n  - Node\n  - Koa\ntoc: true # 是否启用内容索引\ncomments: true\ncopyright: false\n---\n[koa官网文档](https://koa.bootcss.com/#)\n\nkoa是一个基于http模块进行封装的框架，koa本身没有内置任何中间件，需要手动下载中间件（约定了中间件的写法），可以用来做服务端接口，也可以做接口的转发和聚合，RPC服务组装、SSR。\n\nkoa导出的是一个类，需要通过new 来实例化，koa也是继承了Events模块，性能非常好，代码量少，易于定制，很多框架都是基于koa进行定制开发（egg，thinkjs、midway都是基于koa2）。\n\n# 基于koa框架的web开发要点\n\nES6语法、异步流程控制、数据库操作、API接口转发、HTTP集成、Koa中间件\n\n# koa与express的区别\n\n- koa中间件可以对请求和响应同时进行拦截，express只能对请求进行拦截，而且是有顺序的，不能对响应进行拦截。\n- koa和express都内置了cookies模块、http模块，此外，express还内置了路由、视图模块。相对于express，koa还是比较轻量的。\n\n# koa中间件写法\n\n- 中间件可以分为全局中间件和局部中间件，局部中间件在对应的路由里生效，比如静态资源服务，在特定的路由才执行\n- 中间件是框架的扩展机制，对请求响应过程中加入中间件，应对处理复杂的业务逻辑。挂载在入口文件的中间件，会按照顺序执行。\n- koa中间件是洋葱模型，跳转的信号是next()，通过compose实现，最终的返回值是一个 function(context, next)。\n```js\ncompose([fl, f2,..,fn])转化为了f1(..f(n-1)(fn(noop()))\n```\n- 在koa引入的中间件，需要使用app.use将中间件挂载到app上\n```js\napp.use(async (ctx, next) => {\n  console.log(1)\n  await next()\n  console.log(2)\n})\n\napp.use(async (ctx, next) => {\n  console.log(3)\n  await next()\n  console.log(4)\n})\n\n// 输出的结果是1342\n```\n## koa中间件的工作过程\n中间件类似一个过滤器，koa中间件的工作大致过程可以分为三部分：\n- 处理请求前先完成一些准备工作。\n- 进行业务逻辑处理或通过next将业务交由下一个中间件处理。\n- 后面的中间件完成处理后会进行回溯，执行处理后的操作。\n\n# ctx 参数\n\n## ctx头部信息\n\n- 设置头部信息：`ctx.header(ctx.headers)`\n- 获取头部信息：`ctx.get('key')`\n- ctx.method，获取请求方法\n- ctx.status或者ctx.response.status，获取状态码和设置状态码\n- ctx.type，设置Content-Type\n- ctx.response.header = ctx.request.header = ctx.header\n- ctx.req = ctx.res = ctx.request = ctx.response\n\n## ctx地址参数\n\nkoa解析`http://127.0.0.1:3000/api/v1/getUser?a=1&b=2#abc`地址后，会将返回的结果赋值给ctx对象。\n\n|       API       |                       示例值                       |\n| :-------------: | :------------------------------------------------: |\n|    ctx.href（不包括hash） | `http://127.0.0.1:3000/api/v1/getUser?a=1&b=2` |\n|    ctx.path    |               /api/v1/getUser               |\n|     ctx.url     |           /api/v1/getUser?a=1&b=2           |\n|   ctx.search   |                      ?a=1&b=2                      |\n| ctx.querystring |                      a=1&b=2                      |\n|    ctx.query    |                 `{\"a\": \"1\",\"b\": \"2\"} `             |\n|   ctx.origin   |               `http://127.0.0.1:3000`               |\n|    ctx.host    |                   127.0.0.1:3000                   |\n|  ctx.hostname  |                     127.0.0.1                     |\n|  ctx.protocol  |                        http                        |\n|   ctx.secure（https为true）   |          false                       |\n\n## 获取不同的参数\n\n| 参数名称 |                          描述                          | Express获取方法 | Koa获取方法 |                                依赖模块                                |\n| :------: | :----------------------------------: | :-----------------: | :--------------: | :--------------------------------------------------------------------: |\n|  params  |                具名参数，比如`/users/:id`                |     req.params     |    ctx.params    | Koa需要依赖koa-router内置的ctx.params，而Express中有内置路由，无须依赖 |\n|  query  |                   查询字符串`?a=1&b=2`                   |      req.query      |    ctx.query    |                             内置，无须依赖                             |\n|   body   | 带有body请求的POST类方法，请求体body内容 |      req.body      | ctx.request.body |          Express依赖bodyparser模块，Koa依赖koa-bodyparser模块          |\n\n## koa写入cookie\n\ncookie的value默认是不能中文，可以使用buffer将中文转化后使用（通用的方法）\n\n```js\n// 设置signed: true  必须要app.keys = ['xxx'] 设置加密秘钥\n// app.keys = ['xxx'] \n\nctx.cookies.set('name', 'value', { \n    // signed: true,\n    httpOnly: true,\n    maxAge: 1000 * 30, // 30秒过期\n});\n// maxAge: 一个数字, 表示从 Date.now() 得到的毫秒数.\n// expires: 一个 Date 对象, 表示 cookie 的到期日期 (默认情况下在会话结束时过期).\n// path: 一个字符串, 表示 cookie 的路径 (默认是/).\n// domain: 一个字符串, 指示 cookie 的域 (无默认值).\n// secure: 一个布尔值, 表示 cookie 是否仅通过 HTTPS 发送 (HTTP 下默认为 false, HTTPS 下默认为 true).\n// httpOnly: 一个布尔值,  客户端无法操作cookie (默认为 true).\n// sameSite: 一个布尔值或字符串, 表示该 cookie 是否为 \"相同站点\" cookie (默认为 false). 可以设置为 'strict', 'lax', 'none', 或 true (映射为 'strict').\n// signed: 一个布尔值, 表示是否要对 cookie 进行签名 (默认为 false).  此签名密钥用于检测下次接收 cookie 时的篡改.\n// overwrite: 一个布尔值, 表示是否覆盖以前设置的同名的 cookie (默认是 false). 如果是 true, 在同一个请求中设置相同名称的所有 Cookie（无论路径或域）是否在设置此Cookie 时从 Set-Cookie 消息头中过滤掉.\n```\n\n# koa-router中间件\n```js\nconst Koa = require('koa');\nconst app = new Koa();\nconst router = require('koa-router')()\n\n// 指定路由前缀\n// router.prefix('/users')\n\nrouter.get('/', async (ctx, next) => {\n    ctx.body = '<h1>koa-router</h1>' // 返回HTML\n    // ctx.body = 'koa-router' // 返回 文本\n    // ctx.body = { a: 1, b: 2} // 返回json\n    // await ctx.render('index', { title: 'hello koa2'})\n})\n\n// 将路由挂载到app上\napp.use(router.routes()).(router.allowedMethods());\n\napp.listen(8888);\n```\n## ctx.body的工作原理\n根据body的类型设置对应的Content-Type，根据Content-Type调用res.write，将数据写入浏览器。可以知道，赋予ctx.body不同类型的值时会返回不同的结果：\n- 为ctx.body赋值JSON对象时，服务器会返回JSON接口；\n- 为ctx.body赋值字符串时，服务器会返回 HTML文本；\n- ctx.render是因为添加了koa-views 中间件而绑定到ctx上的，原本的ctx上是没有render函数的。也就是说，我们可以通过中间件在ctx上绑定我们要使用的功能对象方法。\n\n## koa-router路由实现原理\n\n- 本质上就是对ctx.path进行封装。定义路由，路由的路径会被转义成正则表达式，匹配请求，使用中间件进行处理。\n- koa-router的核心是路由的解析，使用的是path-to-regexp模块（express也使用了该模块），express路由和koa-router路由的区别是中间件的写法不同\n- 匹配请求时，只和路径有关。qureyString参数是不会考虑在内的。比如\n\n```js\nrouter.get('/v1') // GET /v1?name=zhongph  也会匹配上\n```\n- 具名参数，:xxx会被从正则表达式提前处理，具名参数通过ctx.params.xxx获取\n\n```js\nrouter.get('/user/:id', (ctx, next) => {\n    console.log(ctx.params.id)\n}) \n```\n\n- 路由也是中间件，可以定义多个中间件，在这个例子里，第一个中间件根据ID查询到的用户，先被绑定到了ctx对象上，然后交给了下一个中间件进行处理。接着，第二个中间件根据第一个中间件产生的ctx.user完成某些内容，最终决定返回何值。\n\n```js\nrouter.get('/users/:id', \n    function (ctx, next){\n        return User.find0ne (ctx.params.id).then(function (user) {\n            ctx.user = user;\n            return next();\n        })\n    },\n    function (ctx){\n        console.log(ctx.user);\n        //  { id: '001', name:\"zhongph\" }\n    }\n)  \n```\n# koa-static静态服务\n静态服务器是通过静态HTTP服务器来提供HTML、JavaScript、CSS文件及图片的托管服务的.Node.js世界里的 koa-static、http-server等模块和常见的Apache、Nginx功能类似。线上通用做法是将静态资源放到CDN上，利用CDN就近访问来提高访问效率。实际开发环境，通过koa-static等模块能快速实现静态服务器功能。\n\nkoa-static的做法是：\n- 判断请求的文件是否存在，如果存在读取文件返回；如果请求的文件不存在，默认返回当前路径下的index.html\n- 不要把static中间件放到Koa的全局中间件上（如果对于每个请求都要判断一次是不是静态资源，会影响QPS)，最好结合koa-router来处理，按需挂载\n- （QPS：每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准）\n```js\nconst staticServer = require('koa-static');\nconst router = require('koa-router')();\nrouter.get('/public/*', async (ctx, next) => {\n    ctx.url = path.basename(ctx.url)\n    await next()\n}, staticServer(resolve('./public'), { gzip: true})\n)\n```\n## koa-static的底层实现\nkoa-static的底层使用的是koa-send\n### koa-send原理\n- 根据文件后缀名，进行设置 Content-Type。\n- 以 stream 的形式为 ctx.body 赋值，这种方式比 fs.readFileSync 更高效。\n```js\nif (!ctx.type) {\n    ctx.type = type(path, encodingExt);\n}\nctx.body = fs.createReadStream(path);\n```\n其中 ctx.type是根据文件后缀来设置Content-Type的便捷方法，代码如下。\n```js\n// extname 和 basename 是path模块的方法\nfunction type(file, ext){\n    return ext !== '' ? extname(basename(file, ext)) : extname(file);\n}\n```\n\n## 静态服务原理\n根目录下有static文件夹和index.js，static目录下有index.html文件、image和css文件夹，分别放置对应文件。\n```js\nconst Koa = require('koa')\nconst fs = require('fs')\nconst path = require('path')\n\n// 设置一个mime map，设计三种测试类型\nconst MIMES_MAP = {\n  'css': 'text/css',\n  'html': 'text/html',\n  'jpg': 'image/jpeg'\n}\n\nconst app = new Koa()\n\n// 静态资源目录对于相对入口文件index.js的路径\nconst staticPath = './static'\n\n// 解析资源类型\nfunction parseMime(url) {\n  let extName = path.extname(url)\n  extName = extName ? extName.slice(1) : 'unknown'\n  return MIMES_MAP[extName]\n}\n\napp.use(async (ctx) => {\n  // 静态资源目录在本地的绝对路径\n  let fullStaticPath = path.join(__dirname, staticPath)\n\n  // 获取静态资源内容，有可能是文件内容，目录，或404\n  let content = fs.readFileSync(path.join(fullStaticPath, ctx.url), 'binary')\n\n  // 解析请求内容的类型\n  let mime = parseMime(ctx.url)\n\n  // 如果有对应的文件类型，就配置上下文的类型\n  if (mime) {\n    ctx.type = mime\n  }\n\n  // 输出静态资源内容\n  if (mime && mime.indexOf('image/') >= 0) {\n    // 如果是图片，则用node原生res，输出二进制数据\n    ctx.res.writeHead(200)\n    ctx.res.write(content, 'binary')\n    ctx.res.end()\n  } else {\n    // 其他则输出文本\n    ctx.body = content\n  }\n})\n\napp.listen(4000, () => {\n  console.log('server is running, port is 4000')\n})\n```\n# koa-mount\nkoa-static不能用来设置请求前缀，如果想实现这个功能，就需要用到koa-mount，koa-mount是一个将中间件挂载到指定路径的Koa中间件，它可以挂载任意koa中间件。koa-mount和koa-static结合，就可以实现和Express一样的静态服务器带有请求前缀的功能，代码如下。\n\n```js\nconst Koa = require('koa');\nconst koaStatic = require('koa-static');\nconst mount = require('koa-mount');\nconst app = new Koa();\n// app.use(koaStatic('.'))\n\n// 设置请求前缀\napp.use(mount('/static', koaStatic('.'))\napp.listen (3000);\n\n// 访问 http:/127.0.0.1:3000/static/package.json\n```\n# koa-views\n\n- koa-views是一个koa的动态模板引擎渲染中间件，主要用于简单的前后端不分离的项目。通过控制路由的方式，返回不同的页面。以前的服务端渲染页面，如JSP/PHP，就是指模板引擎。\n\n- 模板引擎采取了一种复用思想，通过定义模板，在使用时和数据一起编译，生成HTML页面，以便浏览器渲染。`编译(模板＋数据) = HTML`，模板是不可变的，可变的是数据，然而数据是从哪里来的呢? 可以从数据库读取，可以访问接口获得，甚至可以模拟，具体取决于业务场景。\n\n- 模板推荐：ejs、pug（jade）\n\n```js\nconst views = require('koa-views');\n\n// 通过app.use绑定到app上，实际上是给app对象增加ctx.render方法的绑定\napp.use(views(__dirname + '/views', { \n    extension: 'pug'\n}))\n\n// 模板文件：views/index，相对位置在views目录下\nrouter.get('/', async (ctx, next) => {\n    await ctx.render('index', { title: 'hello koa2'}) // ctx.render渲染模板\n})\n```\n\n1. 这里的ctx.render就是用于渲染模板的方法，它有两个参数。\n\n- index: 模板，采用相对路径，对应的是views目录下的index.pug。\n- JSON对象: 需要传入到模板内的数据。\n\n2. ctx.render 执行的操作：\n\n- 通过文件读取 index.pug 模板。\n- 使用 pug 模板引擎编译器将数据和模板内容编译为 HTML 字符串。\n- 将 Content-Type 设置为 text/html。\n- 将 statusCode 状态码设置为200。\n- 通过 http模块 底层的 res.write 和 res.end 方法将 HTML 字符串写入浏览器\n\n## 模板引擎\n\n模板引擎的用途：用于动态渲染页面，与cli结合，作为模板使用\n\n### ejs\n\n- 语句的需要有 <%  %> （尖括号和百分号）\n- 如果需要填入变量，需要在<%添加一个等号，<%=\n\n```ejs\n<ul>\n    <% user.forEach(function(user){ %>\n        <li> <%= user.name %></li>\n    <% }) %>\n</ul>\n```\n### pug\n\n- （安装`npm i -s pug`）pug的基本使用：在这段模板定义代码里，if语句首先判断user对象是否存在，如果存在就显示`<h2>`标签，并把user.name作为变量嵌入`<h2>`标签的显示内容里。\n```pug\n//- user.pug\nif user\n    h2= user.name\n```\n- pug的编译：使用 pug-cli 或 pug-server 可以自动将模板文件编译为HTML文件，并提供HTTP静态服务。此外，在线转化工具 html2jade，它可以将已有的HTML 代码转换为pug模板，非常的使用。\n\n- 使用模板引擎（pug）时要注意：\n    - 引用公共模块时使用include。实现父子布局继承时使用extends。\n    - 定义布局模板时使用Layout，布局留空时使用block。缩进时使用Tab键而非空格。\n    - 不管有没有属性，标签和value之间都要有空格。\n    - 可以通过预编译来提高模板执行效率。\n\n\n- 编译pug\n\n```js\nconst pug = require('pug');\nconst fs = require('fs');\n\n// 通过fs.readFileSync读取模板文件\n// 当读取到的内容通过 toString 转化为字符串\nconst user_pug_str = fs.readFileSync('./user.pug').toString();\n\n// pug.render方法进行编译，编译后的结果是HTML代码\nvar user_html = pug.render(user_pug_str, {\n    user: {\n        name: 'yolo'\n    }\n})\n\nconsole.log(user_html) // 编译结果 <h2>yolo</h2>\n```\n\n- for循环显示列表\n\n```pug\n//- list.pug\nul\n    each item in users\n        li= item.name\n```\n\n### pug模板引擎规则\n\n1. 标签属性\n\n```pug\np#root.container\n//- 等价于\np(id='root', class='container')\n//- <p id='root' class='container'></p>\n```\n\n2. 标签内容value，标签与内容之间有空格\n\n```pug\np this is a tag\n//- <p>this is a tag</p>\n```\n\n3. 层级嵌套\n   原理：利用缩进来判断包含关系。缩进方式有两种：使用空格和使用Tab建（推荐Tab键）\n\n```pug\n<ul class=\"parent\">\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n</ul>\n\n//- pug写法\nul.parent\n    li 1\n    li 2\n    li 3\n```\n\n4. 变量\n\n```pug\n//- 代码里等号，表示后面接的是变量，子类extends继承该布局时，name变量在子页面里也可以使用\np= name \n\n//- 插写法\np #{ name }\n\n//- 不转义代码 !{ html }\n!{ \"<script></script>\" }\n```\n\n5. if和each\n\n```pug\n//- user.pug\nif user\n    h2= user.name\n\n//- list.pug  index是下标\nul\n    each item, index in users\n        li= item.name\n```\n\n6. 布局\n\n```pug\n//- extends指明了当前pug页面需要继承哪个layout布局\nextends ../layout\n\n//- 实现block模块，名字必须和layout里一致\nblock left_content\n\nblock main_content\n```\n\n7. 内嵌sctipt代码，script后面的点 `.`必须要有\n\n```pug\nscript.\n    function test(){}\n```\n\n# koa-compose\n\n可以将多个中间件合并成一个中间件\n\n```js\nconst compose= require('koa-compose')\n\nmodule.exports = (ctx, next) => {\nreturn compose([\n    (ctx,next) => {\n        //中间件\n        return next()\n    }\n    (ctx, next) => {\n        //中间件\n        return next()\n    }\n])(ctx, next)\n}\n```\n# koa-bodyparser\n\nkoa-bodyparser中默认只支持JSON、form两种格式的解析，其他类型的解析需要在enableTypes中配置，如`'text/plain'`配置为text。\n\n```js\nconst bodyparser = require('koa-bodyparser')\n// 将bodyparser挂载到app上\napp.use(bodyparser(\n    // 配置更多的类型\n    enableTypes: ['json', 'form', 'text']\n))\n// 访问 body参数\nctx.request.body\n// 如果post请求后面拼接了参数， 也可以通过ctx.query获取\n```\n\n# @koa/cors\n跨域问题\n```js\n// 安装 @koa/cors 或者 koa2-cors（很久没有更新）\n// npm i koa2-cors\nconst cors = require('@koa/cors') //  https://www.npmjs.com/package/@koa/cors\n\n// 这里cors中间件一定要写在路由之前\napp.use(cors());\napp.use(router.routes(), router.allowedMethods())\n```\n# @koa-multer（文件上传模块）\n文件上传有两种方式:\n- 调用CDN的 SDK将文件直接从前端上传到CDN上；\n- 采用常规上传方式，先将文件上传到Node.js服务器，再由 Node.js服务器转存到CDN；\n- 二者的差别在于是否需要通过服务器对文件进行定制，如果没有这样的需求，直接上传就是很不错的方式。\n\n@koa-multer是一个非常便于使用的文件上传模块，使用@koa-multer可以解析body中的流，并将其保存成文件。@koa-multer不会处理multipart/form-data以外的任何表单\n\n- [@koa/multer文件上传](https://blog.csdn.net/qq_42778001/article/details/104442163)\n\n```js\nconst Koa = require('koa')\nconst Router = require('koa-router')\nconst route = new Router()\nconst multer = require('@koa/multer')\nconst path = require('path')\n//上传⽂件存放路径、及⽂件命名\nconst storage = multer.diskStorage({\n    destination: function (req, file, cb) {\n        cb(null, path.join(__dirname ,'/public'))\n    },\n    filename: function (req, file, cb) {\n        let type = file.originalname.split('.')[1]\n        cb(null, `${file.fieldname}-${Date.now().toString(16)}.${type}`)\n    }\n})\n//⽂件上传限制\nconst limits = {\n    fields: 10,  // ⾮⽂件字段的数量\n    fileSize: 500 * 1024,  //⽂件⼤⼩单位 b\n    files: 1 // ⽂件数量\n}\nconst upload = multer({storage,limits})\n\n// 在路由中，可通过 ctx.file 获取上传完毕的⽂件信息，多⽂件上传可通过 ctx.files 获取\nroute.post('/user/file', async (ctx,next)=>{\n  // file名字前后端要一致\n    let err = await upload.single('file')(ctx, next)\n                .then(res=>res)\n                .catch(err=>err)\n    if(err){\n        ctx.body = {\n            code:0,\n            msg : err.message\n        }\n    }else{\n        ctx.body = {\n            code:1,\n            data:ctx.file\n        }\n    }\n  })\n})\napp.use(router.routes()).use(router.allowedMethods())\napp.listen(3000)\n  \n```\n# 在koa中发起请求（node-fetch和axios）\n## node-fetch\n- [node-fetch](https://www.npmjs.com/package/node-fetch)\n```js\n// npm i --save-dev node-fetch\nconst fetch = require('node-fetch')\nfetch('http://127.0.0.1:3000/users/post',\n    {   \n        method: 'POST',\n        body: JSON.stringify({\n            username: 'yourUsername',\n            password: 'yourPassword'\n        }),\n        headers:{\n            'Content-Type': 'application/json'\n        }\n    }).then(function(res) {\n        return res.json();\n    }.then(function (json){\n        console.log(json)\n    }\n```\n# API访问鉴权：JSON Web Tokens(JWT)\n\n## 直接使用原始的JWT进行鉴权\n\n- 客户端申请令牌时，使用jwt.sign进行签名，并将签名结果返回客户端；\n- 签名体(payload）会包含用户的必要信息，以便通过 jwt.verify进行校验时能获得该信息，作为后面的查询依据；\n- 当API请求携带令牌时，需要先使用jwt.verify进行校验，成功后才能根据用户信息查询并返回数据。\n\n```js\nconst jwt = require('jsonwebtoken');\nconst secret = 'secretxxx';\nvar token = jwti.sign({\n    data: {\n        user_id: 100000,\n        username: 'yolo',\n        user_email:'yolo.com'\n    }, secret, { expiresIn: '1h'});\n})\n\n// 获取令牌信息\n// 检查PoST的信息、URL查询参数、头部信息\nconst token = ctx.request.body.token || ctx.query.token || ctx.headers['x-access-token']\n\n\n// 验证\ntry{\n    var decoded = jwt.verify(token, secret)\n    console.log(decoded);\n}catch (err) {\n\n}\n```\n\n## 使用koa-jwt模块\n\n```js\nconst jwt = require('koa-jwt');\n\nrouter.get('/api', jwt({ secret: 'secretXXX'}), (ctx, next) => {\n\n})\n```\n\n# koa-etag（ETag处理）\n\nETag 是前端缓存优化的重要部分。ETag 在服务器端生成后，客户端将通过If-Match或If-None-Match条件判断请求来验证资源是否被修改，其中比较常用的是If-None-Match。如果资源没有被修改则返回304状态码，如果被修改则返回正常值。\n一般的静态 HTTP服务器都会根据文件内容来判断文件是否被修改，进而决定是否需要给客户端返回新内容。\n在Koa里，我们需要使用koa-conditional-get和 koa-etag插件来提供ETag 功能，示例如下。\n\n- 这里定义的变量etag就是在Koa中用于生成ETag 的中间件。\n- ETag缓存是通过conditional-get拦截才能生效的。\n- koa-conditional-get 一定要放在koa-etag 前面。\n\n```js\nconst conditional = require('koa-conditional-get');\nconst etag = require('koa-etag');\n t机市用\n// etag模块 通常和 conditional-get 模块一起使用\napp.use(conditional());\napp.use(etag());\n```\n\n### koa-session(会话session)\n\n1. koa-session + ioredis\n2. koa-generic-session + koa-redis(基于redis存储)\n\n- 依赖Redis，因此需要先启动Redis服务器。\n- 通过ctx.session进行会话信息处理。\n- TTL是Session Store的超时时间，这个值一般是30min。\n\n```js\nconst Koa = require('koa')\nconst session = require('koa-generic-session')\nconst RedisStore = require('koa-redis')\nconst app = new Koa()\n\napp.keys = ['keys', 'keykeys'];\n//加入全局中间件\napp.use(session({   \n    store: new RedisStore(),\n    ttl: 30 * 60 * 1000  // 半小时\n}))\n// Session Store其实就是将会话存储在不同持久化存储中以后抽象出来的通用层，其基本的存、取和销毁操作如下。\n// - get(sid): 根据sid来获取会话信息。\n// - set(sid, sess, ttl): 通过sid设置会话信息，ttl指的是会话可存活时间(ms\n// - destroy(sid): 根据sid销毁会话。\n\n// 在路由中可以直接通过ctx.session对后面的中间件进行操作\napp.use (ctx => {\nswitch (ctx, path){\n    case '/get':\n        ctx.session.user = { name: 'yolo' }\n        ctx.body = ctx.session.user\n        break;\n    case '/remove':\n        ctx.session =null\n        ctx.body = \"removed\"\n        break\n}\napp.listen (8080)\n```\n# log4js(日志处理)\n\n- [log4js](https://www.npmjs.com/package/log4js)\n\n```js\nconst log4js = require(\"log4js\");\nconst logger = log4js.getLogger();\nlogger.level = \"debug\";\nlogger.debug(\"Some debug messages\");\n```\n\n# 参考\n- [koa官网文档](https://koa.bootcss.com/#)\n- 《Koa开发 入门、进阶与实战》\n- 《Node.js12 实战》\n- 《狼叔卷2》","slug":"front_end/koa-base","published":1,"updated":"2022-07-07T17:33:06.281Z","layout":"post","photos":[],"link":"","_id":"cl5f0bii2000mv4uwalvc9c3z","content":"<p><a href=\"https://koa.bootcss.com/#\">koa官网文档</a></p>\n<p>koa是一个基于http模块进行封装的框架，koa本身没有内置任何中间件，需要手动下载中间件（约定了中间件的写法），可以用来做服务端接口，也可以做接口的转发和聚合，RPC服务组装、SSR。</p>\n<p>koa导出的是一个类，需要通过new 来实例化，koa也是继承了Events模块，性能非常好，代码量少，易于定制，很多框架都是基于koa进行定制开发（egg，thinkjs、midway都是基于koa2）。</p>\n<h1 id=\"基于koa框架的web开发要点\"><a href=\"#基于koa框架的web开发要点\" class=\"headerlink\" title=\"基于koa框架的web开发要点\"></a>基于koa框架的web开发要点</h1><p>ES6语法、异步流程控制、数据库操作、API接口转发、HTTP集成、Koa中间件</p>\n<h1 id=\"koa与express的区别\"><a href=\"#koa与express的区别\" class=\"headerlink\" title=\"koa与express的区别\"></a>koa与express的区别</h1><ul>\n<li>koa中间件可以对请求和响应同时进行拦截，express只能对请求进行拦截，而且是有顺序的，不能对响应进行拦截。</li>\n<li>koa和express都内置了cookies模块、http模块，此外，express还内置了路由、视图模块。相对于express，koa还是比较轻量的。</li>\n</ul>\n<h1 id=\"koa中间件写法\"><a href=\"#koa中间件写法\" class=\"headerlink\" title=\"koa中间件写法\"></a>koa中间件写法</h1><ul>\n<li>中间件可以分为全局中间件和局部中间件，局部中间件在对应的路由里生效，比如静态资源服务，在特定的路由才执行</li>\n<li>中间件是框架的扩展机制，对请求响应过程中加入中间件，应对处理复杂的业务逻辑。挂载在入口文件的中间件，会按照顺序执行。</li>\n<li>koa中间件是洋葱模型，跳转的信号是next()，通过compose实现，最终的返回值是一个 function(context, next)。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>fl<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">转化为了f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token function\">noop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>在koa引入的中间件，需要使用app.use将中间件挂载到app上<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 输出的结果是1342</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"koa中间件的工作过程\"><a href=\"#koa中间件的工作过程\" class=\"headerlink\" title=\"koa中间件的工作过程\"></a>koa中间件的工作过程</h2><p>中间件类似一个过滤器，koa中间件的工作大致过程可以分为三部分：</p>\n<ul>\n<li>处理请求前先完成一些准备工作。</li>\n<li>进行业务逻辑处理或通过next将业务交由下一个中间件处理。</li>\n<li>后面的中间件完成处理后会进行回溯，执行处理后的操作。</li>\n</ul>\n<h1 id=\"ctx-参数\"><a href=\"#ctx-参数\" class=\"headerlink\" title=\"ctx 参数\"></a>ctx 参数</h1><h2 id=\"ctx头部信息\"><a href=\"#ctx头部信息\" class=\"headerlink\" title=\"ctx头部信息\"></a>ctx头部信息</h2><ul>\n<li>设置头部信息：<code>ctx.header(ctx.headers)</code></li>\n<li>获取头部信息：<code>ctx.get(&#39;key&#39;)</code></li>\n<li>ctx.method，获取请求方法</li>\n<li>ctx.status或者ctx.response.status，获取状态码和设置状态码</li>\n<li>ctx.type，设置Content-Type</li>\n<li>ctx.response.header &#x3D; ctx.request.header &#x3D; ctx.header</li>\n<li>ctx.req &#x3D; ctx.res &#x3D; ctx.request &#x3D; ctx.response</li>\n</ul>\n<h2 id=\"ctx地址参数\"><a href=\"#ctx地址参数\" class=\"headerlink\" title=\"ctx地址参数\"></a>ctx地址参数</h2><p>koa解析<code>http://127.0.0.1:3000/api/v1/getUser?a=1&amp;b=2#abc</code>地址后，会将返回的结果赋值给ctx对象。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ctx.href（不包括hash）</td>\n<td align=\"center\"><code>http://127.0.0.1:3000/api/v1/getUser?a=1&amp;b=2</code></td>\n</tr>\n<tr>\n<td align=\"center\">ctx.path</td>\n<td align=\"center\">&#x2F;api&#x2F;v1&#x2F;getUser</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.url</td>\n<td align=\"center\">&#x2F;api&#x2F;v1&#x2F;getUser?a&#x3D;1&amp;b&#x3D;2</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.search</td>\n<td align=\"center\">?a&#x3D;1&amp;b&#x3D;2</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.querystring</td>\n<td align=\"center\">a&#x3D;1&amp;b&#x3D;2</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.query</td>\n<td align=\"center\"><code>&#123;&quot;a&quot;: &quot;1&quot;,&quot;b&quot;: &quot;2&quot;&#125; </code></td>\n</tr>\n<tr>\n<td align=\"center\">ctx.origin</td>\n<td align=\"center\"><code>http://127.0.0.1:3000</code></td>\n</tr>\n<tr>\n<td align=\"center\">ctx.host</td>\n<td align=\"center\">127.0.0.1:3000</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.hostname</td>\n<td align=\"center\">127.0.0.1</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.protocol</td>\n<td align=\"center\">http</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.secure（https为true）</td>\n<td align=\"center\">false</td>\n</tr>\n</tbody></table>\n<h2 id=\"获取不同的参数\"><a href=\"#获取不同的参数\" class=\"headerlink\" title=\"获取不同的参数\"></a>获取不同的参数</h2><table>\n<thead>\n<tr>\n<th align=\"center\">参数名称</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">Express获取方法</th>\n<th align=\"center\">Koa获取方法</th>\n<th align=\"center\">依赖模块</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">params</td>\n<td align=\"center\">具名参数，比如<code>/users/:id</code></td>\n<td align=\"center\">req.params</td>\n<td align=\"center\">ctx.params</td>\n<td align=\"center\">Koa需要依赖koa-router内置的ctx.params，而Express中有内置路由，无须依赖</td>\n</tr>\n<tr>\n<td align=\"center\">query</td>\n<td align=\"center\">查询字符串<code>?a=1&amp;b=2</code></td>\n<td align=\"center\">req.query</td>\n<td align=\"center\">ctx.query</td>\n<td align=\"center\">内置，无须依赖</td>\n</tr>\n<tr>\n<td align=\"center\">body</td>\n<td align=\"center\">带有body请求的POST类方法，请求体body内容</td>\n<td align=\"center\">req.body</td>\n<td align=\"center\">ctx.request.body</td>\n<td align=\"center\">Express依赖bodyparser模块，Koa依赖koa-bodyparser模块</td>\n</tr>\n</tbody></table>\n<h2 id=\"koa写入cookie\"><a href=\"#koa写入cookie\" class=\"headerlink\" title=\"koa写入cookie\"></a>koa写入cookie</h2><p>cookie的value默认是不能中文，可以使用buffer将中文转化后使用（通用的方法）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 设置signed: true  必须要app.keys = ['xxx'] 设置加密秘钥</span>\n<span class=\"token comment\">// app.keys = ['xxx'] </span>\n\nctx<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token comment\">// signed: true,</span>\n    <span class=\"token literal-property property\">httpOnly</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 30秒过期</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// maxAge: 一个数字, 表示从 Date.now() 得到的毫秒数.</span>\n<span class=\"token comment\">// expires: 一个 Date 对象, 表示 cookie 的到期日期 (默认情况下在会话结束时过期).</span>\n<span class=\"token comment\">// path: 一个字符串, 表示 cookie 的路径 (默认是/).</span>\n<span class=\"token comment\">// domain: 一个字符串, 指示 cookie 的域 (无默认值).</span>\n<span class=\"token comment\">// secure: 一个布尔值, 表示 cookie 是否仅通过 HTTPS 发送 (HTTP 下默认为 false, HTTPS 下默认为 true).</span>\n<span class=\"token comment\">// httpOnly: 一个布尔值,  客户端无法操作cookie (默认为 true).</span>\n<span class=\"token comment\">// sameSite: 一个布尔值或字符串, 表示该 cookie 是否为 \"相同站点\" cookie (默认为 false). 可以设置为 'strict', 'lax', 'none', 或 true (映射为 'strict').</span>\n<span class=\"token comment\">// signed: 一个布尔值, 表示是否要对 cookie 进行签名 (默认为 false).  此签名密钥用于检测下次接收 cookie 时的篡改.</span>\n<span class=\"token comment\">// overwrite: 一个布尔值, 表示是否覆盖以前设置的同名的 cookie (默认是 false). 如果是 true, 在同一个请求中设置相同名称的所有 Cookie（无论路径或域）是否在设置此Cookie 时从 Set-Cookie 消息头中过滤掉.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"koa-router中间件\"><a href=\"#koa-router中间件\" class=\"headerlink\" title=\"koa-router中间件\"></a>koa-router中间件</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 指定路由前缀</span>\n<span class=\"token comment\">// router.prefix('/users')</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;h1>koa-router&lt;/h1>'</span> <span class=\"token comment\">// 返回HTML</span>\n    <span class=\"token comment\">// ctx.body = 'koa-router' // 返回 文本</span>\n    <span class=\"token comment\">// ctx.body = &#123; a: 1, b: 2&#125; // 返回json</span>\n    <span class=\"token comment\">// await ctx.render('index', &#123; title: 'hello koa2'&#125;)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 将路由挂载到app上</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"ctx-body的工作原理\"><a href=\"#ctx-body的工作原理\" class=\"headerlink\" title=\"ctx.body的工作原理\"></a>ctx.body的工作原理</h2><p>根据body的类型设置对应的Content-Type，根据Content-Type调用res.write，将数据写入浏览器。可以知道，赋予ctx.body不同类型的值时会返回不同的结果：</p>\n<ul>\n<li>为ctx.body赋值JSON对象时，服务器会返回JSON接口；</li>\n<li>为ctx.body赋值字符串时，服务器会返回 HTML文本；</li>\n<li>ctx.render是因为添加了koa-views 中间件而绑定到ctx上的，原本的ctx上是没有render函数的。也就是说，我们可以通过中间件在ctx上绑定我们要使用的功能对象方法。</li>\n</ul>\n<h2 id=\"koa-router路由实现原理\"><a href=\"#koa-router路由实现原理\" class=\"headerlink\" title=\"koa-router路由实现原理\"></a>koa-router路由实现原理</h2><ul>\n<li>本质上就是对ctx.path进行封装。定义路由，路由的路径会被转义成正则表达式，匹配请求，使用中间件进行处理。</li>\n<li>koa-router的核心是路由的解析，使用的是path-to-regexp模块（express也使用了该模块），express路由和koa-router路由的区别是中间件的写法不同</li>\n<li>匹配请求时，只和路径有关。qureyString参数是不会考虑在内的。比如</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/v1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// GET /v1?name=zhongph  也会匹配上</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>具名参数，:xxx会被从正则表达式提前处理，具名参数通过ctx.params.xxx获取</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>路由也是中间件，可以定义多个中间件，在这个例子里，第一个中间件根据ID查询到的用户，先被绑定到了ctx对象上，然后交给了下一个中间件进行处理。接着，第二个中间件根据第一个中间件产生的ctx.user完成某些内容，最终决定返回何值。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/:id'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find0ne</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ctx<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//  &#123; id: '001', name:\"zhongph\" &#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"koa-static静态服务\"><a href=\"#koa-static静态服务\" class=\"headerlink\" title=\"koa-static静态服务\"></a>koa-static静态服务</h1><p>静态服务器是通过静态HTTP服务器来提供HTML、JavaScript、CSS文件及图片的托管服务的.Node.js世界里的 koa-static、http-server等模块和常见的Apache、Nginx功能类似。线上通用做法是将静态资源放到CDN上，利用CDN就近访问来提高访问效率。实际开发环境，通过koa-static等模块能快速实现静态服务器功能。</p>\n<p>koa-static的做法是：</p>\n<ul>\n<li>判断请求的文件是否存在，如果存在读取文件返回；如果请求的文件不存在，默认返回当前路径下的index.html</li>\n<li>不要把static中间件放到Koa的全局中间件上（如果对于每个请求都要判断一次是不是静态资源，会影响QPS)，最好结合koa-router来处理，按需挂载</li>\n<li>（QPS：每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> staticServer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/public/*'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    ctx<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">staticServer</span><span class=\"token punctuation\">(</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">gzip</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"koa-static的底层实现\"><a href=\"#koa-static的底层实现\" class=\"headerlink\" title=\"koa-static的底层实现\"></a>koa-static的底层实现</h2><p>koa-static的底层使用的是koa-send</p>\n<h3 id=\"koa-send原理\"><a href=\"#koa-send原理\" class=\"headerlink\" title=\"koa-send原理\"></a>koa-send原理</h3><ul>\n<li>根据文件后缀名，进行设置 Content-Type。</li>\n<li>以 stream 的形式为 ctx.body 赋值，这种方式比 fs.readFileSync 更高效。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ctx<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ctx<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> encodingExt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n其中 ctx.type是根据文件后缀来设置Content-Type的便捷方法，代码如下。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// extname 和 basename 是path模块的方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file<span class=\"token punctuation\">,</span> ext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> ext <span class=\"token operator\">!==</span> <span class=\"token string\">''</span> <span class=\"token operator\">?</span> <span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"静态服务原理\"><a href=\"#静态服务原理\" class=\"headerlink\" title=\"静态服务原理\"></a>静态服务原理</h2><p>根目录下有static文件夹和index.js，static目录下有index.html文件、image和css文件夹，分别放置对应文件。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 设置一个mime map，设计三种测试类型</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MIMES_MAP</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string-property property\">'css'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/css'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'html'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/html'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'jpg'</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/jpeg'</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 静态资源目录对于相对入口文件index.js的路径</span>\n<span class=\"token keyword\">const</span> staticPath <span class=\"token operator\">=</span> <span class=\"token string\">'./static'</span>\n\n<span class=\"token comment\">// 解析资源类型</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">parseMime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> extName <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  extName <span class=\"token operator\">=</span> extName <span class=\"token operator\">?</span> extName<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">'unknown'</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">MIMES_MAP</span><span class=\"token punctuation\">[</span>extName<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 静态资源目录在本地的绝对路径</span>\n  <span class=\"token keyword\">let</span> fullStaticPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> staticPath<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 获取静态资源内容，有可能是文件内容，目录，或404</span>\n  <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>fullStaticPath<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'binary'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 解析请求内容的类型</span>\n  <span class=\"token keyword\">let</span> mime <span class=\"token operator\">=</span> <span class=\"token function\">parseMime</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 如果有对应的文件类型，就配置上下文的类型</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ctx<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> mime\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 输出静态资源内容</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mime <span class=\"token operator\">&amp;&amp;</span> mime<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 如果是图片，则用node原生res，输出二进制数据</span>\n    ctx<span class=\"token punctuation\">.</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token string\">'binary'</span><span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 其他则输出文本</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> content\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server is running, port is 4000'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"koa-mount\"><a href=\"#koa-mount\" class=\"headerlink\" title=\"koa-mount\"></a>koa-mount</h1><p>koa-static不能用来设置请求前缀，如果想实现这个功能，就需要用到koa-mount，koa-mount是一个将中间件挂载到指定路径的Koa中间件，它可以挂载任意koa中间件。koa-mount和koa-static结合，就可以实现和Express一样的静态服务器带有请求前缀的功能，代码如下。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> koaStatic <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mount <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-mount'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// app.use(koaStatic('.'))</span>\n\n<span class=\"token comment\">// 设置请求前缀</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/static'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">koaStatic</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 访问 http:/127.0.0.1:3000/static/package.json</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"koa-views\"><a href=\"#koa-views\" class=\"headerlink\" title=\"koa-views\"></a>koa-views</h1><ul>\n<li><p>koa-views是一个koa的动态模板引擎渲染中间件，主要用于简单的前后端不分离的项目。通过控制路由的方式，返回不同的页面。以前的服务端渲染页面，如JSP&#x2F;PHP，就是指模板引擎。</p>\n</li>\n<li><p>模板引擎采取了一种复用思想，通过定义模板，在使用时和数据一起编译，生成HTML页面，以便浏览器渲染。<code>编译(模板＋数据) = HTML</code>，模板是不可变的，可变的是数据，然而数据是从哪里来的呢? 可以从数据库读取，可以访问接口获得，甚至可以模拟，具体取决于业务场景。</p>\n</li>\n<li><p>模板推荐：ejs、pug（jade）</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> views <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-views'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 通过app.use绑定到app上，实际上是给app对象增加ctx.render方法的绑定</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">views</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/views'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token literal-property property\">extension</span><span class=\"token operator\">:</span> <span class=\"token string\">'pug'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 模板文件：views/index，相对位置在views目录下</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello koa2'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ctx.render渲染模板</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>这里的ctx.render就是用于渲染模板的方法，它有两个参数。</li>\n</ol>\n<ul>\n<li>index: 模板，采用相对路径，对应的是views目录下的index.pug。</li>\n<li>JSON对象: 需要传入到模板内的数据。</li>\n</ul>\n<ol start=\"2\">\n<li>ctx.render 执行的操作：</li>\n</ol>\n<ul>\n<li>通过文件读取 index.pug 模板。</li>\n<li>使用 pug 模板引擎编译器将数据和模板内容编译为 HTML 字符串。</li>\n<li>将 Content-Type 设置为 text&#x2F;html。</li>\n<li>将 statusCode 状态码设置为200。</li>\n<li>通过 http模块 底层的 res.write 和 res.end 方法将 HTML 字符串写入浏览器</li>\n</ul>\n<h2 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h2><p>模板引擎的用途：用于动态渲染页面，与cli结合，作为模板使用</p>\n<h3 id=\"ejs\"><a href=\"#ejs\" class=\"headerlink\" title=\"ejs\"></a>ejs</h3><ul>\n<li>语句的需要有 &lt;%  %&gt; （尖括号和百分号）</li>\n<li>如果需要填入变量，需要在&lt;%添加一个等号，&lt;%&#x3D;</li>\n</ul>\n<pre class=\"line-numbers language-ejs\" data-language=\"ejs\"><code class=\"language-ejs\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token ejs language-ejs\"><span class=\"token delimiter punctuation\">&lt;%</span><span class=\"token language-javascript\"> user<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </span><span class=\"token delimiter punctuation\">%></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token ejs language-ejs\"><span class=\"token delimiter punctuation\">&lt;%=</span><span class=\"token language-javascript\"> user<span class=\"token punctuation\">.</span>name </span><span class=\"token delimiter punctuation\">%></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token ejs language-ejs\"><span class=\"token delimiter punctuation\">&lt;%</span><span class=\"token language-javascript\"> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </span><span class=\"token delimiter punctuation\">%></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"pug\"><a href=\"#pug\" class=\"headerlink\" title=\"pug\"></a>pug</h3><ul>\n<li><p>（安装<code>npm i -s pug</code>）pug的基本使用：在这段模板定义代码里，if语句首先判断user对象是否存在，如果存在就显示<code>&lt;h2&gt;</code>标签，并把user.name作为变量嵌入<code>&lt;h2&gt;</code>标签的显示内容里。</p>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token comment\">//- user.pug</span>\n<span class=\"token flow-control\"><span class=\"token branch keyword\">if</span> user</span>\n    <span class=\"token tag\">h2</span><span class=\"token punctuation\">=</span><span class=\"token code\"> user<span class=\"token punctuation\">.</span>name</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>pug的编译：使用 pug-cli 或 pug-server 可以自动将模板文件编译为HTML文件，并提供HTTP静态服务。此外，在线转化工具 html2jade，它可以将已有的HTML 代码转换为pug模板，非常的使用。</p>\n</li>\n<li><p>使用模板引擎（pug）时要注意：</p>\n<ul>\n<li>引用公共模块时使用include。实现父子布局继承时使用extends。</li>\n<li>定义布局模板时使用Layout，布局留空时使用block。缩进时使用Tab键而非空格。</li>\n<li>不管有没有属性，标签和value之间都要有空格。</li>\n<li>可以通过预编译来提高模板执行效率。</li>\n</ul>\n</li>\n<li><p>编译pug</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> pug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 通过fs.readFileSync读取模板文件</span>\n<span class=\"token comment\">// 当读取到的内容通过 toString 转化为字符串</span>\n<span class=\"token keyword\">const</span> user_pug_str <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./user.pug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// pug.render方法进行编译，编译后的结果是HTML代码</span>\n<span class=\"token keyword\">var</span> user_html <span class=\"token operator\">=</span> pug<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>user_pug_str<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'yolo'</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user_html<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 编译结果 &lt;h2>yolo&lt;/h2></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>for循环显示列表</li>\n</ul>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token comment\">//- list.pug</span>\n<span class=\"token tag\">ul</span>\n    <span class=\"token flow-control\"><span class=\"token each\"><span class=\"token keyword\">each</span> item <span class=\"token keyword\">in</span></span> users</span>\n        <span class=\"token tag\">li</span><span class=\"token punctuation\">=</span><span class=\"token code\"> item<span class=\"token punctuation\">.</span>name</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"pug模板引擎规则\"><a href=\"#pug模板引擎规则\" class=\"headerlink\" title=\"pug模板引擎规则\"></a>pug模板引擎规则</h3><ol>\n<li>标签属性</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token tag\">p<span class=\"token attr-id\">#root</span><span class=\"token attr-class\">.container</span></span>\n<span class=\"token comment\">//- 等价于</span>\n<span class=\"token tag\">p<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'root'</span></span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">class</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'container'</span></span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token comment\">//- &lt;p id='root' class='container'>&lt;/p></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>标签内容value，标签与内容之间有空格</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token tag\">p</span> <span class=\"token plain-text\">this is a tag</span>\n<span class=\"token comment\">//- &lt;p>this is a tag&lt;/p></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>层级嵌套<br>原理：利用缩进来判断包含关系。缩进方式有两种：使用空格和使用Tab建（推荐Tab键）</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></span>\n    <span class=\"token markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></span>\n    <span class=\"token markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></span>\n    <span class=\"token markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></span>\n<span class=\"token markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></span>\n\n<span class=\"token comment\">//- pug写法</span>\n<span class=\"token tag\">ul<span class=\"token attr-class\">.parent</span></span>\n    <span class=\"token tag\">li</span> <span class=\"token plain-text\">1</span>\n    <span class=\"token tag\">li</span> <span class=\"token plain-text\">2</span>\n    <span class=\"token tag\">li</span> <span class=\"token plain-text\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li>变量</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token comment\">//- 代码里等号，表示后面接的是变量，子类extends继承该布局时，name变量在子页面里也可以使用</span>\n<span class=\"token tag\">p</span><span class=\"token punctuation\">=</span><span class=\"token code\"> name </span>\n\n<span class=\"token comment\">//- 插写法</span>\n<span class=\"token tag\">p</span> <span class=\"token plain-text\">#&#123; name &#125;</span>\n\n<span class=\"token comment\">//- 不转义代码 !&#123; html &#125;</span>\n<span class=\"token punctuation\">!</span>&#123; \"&lt;script>&lt;/script>\" &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"5\">\n<li>if和each</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token comment\">//- user.pug</span>\n<span class=\"token flow-control\"><span class=\"token branch keyword\">if</span> user</span>\n    <span class=\"token tag\">h2</span><span class=\"token punctuation\">=</span><span class=\"token code\"> user<span class=\"token punctuation\">.</span>name</span>\n\n<span class=\"token comment\">//- list.pug  index是下标</span>\n<span class=\"token tag\">ul</span>\n    <span class=\"token flow-control\"><span class=\"token each\"><span class=\"token keyword\">each</span> item<span class=\"token punctuation\">,</span> index <span class=\"token keyword\">in</span></span> users</span>\n        <span class=\"token tag\">li</span><span class=\"token punctuation\">=</span><span class=\"token code\"> item<span class=\"token punctuation\">.</span>name</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"6\">\n<li>布局</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token comment\">//- extends指明了当前pug页面需要继承哪个layout布局</span>\n<span class=\"token keyword\">extends ../layout</span>\n\n<span class=\"token comment\">//- 实现block模块，名字必须和layout里一致</span>\n<span class=\"token keyword\">block left_content</span>\n\n<span class=\"token keyword\">block main_content</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"7\">\n<li>内嵌sctipt代码，script后面的点 <code>.</code>必须要有</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token tag\">script</span><span class=\"token punctuation\">.</span><span class=\"token multiline-script\">\n    <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"koa-compose\"><a href=\"#koa-compose\" class=\"headerlink\" title=\"koa-compose\"></a>koa-compose</h1><p>可以将多个中间件合并成一个中间件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> compose<span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-compose'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//中间件</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//中间件</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"koa-bodyparser\"><a href=\"#koa-bodyparser\" class=\"headerlink\" title=\"koa-bodyparser\"></a>koa-bodyparser</h1><p>koa-bodyparser中默认只支持JSON、form两种格式的解析，其他类型的解析需要在enableTypes中配置，如<code>&#39;text/plain&#39;</code>配置为text。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> bodyparser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-bodyparser'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 将bodyparser挂载到app上</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">bodyparser</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 配置更多的类型</span>\n    <span class=\"token literal-property property\">enableTypes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 访问 body参数</span>\nctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body\n<span class=\"token comment\">// 如果post请求后面拼接了参数， 也可以通过ctx.query获取</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"koa-x2F-cors\"><a href=\"#koa-x2F-cors\" class=\"headerlink\" title=\"@koa&#x2F;cors\"></a>@koa&#x2F;cors</h1><p>跨域问题</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 安装 @koa/cors 或者 koa2-cors（很久没有更新）</span>\n<span class=\"token comment\">// npm i koa2-cors</span>\n<span class=\"token keyword\">const</span> cors <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@koa/cors'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//  https://www.npmjs.com/package/@koa/cors</span>\n\n<span class=\"token comment\">// 这里cors中间件一定要写在路由之前</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> router<span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"koa-multer（文件上传模块）\"><a href=\"#koa-multer（文件上传模块）\" class=\"headerlink\" title=\"@koa-multer（文件上传模块）\"></a>@koa-multer（文件上传模块）</h1><p>文件上传有两种方式:</p>\n<ul>\n<li>调用CDN的 SDK将文件直接从前端上传到CDN上；</li>\n<li>采用常规上传方式，先将文件上传到Node.js服务器，再由 Node.js服务器转存到CDN；</li>\n<li>二者的差别在于是否需要通过服务器对文件进行定制，如果没有这样的需求，直接上传就是很不错的方式。</li>\n</ul>\n<p>@koa-multer是一个非常便于使用的文件上传模块，使用@koa-multer可以解析body中的流，并将其保存成文件。@koa-multer不会处理multipart&#x2F;form-data以外的任何表单</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_42778001/article/details/104442163\">@koa&#x2F;multer文件上传</a></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> Router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> multer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@koa/multer'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//上传⽂件存放路径、及⽂件命名</span>\n<span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> multer<span class=\"token punctuation\">.</span><span class=\"token function\">diskStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">destination</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token punctuation\">,</span><span class=\"token string\">'/public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">filename</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> type <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>originalname<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>file<span class=\"token punctuation\">.</span>fieldname<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>type<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//⽂件上传限制</span>\n<span class=\"token keyword\">const</span> limits <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">fields</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// ⾮⽂件字段的数量</span>\n    <span class=\"token literal-property property\">fileSize</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//⽂件⼤⼩单位 b</span>\n    <span class=\"token literal-property property\">files</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\">// ⽂件数量</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> upload <span class=\"token operator\">=</span> <span class=\"token function\">multer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>storage<span class=\"token punctuation\">,</span>limits<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 在路由中，可通过 ctx.file 获取上传完毕的⽂件信息，多⽂件上传可通过 ctx.files 获取</span>\nroute<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/file'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// file名字前后端要一致</span>\n    <span class=\"token keyword\">let</span> err <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> upload<span class=\"token punctuation\">.</span><span class=\"token function\">single</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span>res<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">msg</span> <span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>message\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span>ctx<span class=\"token punctuation\">.</span>file\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"在koa中发起请求（node-fetch和axios）\"><a href=\"#在koa中发起请求（node-fetch和axios）\" class=\"headerlink\" title=\"在koa中发起请求（node-fetch和axios）\"></a>在koa中发起请求（node-fetch和axios）</h1><h2 id=\"node-fetch\"><a href=\"#node-fetch\" class=\"headerlink\" title=\"node-fetch\"></a>node-fetch</h2><ul>\n<li><a href=\"https://www.npmjs.com/package/node-fetch\">node-fetch</a><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// npm i --save-dev node-fetch</span>\n<span class=\"token keyword\">const</span> fetch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node-fetch'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://127.0.0.1:3000/users/post'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span>   \n        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'yourUsername'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'yourPassword'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">json</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h1 id=\"API访问鉴权：JSON-Web-Tokens-JWT\"><a href=\"#API访问鉴权：JSON-Web-Tokens-JWT\" class=\"headerlink\" title=\"API访问鉴权：JSON Web Tokens(JWT)\"></a>API访问鉴权：JSON Web Tokens(JWT)</h1><h2 id=\"直接使用原始的JWT进行鉴权\"><a href=\"#直接使用原始的JWT进行鉴权\" class=\"headerlink\" title=\"直接使用原始的JWT进行鉴权\"></a>直接使用原始的JWT进行鉴权</h2><ul>\n<li>客户端申请令牌时，使用jwt.sign进行签名，并将签名结果返回客户端；</li>\n<li>签名体(payload）会包含用户的必要信息，以便通过 jwt.verify进行校验时能获得该信息，作为后面的查询依据；</li>\n<li>当API请求携带令牌时，需要先使用jwt.verify进行校验，成功后才能根据用户信息查询并返回数据。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> secret <span class=\"token operator\">=</span> <span class=\"token string\">'secretxxx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> token <span class=\"token operator\">=</span> jwti<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">user_id</span><span class=\"token operator\">:</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'yolo'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">user_email</span><span class=\"token operator\">:</span><span class=\"token string\">'yolo.com'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">expiresIn</span><span class=\"token operator\">:</span> <span class=\"token string\">'1h'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 获取令牌信息</span>\n<span class=\"token comment\">// 检查PoST的信息、URL查询参数、头部信息</span>\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>token <span class=\"token operator\">||</span> ctx<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>token <span class=\"token operator\">||</span> ctx<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'x-access-token'</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token comment\">// 验证</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> decoded <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>decoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用koa-jwt模块\"><a href=\"#使用koa-jwt模块\" class=\"headerlink\" title=\"使用koa-jwt模块\"></a>使用koa-jwt模块</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-jwt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">jwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">secret</span><span class=\"token operator\">:</span> <span class=\"token string\">'secretXXX'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"koa-etag（ETag处理）\"><a href=\"#koa-etag（ETag处理）\" class=\"headerlink\" title=\"koa-etag（ETag处理）\"></a>koa-etag（ETag处理）</h1><p>ETag 是前端缓存优化的重要部分。ETag 在服务器端生成后，客户端将通过If-Match或If-None-Match条件判断请求来验证资源是否被修改，其中比较常用的是If-None-Match。如果资源没有被修改则返回304状态码，如果被修改则返回正常值。<br>一般的静态 HTTP服务器都会根据文件内容来判断文件是否被修改，进而决定是否需要给客户端返回新内容。<br>在Koa里，我们需要使用koa-conditional-get和 koa-etag插件来提供ETag 功能，示例如下。</p>\n<ul>\n<li>这里定义的变量etag就是在Koa中用于生成ETag 的中间件。</li>\n<li>ETag缓存是通过conditional-get拦截才能生效的。</li>\n<li>koa-conditional-get 一定要放在koa-etag 前面。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> conditional <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-conditional-get'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> etag <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-etag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t机市用\n<span class=\"token comment\">// etag模块 通常和 conditional-get 模块一起使用</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">conditional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">etag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"koa-session-会话session\"><a href=\"#koa-session-会话session\" class=\"headerlink\" title=\"koa-session(会话session)\"></a>koa-session(会话session)</h3><ol>\n<li>koa-session + ioredis</li>\n<li>koa-generic-session + koa-redis(基于redis存储)</li>\n</ol>\n<ul>\n<li>依赖Redis，因此需要先启动Redis服务器。</li>\n<li>通过ctx.session进行会话信息处理。</li>\n<li>TTL是Session Store的超时时间，这个值一般是30min。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> session <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-generic-session'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> RedisStore <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-redis'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span>keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'keys'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'keykeys'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//加入全局中间件</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>   \n    <span class=\"token literal-property property\">store</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">ttl</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span>  <span class=\"token comment\">// 半小时</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Session Store其实就是将会话存储在不同持久化存储中以后抽象出来的通用层，其基本的存、取和销毁操作如下。</span>\n<span class=\"token comment\">// - get(sid): 根据sid来获取会话信息。</span>\n<span class=\"token comment\">// - set(sid, sess, ttl): 通过sid设置会话信息，ttl指的是会话可存活时间(ms</span>\n<span class=\"token comment\">// - destroy(sid): 根据sid销毁会话。</span>\n\n<span class=\"token comment\">// 在路由中可以直接通过ctx.session对后面的中间件进行操作</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'/get'</span><span class=\"token operator\">:</span>\n        ctx<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'yolo'</span> <span class=\"token punctuation\">&#125;</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>user\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'/remove'</span><span class=\"token operator\">:</span>\n        ctx<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span><span class=\"token keyword\">null</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">\"removed\"</span>\n        <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">&#125;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"log4js-日志处理\"><a href=\"#log4js-日志处理\" class=\"headerlink\" title=\"log4js(日志处理)\"></a>log4js(日志处理)</h1><ul>\n<li><a href=\"https://www.npmjs.com/package/log4js\">log4js</a></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> log4js <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log4js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> log4js<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> <span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some debug messages\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://koa.bootcss.com/#\">koa官网文档</a></li>\n<li>《Koa开发 入门、进阶与实战》</li>\n<li>《Node.js12 实战》</li>\n<li>《狼叔卷2》</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://koa.bootcss.com/#\">koa官网文档</a></p>\n<p>koa是一个基于http模块进行封装的框架，koa本身没有内置任何中间件，需要手动下载中间件（约定了中间件的写法），可以用来做服务端接口，也可以做接口的转发和聚合，RPC服务组装、SSR。</p>\n<p>koa导出的是一个类，需要通过new 来实例化，koa也是继承了Events模块，性能非常好，代码量少，易于定制，很多框架都是基于koa进行定制开发（egg，thinkjs、midway都是基于koa2）。</p>\n<h1 id=\"基于koa框架的web开发要点\"><a href=\"#基于koa框架的web开发要点\" class=\"headerlink\" title=\"基于koa框架的web开发要点\"></a>基于koa框架的web开发要点</h1><p>ES6语法、异步流程控制、数据库操作、API接口转发、HTTP集成、Koa中间件</p>\n<h1 id=\"koa与express的区别\"><a href=\"#koa与express的区别\" class=\"headerlink\" title=\"koa与express的区别\"></a>koa与express的区别</h1><ul>\n<li>koa中间件可以对请求和响应同时进行拦截，express只能对请求进行拦截，而且是有顺序的，不能对响应进行拦截。</li>\n<li>koa和express都内置了cookies模块、http模块，此外，express还内置了路由、视图模块。相对于express，koa还是比较轻量的。</li>\n</ul>\n<h1 id=\"koa中间件写法\"><a href=\"#koa中间件写法\" class=\"headerlink\" title=\"koa中间件写法\"></a>koa中间件写法</h1><ul>\n<li>中间件可以分为全局中间件和局部中间件，局部中间件在对应的路由里生效，比如静态资源服务，在特定的路由才执行</li>\n<li>中间件是框架的扩展机制，对请求响应过程中加入中间件，应对处理复杂的业务逻辑。挂载在入口文件的中间件，会按照顺序执行。</li>\n<li>koa中间件是洋葱模型，跳转的信号是next()，通过compose实现，最终的返回值是一个 function(context, next)。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>fl<span class=\"token punctuation\">,</span> f2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">转化为了f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token function\">noop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>在koa引入的中间件，需要使用app.use将中间件挂载到app上<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 输出的结果是1342</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"koa中间件的工作过程\"><a href=\"#koa中间件的工作过程\" class=\"headerlink\" title=\"koa中间件的工作过程\"></a>koa中间件的工作过程</h2><p>中间件类似一个过滤器，koa中间件的工作大致过程可以分为三部分：</p>\n<ul>\n<li>处理请求前先完成一些准备工作。</li>\n<li>进行业务逻辑处理或通过next将业务交由下一个中间件处理。</li>\n<li>后面的中间件完成处理后会进行回溯，执行处理后的操作。</li>\n</ul>\n<h1 id=\"ctx-参数\"><a href=\"#ctx-参数\" class=\"headerlink\" title=\"ctx 参数\"></a>ctx 参数</h1><h2 id=\"ctx头部信息\"><a href=\"#ctx头部信息\" class=\"headerlink\" title=\"ctx头部信息\"></a>ctx头部信息</h2><ul>\n<li>设置头部信息：<code>ctx.header(ctx.headers)</code></li>\n<li>获取头部信息：<code>ctx.get(&#39;key&#39;)</code></li>\n<li>ctx.method，获取请求方法</li>\n<li>ctx.status或者ctx.response.status，获取状态码和设置状态码</li>\n<li>ctx.type，设置Content-Type</li>\n<li>ctx.response.header &#x3D; ctx.request.header &#x3D; ctx.header</li>\n<li>ctx.req &#x3D; ctx.res &#x3D; ctx.request &#x3D; ctx.response</li>\n</ul>\n<h2 id=\"ctx地址参数\"><a href=\"#ctx地址参数\" class=\"headerlink\" title=\"ctx地址参数\"></a>ctx地址参数</h2><p>koa解析<code>http://127.0.0.1:3000/api/v1/getUser?a=1&amp;b=2#abc</code>地址后，会将返回的结果赋值给ctx对象。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">示例值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">ctx.href（不包括hash）</td>\n<td align=\"center\"><code>http://127.0.0.1:3000/api/v1/getUser?a=1&amp;b=2</code></td>\n</tr>\n<tr>\n<td align=\"center\">ctx.path</td>\n<td align=\"center\">&#x2F;api&#x2F;v1&#x2F;getUser</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.url</td>\n<td align=\"center\">&#x2F;api&#x2F;v1&#x2F;getUser?a&#x3D;1&amp;b&#x3D;2</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.search</td>\n<td align=\"center\">?a&#x3D;1&amp;b&#x3D;2</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.querystring</td>\n<td align=\"center\">a&#x3D;1&amp;b&#x3D;2</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.query</td>\n<td align=\"center\"><code>&#123;&quot;a&quot;: &quot;1&quot;,&quot;b&quot;: &quot;2&quot;&#125; </code></td>\n</tr>\n<tr>\n<td align=\"center\">ctx.origin</td>\n<td align=\"center\"><code>http://127.0.0.1:3000</code></td>\n</tr>\n<tr>\n<td align=\"center\">ctx.host</td>\n<td align=\"center\">127.0.0.1:3000</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.hostname</td>\n<td align=\"center\">127.0.0.1</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.protocol</td>\n<td align=\"center\">http</td>\n</tr>\n<tr>\n<td align=\"center\">ctx.secure（https为true）</td>\n<td align=\"center\">false</td>\n</tr>\n</tbody></table>\n<h2 id=\"获取不同的参数\"><a href=\"#获取不同的参数\" class=\"headerlink\" title=\"获取不同的参数\"></a>获取不同的参数</h2><table>\n<thead>\n<tr>\n<th align=\"center\">参数名称</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">Express获取方法</th>\n<th align=\"center\">Koa获取方法</th>\n<th align=\"center\">依赖模块</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">params</td>\n<td align=\"center\">具名参数，比如<code>/users/:id</code></td>\n<td align=\"center\">req.params</td>\n<td align=\"center\">ctx.params</td>\n<td align=\"center\">Koa需要依赖koa-router内置的ctx.params，而Express中有内置路由，无须依赖</td>\n</tr>\n<tr>\n<td align=\"center\">query</td>\n<td align=\"center\">查询字符串<code>?a=1&amp;b=2</code></td>\n<td align=\"center\">req.query</td>\n<td align=\"center\">ctx.query</td>\n<td align=\"center\">内置，无须依赖</td>\n</tr>\n<tr>\n<td align=\"center\">body</td>\n<td align=\"center\">带有body请求的POST类方法，请求体body内容</td>\n<td align=\"center\">req.body</td>\n<td align=\"center\">ctx.request.body</td>\n<td align=\"center\">Express依赖bodyparser模块，Koa依赖koa-bodyparser模块</td>\n</tr>\n</tbody></table>\n<h2 id=\"koa写入cookie\"><a href=\"#koa写入cookie\" class=\"headerlink\" title=\"koa写入cookie\"></a>koa写入cookie</h2><p>cookie的value默认是不能中文，可以使用buffer将中文转化后使用（通用的方法）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 设置signed: true  必须要app.keys = ['xxx'] 设置加密秘钥</span>\n<span class=\"token comment\">// app.keys = ['xxx'] </span>\n\nctx<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token comment\">// signed: true,</span>\n    <span class=\"token literal-property property\">httpOnly</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 30秒过期</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// maxAge: 一个数字, 表示从 Date.now() 得到的毫秒数.</span>\n<span class=\"token comment\">// expires: 一个 Date 对象, 表示 cookie 的到期日期 (默认情况下在会话结束时过期).</span>\n<span class=\"token comment\">// path: 一个字符串, 表示 cookie 的路径 (默认是/).</span>\n<span class=\"token comment\">// domain: 一个字符串, 指示 cookie 的域 (无默认值).</span>\n<span class=\"token comment\">// secure: 一个布尔值, 表示 cookie 是否仅通过 HTTPS 发送 (HTTP 下默认为 false, HTTPS 下默认为 true).</span>\n<span class=\"token comment\">// httpOnly: 一个布尔值,  客户端无法操作cookie (默认为 true).</span>\n<span class=\"token comment\">// sameSite: 一个布尔值或字符串, 表示该 cookie 是否为 \"相同站点\" cookie (默认为 false). 可以设置为 'strict', 'lax', 'none', 或 true (映射为 'strict').</span>\n<span class=\"token comment\">// signed: 一个布尔值, 表示是否要对 cookie 进行签名 (默认为 false).  此签名密钥用于检测下次接收 cookie 时的篡改.</span>\n<span class=\"token comment\">// overwrite: 一个布尔值, 表示是否覆盖以前设置的同名的 cookie (默认是 false). 如果是 true, 在同一个请求中设置相同名称的所有 Cookie（无论路径或域）是否在设置此Cookie 时从 Set-Cookie 消息头中过滤掉.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"koa-router中间件\"><a href=\"#koa-router中间件\" class=\"headerlink\" title=\"koa-router中间件\"></a>koa-router中间件</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 指定路由前缀</span>\n<span class=\"token comment\">// router.prefix('/users')</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;h1>koa-router&lt;/h1>'</span> <span class=\"token comment\">// 返回HTML</span>\n    <span class=\"token comment\">// ctx.body = 'koa-router' // 返回 文本</span>\n    <span class=\"token comment\">// ctx.body = &#123; a: 1, b: 2&#125; // 返回json</span>\n    <span class=\"token comment\">// await ctx.render('index', &#123; title: 'hello koa2'&#125;)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 将路由挂载到app上</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"ctx-body的工作原理\"><a href=\"#ctx-body的工作原理\" class=\"headerlink\" title=\"ctx.body的工作原理\"></a>ctx.body的工作原理</h2><p>根据body的类型设置对应的Content-Type，根据Content-Type调用res.write，将数据写入浏览器。可以知道，赋予ctx.body不同类型的值时会返回不同的结果：</p>\n<ul>\n<li>为ctx.body赋值JSON对象时，服务器会返回JSON接口；</li>\n<li>为ctx.body赋值字符串时，服务器会返回 HTML文本；</li>\n<li>ctx.render是因为添加了koa-views 中间件而绑定到ctx上的，原本的ctx上是没有render函数的。也就是说，我们可以通过中间件在ctx上绑定我们要使用的功能对象方法。</li>\n</ul>\n<h2 id=\"koa-router路由实现原理\"><a href=\"#koa-router路由实现原理\" class=\"headerlink\" title=\"koa-router路由实现原理\"></a>koa-router路由实现原理</h2><ul>\n<li>本质上就是对ctx.path进行封装。定义路由，路由的路径会被转义成正则表达式，匹配请求，使用中间件进行处理。</li>\n<li>koa-router的核心是路由的解析，使用的是path-to-regexp模块（express也使用了该模块），express路由和koa-router路由的区别是中间件的写法不同</li>\n<li>匹配请求时，只和路径有关。qureyString参数是不会考虑在内的。比如</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/v1'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// GET /v1?name=zhongph  也会匹配上</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>具名参数，:xxx会被从正则表达式提前处理，具名参数通过ctx.params.xxx获取</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>路由也是中间件，可以定义多个中间件，在这个例子里，第一个中间件根据ID查询到的用户，先被绑定到了ctx对象上，然后交给了下一个中间件进行处理。接着，第二个中间件根据第一个中间件产生的ctx.user完成某些内容，最终决定返回何值。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/:id'</span><span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find0ne</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            ctx<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//  &#123; id: '001', name:\"zhongph\" &#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">)</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"koa-static静态服务\"><a href=\"#koa-static静态服务\" class=\"headerlink\" title=\"koa-static静态服务\"></a>koa-static静态服务</h1><p>静态服务器是通过静态HTTP服务器来提供HTML、JavaScript、CSS文件及图片的托管服务的.Node.js世界里的 koa-static、http-server等模块和常见的Apache、Nginx功能类似。线上通用做法是将静态资源放到CDN上，利用CDN就近访问来提高访问效率。实际开发环境，通过koa-static等模块能快速实现静态服务器功能。</p>\n<p>koa-static的做法是：</p>\n<ul>\n<li>判断请求的文件是否存在，如果存在读取文件返回；如果请求的文件不存在，默认返回当前路径下的index.html</li>\n<li>不要把static中间件放到Koa的全局中间件上（如果对于每个请求都要判断一次是不是静态资源，会影响QPS)，最好结合koa-router来处理，按需挂载</li>\n<li>（QPS：每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> staticServer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/public/*'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    ctx<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">staticServer</span><span class=\"token punctuation\">(</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">gzip</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"koa-static的底层实现\"><a href=\"#koa-static的底层实现\" class=\"headerlink\" title=\"koa-static的底层实现\"></a>koa-static的底层实现</h2><p>koa-static的底层使用的是koa-send</p>\n<h3 id=\"koa-send原理\"><a href=\"#koa-send原理\" class=\"headerlink\" title=\"koa-send原理\"></a>koa-send原理</h3><ul>\n<li>根据文件后缀名，进行设置 Content-Type。</li>\n<li>以 stream 的形式为 ctx.body 赋值，这种方式比 fs.readFileSync 更高效。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ctx<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ctx<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> encodingExt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n其中 ctx.type是根据文件后缀来设置Content-Type的便捷方法，代码如下。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// extname 和 basename 是path模块的方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file<span class=\"token punctuation\">,</span> ext</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> ext <span class=\"token operator\">!==</span> <span class=\"token string\">''</span> <span class=\"token operator\">?</span> <span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> ext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"静态服务原理\"><a href=\"#静态服务原理\" class=\"headerlink\" title=\"静态服务原理\"></a>静态服务原理</h2><p>根目录下有static文件夹和index.js，static目录下有index.html文件、image和css文件夹，分别放置对应文件。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 设置一个mime map，设计三种测试类型</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MIMES_MAP</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string-property property\">'css'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/css'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'html'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/html'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string-property property\">'jpg'</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/jpeg'</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 静态资源目录对于相对入口文件index.js的路径</span>\n<span class=\"token keyword\">const</span> staticPath <span class=\"token operator\">=</span> <span class=\"token string\">'./static'</span>\n\n<span class=\"token comment\">// 解析资源类型</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">parseMime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> extName <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n  extName <span class=\"token operator\">=</span> extName <span class=\"token operator\">?</span> extName<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">'unknown'</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">MIMES_MAP</span><span class=\"token punctuation\">[</span>extName<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 静态资源目录在本地的绝对路径</span>\n  <span class=\"token keyword\">let</span> fullStaticPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> staticPath<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 获取静态资源内容，有可能是文件内容，目录，或404</span>\n  <span class=\"token keyword\">let</span> content <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>fullStaticPath<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'binary'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 解析请求内容的类型</span>\n  <span class=\"token keyword\">let</span> mime <span class=\"token operator\">=</span> <span class=\"token function\">parseMime</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 如果有对应的文件类型，就配置上下文的类型</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ctx<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> mime\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 输出静态资源内容</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mime <span class=\"token operator\">&amp;&amp;</span> mime<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 如果是图片，则用node原生res，输出二进制数据</span>\n    ctx<span class=\"token punctuation\">.</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token string\">'binary'</span><span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 其他则输出文本</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> content\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'server is running, port is 4000'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"koa-mount\"><a href=\"#koa-mount\" class=\"headerlink\" title=\"koa-mount\"></a>koa-mount</h1><p>koa-static不能用来设置请求前缀，如果想实现这个功能，就需要用到koa-mount，koa-mount是一个将中间件挂载到指定路径的Koa中间件，它可以挂载任意koa中间件。koa-mount和koa-static结合，就可以实现和Express一样的静态服务器带有请求前缀的功能，代码如下。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> koaStatic <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-static'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mount <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-mount'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// app.use(koaStatic('.'))</span>\n\n<span class=\"token comment\">// 设置请求前缀</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/static'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">koaStatic</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 访问 http:/127.0.0.1:3000/static/package.json</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"koa-views\"><a href=\"#koa-views\" class=\"headerlink\" title=\"koa-views\"></a>koa-views</h1><ul>\n<li><p>koa-views是一个koa的动态模板引擎渲染中间件，主要用于简单的前后端不分离的项目。通过控制路由的方式，返回不同的页面。以前的服务端渲染页面，如JSP&#x2F;PHP，就是指模板引擎。</p>\n</li>\n<li><p>模板引擎采取了一种复用思想，通过定义模板，在使用时和数据一起编译，生成HTML页面，以便浏览器渲染。<code>编译(模板＋数据) = HTML</code>，模板是不可变的，可变的是数据，然而数据是从哪里来的呢? 可以从数据库读取，可以访问接口获得，甚至可以模拟，具体取决于业务场景。</p>\n</li>\n<li><p>模板推荐：ejs、pug（jade）</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> views <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-views'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 通过app.use绑定到app上，实际上是给app对象增加ctx.render方法的绑定</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">views</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/views'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token literal-property property\">extension</span><span class=\"token operator\">:</span> <span class=\"token string\">'pug'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 模板文件：views/index，相对位置在views目录下</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello koa2'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ctx.render渲染模板</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>这里的ctx.render就是用于渲染模板的方法，它有两个参数。</li>\n</ol>\n<ul>\n<li>index: 模板，采用相对路径，对应的是views目录下的index.pug。</li>\n<li>JSON对象: 需要传入到模板内的数据。</li>\n</ul>\n<ol start=\"2\">\n<li>ctx.render 执行的操作：</li>\n</ol>\n<ul>\n<li>通过文件读取 index.pug 模板。</li>\n<li>使用 pug 模板引擎编译器将数据和模板内容编译为 HTML 字符串。</li>\n<li>将 Content-Type 设置为 text&#x2F;html。</li>\n<li>将 statusCode 状态码设置为200。</li>\n<li>通过 http模块 底层的 res.write 和 res.end 方法将 HTML 字符串写入浏览器</li>\n</ul>\n<h2 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h2><p>模板引擎的用途：用于动态渲染页面，与cli结合，作为模板使用</p>\n<h3 id=\"ejs\"><a href=\"#ejs\" class=\"headerlink\" title=\"ejs\"></a>ejs</h3><ul>\n<li>语句的需要有 &lt;%  %&gt; （尖括号和百分号）</li>\n<li>如果需要填入变量，需要在&lt;%添加一个等号，&lt;%&#x3D;</li>\n</ul>\n<pre class=\"line-numbers language-ejs\" data-language=\"ejs\"><code class=\"language-ejs\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token ejs language-ejs\"><span class=\"token delimiter punctuation\">&lt;%</span><span class=\"token language-javascript\"> user<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </span><span class=\"token delimiter punctuation\">%></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token ejs language-ejs\"><span class=\"token delimiter punctuation\">&lt;%=</span><span class=\"token language-javascript\"> user<span class=\"token punctuation\">.</span>name </span><span class=\"token delimiter punctuation\">%></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token ejs language-ejs\"><span class=\"token delimiter punctuation\">&lt;%</span><span class=\"token language-javascript\"> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </span><span class=\"token delimiter punctuation\">%></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"pug\"><a href=\"#pug\" class=\"headerlink\" title=\"pug\"></a>pug</h3><ul>\n<li><p>（安装<code>npm i -s pug</code>）pug的基本使用：在这段模板定义代码里，if语句首先判断user对象是否存在，如果存在就显示<code>&lt;h2&gt;</code>标签，并把user.name作为变量嵌入<code>&lt;h2&gt;</code>标签的显示内容里。</p>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token comment\">//- user.pug</span>\n<span class=\"token flow-control\"><span class=\"token branch keyword\">if</span> user</span>\n    <span class=\"token tag\">h2</span><span class=\"token punctuation\">=</span><span class=\"token code\"> user<span class=\"token punctuation\">.</span>name</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>pug的编译：使用 pug-cli 或 pug-server 可以自动将模板文件编译为HTML文件，并提供HTTP静态服务。此外，在线转化工具 html2jade，它可以将已有的HTML 代码转换为pug模板，非常的使用。</p>\n</li>\n<li><p>使用模板引擎（pug）时要注意：</p>\n<ul>\n<li>引用公共模块时使用include。实现父子布局继承时使用extends。</li>\n<li>定义布局模板时使用Layout，布局留空时使用block。缩进时使用Tab键而非空格。</li>\n<li>不管有没有属性，标签和value之间都要有空格。</li>\n<li>可以通过预编译来提高模板执行效率。</li>\n</ul>\n</li>\n<li><p>编译pug</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> pug <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 通过fs.readFileSync读取模板文件</span>\n<span class=\"token comment\">// 当读取到的内容通过 toString 转化为字符串</span>\n<span class=\"token keyword\">const</span> user_pug_str <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./user.pug'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// pug.render方法进行编译，编译后的结果是HTML代码</span>\n<span class=\"token keyword\">var</span> user_html <span class=\"token operator\">=</span> pug<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>user_pug_str<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'yolo'</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user_html<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 编译结果 &lt;h2>yolo&lt;/h2></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>for循环显示列表</li>\n</ul>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token comment\">//- list.pug</span>\n<span class=\"token tag\">ul</span>\n    <span class=\"token flow-control\"><span class=\"token each\"><span class=\"token keyword\">each</span> item <span class=\"token keyword\">in</span></span> users</span>\n        <span class=\"token tag\">li</span><span class=\"token punctuation\">=</span><span class=\"token code\"> item<span class=\"token punctuation\">.</span>name</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"pug模板引擎规则\"><a href=\"#pug模板引擎规则\" class=\"headerlink\" title=\"pug模板引擎规则\"></a>pug模板引擎规则</h3><ol>\n<li>标签属性</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token tag\">p<span class=\"token attr-id\">#root</span><span class=\"token attr-class\">.container</span></span>\n<span class=\"token comment\">//- 等价于</span>\n<span class=\"token tag\">p<span class=\"token attributes\"><span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'root'</span></span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">class</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\"><span class=\"token string\">'container'</span></span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token comment\">//- &lt;p id='root' class='container'>&lt;/p></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>标签内容value，标签与内容之间有空格</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token tag\">p</span> <span class=\"token plain-text\">this is a tag</span>\n<span class=\"token comment\">//- &lt;p>this is a tag&lt;/p></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>层级嵌套<br>原理：利用缩进来判断包含关系。缩进方式有两种：使用空格和使用Tab建（推荐Tab键）</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></span>\n    <span class=\"token markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></span>\n    <span class=\"token markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></span>\n    <span class=\"token markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></span>\n<span class=\"token markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></span>\n\n<span class=\"token comment\">//- pug写法</span>\n<span class=\"token tag\">ul<span class=\"token attr-class\">.parent</span></span>\n    <span class=\"token tag\">li</span> <span class=\"token plain-text\">1</span>\n    <span class=\"token tag\">li</span> <span class=\"token plain-text\">2</span>\n    <span class=\"token tag\">li</span> <span class=\"token plain-text\">3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"4\">\n<li>变量</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token comment\">//- 代码里等号，表示后面接的是变量，子类extends继承该布局时，name变量在子页面里也可以使用</span>\n<span class=\"token tag\">p</span><span class=\"token punctuation\">=</span><span class=\"token code\"> name </span>\n\n<span class=\"token comment\">//- 插写法</span>\n<span class=\"token tag\">p</span> <span class=\"token plain-text\">#&#123; name &#125;</span>\n\n<span class=\"token comment\">//- 不转义代码 !&#123; html &#125;</span>\n<span class=\"token punctuation\">!</span>&#123; \"&lt;script>&lt;/script>\" &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"5\">\n<li>if和each</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token comment\">//- user.pug</span>\n<span class=\"token flow-control\"><span class=\"token branch keyword\">if</span> user</span>\n    <span class=\"token tag\">h2</span><span class=\"token punctuation\">=</span><span class=\"token code\"> user<span class=\"token punctuation\">.</span>name</span>\n\n<span class=\"token comment\">//- list.pug  index是下标</span>\n<span class=\"token tag\">ul</span>\n    <span class=\"token flow-control\"><span class=\"token each\"><span class=\"token keyword\">each</span> item<span class=\"token punctuation\">,</span> index <span class=\"token keyword\">in</span></span> users</span>\n        <span class=\"token tag\">li</span><span class=\"token punctuation\">=</span><span class=\"token code\"> item<span class=\"token punctuation\">.</span>name</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"6\">\n<li>布局</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token comment\">//- extends指明了当前pug页面需要继承哪个layout布局</span>\n<span class=\"token keyword\">extends ../layout</span>\n\n<span class=\"token comment\">//- 实现block模块，名字必须和layout里一致</span>\n<span class=\"token keyword\">block left_content</span>\n\n<span class=\"token keyword\">block main_content</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"7\">\n<li>内嵌sctipt代码，script后面的点 <code>.</code>必须要有</li>\n</ol>\n<pre class=\"line-numbers language-pug\" data-language=\"pug\"><code class=\"language-pug\"><span class=\"token tag\">script</span><span class=\"token punctuation\">.</span><span class=\"token multiline-script\">\n    <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"koa-compose\"><a href=\"#koa-compose\" class=\"headerlink\" title=\"koa-compose\"></a>koa-compose</h1><p>可以将多个中间件合并成一个中间件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> compose<span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-compose'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">return</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//中间件</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//中间件</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"koa-bodyparser\"><a href=\"#koa-bodyparser\" class=\"headerlink\" title=\"koa-bodyparser\"></a>koa-bodyparser</h1><p>koa-bodyparser中默认只支持JSON、form两种格式的解析，其他类型的解析需要在enableTypes中配置，如<code>&#39;text/plain&#39;</code>配置为text。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> bodyparser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-bodyparser'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 将bodyparser挂载到app上</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">bodyparser</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// 配置更多的类型</span>\n    <span class=\"token literal-property property\">enableTypes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'form'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 访问 body参数</span>\nctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body\n<span class=\"token comment\">// 如果post请求后面拼接了参数， 也可以通过ctx.query获取</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"koa-x2F-cors\"><a href=\"#koa-x2F-cors\" class=\"headerlink\" title=\"@koa&#x2F;cors\"></a>@koa&#x2F;cors</h1><p>跨域问题</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 安装 @koa/cors 或者 koa2-cors（很久没有更新）</span>\n<span class=\"token comment\">// npm i koa2-cors</span>\n<span class=\"token keyword\">const</span> cors <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@koa/cors'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//  https://www.npmjs.com/package/@koa/cors</span>\n\n<span class=\"token comment\">// 这里cors中间件一定要写在路由之前</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> router<span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"koa-multer（文件上传模块）\"><a href=\"#koa-multer（文件上传模块）\" class=\"headerlink\" title=\"@koa-multer（文件上传模块）\"></a>@koa-multer（文件上传模块）</h1><p>文件上传有两种方式:</p>\n<ul>\n<li>调用CDN的 SDK将文件直接从前端上传到CDN上；</li>\n<li>采用常规上传方式，先将文件上传到Node.js服务器，再由 Node.js服务器转存到CDN；</li>\n<li>二者的差别在于是否需要通过服务器对文件进行定制，如果没有这样的需求，直接上传就是很不错的方式。</li>\n</ul>\n<p>@koa-multer是一个非常便于使用的文件上传模块，使用@koa-multer可以解析body中的流，并将其保存成文件。@koa-multer不会处理multipart&#x2F;form-data以外的任何表单</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_42778001/article/details/104442163\">@koa&#x2F;multer文件上传</a></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> Router <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-router'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> multer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@koa/multer'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//上传⽂件存放路径、及⽂件命名</span>\n<span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> multer<span class=\"token punctuation\">.</span><span class=\"token function\">diskStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function-variable function\">destination</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token punctuation\">,</span><span class=\"token string\">'/public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">filename</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">let</span> type <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>originalname<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>file<span class=\"token punctuation\">.</span>fieldname<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>type<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//⽂件上传限制</span>\n<span class=\"token keyword\">const</span> limits <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">fields</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// ⾮⽂件字段的数量</span>\n    <span class=\"token literal-property property\">fileSize</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//⽂件⼤⼩单位 b</span>\n    <span class=\"token literal-property property\">files</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\">// ⽂件数量</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> upload <span class=\"token operator\">=</span> <span class=\"token function\">multer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>storage<span class=\"token punctuation\">,</span>limits<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 在路由中，可通过 ctx.file 获取上传完毕的⽂件信息，多⽂件上传可通过 ctx.files 获取</span>\nroute<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/file'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// file名字前后端要一致</span>\n    <span class=\"token keyword\">let</span> err <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> upload<span class=\"token punctuation\">.</span><span class=\"token function\">single</span><span class=\"token punctuation\">(</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span>res<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token operator\">=></span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">msg</span> <span class=\"token operator\">:</span> err<span class=\"token punctuation\">.</span>message\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span>ctx<span class=\"token punctuation\">.</span>file\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">allowedMethods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"在koa中发起请求（node-fetch和axios）\"><a href=\"#在koa中发起请求（node-fetch和axios）\" class=\"headerlink\" title=\"在koa中发起请求（node-fetch和axios）\"></a>在koa中发起请求（node-fetch和axios）</h1><h2 id=\"node-fetch\"><a href=\"#node-fetch\" class=\"headerlink\" title=\"node-fetch\"></a>node-fetch</h2><ul>\n<li><a href=\"https://www.npmjs.com/package/node-fetch\">node-fetch</a><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// npm i --save-dev node-fetch</span>\n<span class=\"token keyword\">const</span> fetch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node-fetch'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://127.0.0.1:3000/users/post'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span>   \n        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'yourUsername'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'yourPassword'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">json</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h1 id=\"API访问鉴权：JSON-Web-Tokens-JWT\"><a href=\"#API访问鉴权：JSON-Web-Tokens-JWT\" class=\"headerlink\" title=\"API访问鉴权：JSON Web Tokens(JWT)\"></a>API访问鉴权：JSON Web Tokens(JWT)</h1><h2 id=\"直接使用原始的JWT进行鉴权\"><a href=\"#直接使用原始的JWT进行鉴权\" class=\"headerlink\" title=\"直接使用原始的JWT进行鉴权\"></a>直接使用原始的JWT进行鉴权</h2><ul>\n<li>客户端申请令牌时，使用jwt.sign进行签名，并将签名结果返回客户端；</li>\n<li>签名体(payload）会包含用户的必要信息，以便通过 jwt.verify进行校验时能获得该信息，作为后面的查询依据；</li>\n<li>当API请求携带令牌时，需要先使用jwt.verify进行校验，成功后才能根据用户信息查询并返回数据。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> secret <span class=\"token operator\">=</span> <span class=\"token string\">'secretxxx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> token <span class=\"token operator\">=</span> jwti<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">user_id</span><span class=\"token operator\">:</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'yolo'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">user_email</span><span class=\"token operator\">:</span><span class=\"token string\">'yolo.com'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">expiresIn</span><span class=\"token operator\">:</span> <span class=\"token string\">'1h'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 获取令牌信息</span>\n<span class=\"token comment\">// 检查PoST的信息、URL查询参数、头部信息</span>\n<span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>token <span class=\"token operator\">||</span> ctx<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>token <span class=\"token operator\">||</span> ctx<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">'x-access-token'</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token comment\">// 验证</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> decoded <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> secret<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>decoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用koa-jwt模块\"><a href=\"#使用koa-jwt模块\" class=\"headerlink\" title=\"使用koa-jwt模块\"></a>使用koa-jwt模块</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-jwt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">jwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">secret</span><span class=\"token operator\">:</span> <span class=\"token string\">'secretXXX'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"koa-etag（ETag处理）\"><a href=\"#koa-etag（ETag处理）\" class=\"headerlink\" title=\"koa-etag（ETag处理）\"></a>koa-etag（ETag处理）</h1><p>ETag 是前端缓存优化的重要部分。ETag 在服务器端生成后，客户端将通过If-Match或If-None-Match条件判断请求来验证资源是否被修改，其中比较常用的是If-None-Match。如果资源没有被修改则返回304状态码，如果被修改则返回正常值。<br>一般的静态 HTTP服务器都会根据文件内容来判断文件是否被修改，进而决定是否需要给客户端返回新内容。<br>在Koa里，我们需要使用koa-conditional-get和 koa-etag插件来提供ETag 功能，示例如下。</p>\n<ul>\n<li>这里定义的变量etag就是在Koa中用于生成ETag 的中间件。</li>\n<li>ETag缓存是通过conditional-get拦截才能生效的。</li>\n<li>koa-conditional-get 一定要放在koa-etag 前面。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> conditional <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-conditional-get'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> etag <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-etag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t机市用\n<span class=\"token comment\">// etag模块 通常和 conditional-get 模块一起使用</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">conditional</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">etag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"koa-session-会话session\"><a href=\"#koa-session-会话session\" class=\"headerlink\" title=\"koa-session(会话session)\"></a>koa-session(会话session)</h3><ol>\n<li>koa-session + ioredis</li>\n<li>koa-generic-session + koa-redis(基于redis存储)</li>\n</ol>\n<ul>\n<li>依赖Redis，因此需要先启动Redis服务器。</li>\n<li>通过ctx.session进行会话信息处理。</li>\n<li>TTL是Session Store的超时时间，这个值一般是30min。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> session <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-generic-session'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> RedisStore <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa-redis'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span>keys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'keys'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'keykeys'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//加入全局中间件</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>   \n    <span class=\"token literal-property property\">store</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">ttl</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span>  <span class=\"token comment\">// 半小时</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Session Store其实就是将会话存储在不同持久化存储中以后抽象出来的通用层，其基本的存、取和销毁操作如下。</span>\n<span class=\"token comment\">// - get(sid): 根据sid来获取会话信息。</span>\n<span class=\"token comment\">// - set(sid, sess, ttl): 通过sid设置会话信息，ttl指的是会话可存活时间(ms</span>\n<span class=\"token comment\">// - destroy(sid): 根据sid销毁会话。</span>\n\n<span class=\"token comment\">// 在路由中可以直接通过ctx.session对后面的中间件进行操作</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'/get'</span><span class=\"token operator\">:</span>\n        ctx<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'yolo'</span> <span class=\"token punctuation\">&#125;</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>user\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'/remove'</span><span class=\"token operator\">:</span>\n        ctx<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span><span class=\"token keyword\">null</span>\n        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> <span class=\"token string\">\"removed\"</span>\n        <span class=\"token keyword\">break</span>\n<span class=\"token punctuation\">&#125;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"log4js-日志处理\"><a href=\"#log4js-日志处理\" class=\"headerlink\" title=\"log4js(日志处理)\"></a>log4js(日志处理)</h1><ul>\n<li><a href=\"https://www.npmjs.com/package/log4js\">log4js</a></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> log4js <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log4js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> logger <span class=\"token operator\">=</span> log4js<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> <span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">;</span>\nlogger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Some debug messages\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://koa.bootcss.com/#\">koa官网文档</a></li>\n<li>《Koa开发 入门、进阶与实战》</li>\n<li>《Node.js12 实战》</li>\n<li>《狼叔卷2》</li>\n</ul>\n"},{"title":"【webpack】如何成为一名webpack配置工程师","date":"2021-02-09T20:33:11.000Z","toc":true,"comments":1,"copyright":false,"_content":"# Webpack基础\n\n## 为什么需要构建工具，它有什么作用？\n\n- **转换ES6语法**：ES6语法在前端领域广泛使用，然而很多浏览器对ES6没有提供全面的兼容和支持，所以需要构建工具来对ES6语法进行编译。\n- **转换JSX、vue指令**：前端框架React的JSX，VUE指令都是浏览器无法识别的，需要编译转换。\n- **CSS前缀补全，预处理器**：经常使用less、sass等预编译语法写样式，需要构建工具做编译转化为CSS。\n- **多媒体资源压缩**：经常使用的图片、字体、图标等多媒体资源，需要构建工具对它们进行压缩，减少体积大小。\n- **压缩混淆代码**：当前的前端开发都是模块开发，也引入了大量的依赖包，为了让浏览器对代码的加载更快，需要构建工具对代码进行压缩和混淆。\n\n## Webpack基础知识\n\n- loader作用：webpack仅支持js和json文件，想对其他类型的文件打包需要使用loader，转化成为有效的模块。loader本身是一个函数，接受源文件作为参数，返回转换的结果，loader的执行顺序是从右往左。\n- plugins作用：plugins是增强webpack功能，是 bundle 的一个优化，干预输出的结果，作用于整个构建过程。可以简单理解为任何loader没办法做的事情，都可以用plugins去完成。\n- chunk和bundle：chunk是webpack打包过程中依赖，bundle是输出的产物。\n- 基本的配置文件如下：\n```js\n// 为JSON模块使用具名导出，可能需要使用 package.json 中的一些字段\n// package.json的 homepage 属性会告诉 webpack 项目的路径需要打包到哪个路径下，如github路径、CDN路径\nimport pkg from './package.json'; // console.log(pkg.version);\n\nconst path = require('path');\nmodule.exports = {\n  mode: 'development', // 模式：development、production、none\n  entry: './src/index.js', // 打包入口地址\n  output: {\n    filename: 'bundle.js', // 输出文件名\n    path: path.join(__dirname, 'dist') // 输出文件目录\n  }\n  module: {\n    rules: [\n\n    ]\n  },\n  plugin: []\n}\n```\n### mode模式\n\n| 名称  | 描述 |\n| :---: | :---: |\n| development | 开发模式，打包更加快速 |\n| production  | 生产模式，打包比较慢，会开启 tree-shaking、压缩代码和清除无用代码 |\n| none        | 不开启任何优化选项|\n- development：更快的构建速度、热更新(hot)、快速定位问题(sourcemap )\n- production: 生产环境下会自动压缩js代码，构建体积小（代码压缩 + tree-shaking）、代码分割、压缩images。\n\n## webpack常用指令\n\n- webpack默认配置文件是根目录下的webpack.config.js，自定义配置打包文件的命令：`webpack --config filename`\n- 监听变动并自动打包（文件监听是在发现源码发生变化时，自动重新构建出新的输出文件）：\n  - 方式一：在package.json的script命令添加：`webpack --watch`\n  - 方式二：在webpack.config.js中设置`watch: true`\n- 压缩混淆代码：`webpack -p`\n- 方便出错时能查阅更详尽的信息：`webpack --display-error-details`\n- 让编译的输出内容带有进度和颜色：`webpack --progress --colors`\n- 模块热替换，在前端代码变动的时候无需整个刷新页面，只把变化的部分替换掉：`webpack-dev-server --hot`\n- inline选项会为入口页面添加热加载功能，即代码改变后重新加载页面（刷新浏览器）：`webpack-dev-server --inline`\n\n## Webpack的整个生命周期\nWebpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：\n- `初始化参数` 从配置文件和 Shell 语句中读取与合并参数，得出最终的参数\n- `开始编译` 用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译\n- `确定入口` 根据配置中的 entry 找出所有的入口文件\n- `编译模块` 从入口文件出发，调用所有配置的 Loader 对模块进行编译，再找出该模块被编译后的最终内容以及它们之间的依赖关系\n- `完成模块编译` 在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系\n- `输出资源` 根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会\n- `输出完成` 在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统\n\n在以上过程中，在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，并且plugin可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。\n\n## 常见的loaders\n\n| 名称          | 描述                                                                  |\n| ------------- | --------------------------------------------------------------------- |\n| babel-loader  | 转换ES6、ES7等JS新特性语法                                            |\n| css-loader    | 加载和解析.css文件，不会将样式加载到页面上                          |\n| style-loader   | 将处理好的css以style标签形式添加到页面上                           |\n| postcss-loader | 添加CSS3部分属性的浏览器前缀（先添加前缀，再使用css-loader）        |\n| less-loader   | 将less文件转换成css                                                   |\n| ts-loader     | 将TS转换成JS                                                          |\n| vue-loader    | 支持 Vue          |\n| thread-loader | 正常情况下webpack开一个进程打包，thread-loader作用是多进程打包JS和CSS  |\n| file-loader   | 解决图片、字体、媒体等资源引入问题，并将资源copy到指定目录，默认为 dist |\n| url-loader    | url-loader内部使用了file-loader，可以设置较小的资源自动base64，多了一个limit的配置|\n| raw-loader    | raw-loader可以将文件转化成字符串的形式导入                       |\n\n**注意**：webpack5内置了资源处理模块，file-loader、url-loader和raw-loader都可以不用安装\n\n## 常见的plugins\n\n| 名称 | 描述  |\n| --- | --- |\n| HtmlWebpackPlugin       | 将打包好的bundle如js、css 文件可以自动引入到html中 |\n| mini-css-extract-plugin | 将CSS从 bunlde文件里提取成一个独立的CSS文件(MiniCssExtractPlugin.loader) |\n| TerserPlugin | 压缩JS，支持ES6，清除console（webpack5内置）|\n| splitchunksplugin       | 将chunks相同的模块代码提取成公共js   |\n| CleanWebpackPlugin      | 自动清空打包目录  |\n| copyWebpackPlugin       | 将文件或者文件夹拷贝到构建的输出目录（webpack5内置）   |\n| UglifyjsWebpackPlugin   | 压缩JS    |\n| ZipWebpackPlugin        | 将打包出的资源生成一个zip包   |\n\n## 基本的webpack配置\n\n```js\n\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 生成html模板\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin'); // 将css单独提取\nconst OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin'); // 压缩css\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin'); // 打包输出前清空文件夹\nconst path = require('path');\n// 通过 process.env.NODE_ENV 获取当前环境\n\nmodule.exports = {\n  mode: 'development', // production or development or none\n  /**\n   * 单入口entry: './src/js/index.js'\n   * 多入口entry: { key: 'value' }\n   * key可自定义，value是入口文件路径\n  */\n  entry: {\n    // 定义应用的入口点 src/app.js，并命名为 main\n    main: path.resolve(__dirname, './src/app.js'), \n    index: './src/js/index.js', // 输出index\n    test: './src/js/test.js', // 输出test\n  },\n  /**\n   * filename, path\n   * [name].[hash:8].bundle.js、[name].[chunkhash:8].bundle.js\n   * hash字段是根据每次编译compilation的内容计算所得、chunkhash是根据模块内容计算出的hash值\n  */\n  output: {\n    // 打包输出的文件名\n    // name是一个占位符，通过占位符确保文件名称的唯一，一般entry多入口使用占位符区分\n    filename: 'js/[name].[contenthash:10].js', // 10位hash值, name取原来的文件名 \n    // 定义打包结果的输出位置build目录\n    path: path.resolve(__dirname, 'build'),\n    // publicPath表示的是打包生成的index.html文件里面引用资源的前缀\n\n    // webpack5清除输出目录可用，无需安装clean-webpack-plugin\n    clean: true\n  },\n  /**\n   * test指定匹配规则\n   * use指定使用的loader名称\n  */\n  module: {\n    // 定义处理源文件的规则，rules 下会按顺序使用匹配的规则\n    rules: [\n      {\n        // 遇到 .js 结尾的文件则使用这个规则\n        test: /\\.js$/,\n        // 忽略 node_modules 目录下的 js 文件\n\n        // 在配置 loader 的时候，我们需要更精确的去指定 loader 的作用目录或者需要排除的目录，\n        // 通过使用 include 和 exclude 两个配置项\n        include: path.join(__dirname, 'src'), // 符合条件的模块进行解析\n        exclude: /node_modules/, // 排除符合条件的模块，不解析\n        use: [\n          /* \n              开启多线程打包。 \n              进程启动大概为600ms，进程通信也有开销。\n              只有工作消耗时间比较长，才需要多线程打包\n          */\n          {\n            loader: 'thread-loader',\n            options: {\n              workers: 2 // 进程2个\n            }\n          },\n          {\n            // 使用 babel-loader 处理 js\n            loader: 'babel-loader',\n            // babel-loader 的一些选项\n            options: {\n              presets: [\n                '@babel/preset-env', // 确保 Babel 能够处理 JSX 语法\n                {\n                    // 按需加载\n                    useBuiltIns: 'usage',\n                    // 指定core-js版本\n                    corejs: {\n                      version: 3\n                    },\n                    // 指定兼容性做到哪个版本浏览器\n                    targets: {\n                      chrome: '60',\n                      firefox: '60',\n                      ie: '9',\n                      safari: '10',\n                      edge: '17'\n                    }\n                  }\n              \n              ], \n              // babel 在转译 js 过程中时间开销比价大，将 babel-loader 的执行结果缓存起来，重新打包的时候，直接读取缓存\n              // 开启babel缓存, 第二次构建时，会读取之前的缓存, 速度会更快一点\n              cacheDirectory: true // 启用缓存，缓存位置： node_modules/.cache/babel-loader\n            },\n          },\n        ]\n      },\n      {\n        test: /\\.css$/,\n        /**\n         * css-loader用于处理加载.css文件，并且转换成commonjs对象\n         * style-loader将样式通过<style>标签插入到head中\n        */\n        use: [\n          // 'style-loader', // 以 style标签 添加到head\n          MiniCssExtractPlugin.loader, // 将js中的css单独提取出来\n          'css-loader', // 将css文件整合到js文件中\n        ]\n      },\n      {  \n        // 检测 less 文件  \n        test: /\\.less$/,  \n        // 使用了三个 loader，注意执行顺序是数组的倒序  \n        // 也就是先执行 less-loader ，将less转换成css   \n        use: [\n          // 'style-loader', \n          MiniCssExtractPlugin.loader,\n          // 缓存一些性能开销比较大的 loader 的处理结果，缓存位置：node_modules/.cache/cache-loader\n          'cache-loader', \n          'css-loader', \n          // 'less-loader'\n          {\n            loader: 'less-loader',\n            options: {\n              sourceMap: true,\n              // 替换某个属性值，如修改antd默认主题色@primary-color，入口文件样式引入@import '~antd/dist/antd.less';\n              modifyVars: {\n                '@primary-color': '#13c2c2',　　\n              }\n            }\n        ],  \n      },\n      {\n        // webpack 默认处理不了html中img图片\n        // 匹配 图片资源\n        test: /\\.(jpg|png|gif|jpeg)$/,\n        // 通过 url-loader 或者 file-loader 处理图片资源\n        // url-loader内部使用了file-loader，可以设置较小的资源自动base64\n        // base64格式的图片  可打包在js中直接使用\n        loader: 'url-loader', \n        options: {\n          // 图片大小小于8kb，就会被base64处理\n          // 优点: 减少请求数量（减轻服务器压力）\n          // 缺点：图片体积会更大（文件请求速度更慢）\n          limit: 8 * 1024,\n          // 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs\n          // 解析时会出问题：[object Module]\n          // 解决：关闭url-loader的es6模块化，使用commonjs解析\n          esModule: false,\n          // 给图片进行重命名\n          // [hash:10]取图片的hash的前10位\n          // [ext]取文件原来扩展名\n          name: '[contenthash:10].[ext]',\n          outputPath: 'imgs',\n        }\n      },\n      {\n        test: /\\.html$/,\n        // 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）\n        loader: 'html-loader'\n      },\n      // 打包其他资源(除了html/js/css资源以外的资源)\n      {\n        // file-loader处理字体文件\n        // 排除css/js/html资源\n        test: /\\.(woff|woff2|ttf|eot|otf)$/,\n        exclude: /\\.(css|js|html|less)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[contenthash:10].[ext]',\n          outputPath: 'media'\n        }\n      },\n    ],\n  },\n  plugins: [\n    // 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS），并配置了页面的 title\n    new HtmlWebpackPlugin({\n      title: 'Webpack Output',\n       // 复制 './src/index.html' 文件，并自动引入打包输出的所有资源（JS/CSS）\n      template: './src/index.html',\n      // 压缩html代码\n      minify: {\n        // 移除空格\n        collapseWhitespace: true,\n        // 移除注释\n        removeComments: true\n      }\n    }),\n    // 提取js中的css成单独文件\n    new MiniCssExtractPlugin({ \n      // 对输出的css文件进行重命名，如filename: 'css/built.css'，放到输出目录的css文件夹下\n      filename: '[name].[hash:8].css'\n    }),\n    // 打包输出前清空文件夹clean-webpack-plugin（webpack5不需要）\n    new CleanWebpackPlugin(),\n    // 压缩css\n    new OptimizeCssAssetsWebpackPlugin(),\n  ],\n   /*\n    1. 可以将node_modules中代码单独打包一个chunk最终输出（单入口）\n    2. 自动分析多入口文件的chunk中，有没有公共的文件。如果有会打包成单独一个chunk\n  */\n  optimization: {\n    splitChunks: { // 解决代码引入的复用问题，不会重复打包多次\n      chunks: 'all'\n    }\n  },\n  // 开发服务器 devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器）\n  // 特点：只会在内存中编译打包，不会有任何输出    devServer只能在 开发环境使用，生产环境不需要\n  devServer: {\n    // 项目构建后路径\n    contentBase: resolve(__dirname, 'build'),\n    // 启动gzip压缩\n    compress: true,\n    // 端口号\n    port: 8888,\n    // 自动打开浏览器\n    open: true,\n\n    // 开启HMR功能(webpack优化配置)\n    // 当修改了webpack配置，新配置要想生效，必须重新webpack服务\n    hot: true // HMR只能在 开发环境使用，生产环境不需要\n  },\n  // 拒绝XXX包 被打包进来，再用cdn 引进来(在html中手动通过srcipt标签引入、link引入)\n  // CDN内容分发网络，分布式存放静态资源，缓解服务器压力，就近获取资源，加快访问速度\n  // 某些包需要用cdn引入进来，就可以使用externals\n  externals: {\n    // 拒绝jQuery被打包进来\n    jquery: 'jQuery'\n    // jquery: '$'\n  },\n  devtool: 'eval-source-map' //  source-map\n};\n```\n\n## babel（解析ES6、处理jsx）\n\n- 解析ES6，需要在rules里面匹配js文件，并use: 'babel-loader'。babel-loader是依赖babel的，需要在根目录创建babel的配置文件.babelrc。\n- 需要安装@babel/core、@babel/preset-env、babel-loader\n\n- babel-loader 使用 Babel 加载 ES2015+ 代码并将其转换为 ES5\n- @babel/core Babel 编译的核心包\n- @babel/preset-env Babel 编译的预设，可以理解为 Babel 插件的超集\n\n```json\n// .babelrc\n{\n  // 一系列plugins的集合\n  \"presets\": [\n    \"@babel/preset-env\", // 增加ES6的babel preset配置，解析ES6\n    \"@babel/preset-react\", // 安装该依赖，并增加react的babel preset配置，解析react相关的语法，jsx\n    // @babel/preset-typescript\n  ],\n  // 一个plugins对应一个功能\n  \"plugins\": [\n    // 处理 装饰器的使用\n    [\"@babel/plugin-proposal-decorators\", { legacy: true }],\n    [\"@babel/plugin-proposal-class-properties\", { loose: true }],\n  ]\n}\n```\n### babel-plugin vs babel-preset（预设）\n[Babel polyfill 常见配置对比](https://juejin.cn/post/6975556168752037919)\n\nbabel存在太多的plugin，实现某种功能，比如ES2015语法兼容时需要用到众多的插件。preset是plugin的集合，将多个plugin合并在一起（预设是插件的集合）\n\n1. 插件plugin和预设preset的执行顺序\n- plugin先执行，preset后执行\n- plugin集从前往后执行\n- preset集从后往前执行\n\n@babel/preset-env（官方提供），作用是根据 targets 的配置引入对应插件来实现编译和 polyfill，自动根据 targets 来引入需要的插件\n\n所谓Polyfill就是这样解决API的兼容问题的，抹平差异化\n\n2. 官方给出了两种 polyfill 方案：\n- babel-polyfill：会污染全局适合在业务项目中使用。（Babel7.4.0版本开始，babel/polyfill 已经被废弃，推荐直接使用core-js）\n- babel-runtime：不污染全局适合在组件或类库项目中使用。\n\n开启 polyfill 功能要指定它的引入方式，也就是 useBuiltIns。设置为 usage 是在每个模块引入用到的，设置为 entry 是统一在入口处引入 targets 需要的。\n\npolyfill 的实现就是 core-js，需要再指定下 corejs 版本，一般是指定 3\n\n@babel/preset-env 会导致多个模块重复注入同样的代码，会污染全局环境。解决这个问题就要使用 @babel/plugin-transform-runtime 插件\n\n这样就不会多个模块重复注入同样的实现代码了，而且 core-js 的 api 也不是全局引入了，变成了模块化引入。\n\n这样就解决了 corejs 的重复注入和全局引入 polyfill 的两个问题\n\n@babel/plugin-transform-runtime 的功能，把注入的代码和 core-js 全局引入的代码转换成从 @babel/runtime-corejs3 中引入的形式\n\n@babel/runtime-corejs3 就包含了 helpers、core-js、regenerator 这 3 部分\n```js\n{\n    presets: [\n        ['@babel/preset-env', {\n            targets: 'chrome 30',\n            debug: true,\n            useBuiltIns: 'usage',\n            corejs: 3\n        }]\n    ],\n    plugins: [\n        ['@babel/plugin-transform-runtime', {\n            corejs: 3 // 插件也是处理 polyfill ，也就同样需要指定 corejs 的版本\n        }]\n    ]\n}\n\n```\n### babel的原理\nbabel是一个JS、JSX、TS 的编译器，能把新语法写的代码转换成目标环境支持的语法的代码\n\n#### babel工作的三个步骤\n1. 解析：将源码解析为AST（词法解析和语法解析）\n2. 转换：旧AST转换成为新的AST（应用插件/预设中，对AST节点增删改查的操作）\n3. 生成：根据AST生成源码（深度优先遍历AST生成转译后的源码）\n\n\n\n#### @bable/core\n- 内核@bable/core类似一个调度器，并不直接实现功能细节，而是调度各模块插件去实现相关功能\n- @babel/core的功能可以简单概况为 向外读取配置 => 向内调度插件模块协同工作 => 向外输出转译后的源码。详细版本如下：\n\n加载配置文件，读取所需使用的插件、预处理器等等\n- 调用@babel/parser进行词法分析、语法分析后转换为AST\n- 调用@babel/traverse对AST进行遍历，并采用visitor模式应用配置项中的插件对AST进行转换\n- 调用@babel/generator生成源码和源码对应的sourceMap\n\n#### 解析（parse）\n解析的核心是：词法分析将源码分词、语法分析将分词后的源码按照JS语法逻辑转换为AST（抽象语法树）。\n\n- 词法分析：简单理解为：将源码分割为不同种类，保留关键词（如function）、条件判断词（if/else）、运算符、数字、字符串、空格等\n- 语法分析：将词法分析生成的分词，组合为各类型的语法短语（抽象语法树AST）\n#### 转换（Traverser）\n转换器会遍历AST树，然后按照配置的插件对其中需要转换的节点进行操作\n\n#### 生成（generator）\n调度器调用generator插件将AST转译成源码\n\n#### babel-cli\nbabel官方提供的脚手架，允许你以命令行的方式运行babel\n```js\n$ npm install babel-cli -g\n​\n# 将示例js输出到编译后的js中\n$ babel example.js -o compiled.js\n\n```\n\n## webpack文件监听的原理\n\n轮询判断文件的最后编辑时间是否变化，\n某个文件发生变化了，并不会立刻告诉监听者，而是先缓存起来，等aggregateTimeout.\n\n[watch 和 watchOptions](https://www.webpackjs.com/configuration/watch/#watch)\n\n```js\nmodule.exports = {\n  // 默认是false，不开起监听\n  watch: true,\n  watchOptions: {\n    // 默认为空，不监听的文件或者文件夹，支持正则匹配\n    ignored: /node_modules/,\n    // 监听到变化发生后会等300ms再去执行，默认300ms\n    aggregateTimeout: 300,\n    // 判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒检查1次变化\n    // 间隔xxx秒检查一次变化\n    poll: 1000\n  }\n}\n```\n## 文件指纹\n\n打包后输出的文件名的后缀，如 `index_0a4dfa7c33787eec103e.chunk.js`中的0a4dfa7c33787eec103e\n\n- hash：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改\n- chunkhash：对于 JS 文件，和 webpack 打包的 chunk 相关，不同的entry会生成不同的 chunkhash 值\n- contenthash：将根据资源内容创建出唯一 hash。当资源内容发生变化时，[contenthash] 也会发生变化。\n\n1. JS 的文件指纹设置，在output 的 filename，使用 [chunkhash]\n2. CSS 的文件指纹设置，可以在MiniCssExtractPlugin使用[contenthash]\n\n使用hash的场景还应该结合mode来考虑，如果mode是development的时候，在使用hmr的情况下，尽量避免使用chunkhash和contenthash，应该使用hash。而在mode是production的时候，就是不用hmr的情况下，这时候就适合使用chunkhash了。hmr只在development开发阶段使用。\n\njs使用chunkhash是便于寻找资源，js的资源的关联度更高；而css采用contenthash是因为css一般是根据不同的页面书写的，css资源之前的关联度不高，也就不用在其他资源修改，而css部分没有修改的时候重新更新css。\n\nMiniCssExtractPlugin作用\n\n- 将 CSS 提取到单独的文件中\n- 为每个包含 CSS 的 JS 文件创建一个 CSS 文件\n- 支持按需加载 CSS 和 SourceMaps\n- 下载\n\n```bash\nnpm i mini-css-extract-plugin -D\n```\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nmodule.exports = {\n    output: {\n        path: path.resolve(__dirname, '/dist'),\n        filename: '[name][chunkhash:8].js'\n    },\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name][contenthash:8].css'\n        })\n    ]\n}\n\n```\n\n### 图片的文件指纹设置\n\n在 file-loader或者url-loader 的options参数中设置name，使用[contenthash]\n\n当 webpack 配置中使用了 `[hash]` 占位符时，请考虑将它改为 `[contenthash]`\n\n| 占位符名称    | 含义                                                      |\n| ------------- | --------------------------------------------------------- |\n| [ext]         | 资源后缀名                                                |\n| [name]        | 文件名称                                                  |\n| [path]        | 文件的相对路径                                            |\n| [folder]      | 文件所在的文件夹                                          |\n| [hash]        | 每次构建生成的唯一 hash 值，默认是 md5 生成               |\n| [chunkhash]   | 根据chunk生成hash值 |\n| [contenthash] | 根据文件内容生成hash 值，默认是md5生成，默认有32位，一般取前8位|\n| [emoji]       | 一个随机的指代文件内容的 emoji                            |\n\n- hash：任何一个文件改动，整个项目的构建 hash 值都会改变；\n- chunkhash：文件的改动只会影响其所在 chunk 的 hash 值；\n- contenthash：每个文件都有单独的 hash 值，文件的改动只会影响自身的 hash 值；\n\n```js\nconst path = require('path');\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.(png|svg|jpg|gif)$/,\n                use: [\n                    {\n                        loader: 'file-loader',\n                        options: {\n                            name: 'images/[name][hash:8].[ext]'\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n}\n\n```\n\n## sourcemap\n\n- sourcemap是一种提供源代码到构建后代码映射技术（如果构建后代码出错了，通过映射可以追踪源代码错误）\n- sourcemap一般在开发环境使用，生产环境关闭\n\n| 关键字     | 说明                                      |\n| ---------- | ----------------------------------------- |\n| eval       | 使用eval包裹模块代码                      |\n| source-map | 产生.map文件                              |\n| cheap      | 只需要定位到行信息，不需要列信息           |\n| inline     | 将.map作为DataURI嵌入，不单独生成.map文件 |\n| module     | 包含loader的sourcemap，展示源代码中的错误位置|\n\n### sourcemap的类型\n\n<img src=\"/images/engineering/webpack-source-map001.png\">\n\n- 不开起source-map调试是打包之后的内容，不方便调试\n- 开启source-map调试看到的是源代码，方面调试\n\n```js\nmodule.exports = {\n    devtool: 'source-map'\n}\n```\n\n### sourcemap的类型总结\n\n```js\n[inline-、hidden-、eval-][nosources-][cheap-[module-]]source-map\n```\n\n说明：外部则是生成xxx.js.map文件，内联则是将.map内嵌，不生成.map文件，内联构建速度更快，但是体积比外部大\n\n1. source-map：外部，能显示出错误代码准确信息和源代码的错误位置\n2. inline-source-map：内联，只生成一个内联source-map，能显示错误代码准确信息和源代码的错误位置\n3. eval-source-map：内联，每一个文件都生成对应的source-map，都在eval中，能显示错误代码准确信息和源代码的错误位置(文件后面会多一个hash值，print.js?8d3a)\n4. hidden-source-map：外部，为了隐藏源代码而诞生的，错误代码能显示错误原因，但是没有源代码的错误位置，不能追踪源代码错误，只能提示到构建后代码的错误位置\n5. nosources-source-map：外部，为了隐藏源代码而诞生的，错误代码准确信息，但是没有任何源代码信息(找不到任何代码信息)\n6. cheap-source-map：外部，能显示错误代码准确信息和源代码的错误位置，**只能精确的行的错误，不能精确到列**（比如第四行只是后面的一个代码错误，但是是整行报错，**而source-map可以准确提示哪一行的那一列出错了**，同一行没错误的分号(;) 不提示错误）\n7. cheap-module-source-map：外部，能错误代码准确信息和源代码的错误位置，有module，会将loader的source map加入。\n8. 开发环境：速度快，调试更友好\n- 速度快慢，eval>inline>cheap>...\n  - eval-cheap-souce-map (有cheap只精确到行)\n  - eval-source-map\n- 调试更友好\n  - souce-map\n  - cheap-module-souce-map(module会将loader的source map加入)\n  - cheap-souce-map\n- eval-source-map(调试最友好) 、eval-cheap-module-souce-map(调试性能最友好)、react脚手架（cra）默认使用的是eval-source-map\n- 本地开发推荐eval-cheap-souce-map\n  - 本地开发首次打包慢点没关系，因为eval缓存的原因，rebuild会很快\n  - 开发中，我们每行代码不会写的太长，只需要定位到行就行，所以加上cheap\n  - 我们希望能够找到源代码的错误，而不是打包后的，所以需要加上module\n\n9. 生产环境：源代码要不要隐藏? 调试要不要更友好\n\n- 内联会让代码体积变大，所以在生产环境不用内联，我们要让体积变小，就不要内联，而采用外部的方式。\n- nosources-source-map 全部隐藏（源码和构建后的代码都会隐藏）\n- hidden-source-map 只隐藏源代码，会提示构建后代码错误信息\n- source-map(调试友好)\n- cheap-module-souce-map（cheap的速度会快一点）\n- 推荐none：不想别人看到我的源代码\n\n# webpack进阶\n\n## 自动清理构建产物\n\n- 通过 npm scripts 清理构建目录\n\n```bash\nrm -rf ./dist && webpack\nrimraf ./dist && webpack\n```\n\n- 避免构建前每次都需要手动删除 dist，使用 clean-webpack-plugin，默认会删除 output 指定的输出目录\n\n```js\nconst path = require('path');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name][chunkhash:8].js'\n    },\n    plugins: [\n        new CleanWebpackPlugin()\n    ]\n}\n\n```\n\n## webpack之PostCSS插件autoprefixer自动补齐CSS3前缀\n\n为了实现 CSS3 前缀的自动补齐，使用autoprefixer 插件：对代码打包完成后的 CSS 进行后置处理，与 postcss-loader 结合使用\n[Can I Use 插件](https://caniuse.com/) 查看兼容性\n\n```bash\nnpm i autoprefixer postcss-loader -d\n```\n\n```js\nconst path = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name]_[chunkhash:8].js'\n    },\n    // 有单行注释代码的时候，需要把less loader放到后面，不然会报错的\n    module: {\n        rules: [\n            {\n                test: /.less$/,\n                use: [\n                    MiniCssExtractPlugin.loader,\n                    'css-loader',\n                    'less-loader',\n                    {\n                        loader: 'postcss-loader',\n                        options: {\n                            plugins: () => [\n                                require('autoprefixer')({\n                                    // browsers 指定 autoprefixer 所需要兼容的浏览器版本\n                                    // 最近两个版本，浏览器使用量大于1%\n                                    browsers: ['last 2 version', '>1%', 'ios 7']\n                                    // browsers改成overrideBrowserslist\n                                })\n                            ]\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name]_[contenthash:8].css'\n        })\n    ]\n}\n\n```\n\n## 移动端CSS px自动转换成rem\n\npx2rem-loader：将 px 自动转换成 rem\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /.less$/,\n                use: [\n                    MiniCssExtractPlugin.loader,\n                    'css-loader',\n                    'less-loader',\n                    // 移动端CSS px自动转换成rem\n                    {\n                        loader: 'px2rem-loader',\n                        options: {\n                            remUnit: 75,  // 1rem = 75px\n                            remPrecision: 8  // px 转换为 rem 时小数点后的位数\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n}\n\n```\n\n- lib-flexible：页面渲染时计算根元素的 font-size 值(可以使用手淘的 lib-flexible 库`https://github.com/amfe/lib-flexible`)\n- 将 node_modules -> lib-flexible -> flexible.js 文件全部代码手动引入到 模板html 文件中\n\n## 多页面应用(PWA)\n\n1. 页面有多个入口，多页面应用每个应用都是解耦的，多页面应用对SEO更加友好。\n\n- 多页面跳转需要刷新所有资源，每个公共资源(js、css等)需选择性重新加载;\n- 页面跳转：使用window.location.href = \"./index.html\"进行页面间的跳转；\n- 数据传递：可以使用path?account=123&password=456 路径携带数据传递的方式，或者localstorage、cookie等存储方式;\n\n2. 每个页面对应一个entry，一个html-webpack-plugin，缺点是每次新增或者删除页面需要修改webpack配置\n3. 解决方案：动态获取entry和设置html-webpack-plugin的数量\n\n- 约定js入口文件放置格式为 `./src/xxx/index.js`，xxx为某个特定模块的名称，html模板为index.html\n- 利用glob.sync读取文件：[glob](https://github.com/isaacs/node-glob)\n\n```js\n// npm i glob -d\nglob.sync(path.join(__dirname, './src/*/index.js'))\n```\n\n```js\n// webpack.config.js\nconst glob = require('glob');\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst setMPA = () => {\n    const entry = {};\n    const htmlWebpackPlugins = [];\n    const entryFiles = glob.sync(path.join(__dirname, './src/*/index.js'));\n\n    Object.keys(entryFiles)\n        .map((index) => {\n            const entryFile = entryFiles[index];\n            const match = entryFile.match(/src\\/(.*)\\/index\\.js/);\n            const pageName = match && match[1];\n\n            entry[pageName] = entryFile;\n            htmlWebpackPlugins.push(\n                new HtmlWebpackPlugin({\n                    inlineSource: '.css$',\n                    template: path.join(__dirname, `src/${pageName}/index.html`),\n                    filename: `${pageName}.html`,\n                    chunks: ['vendors', pageName],\n                    inject: true,\n                    minify: {\n                        html5: true,\n                        collapseWhitespace: true,\n                        preserveLineBreaks: false,\n                        minifyCSS: true,\n                        minifyJS: true,\n                        removeComments: false\n                    }\n                })\n            );\n        });\n\n    return {\n        entry,\n        htmlWebpackPlugins\n    }\n}\n\nconst { entry, htmlWebpackPlugins } = setMPA();\n\nmodule.exports = {\n    entry: entry,\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name]_[chunkhash:8].js'\n    },\n    mode: 'production',\n    // module: {......},\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name]_[contenthash:8].css'\n        }),\n        new OptimizeCSSAssetsPlugin({\n            assetNameRegExp: /\\.css$/g,\n            cssProcessor: require('cssnano')\n        }),\n        new CleanWebpackPlugin(), \n        new HTMLInlineCSSWebpackPlugin() \n    ].concat(htmlWebpackPlugins)\n};\n```\n\n## 热更新（HMR）\n\n1、使用 webpack-dev-server\n\n- 自动编译并运行，不需要手动刷新浏览器，每次修改代码都需要重新执行 webpack 命令，可以使用 webpack-dev-server 自动打包运行\n- 不输出文件，而是放在内存中，watch是放在磁盘里\n- 与 HotModuleReplacementPlugin 插件配合使用\n\n```bash\nnpm i webpack-dev-server -d\n```\n\n- webpack.config.js\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\nmodule.exports = {\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name].js'\n    },\n    // 热更新一般只在开发模式使用\n    mode: 'development',\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    devServer: {\n        // 告诉服务器从哪里提供静态资源（只有想提供静态文件时才需要）\n        contentBase: path.resolve(__dirname, 'public'), // 静态资源所在的路径，默认为项目根目录\n        hot: true // 开启热更新\n\t      port: 8888, // 端口号\n        compress: true, //是否启动压缩 gzip\n\t      open:true  // 是否自动打开浏览器\n        // devServer里面的publicPath表示的是打包生成的静态文件所在的位置\n        //（若是devServer里面的publicPath没有设置，则会认为是output里面设置的publicPath的值）\n    }\n}\n\n```\n\n- package.json，--open打开浏览器\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --open\"\n  }\n}\n```\n\n### 热更新原理分析\n\n<img src=\"/images/engineering/webpack-hot001.png\">\n\n- 首次编译：① -> ② -> A -> B\n- 修改代码后的热更新：① -> ② -> ③ -> ④\n- HMR Server -> HMR Runtime 以json形式传递\n\n| 概念                            | 描述                                                                                                 |\n| ------------------------------- | ---------------------------------------------------------------------------------------------------- |\n| Webpack Compiler(webpack编译器) | 将JS编译成 Bundle                                                                                    |\n| HMR Server                      | 将热更新的文件传输给 HMR Runtime                                                                     |\n| Bundle Server                   | 提供文件在浏览器的访问，提供类似的服务器环境访问，如localhost:3003/bundle.js，服务器和浏览器是ws链接 |\n| HMR Runtime                     | 会被注入到浏览器，更新文件的变化                                                                     |\n| bundle.js                       | 构建输出的文件                                                                                       |\n\n\n\n## webpack之JS、css和html文件的压缩\n\nwebpack4 内置了uglifyjs-webpack-plugin 插件（mode为production），默认打包出的 JS 文件已压缩过， webpack5 内置了terser-webpack-plugin 插件\n\n1. CSS 文件的压缩\n\n```bash\n# 安装依赖，使用 optimize-css-assets-webpack-plugin 插件，同时使用预处理器 cssnano\nnpm i optimize-css-assets-webpack-plugin cssnano -D\n```\n\n2. html文件的压缩\n\n```js\nconst path = require('path');\nconst OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst TerserPlugin = require('terser-webpack-plugin');\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name][chunkhash:8].js'\n    },\n    plugins: [\n        // 添加 css 压缩配置\n        new OptimizeCssAssetsPlugin({\n            assetNameRegExp: /\\.css$/g,\n            cssProcessor: require('cssnano')\n        }),\n        // 通常是一个html页面对应一个HtmlWebpackPlugin，多个html就使用多个HtmlWebpackPlugin\n        new HtmlWebpackPlugin({\n            template: path.join(__dirname, 'src/index.html'),  // html 模板所在的位置\n            filename: 'index.html',  // 指定打包出 html 的文件名称\n            chunks: ['index'],  // 指定生成的 html 要 使用哪些 chunk\n            inject: true,  // 将指定的chunks（js、css）引入到 html中\n            minify: {\n                html5: true,\n                // 移除空格\n                collapseWhitespace: true,\n                // 当标记之间的空格包含换行符时，始终折叠为1换行符(不完全删除它)，必须与collapseWhitespace=true一起使用\n                preserveLineBreaks: false,\n                minifyCSS: true, // 压缩文内css\n                minifyJS: true,  // 压缩文内js\n                // 移除注释\n                removeComments: false\n            }\n        })\n    ],\n    optimization: {\n      minimize: true,\n      minimizer: [\n        // 添加 css 压缩配置\n        new OptimizeCssAssetsPlugin({}),\n        // 压缩 JS\n        new TerserPlugin({})\n      ]\n  },\n}\n```\n\n\n## 提取页面的公共资源\n\n### 基础库的分离\n\n- 思路:将react、react-dom 基础包通过cdn 引入，不打入bundle 中\n- 方法:使用html-webpack-externals-plugin\n- entry: 可以是本地文件、cdn引入等\n  <img src=\"/images/engineering/webpack-001.png\">\n\n### externals\nexternals 配置选项提供了「从输出的 bundle 中排除依赖」的方法\n\n例如，从CDN引入React，而不是把它打包\n```html\n <!-- anonymous：CORS请求将不设置凭据标志 -->\n<script\n  src=\"https://unpkg.com/react@16/umd/react.development.js\"\n  crossorigin=\"anonymous\" \n></script>\n```\n配置externals\n```js\nconst config = {\n  //...\n  externals: {\n    react: 'React',\n  },\n};\n\n```\n使用React\n```js\nimport React from 'react';\n```\n### CDN\nCDN用来托管静态资源，就近获取，加快访问速度，缓解服务器压力，还可以防止一些网络的攻击\n\nCDN的原理是：本地DNS系统解析的时候，发现该URL对应的是一个CDN专用的DNS服务器，将解析权利交给了 专门处理CDN的DNS服务处理\n\n### 使用SplitChunksPlugin进行公共脚本分离\n\noptimization.splitChunks 是基于 SplitChunksPlugin 插件实现的，webpack内置的。\n\n[splitChunks 分包配置](https://juejin.cn/post/7023242274876162084#heading-52)\n\n```js\nmodule.exports = {\n    //...\n    optimization: {\n      splitChunks: {\n        // async：异步引入的库进行分离（默认），  initial： 同步引入的库进行分离， all：所有引入的库进行分离（推荐）\n        chunks: 'async', \n        minSize: 30000, // 抽离的公共包最小的大小，单位字节 30k   如果minSize: 0,只要有引用，就会抽离\n        minRemainingSize: 0, // 确保拆分后剩余的最小 chunk 体积超过限制来避免大小为零的模块\n        maxSize: 0, // 最大的大小\n        minChunks: 1, // 资源使用的次数(在多个页面使用到)， 大于1， 最小使用次数\n        maxAsyncRequests: 5,  // 并发请求的资源数量\n        maxInitialRequests: 30, // 入口文件做代码分割最多能分成30个js文件\n        automaticNameDelimiter: '~', // 文件生成时的连接符\n        automaticNameMaxLength: 30, // 自动自动命名最大长度\n        name: true, // 让cacheGroups里设置的名字有效\n        cacheGroups: { //当打包同步代码时，上面的参数生效，配置提取模块的方案\n          vendors: {\n            test: /[\\\\/]node_modules[\\\\/]/,  //检测引入的库是否在node_modlues目录下的\n            priority: -10, //值越大,优先级越高.模块先打包到优先级高的组里\n            filename: 'vendors.js'//把所有的库都打包到一个叫vendors.js的文件里\n          },\n          default: {\n            minChunks: 2, // 上面有\n            priority: -20,  // 上面有\n            reuseExistingChunk: true //如果一个模块已经被打包过了,那么再打包时就忽略这个上模块\n          },\n          commons: {\n              test: /(react|react-dom)/,\n              // 分离处理的名称，可将vendors这个chunk添加到html-webpack-plugin中的chunks数组里使用，chunks: ['vendors', pageName]\n              name: 'vendors', \n              chunks: 'all'\n          }\n        }\n      }\n    }\n};\n```\n\n## Tree Shaking的使用和原理分析\n\n- webpack默认支持，模式为production默认开启，必须是es module的模块规范，cjs不支持\n- Tree Shaking就是把模块中使用到的代码打入bundle，引入了但是没有使用，也不会被打包进入bundle。\n- **Tree Shaking原理**：Tree Shaking会对模块的代码进行静态的分析，在编译的阶段已经确定了哪些代码需要使用的，不需要的代码会被Tree Shaking进行注释标记，最终在uglify阶段删除无用的代码。\n- DCE\n  dead code elimination，消除死代码，通常在编译阶段由编译器进行判断某些代码是否可达从而删除那些不可能执行的代码\n- 代码不会被执行，不可到达\n\n```js\nif(false){\n    console.log(\"1\") // 这段代码永远不会执行\n}\n```\n\n- 代码的执行结果不会被用到\n- 代码只会影响死变量（只写不读）\n- 常规的死代码消除一般来说包含上面这几种类型的无用代码，会在打包阶段，一般是uglify.js分析并删除无用代码。\n- 副作用的代码不能treeshking，如在window对象挂载属性值，但是没有使用；export封装成对象导出，没有使用的方法不能被treeshking，原因是treeshking只能做到export级别，编译期间的静态分析只能对es module的相关语法做分析，是不会真正去执行代码的。\n\n## Scope Hoisting（作用域提升）\n\nScope Hoisting 是 webpack3 的新功能，它可以让 webpack 打包出来的代码文件更小，运行更快。原理是将多个模块放在同一个作用域下，并重命名防止命名冲突，通过这种方式可以减少函数声明和内存开销。\n\n当前现状：webpack构建后的代码存在大量的闭包代码，导致什么问题？\n\n- 大量函数闭包包裹代码，导致包体积增大（模块越多越明显）\n- 代码在运行时因为创建的函数作用域更多，内存开销变大。\n\n### 模块转换分析\n\n- 模块转化为模块初始化函数，转换后的模块会带上一层包裹\n- import会被转换成__webpack_require，__webpack_require的参数有moduleId，exprot也会发生转换\n\n### webpack模块机制\n\n<img src=\"/images/engineering/webpack-module001.png\">\n\n- webpack 打包输出打是一个 IIFE（匿名闭包）；\n- modules 是一个数组，每一项是一个模块初始化函数，modules会传入IIFE函数中；\n- IIFE函数最核心的是使用 __webpack_require() 来加载和处理模块，返回 module.exports；\n- __webpack_require()根据moduleId来查看installModules里是否存在，不存在会创建一个新的module存放到installModules；\n- 通过 __webpack_require__(__webpack_require__.s = 0)，entry入口依赖，启动程序。\n\n## Scope Hoisting原理（从rollup借鉴）\n\n- 原理：将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突，消除包裹\n- Scope Hoisting的使用：webpack4以上，模式为production默认开启，必须是ESM，不支持cjs\n- ModuleConcatenationPlugin() 插件\n  [参考Scope Hoisting](https://juejin.cn/post/6844904003109650445)\n\n1. 没有 Scope Hoisting 时用 webpack 打包下面两个文件\n\n```js\n// main.js\nexport default \"hello\";\n\n// index.js\nimport str from \"./main.js\";\nconsole.log(str);\n```\n\n2. 使用 webpack 打包后输出文件内容如下：\n\n```js\n// module指代源代码，__webpack_exports__就是export、__webpack_require__是import\n/* harmony import 是ES6语法的标识 */\n/* harmony exports 是ES6语法的标识 */\n[  (function (module, __webpack_exports__, __webpack_require__) {    \n        var __WEBPACK_IMPORTED_MODULE_0__main_js__ = __webpack_require__(1);    \n        console.log(__WEBPACK_IMPORTED_MODULE_0__main_js__[\"a\"]);  \n    }),  \n    (function (module, __webpack_exports__, __webpack_require__) {    \n        __webpack_exports__[\"a\"] = ('hello');  \n    })\n]\n```\n\n3. 再开启 Scope Hoisting 后，相同源码打包输出结果变为：\n\n```js\n[  (function (module, __webpack_exports__, __webpack_require__) {    \n        var main = ('hello');    \n        console.log(main);  \n    })\n]\n```\n\n对比两种打包方式输出的代码，我们可以看出，启用 Scope Hoisting 后，函数声明变成一个， main.js 中定义的内容被直接注入到 main.js 对应模块中，这样做的好处：\n\n- 代码体积更小，因为函数申明语句会产生大量代码，导致包体积增大（模块越多越明显）；\n- 代码在运行时因为创建的函数作用域更少，内存开销也随之变小。\n- 对比结果: 通过scope hoisting 可以减少函数声明代码和内存开销\n\nscope hoisting理解为是把每个模块被webpack处理成的模块初始化函数整理到一个统一的包裹函数里，也就是把多个作用域用一个作用域取代，以减少内存消耗并减少包裹块代码，从每个模块有一个包裹函数变成只有一个包裹函数包裹所有的模块，但是有一个前提就是，当模块的引用次数大于1时，比如被引用了两次或以上，那么这个效果会无效，也就是被引用多次的模块在被webpack处理后，会被独立的包裹函数所包裹\n\nScope housting对模块的引用次数大于1次是不产生效果的，这个其实也很好理解，如果一个模块引用次数大于1次，那么这个模块的代码会被内联多次，从而增加了打包出来的js bundle的体积。\n\n## 代码分割和动态import\n\n代码分割场景\n\n1. 抽离相同代码到一个共享模块\n2. 脚本懒加载，使得初始下载的代码更小，懒加载方式：\n\n- cjs：require.ensure\n- esm：动态import（目前还没有原生支持，需要babel转换）\n  - 静态分析（在模块的头部import xxx from 'xxx'）\n  - 动态引入（在if...else{ import('xxx')}），按需加载\n\n3. 动态import的js代码在打包时，会被抽离出来，用到的时候才会加载这个被抽离出来的js文件，通过webpackJsonp的一个请求加载。\n   （典型的通过jsonp的形式往html插入script标签），动态import（懒加载）必定会分割代码，生成新的chunk。\n- prefetch (预获取)：浏览器空闲的时候进行资源的拉取\n```js\nimport( /* webpackPrefetch: true */ './src/xxx').then(() => {})\n```\n- preload (预加载)：提前加载后面会用到的关键资源（谨慎使用）\n```js\nimport(/* webpackPreload: true */ 'ChartingLibrary');\n```\n\n- preload chunk 会在父 chunk 加载时，以并行方式开始加载。prefetch chunk 会在父 chunk 加载结束后开始加载。\n- preload chunk 具有中等优先级，并立即下载。prefetch chunk 在浏览器闲置时下载。\n- preload chunk 会在父 chunk 中立即请求，用于当下时刻。prefetch chunk 会用于未来的某个时刻。\n\n### 如何动态import\n\n- 使用@babel/plugin-syntax-dynamic-import插件，下载该插件，并在.babelrc的plugins配置插件\n\n```js\n/*\n  通过js代码，让某个文件被单独打包成一个chunk\n  import动态导入语法：能将某个文件单独打包\n*/\n\n// 魔法注释当注解用了，标注打包后的文件名为test\n/* webpackChunkName: 'test' */  \n\nimport(/* webpackChunkName: 'test' */'./test')\n  .then(({ add }) => {\n    // 文件加载成功~\n    // eslint-disable-next-line\n    console.log(add(1, 2));\n  })\n  .catch(() => {\n    // eslint-disable-next-line\n    console.log('文件加载失败~');\n  });\n```\n\n## 在webpack中使用ESLint\n\n制定ESLint规范，检查JS\n\n- 不重复造轮子，基于eslint:recommend配置并改进\n- 能够帮助发现代码错误的规则，全部开启\n\n<img src=\"/images/engineering/webpack-eslint001.png\">\n\n### ESLint如何执行落地\n\n- 和CI/CD系统集成\n- 和webpack集成\n- 本地开发阶段增加precommit钩子\n- 安装husky，`npm i husky -d`\n- 增加npm script，通过lint-staged增量检查修改的文件\n\n```json\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\",\n  },\n  \"lint-staged\": {\n    \"linters\": {\n        \"*.{js, less}\": [\n            \"eslint --fix\", \"git add\"\n        ],\n    }\n  },\n}\n```\n\n- 使用eslint-webpack-plugin，构建时检查js规范\n\n### eslint-config-airbnb的使用\n\n- eslint-config-airbnb(react项目使用)、eslint-config-airbnb-base(其他项目)\n  [eslint-config-airbnb](https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb)\n- 下载 `npm install eslint eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y -d`\n- 下载 `npm install babel-eslint eslint-config-airbnb -d`\n  [eslint官网](http://eslint.cn/docs/user-guide/getting-started)\n- eslint配置文件：.eslint.*(.eslint.js/.eslint.json/.eslint.yml)\n\n```js\n// .eslint.js\nmodule.exports = {\n    \"parser\": \"babel-eslint\", // 使用的parser是babel-eslint，需要下载安装babel-eslint\n    \"extends\": \"airbnb\",  // 继承airbnb，需要安装\n    \"env\": {   // 识别browser和node环境的一些全局变量\n        \"browser\": true,\n        \"node\": true\n    },\n    // 定义规则\n    \"rules\": {\n        \"indent\": [\"error\", 4] //indent空格， \"error\"错误级别、4是控制的空格数量\n    }\n};\n```\n\n## 优化 resolve 配置\n### alias\nalias 用的创建 import 或 require 的别名，用来简化模块引用，项目中基本都需要进行配置。\n\n[优化 resolve 配置](https://juejin.cn/post/7023242274876162084#heading-25)\n\n```js\nconst path = require('path')\n...\n// 路径处理方法\nfunction resolve(dir){\n  return path.join(__dirname, dir);\n}\n\n const config  = {\n  ...\n  resolve:{\n    // 配置别名\n    alias: {\n      '~': resolve('src'),\n      '@': resolve('src'),\n      'components': resolve('src/components'),\n    }\n  }\n};\n\n```\n配置完成之后，我们在项目中就可以\n```js\n// 使用 src 别名 ~ \nimport '~/fonts/iconfont.css'\n\n// 使用 src 别名 @ \nimport '@/fonts/iconfont.css'\n\n// 使用 components 别名\nimport footer from \"components/footer\";\n```\n\n### extensions和modules\n- 如果用户引入模块时不带扩展名，那么 webpack 就会按照 extensions 配置的数组从左到右的顺序去尝试解析模块，高频文件后缀名放前面。\n- modules，告诉 webpack 解析模块时应该搜索的目录，\n```js\nconst config = {\n  //...\n  resolve: {\n    extensions: ['.js', '.json', '.wasm'], // webpack 默认配置\n    // 手动配置后，默认配置会被覆盖，如果想保留默认配置，可以用 ... 扩展运算符代表默认配置\n    // extensions: ['.ts', '...'],\n    modules: [resolve('src'), 'node_modules']\n  },\n};\n\n```\n### resolveLoader\n用于解析 webpack 的 loader 包，有自定义的 Loader 就需要配置一下，手写loader时可以用\n```js\nconst path = require('path');\nconst config = {\n  //...\n  resolveLoader: {\n    modules: ['node_modules', path.join(__dirname,'loader')]\n  },\n};\n```\n## webpack构建速度和优化体积\n\n### 使用webpack内置的stats分析\n\n```json\n{\n    \"srcipts\":{\n        \"build:stats\": \"webpack --env production --json > stats.json\"\n    }\n}\n```\n\n### 速度分析：使用speed-measure-webpack-plugin\n\n- 分析整个打包的总耗时\n- 每个插件和loader的耗时情况\n- 和一些Loader或者Plugin新版本会不兼容，需要进行降级处理，如mini-css-extract-plugin、html-webpack-plugin\n\n```js\nconst SpeedMeasureWebpackPlugin = require('speed-measure-webpack-plugin');\nconst smp = new SpeedMeasureWebpackPlugin();\nmodule.exports = smp.wrap({\n    ......\n})\n```\n\n### 体积分析：使用webpack-bundle-analyzer\n可以直观的看到打包结果中，文件的体积大小、各模块依赖关系、文件是够重复等问题，极大的方便我们在进行项目优化的时候，进行问题诊断\n\n- 构建完成后会在8888端口展示大小\n  <img src=\"/images/engineering/webpack-bundle-analyzer-001.png\">\n- 依赖的第三方模块文件大小\n- 业务里面的组件代码大小\n\n```js\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');\nmodule.exports = {\n    plugins: [\n      // 配置插件\n      new BundleAnalyzerPlugin({\n        // analyzerMode: 'disabled',  // 不启动展示打包报告的http服务器\n        // generateStatsFile: true, // 是否生成stats.json文件\n      })\n    ]\n}\n```\n\n### webpack4\n\nwebpack4: 优化原因\n\n- V8带来的优化(for of替代 forEach、Map和Set替代 Object、includes替代indexOf)\n- 默认使用更快的md4 hash 算法\n- webpacks AST可以直接从loader传递给AST，减少解析时间\n- 使用字符串方法替代正则表达式\n\n### 多进程/多实例构建：资源并行解析可选方案\n\nthread-loader\n\n- parallel-webpack\n- HappyPack（同样为开启多进程打包的工具，webpack5 已弃用）\n\n### 多进程/多实例：并行压缩\n\n```js\nconst TerserPlugin = require('terser-webpack-plugin');\nmodule.exports = {\n    optimization: {\n        minimizer: [\n            new TerserPlugin({\n                parallel: true,\n                cache: true\n            })\n        ],\n\tminimize: true,\n    },\n}\n```\n\n### 优化构建速度，缩小构建目标\n\n目的：尽可能的少构建模块，比如babel-loader不解析node_modules、减少文件搜索范围\n\n```js\n{\n    test: /\\.js$/,\n    exclude: /node_modules/,\n    // 同时使用多个loader  用use数组，多个可以直接配置\n    use: [\n      /* \n          开启多线程打包。 \n          进程启动大概为600ms，进程通信也有开销。\n          只有工作消耗时间比较长，才需要多线程打包\n      */\n      {\n        loader: 'thread-loader',\n        options: {\n          workers: 2 // 进程2个\n        }\n      },\n      {\n        loader: 'babel-loader',\n        options: {\n          // 预设：指示babel做怎么样的兼容性处理\n          presets: [\n            [\n              '@babel/preset-env',\n              {\n                // 按需加载\n                useBuiltIns: 'usage',\n                // 指定core-js版本\n                corejs: {\n                  version: 3\n                },\n                // 指定兼容性做到哪个版本浏览器\n                targets: {\n                  chrome: '60',\n                  firefox: '60',\n                  ie: '9',\n                  safari: '10',\n                  edge: '17'\n                }\n              }\n            ]\n          ],\n          // 开启babel缓存\n          // 第二次构建时，会读取之前的缓存, 速度会更快一点\n          cacheDirectory: true\n        }\n      }\n    ],\n}\n```\n\n## 无用的CSS如何删除\n\n- PurifyCSS:遍历代码，识别已经用到的CSS class\n\n使用purgecss-webpack-plugin，必须和mini-css-extract-plugin搭配使用\n\n```js\nconst PurgecssPlugin = require('purgecss-webpack-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst glob = require('glob');\nconst PATHS = {\n    src: path.join(__dirname, 'src')\n};\nmodule.exports = {\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name]_[contenthash:8].css'\n        }),\n        new PurgecssPlugin({\n            paths: glob.sync(`${PATHS.src}/**/*`,  { nodir: true }),\n        })\n    ]\n}\n```\n\n- uncss: HTML需要通过jsdom加载，所有的样式通过PostCSS解析，通过document.querySelector来识别在html文件里面不存在的选择器\n\n## prefetch 与 preload\n\n### prefetch\nprefetch (预获取)：等其他资源加载完毕，浏览器空闲了，会在使用之前，提前加载js文件\n```js\n/*\n  通过js代码，让某个文件被单独打包成一个chunk\n  import动态导入语法：能将某个文件单独打包\n*/\n/* webpackChunkName: 'test' */  // 魔法注释当注解用了,标注打包后的文件名为test\n// 类似路由的懒加载\nimport(/* webpackChunkName: 'test' */'./test')\n\n// 按需加载  必定会分割代码，生成新的chunk\nimg.addEventListener('click', () => {\n  import( /* webpackPrefetch: true */ './desc').then(({ default: element }) => {\n    console.log(element)\n    document.body.appendChild(element)\n  })\n})\n```\n### preload\npreload (预加载)：提前加载后面会用到的关键资源，因为会提前拉取资源，如果不是特殊需要，谨慎使用\n```js\nimport(/* webpackPreload: true */ 'ChartingLibrary');\n```\n## 全局环境变量\n通过 webpack 内置插件 DefinePlugin 定义 DEV 环境变量。\n```js\nconst webpack = require(\"webpack\");\n\nmodule.exports = {\n  mode: \"development\",\n  plugins: [\n    new webpack.DefinePlugin({\n      ENV: JSON.stringify(\"dev\"), // 推荐使用JSON.tringify，不仅可以处理字符串，还可以处理Object中的字符串和Array\n      HELLO: 'hello world',\n    }),\n  ],\n};\n\n```\n# 可维护的webpack构建配置\n\n## 构建配置抽离成npm包的意义\n\n1. 通用性\n\n- 业务开发者无需关注构建配置\n- 统一团队构建脚本\n\n2. 可维护性\n\n- 构建配置合理的拆分\n- README文档、ChangeLog文档等\n\n3. 质量\n\n- 冒烟测试、单元测试、测试覆盖率\n- 持续集成\n\n## 构建配置管理的可选方案\n\n1. 通过多个配置文件管理不同环境的构建，webpack --config 参数进行控制\n2. 将构建配置设计成一个库，比如: hjs-webpack、Neutrino、webpack-blocks\n3. 抽成一个工具进行管理，比如: create-react-app, kyt, nwb（团队规模大抽成一个cli）\n4. 将所有的配置放在一个文件，通过--env参数控制分支选择\n\n## 构建配置包设计\n\n### 通过多个配置文件管理不同环境的webpack构建\n\n- 基础配置:webpack.base.js\n- 开发环境:webpack.dev.js\n- 生产环境:webpack.prod.js\n- SSR环境:webpack.ssr.js\n- ...\n\n### 抽离成一个npm包统一管理\n\n- 规范: git commit日志、README、ESLint规范、Semver规范\n\n### 通过webpack-merge组合配置\n\n合并配置\n\n```js\nconst merge = require('webpack-merge')\nmodule.exports = merge(baseConfig, devConfig)\n```\n\n### 功能模块设计\n\n<img src=\"/images/engineering/webpack-config-001.png\">\n\n### 目录结构设计\n\n```bash\n-/test # 测试代码\n-/lib # 源代码\n  - webpack.dev.js\n  - webpack.prod.js\n  - webpack.ssr.js\n  - webpack.base.js\nindex.js\nREADME.md\nCHANGELOG.md\n.eslinrc.js\npackage.json\n```\n# webpack5\n\n- node版本大于10.13.0\n\n## 功能清除：清理弃用功能\n\n- 所有在webpack4里面被废弃的能力都被清除，因此需要确保webpack4没有打印警告。\n- require.includes语法已被废弃，可以通过 Rule.parser.requirelnclude 将行为改为允许、废弃或禁用。预加载一些模块，并不会马上执行\n- 不再为Node.js模块引入polyfill，之前的版本是：如果某个模块依赖Node.js里面的核心模块，那么这个模块被引入的时候会把Node.js整个polyfill顺带引入。\n\n## 长期缓存\n\n确定的模块ld、chunk和导出名称。在生产模式下，默认的chunklds:\"deterministic\", modulelds:\"deterministic\"。设置成deterministic时默认最小3位数会被使用，不会因为某一个文件发生了变化，其他的会产生变化。\n\n### chunklds\n\n| 选项值        | 描述                                                                   |\n| ------------- | ---------------------------------------------------------------------- |\n| natural       | 按使用顺序的数字id。                                                   |\n| named         | 对调试更友好的可读的id。                                               |\n| deterministic | 在不同的编译中不变的短数字id。有益于长期缓存。在生产模式中会默认开启。 |\n| size          | 专注于让初始下载包大小更小的数字id。                                   |\n| total-size    | 专注于让总下载包大小更小的数字id。                                     |\n\n### modulelds\n\n| 选荐值        | 描述                                 |\n| ------------- | ------------------------------------ |\n| natural       | 按使用顺序的数字id。                 |\n| named         | 对调试更友好的可读的id。             |\n| deterministic | 被哈希转化成的小位数值模块名。       |\n| size          | 专注于让初始下载包大小更小的数字id。 |\n\n## cache持久化缓存\n\n在webpack4里面，可以使用cache-loader将编译结果写入硬盘缓存，还可以使用babel-loader，设置option.cacheDirectory将babel-loader编译的结果写进磁盘。\n\n### webpack5缓存策略\n\n- 默认开启缓存，缓存默认是在内存里。可以对cache进行设置。\n- 缓存淘汰策略︰文件缓存存储在node_modules/.cache/webpack，最大500MB，缓存时常两个星期，旧的缓存先淘汰\n- 后面打包可以直接利用它原生缓存的打包的能力\n\n```js\nmodule.exports= {\n    cache: {\n        // 将缓存类型设置为文件系统\n        type: 'filesystem',\n        buildDependencies: {\n            // 将你的 config添加为 buildDependency，以便在改变config时获得缓存无效\n            config: [__filename],\n\n            // 如果你有其他的东西被构建依赖，你可以在这里添加它们\n            // 注意 webpack、加载器和所有从你的配置中引用的模块都会被自动添加\n        }\n    }\n}\n```\n\n## 构建优化：TreeShaking\n\n- 支持嵌套的TreeShaking\n- 可以分析这个模块直接的一个依赖关系\n\n## 代码生成：支持生成ES6代码\n\n- webpack 4之前只生成ES5的代码。webpack 5则现在既可以生成ES5又可以生成ES6/ES2015代码。\n- 两种设置方式:`5 =<ecmaVersion <= 11或2009 =< ecmaVersion <= 2020`\n\n```js\nmodule.exports = {\n    output:{\n        path: path.join(__dirname, 'dist'),\n        filename: 'bundle.js',\n        ecmaVersion: 6, // 输出ES6代码\n    }\n}\n```\n\n## 开创性的特性：模块联邦\n\n基本解释: 使一个JavaScript 应用在运行过程中可以动态加载另一个应用的代码，并支持共享依赖(CDN)。不再需要本地安装Npm包。\n通过CDN加载，应用A通过一个CDN，它去加载应用B，然后这两个应用分别在不同的端口。使用组件或者模块的分享更加方便了\n\n- Remote: 被依赖方，被Host消费的 Webpack构建，提供一些组件或者依赖出来，给其他的依赖方去用，相当于服务提供方。\n- Host: 依赖方，消费其他 Remote 的 Webpack 构建，使用其他Remote提供的模块，\n- 一个应用可以是Host，也可以是Remote，也可以同时是Host和Remote\n\n### 开创性的特性: ModuleFederationPlugin介绍\n\nWebpack内部通过ModuleFederationPlugin 插件将多个应用结合起来。\n\n- name: 必须，唯一ID，作为输出的模块名，使用的时通过 `${name}/${expose}`的方式使用;\n- library: 必须，其中这里的name为作为umd的name;\n- remotes: 可选，表示作为Host时，去消费哪些Remote;\n- shared: 可选，优先用Host的依赖，如果Host没有，再用自己的;\n- main.js: 应用主文件\n- remoteEntry.js: 作为remote 时被引的文件\n\n## bundle和bundless\n\n### bundle和bundless资源加载差异\n\n- bundle：浏览器加载的是构建好的文件，最开始会加载一个bundle.js；\n- bundless: 直接加载原文件，不是加载构建好的文件；\n\n### bundle和bundless打包速度对比\n\n- bundless的冷启动时间大大缩短（使用esbuild）\n- bundless的HMR速度不受整个项目体积影响，HMR效率高\n- bundless的单文件粒度的缓存更优\n- bundless在开发阶段的体验是更优的\n\n### vite构建速度快的原因\n\n预构建使用ESBuild（冷启动快的原因），ESBuild使用golang进行打包\n\n# 参考 \n- [玩转 webpack](https://time.geekbang.org/course/intro/100028901)\n- [webpack知识体系](https://juejin.cn/post/7023242274876162084)\n- [从v4升级到v5](https://webpack.docschina.org/migrate/5/#update-outdated-options)\n- [webpack5资源模块](https://webpack.docschina.org/guides/asset-modules/)\n- [webpack5资源模块的使用](https://juejin.cn/post/7023242274876162084)\n- [构建webpack5知识体系](https://juejin.cn/post/7062899360995999780)","source":"_posts/engineering/webpack-base.md","raw":"---\ntitle: 【webpack】如何成为一名webpack配置工程师\ndate: 2021-02-09 20:33:11\ncategories:\n  - 工程化\ntags:\n  - Webpack\ntoc: true # 是否启用内容索引\ncomments: true\ncopyright: false\n---\n# Webpack基础\n\n## 为什么需要构建工具，它有什么作用？\n\n- **转换ES6语法**：ES6语法在前端领域广泛使用，然而很多浏览器对ES6没有提供全面的兼容和支持，所以需要构建工具来对ES6语法进行编译。\n- **转换JSX、vue指令**：前端框架React的JSX，VUE指令都是浏览器无法识别的，需要编译转换。\n- **CSS前缀补全，预处理器**：经常使用less、sass等预编译语法写样式，需要构建工具做编译转化为CSS。\n- **多媒体资源压缩**：经常使用的图片、字体、图标等多媒体资源，需要构建工具对它们进行压缩，减少体积大小。\n- **压缩混淆代码**：当前的前端开发都是模块开发，也引入了大量的依赖包，为了让浏览器对代码的加载更快，需要构建工具对代码进行压缩和混淆。\n\n## Webpack基础知识\n\n- loader作用：webpack仅支持js和json文件，想对其他类型的文件打包需要使用loader，转化成为有效的模块。loader本身是一个函数，接受源文件作为参数，返回转换的结果，loader的执行顺序是从右往左。\n- plugins作用：plugins是增强webpack功能，是 bundle 的一个优化，干预输出的结果，作用于整个构建过程。可以简单理解为任何loader没办法做的事情，都可以用plugins去完成。\n- chunk和bundle：chunk是webpack打包过程中依赖，bundle是输出的产物。\n- 基本的配置文件如下：\n```js\n// 为JSON模块使用具名导出，可能需要使用 package.json 中的一些字段\n// package.json的 homepage 属性会告诉 webpack 项目的路径需要打包到哪个路径下，如github路径、CDN路径\nimport pkg from './package.json'; // console.log(pkg.version);\n\nconst path = require('path');\nmodule.exports = {\n  mode: 'development', // 模式：development、production、none\n  entry: './src/index.js', // 打包入口地址\n  output: {\n    filename: 'bundle.js', // 输出文件名\n    path: path.join(__dirname, 'dist') // 输出文件目录\n  }\n  module: {\n    rules: [\n\n    ]\n  },\n  plugin: []\n}\n```\n### mode模式\n\n| 名称  | 描述 |\n| :---: | :---: |\n| development | 开发模式，打包更加快速 |\n| production  | 生产模式，打包比较慢，会开启 tree-shaking、压缩代码和清除无用代码 |\n| none        | 不开启任何优化选项|\n- development：更快的构建速度、热更新(hot)、快速定位问题(sourcemap )\n- production: 生产环境下会自动压缩js代码，构建体积小（代码压缩 + tree-shaking）、代码分割、压缩images。\n\n## webpack常用指令\n\n- webpack默认配置文件是根目录下的webpack.config.js，自定义配置打包文件的命令：`webpack --config filename`\n- 监听变动并自动打包（文件监听是在发现源码发生变化时，自动重新构建出新的输出文件）：\n  - 方式一：在package.json的script命令添加：`webpack --watch`\n  - 方式二：在webpack.config.js中设置`watch: true`\n- 压缩混淆代码：`webpack -p`\n- 方便出错时能查阅更详尽的信息：`webpack --display-error-details`\n- 让编译的输出内容带有进度和颜色：`webpack --progress --colors`\n- 模块热替换，在前端代码变动的时候无需整个刷新页面，只把变化的部分替换掉：`webpack-dev-server --hot`\n- inline选项会为入口页面添加热加载功能，即代码改变后重新加载页面（刷新浏览器）：`webpack-dev-server --inline`\n\n## Webpack的整个生命周期\nWebpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：\n- `初始化参数` 从配置文件和 Shell 语句中读取与合并参数，得出最终的参数\n- `开始编译` 用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译\n- `确定入口` 根据配置中的 entry 找出所有的入口文件\n- `编译模块` 从入口文件出发，调用所有配置的 Loader 对模块进行编译，再找出该模块被编译后的最终内容以及它们之间的依赖关系\n- `完成模块编译` 在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系\n- `输出资源` 根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会\n- `输出完成` 在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统\n\n在以上过程中，在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，并且plugin可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。\n\n## 常见的loaders\n\n| 名称          | 描述                                                                  |\n| ------------- | --------------------------------------------------------------------- |\n| babel-loader  | 转换ES6、ES7等JS新特性语法                                            |\n| css-loader    | 加载和解析.css文件，不会将样式加载到页面上                          |\n| style-loader   | 将处理好的css以style标签形式添加到页面上                           |\n| postcss-loader | 添加CSS3部分属性的浏览器前缀（先添加前缀，再使用css-loader）        |\n| less-loader   | 将less文件转换成css                                                   |\n| ts-loader     | 将TS转换成JS                                                          |\n| vue-loader    | 支持 Vue          |\n| thread-loader | 正常情况下webpack开一个进程打包，thread-loader作用是多进程打包JS和CSS  |\n| file-loader   | 解决图片、字体、媒体等资源引入问题，并将资源copy到指定目录，默认为 dist |\n| url-loader    | url-loader内部使用了file-loader，可以设置较小的资源自动base64，多了一个limit的配置|\n| raw-loader    | raw-loader可以将文件转化成字符串的形式导入                       |\n\n**注意**：webpack5内置了资源处理模块，file-loader、url-loader和raw-loader都可以不用安装\n\n## 常见的plugins\n\n| 名称 | 描述  |\n| --- | --- |\n| HtmlWebpackPlugin       | 将打包好的bundle如js、css 文件可以自动引入到html中 |\n| mini-css-extract-plugin | 将CSS从 bunlde文件里提取成一个独立的CSS文件(MiniCssExtractPlugin.loader) |\n| TerserPlugin | 压缩JS，支持ES6，清除console（webpack5内置）|\n| splitchunksplugin       | 将chunks相同的模块代码提取成公共js   |\n| CleanWebpackPlugin      | 自动清空打包目录  |\n| copyWebpackPlugin       | 将文件或者文件夹拷贝到构建的输出目录（webpack5内置）   |\n| UglifyjsWebpackPlugin   | 压缩JS    |\n| ZipWebpackPlugin        | 将打包出的资源生成一个zip包   |\n\n## 基本的webpack配置\n\n```js\n\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 生成html模板\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin'); // 将css单独提取\nconst OptimizeCssAssetsWebpackPlugin = require('optimize-css-assets-webpack-plugin'); // 压缩css\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin'); // 打包输出前清空文件夹\nconst path = require('path');\n// 通过 process.env.NODE_ENV 获取当前环境\n\nmodule.exports = {\n  mode: 'development', // production or development or none\n  /**\n   * 单入口entry: './src/js/index.js'\n   * 多入口entry: { key: 'value' }\n   * key可自定义，value是入口文件路径\n  */\n  entry: {\n    // 定义应用的入口点 src/app.js，并命名为 main\n    main: path.resolve(__dirname, './src/app.js'), \n    index: './src/js/index.js', // 输出index\n    test: './src/js/test.js', // 输出test\n  },\n  /**\n   * filename, path\n   * [name].[hash:8].bundle.js、[name].[chunkhash:8].bundle.js\n   * hash字段是根据每次编译compilation的内容计算所得、chunkhash是根据模块内容计算出的hash值\n  */\n  output: {\n    // 打包输出的文件名\n    // name是一个占位符，通过占位符确保文件名称的唯一，一般entry多入口使用占位符区分\n    filename: 'js/[name].[contenthash:10].js', // 10位hash值, name取原来的文件名 \n    // 定义打包结果的输出位置build目录\n    path: path.resolve(__dirname, 'build'),\n    // publicPath表示的是打包生成的index.html文件里面引用资源的前缀\n\n    // webpack5清除输出目录可用，无需安装clean-webpack-plugin\n    clean: true\n  },\n  /**\n   * test指定匹配规则\n   * use指定使用的loader名称\n  */\n  module: {\n    // 定义处理源文件的规则，rules 下会按顺序使用匹配的规则\n    rules: [\n      {\n        // 遇到 .js 结尾的文件则使用这个规则\n        test: /\\.js$/,\n        // 忽略 node_modules 目录下的 js 文件\n\n        // 在配置 loader 的时候，我们需要更精确的去指定 loader 的作用目录或者需要排除的目录，\n        // 通过使用 include 和 exclude 两个配置项\n        include: path.join(__dirname, 'src'), // 符合条件的模块进行解析\n        exclude: /node_modules/, // 排除符合条件的模块，不解析\n        use: [\n          /* \n              开启多线程打包。 \n              进程启动大概为600ms，进程通信也有开销。\n              只有工作消耗时间比较长，才需要多线程打包\n          */\n          {\n            loader: 'thread-loader',\n            options: {\n              workers: 2 // 进程2个\n            }\n          },\n          {\n            // 使用 babel-loader 处理 js\n            loader: 'babel-loader',\n            // babel-loader 的一些选项\n            options: {\n              presets: [\n                '@babel/preset-env', // 确保 Babel 能够处理 JSX 语法\n                {\n                    // 按需加载\n                    useBuiltIns: 'usage',\n                    // 指定core-js版本\n                    corejs: {\n                      version: 3\n                    },\n                    // 指定兼容性做到哪个版本浏览器\n                    targets: {\n                      chrome: '60',\n                      firefox: '60',\n                      ie: '9',\n                      safari: '10',\n                      edge: '17'\n                    }\n                  }\n              \n              ], \n              // babel 在转译 js 过程中时间开销比价大，将 babel-loader 的执行结果缓存起来，重新打包的时候，直接读取缓存\n              // 开启babel缓存, 第二次构建时，会读取之前的缓存, 速度会更快一点\n              cacheDirectory: true // 启用缓存，缓存位置： node_modules/.cache/babel-loader\n            },\n          },\n        ]\n      },\n      {\n        test: /\\.css$/,\n        /**\n         * css-loader用于处理加载.css文件，并且转换成commonjs对象\n         * style-loader将样式通过<style>标签插入到head中\n        */\n        use: [\n          // 'style-loader', // 以 style标签 添加到head\n          MiniCssExtractPlugin.loader, // 将js中的css单独提取出来\n          'css-loader', // 将css文件整合到js文件中\n        ]\n      },\n      {  \n        // 检测 less 文件  \n        test: /\\.less$/,  \n        // 使用了三个 loader，注意执行顺序是数组的倒序  \n        // 也就是先执行 less-loader ，将less转换成css   \n        use: [\n          // 'style-loader', \n          MiniCssExtractPlugin.loader,\n          // 缓存一些性能开销比较大的 loader 的处理结果，缓存位置：node_modules/.cache/cache-loader\n          'cache-loader', \n          'css-loader', \n          // 'less-loader'\n          {\n            loader: 'less-loader',\n            options: {\n              sourceMap: true,\n              // 替换某个属性值，如修改antd默认主题色@primary-color，入口文件样式引入@import '~antd/dist/antd.less';\n              modifyVars: {\n                '@primary-color': '#13c2c2',　　\n              }\n            }\n        ],  \n      },\n      {\n        // webpack 默认处理不了html中img图片\n        // 匹配 图片资源\n        test: /\\.(jpg|png|gif|jpeg)$/,\n        // 通过 url-loader 或者 file-loader 处理图片资源\n        // url-loader内部使用了file-loader，可以设置较小的资源自动base64\n        // base64格式的图片  可打包在js中直接使用\n        loader: 'url-loader', \n        options: {\n          // 图片大小小于8kb，就会被base64处理\n          // 优点: 减少请求数量（减轻服务器压力）\n          // 缺点：图片体积会更大（文件请求速度更慢）\n          limit: 8 * 1024,\n          // 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs\n          // 解析时会出问题：[object Module]\n          // 解决：关闭url-loader的es6模块化，使用commonjs解析\n          esModule: false,\n          // 给图片进行重命名\n          // [hash:10]取图片的hash的前10位\n          // [ext]取文件原来扩展名\n          name: '[contenthash:10].[ext]',\n          outputPath: 'imgs',\n        }\n      },\n      {\n        test: /\\.html$/,\n        // 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）\n        loader: 'html-loader'\n      },\n      // 打包其他资源(除了html/js/css资源以外的资源)\n      {\n        // file-loader处理字体文件\n        // 排除css/js/html资源\n        test: /\\.(woff|woff2|ttf|eot|otf)$/,\n        exclude: /\\.(css|js|html|less)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[contenthash:10].[ext]',\n          outputPath: 'media'\n        }\n      },\n    ],\n  },\n  plugins: [\n    // 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS），并配置了页面的 title\n    new HtmlWebpackPlugin({\n      title: 'Webpack Output',\n       // 复制 './src/index.html' 文件，并自动引入打包输出的所有资源（JS/CSS）\n      template: './src/index.html',\n      // 压缩html代码\n      minify: {\n        // 移除空格\n        collapseWhitespace: true,\n        // 移除注释\n        removeComments: true\n      }\n    }),\n    // 提取js中的css成单独文件\n    new MiniCssExtractPlugin({ \n      // 对输出的css文件进行重命名，如filename: 'css/built.css'，放到输出目录的css文件夹下\n      filename: '[name].[hash:8].css'\n    }),\n    // 打包输出前清空文件夹clean-webpack-plugin（webpack5不需要）\n    new CleanWebpackPlugin(),\n    // 压缩css\n    new OptimizeCssAssetsWebpackPlugin(),\n  ],\n   /*\n    1. 可以将node_modules中代码单独打包一个chunk最终输出（单入口）\n    2. 自动分析多入口文件的chunk中，有没有公共的文件。如果有会打包成单独一个chunk\n  */\n  optimization: {\n    splitChunks: { // 解决代码引入的复用问题，不会重复打包多次\n      chunks: 'all'\n    }\n  },\n  // 开发服务器 devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器）\n  // 特点：只会在内存中编译打包，不会有任何输出    devServer只能在 开发环境使用，生产环境不需要\n  devServer: {\n    // 项目构建后路径\n    contentBase: resolve(__dirname, 'build'),\n    // 启动gzip压缩\n    compress: true,\n    // 端口号\n    port: 8888,\n    // 自动打开浏览器\n    open: true,\n\n    // 开启HMR功能(webpack优化配置)\n    // 当修改了webpack配置，新配置要想生效，必须重新webpack服务\n    hot: true // HMR只能在 开发环境使用，生产环境不需要\n  },\n  // 拒绝XXX包 被打包进来，再用cdn 引进来(在html中手动通过srcipt标签引入、link引入)\n  // CDN内容分发网络，分布式存放静态资源，缓解服务器压力，就近获取资源，加快访问速度\n  // 某些包需要用cdn引入进来，就可以使用externals\n  externals: {\n    // 拒绝jQuery被打包进来\n    jquery: 'jQuery'\n    // jquery: '$'\n  },\n  devtool: 'eval-source-map' //  source-map\n};\n```\n\n## babel（解析ES6、处理jsx）\n\n- 解析ES6，需要在rules里面匹配js文件，并use: 'babel-loader'。babel-loader是依赖babel的，需要在根目录创建babel的配置文件.babelrc。\n- 需要安装@babel/core、@babel/preset-env、babel-loader\n\n- babel-loader 使用 Babel 加载 ES2015+ 代码并将其转换为 ES5\n- @babel/core Babel 编译的核心包\n- @babel/preset-env Babel 编译的预设，可以理解为 Babel 插件的超集\n\n```json\n// .babelrc\n{\n  // 一系列plugins的集合\n  \"presets\": [\n    \"@babel/preset-env\", // 增加ES6的babel preset配置，解析ES6\n    \"@babel/preset-react\", // 安装该依赖，并增加react的babel preset配置，解析react相关的语法，jsx\n    // @babel/preset-typescript\n  ],\n  // 一个plugins对应一个功能\n  \"plugins\": [\n    // 处理 装饰器的使用\n    [\"@babel/plugin-proposal-decorators\", { legacy: true }],\n    [\"@babel/plugin-proposal-class-properties\", { loose: true }],\n  ]\n}\n```\n### babel-plugin vs babel-preset（预设）\n[Babel polyfill 常见配置对比](https://juejin.cn/post/6975556168752037919)\n\nbabel存在太多的plugin，实现某种功能，比如ES2015语法兼容时需要用到众多的插件。preset是plugin的集合，将多个plugin合并在一起（预设是插件的集合）\n\n1. 插件plugin和预设preset的执行顺序\n- plugin先执行，preset后执行\n- plugin集从前往后执行\n- preset集从后往前执行\n\n@babel/preset-env（官方提供），作用是根据 targets 的配置引入对应插件来实现编译和 polyfill，自动根据 targets 来引入需要的插件\n\n所谓Polyfill就是这样解决API的兼容问题的，抹平差异化\n\n2. 官方给出了两种 polyfill 方案：\n- babel-polyfill：会污染全局适合在业务项目中使用。（Babel7.4.0版本开始，babel/polyfill 已经被废弃，推荐直接使用core-js）\n- babel-runtime：不污染全局适合在组件或类库项目中使用。\n\n开启 polyfill 功能要指定它的引入方式，也就是 useBuiltIns。设置为 usage 是在每个模块引入用到的，设置为 entry 是统一在入口处引入 targets 需要的。\n\npolyfill 的实现就是 core-js，需要再指定下 corejs 版本，一般是指定 3\n\n@babel/preset-env 会导致多个模块重复注入同样的代码，会污染全局环境。解决这个问题就要使用 @babel/plugin-transform-runtime 插件\n\n这样就不会多个模块重复注入同样的实现代码了，而且 core-js 的 api 也不是全局引入了，变成了模块化引入。\n\n这样就解决了 corejs 的重复注入和全局引入 polyfill 的两个问题\n\n@babel/plugin-transform-runtime 的功能，把注入的代码和 core-js 全局引入的代码转换成从 @babel/runtime-corejs3 中引入的形式\n\n@babel/runtime-corejs3 就包含了 helpers、core-js、regenerator 这 3 部分\n```js\n{\n    presets: [\n        ['@babel/preset-env', {\n            targets: 'chrome 30',\n            debug: true,\n            useBuiltIns: 'usage',\n            corejs: 3\n        }]\n    ],\n    plugins: [\n        ['@babel/plugin-transform-runtime', {\n            corejs: 3 // 插件也是处理 polyfill ，也就同样需要指定 corejs 的版本\n        }]\n    ]\n}\n\n```\n### babel的原理\nbabel是一个JS、JSX、TS 的编译器，能把新语法写的代码转换成目标环境支持的语法的代码\n\n#### babel工作的三个步骤\n1. 解析：将源码解析为AST（词法解析和语法解析）\n2. 转换：旧AST转换成为新的AST（应用插件/预设中，对AST节点增删改查的操作）\n3. 生成：根据AST生成源码（深度优先遍历AST生成转译后的源码）\n\n\n\n#### @bable/core\n- 内核@bable/core类似一个调度器，并不直接实现功能细节，而是调度各模块插件去实现相关功能\n- @babel/core的功能可以简单概况为 向外读取配置 => 向内调度插件模块协同工作 => 向外输出转译后的源码。详细版本如下：\n\n加载配置文件，读取所需使用的插件、预处理器等等\n- 调用@babel/parser进行词法分析、语法分析后转换为AST\n- 调用@babel/traverse对AST进行遍历，并采用visitor模式应用配置项中的插件对AST进行转换\n- 调用@babel/generator生成源码和源码对应的sourceMap\n\n#### 解析（parse）\n解析的核心是：词法分析将源码分词、语法分析将分词后的源码按照JS语法逻辑转换为AST（抽象语法树）。\n\n- 词法分析：简单理解为：将源码分割为不同种类，保留关键词（如function）、条件判断词（if/else）、运算符、数字、字符串、空格等\n- 语法分析：将词法分析生成的分词，组合为各类型的语法短语（抽象语法树AST）\n#### 转换（Traverser）\n转换器会遍历AST树，然后按照配置的插件对其中需要转换的节点进行操作\n\n#### 生成（generator）\n调度器调用generator插件将AST转译成源码\n\n#### babel-cli\nbabel官方提供的脚手架，允许你以命令行的方式运行babel\n```js\n$ npm install babel-cli -g\n​\n# 将示例js输出到编译后的js中\n$ babel example.js -o compiled.js\n\n```\n\n## webpack文件监听的原理\n\n轮询判断文件的最后编辑时间是否变化，\n某个文件发生变化了，并不会立刻告诉监听者，而是先缓存起来，等aggregateTimeout.\n\n[watch 和 watchOptions](https://www.webpackjs.com/configuration/watch/#watch)\n\n```js\nmodule.exports = {\n  // 默认是false，不开起监听\n  watch: true,\n  watchOptions: {\n    // 默认为空，不监听的文件或者文件夹，支持正则匹配\n    ignored: /node_modules/,\n    // 监听到变化发生后会等300ms再去执行，默认300ms\n    aggregateTimeout: 300,\n    // 判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒检查1次变化\n    // 间隔xxx秒检查一次变化\n    poll: 1000\n  }\n}\n```\n## 文件指纹\n\n打包后输出的文件名的后缀，如 `index_0a4dfa7c33787eec103e.chunk.js`中的0a4dfa7c33787eec103e\n\n- hash：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改\n- chunkhash：对于 JS 文件，和 webpack 打包的 chunk 相关，不同的entry会生成不同的 chunkhash 值\n- contenthash：将根据资源内容创建出唯一 hash。当资源内容发生变化时，[contenthash] 也会发生变化。\n\n1. JS 的文件指纹设置，在output 的 filename，使用 [chunkhash]\n2. CSS 的文件指纹设置，可以在MiniCssExtractPlugin使用[contenthash]\n\n使用hash的场景还应该结合mode来考虑，如果mode是development的时候，在使用hmr的情况下，尽量避免使用chunkhash和contenthash，应该使用hash。而在mode是production的时候，就是不用hmr的情况下，这时候就适合使用chunkhash了。hmr只在development开发阶段使用。\n\njs使用chunkhash是便于寻找资源，js的资源的关联度更高；而css采用contenthash是因为css一般是根据不同的页面书写的，css资源之前的关联度不高，也就不用在其他资源修改，而css部分没有修改的时候重新更新css。\n\nMiniCssExtractPlugin作用\n\n- 将 CSS 提取到单独的文件中\n- 为每个包含 CSS 的 JS 文件创建一个 CSS 文件\n- 支持按需加载 CSS 和 SourceMaps\n- 下载\n\n```bash\nnpm i mini-css-extract-plugin -D\n```\n\n```js\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nmodule.exports = {\n    output: {\n        path: path.resolve(__dirname, '/dist'),\n        filename: '[name][chunkhash:8].js'\n    },\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name][contenthash:8].css'\n        })\n    ]\n}\n\n```\n\n### 图片的文件指纹设置\n\n在 file-loader或者url-loader 的options参数中设置name，使用[contenthash]\n\n当 webpack 配置中使用了 `[hash]` 占位符时，请考虑将它改为 `[contenthash]`\n\n| 占位符名称    | 含义                                                      |\n| ------------- | --------------------------------------------------------- |\n| [ext]         | 资源后缀名                                                |\n| [name]        | 文件名称                                                  |\n| [path]        | 文件的相对路径                                            |\n| [folder]      | 文件所在的文件夹                                          |\n| [hash]        | 每次构建生成的唯一 hash 值，默认是 md5 生成               |\n| [chunkhash]   | 根据chunk生成hash值 |\n| [contenthash] | 根据文件内容生成hash 值，默认是md5生成，默认有32位，一般取前8位|\n| [emoji]       | 一个随机的指代文件内容的 emoji                            |\n\n- hash：任何一个文件改动，整个项目的构建 hash 值都会改变；\n- chunkhash：文件的改动只会影响其所在 chunk 的 hash 值；\n- contenthash：每个文件都有单独的 hash 值，文件的改动只会影响自身的 hash 值；\n\n```js\nconst path = require('path');\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.(png|svg|jpg|gif)$/,\n                use: [\n                    {\n                        loader: 'file-loader',\n                        options: {\n                            name: 'images/[name][hash:8].[ext]'\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n}\n\n```\n\n## sourcemap\n\n- sourcemap是一种提供源代码到构建后代码映射技术（如果构建后代码出错了，通过映射可以追踪源代码错误）\n- sourcemap一般在开发环境使用，生产环境关闭\n\n| 关键字     | 说明                                      |\n| ---------- | ----------------------------------------- |\n| eval       | 使用eval包裹模块代码                      |\n| source-map | 产生.map文件                              |\n| cheap      | 只需要定位到行信息，不需要列信息           |\n| inline     | 将.map作为DataURI嵌入，不单独生成.map文件 |\n| module     | 包含loader的sourcemap，展示源代码中的错误位置|\n\n### sourcemap的类型\n\n<img src=\"/images/engineering/webpack-source-map001.png\">\n\n- 不开起source-map调试是打包之后的内容，不方便调试\n- 开启source-map调试看到的是源代码，方面调试\n\n```js\nmodule.exports = {\n    devtool: 'source-map'\n}\n```\n\n### sourcemap的类型总结\n\n```js\n[inline-、hidden-、eval-][nosources-][cheap-[module-]]source-map\n```\n\n说明：外部则是生成xxx.js.map文件，内联则是将.map内嵌，不生成.map文件，内联构建速度更快，但是体积比外部大\n\n1. source-map：外部，能显示出错误代码准确信息和源代码的错误位置\n2. inline-source-map：内联，只生成一个内联source-map，能显示错误代码准确信息和源代码的错误位置\n3. eval-source-map：内联，每一个文件都生成对应的source-map，都在eval中，能显示错误代码准确信息和源代码的错误位置(文件后面会多一个hash值，print.js?8d3a)\n4. hidden-source-map：外部，为了隐藏源代码而诞生的，错误代码能显示错误原因，但是没有源代码的错误位置，不能追踪源代码错误，只能提示到构建后代码的错误位置\n5. nosources-source-map：外部，为了隐藏源代码而诞生的，错误代码准确信息，但是没有任何源代码信息(找不到任何代码信息)\n6. cheap-source-map：外部，能显示错误代码准确信息和源代码的错误位置，**只能精确的行的错误，不能精确到列**（比如第四行只是后面的一个代码错误，但是是整行报错，**而source-map可以准确提示哪一行的那一列出错了**，同一行没错误的分号(;) 不提示错误）\n7. cheap-module-source-map：外部，能错误代码准确信息和源代码的错误位置，有module，会将loader的source map加入。\n8. 开发环境：速度快，调试更友好\n- 速度快慢，eval>inline>cheap>...\n  - eval-cheap-souce-map (有cheap只精确到行)\n  - eval-source-map\n- 调试更友好\n  - souce-map\n  - cheap-module-souce-map(module会将loader的source map加入)\n  - cheap-souce-map\n- eval-source-map(调试最友好) 、eval-cheap-module-souce-map(调试性能最友好)、react脚手架（cra）默认使用的是eval-source-map\n- 本地开发推荐eval-cheap-souce-map\n  - 本地开发首次打包慢点没关系，因为eval缓存的原因，rebuild会很快\n  - 开发中，我们每行代码不会写的太长，只需要定位到行就行，所以加上cheap\n  - 我们希望能够找到源代码的错误，而不是打包后的，所以需要加上module\n\n9. 生产环境：源代码要不要隐藏? 调试要不要更友好\n\n- 内联会让代码体积变大，所以在生产环境不用内联，我们要让体积变小，就不要内联，而采用外部的方式。\n- nosources-source-map 全部隐藏（源码和构建后的代码都会隐藏）\n- hidden-source-map 只隐藏源代码，会提示构建后代码错误信息\n- source-map(调试友好)\n- cheap-module-souce-map（cheap的速度会快一点）\n- 推荐none：不想别人看到我的源代码\n\n# webpack进阶\n\n## 自动清理构建产物\n\n- 通过 npm scripts 清理构建目录\n\n```bash\nrm -rf ./dist && webpack\nrimraf ./dist && webpack\n```\n\n- 避免构建前每次都需要手动删除 dist，使用 clean-webpack-plugin，默认会删除 output 指定的输出目录\n\n```js\nconst path = require('path');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name][chunkhash:8].js'\n    },\n    plugins: [\n        new CleanWebpackPlugin()\n    ]\n}\n\n```\n\n## webpack之PostCSS插件autoprefixer自动补齐CSS3前缀\n\n为了实现 CSS3 前缀的自动补齐，使用autoprefixer 插件：对代码打包完成后的 CSS 进行后置处理，与 postcss-loader 结合使用\n[Can I Use 插件](https://caniuse.com/) 查看兼容性\n\n```bash\nnpm i autoprefixer postcss-loader -d\n```\n\n```js\nconst path = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name]_[chunkhash:8].js'\n    },\n    // 有单行注释代码的时候，需要把less loader放到后面，不然会报错的\n    module: {\n        rules: [\n            {\n                test: /.less$/,\n                use: [\n                    MiniCssExtractPlugin.loader,\n                    'css-loader',\n                    'less-loader',\n                    {\n                        loader: 'postcss-loader',\n                        options: {\n                            plugins: () => [\n                                require('autoprefixer')({\n                                    // browsers 指定 autoprefixer 所需要兼容的浏览器版本\n                                    // 最近两个版本，浏览器使用量大于1%\n                                    browsers: ['last 2 version', '>1%', 'ios 7']\n                                    // browsers改成overrideBrowserslist\n                                })\n                            ]\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name]_[contenthash:8].css'\n        })\n    ]\n}\n\n```\n\n## 移动端CSS px自动转换成rem\n\npx2rem-loader：将 px 自动转换成 rem\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /.less$/,\n                use: [\n                    MiniCssExtractPlugin.loader,\n                    'css-loader',\n                    'less-loader',\n                    // 移动端CSS px自动转换成rem\n                    {\n                        loader: 'px2rem-loader',\n                        options: {\n                            remUnit: 75,  // 1rem = 75px\n                            remPrecision: 8  // px 转换为 rem 时小数点后的位数\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n}\n\n```\n\n- lib-flexible：页面渲染时计算根元素的 font-size 值(可以使用手淘的 lib-flexible 库`https://github.com/amfe/lib-flexible`)\n- 将 node_modules -> lib-flexible -> flexible.js 文件全部代码手动引入到 模板html 文件中\n\n## 多页面应用(PWA)\n\n1. 页面有多个入口，多页面应用每个应用都是解耦的，多页面应用对SEO更加友好。\n\n- 多页面跳转需要刷新所有资源，每个公共资源(js、css等)需选择性重新加载;\n- 页面跳转：使用window.location.href = \"./index.html\"进行页面间的跳转；\n- 数据传递：可以使用path?account=123&password=456 路径携带数据传递的方式，或者localstorage、cookie等存储方式;\n\n2. 每个页面对应一个entry，一个html-webpack-plugin，缺点是每次新增或者删除页面需要修改webpack配置\n3. 解决方案：动态获取entry和设置html-webpack-plugin的数量\n\n- 约定js入口文件放置格式为 `./src/xxx/index.js`，xxx为某个特定模块的名称，html模板为index.html\n- 利用glob.sync读取文件：[glob](https://github.com/isaacs/node-glob)\n\n```js\n// npm i glob -d\nglob.sync(path.join(__dirname, './src/*/index.js'))\n```\n\n```js\n// webpack.config.js\nconst glob = require('glob');\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst setMPA = () => {\n    const entry = {};\n    const htmlWebpackPlugins = [];\n    const entryFiles = glob.sync(path.join(__dirname, './src/*/index.js'));\n\n    Object.keys(entryFiles)\n        .map((index) => {\n            const entryFile = entryFiles[index];\n            const match = entryFile.match(/src\\/(.*)\\/index\\.js/);\n            const pageName = match && match[1];\n\n            entry[pageName] = entryFile;\n            htmlWebpackPlugins.push(\n                new HtmlWebpackPlugin({\n                    inlineSource: '.css$',\n                    template: path.join(__dirname, `src/${pageName}/index.html`),\n                    filename: `${pageName}.html`,\n                    chunks: ['vendors', pageName],\n                    inject: true,\n                    minify: {\n                        html5: true,\n                        collapseWhitespace: true,\n                        preserveLineBreaks: false,\n                        minifyCSS: true,\n                        minifyJS: true,\n                        removeComments: false\n                    }\n                })\n            );\n        });\n\n    return {\n        entry,\n        htmlWebpackPlugins\n    }\n}\n\nconst { entry, htmlWebpackPlugins } = setMPA();\n\nmodule.exports = {\n    entry: entry,\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name]_[chunkhash:8].js'\n    },\n    mode: 'production',\n    // module: {......},\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name]_[contenthash:8].css'\n        }),\n        new OptimizeCSSAssetsPlugin({\n            assetNameRegExp: /\\.css$/g,\n            cssProcessor: require('cssnano')\n        }),\n        new CleanWebpackPlugin(), \n        new HTMLInlineCSSWebpackPlugin() \n    ].concat(htmlWebpackPlugins)\n};\n```\n\n## 热更新（HMR）\n\n1、使用 webpack-dev-server\n\n- 自动编译并运行，不需要手动刷新浏览器，每次修改代码都需要重新执行 webpack 命令，可以使用 webpack-dev-server 自动打包运行\n- 不输出文件，而是放在内存中，watch是放在磁盘里\n- 与 HotModuleReplacementPlugin 插件配合使用\n\n```bash\nnpm i webpack-dev-server -d\n```\n\n- webpack.config.js\n\n```js\nconst path = require('path');\nconst webpack = require('webpack');\nmodule.exports = {\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name].js'\n    },\n    // 热更新一般只在开发模式使用\n    mode: 'development',\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    devServer: {\n        // 告诉服务器从哪里提供静态资源（只有想提供静态文件时才需要）\n        contentBase: path.resolve(__dirname, 'public'), // 静态资源所在的路径，默认为项目根目录\n        hot: true // 开启热更新\n\t      port: 8888, // 端口号\n        compress: true, //是否启动压缩 gzip\n\t      open:true  // 是否自动打开浏览器\n        // devServer里面的publicPath表示的是打包生成的静态文件所在的位置\n        //（若是devServer里面的publicPath没有设置，则会认为是output里面设置的publicPath的值）\n    }\n}\n\n```\n\n- package.json，--open打开浏览器\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --open\"\n  }\n}\n```\n\n### 热更新原理分析\n\n<img src=\"/images/engineering/webpack-hot001.png\">\n\n- 首次编译：① -> ② -> A -> B\n- 修改代码后的热更新：① -> ② -> ③ -> ④\n- HMR Server -> HMR Runtime 以json形式传递\n\n| 概念                            | 描述                                                                                                 |\n| ------------------------------- | ---------------------------------------------------------------------------------------------------- |\n| Webpack Compiler(webpack编译器) | 将JS编译成 Bundle                                                                                    |\n| HMR Server                      | 将热更新的文件传输给 HMR Runtime                                                                     |\n| Bundle Server                   | 提供文件在浏览器的访问，提供类似的服务器环境访问，如localhost:3003/bundle.js，服务器和浏览器是ws链接 |\n| HMR Runtime                     | 会被注入到浏览器，更新文件的变化                                                                     |\n| bundle.js                       | 构建输出的文件                                                                                       |\n\n\n\n## webpack之JS、css和html文件的压缩\n\nwebpack4 内置了uglifyjs-webpack-plugin 插件（mode为production），默认打包出的 JS 文件已压缩过， webpack5 内置了terser-webpack-plugin 插件\n\n1. CSS 文件的压缩\n\n```bash\n# 安装依赖，使用 optimize-css-assets-webpack-plugin 插件，同时使用预处理器 cssnano\nnpm i optimize-css-assets-webpack-plugin cssnano -D\n```\n\n2. html文件的压缩\n\n```js\nconst path = require('path');\nconst OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst TerserPlugin = require('terser-webpack-plugin');\nmodule.exports = {\n    entry: {\n        index: './src/index.js',\n    },\n    output: {\n        path: path.join(__dirname, 'dist'),\n        filename: '[name][chunkhash:8].js'\n    },\n    plugins: [\n        // 添加 css 压缩配置\n        new OptimizeCssAssetsPlugin({\n            assetNameRegExp: /\\.css$/g,\n            cssProcessor: require('cssnano')\n        }),\n        // 通常是一个html页面对应一个HtmlWebpackPlugin，多个html就使用多个HtmlWebpackPlugin\n        new HtmlWebpackPlugin({\n            template: path.join(__dirname, 'src/index.html'),  // html 模板所在的位置\n            filename: 'index.html',  // 指定打包出 html 的文件名称\n            chunks: ['index'],  // 指定生成的 html 要 使用哪些 chunk\n            inject: true,  // 将指定的chunks（js、css）引入到 html中\n            minify: {\n                html5: true,\n                // 移除空格\n                collapseWhitespace: true,\n                // 当标记之间的空格包含换行符时，始终折叠为1换行符(不完全删除它)，必须与collapseWhitespace=true一起使用\n                preserveLineBreaks: false,\n                minifyCSS: true, // 压缩文内css\n                minifyJS: true,  // 压缩文内js\n                // 移除注释\n                removeComments: false\n            }\n        })\n    ],\n    optimization: {\n      minimize: true,\n      minimizer: [\n        // 添加 css 压缩配置\n        new OptimizeCssAssetsPlugin({}),\n        // 压缩 JS\n        new TerserPlugin({})\n      ]\n  },\n}\n```\n\n\n## 提取页面的公共资源\n\n### 基础库的分离\n\n- 思路:将react、react-dom 基础包通过cdn 引入，不打入bundle 中\n- 方法:使用html-webpack-externals-plugin\n- entry: 可以是本地文件、cdn引入等\n  <img src=\"/images/engineering/webpack-001.png\">\n\n### externals\nexternals 配置选项提供了「从输出的 bundle 中排除依赖」的方法\n\n例如，从CDN引入React，而不是把它打包\n```html\n <!-- anonymous：CORS请求将不设置凭据标志 -->\n<script\n  src=\"https://unpkg.com/react@16/umd/react.development.js\"\n  crossorigin=\"anonymous\" \n></script>\n```\n配置externals\n```js\nconst config = {\n  //...\n  externals: {\n    react: 'React',\n  },\n};\n\n```\n使用React\n```js\nimport React from 'react';\n```\n### CDN\nCDN用来托管静态资源，就近获取，加快访问速度，缓解服务器压力，还可以防止一些网络的攻击\n\nCDN的原理是：本地DNS系统解析的时候，发现该URL对应的是一个CDN专用的DNS服务器，将解析权利交给了 专门处理CDN的DNS服务处理\n\n### 使用SplitChunksPlugin进行公共脚本分离\n\noptimization.splitChunks 是基于 SplitChunksPlugin 插件实现的，webpack内置的。\n\n[splitChunks 分包配置](https://juejin.cn/post/7023242274876162084#heading-52)\n\n```js\nmodule.exports = {\n    //...\n    optimization: {\n      splitChunks: {\n        // async：异步引入的库进行分离（默认），  initial： 同步引入的库进行分离， all：所有引入的库进行分离（推荐）\n        chunks: 'async', \n        minSize: 30000, // 抽离的公共包最小的大小，单位字节 30k   如果minSize: 0,只要有引用，就会抽离\n        minRemainingSize: 0, // 确保拆分后剩余的最小 chunk 体积超过限制来避免大小为零的模块\n        maxSize: 0, // 最大的大小\n        minChunks: 1, // 资源使用的次数(在多个页面使用到)， 大于1， 最小使用次数\n        maxAsyncRequests: 5,  // 并发请求的资源数量\n        maxInitialRequests: 30, // 入口文件做代码分割最多能分成30个js文件\n        automaticNameDelimiter: '~', // 文件生成时的连接符\n        automaticNameMaxLength: 30, // 自动自动命名最大长度\n        name: true, // 让cacheGroups里设置的名字有效\n        cacheGroups: { //当打包同步代码时，上面的参数生效，配置提取模块的方案\n          vendors: {\n            test: /[\\\\/]node_modules[\\\\/]/,  //检测引入的库是否在node_modlues目录下的\n            priority: -10, //值越大,优先级越高.模块先打包到优先级高的组里\n            filename: 'vendors.js'//把所有的库都打包到一个叫vendors.js的文件里\n          },\n          default: {\n            minChunks: 2, // 上面有\n            priority: -20,  // 上面有\n            reuseExistingChunk: true //如果一个模块已经被打包过了,那么再打包时就忽略这个上模块\n          },\n          commons: {\n              test: /(react|react-dom)/,\n              // 分离处理的名称，可将vendors这个chunk添加到html-webpack-plugin中的chunks数组里使用，chunks: ['vendors', pageName]\n              name: 'vendors', \n              chunks: 'all'\n          }\n        }\n      }\n    }\n};\n```\n\n## Tree Shaking的使用和原理分析\n\n- webpack默认支持，模式为production默认开启，必须是es module的模块规范，cjs不支持\n- Tree Shaking就是把模块中使用到的代码打入bundle，引入了但是没有使用，也不会被打包进入bundle。\n- **Tree Shaking原理**：Tree Shaking会对模块的代码进行静态的分析，在编译的阶段已经确定了哪些代码需要使用的，不需要的代码会被Tree Shaking进行注释标记，最终在uglify阶段删除无用的代码。\n- DCE\n  dead code elimination，消除死代码，通常在编译阶段由编译器进行判断某些代码是否可达从而删除那些不可能执行的代码\n- 代码不会被执行，不可到达\n\n```js\nif(false){\n    console.log(\"1\") // 这段代码永远不会执行\n}\n```\n\n- 代码的执行结果不会被用到\n- 代码只会影响死变量（只写不读）\n- 常规的死代码消除一般来说包含上面这几种类型的无用代码，会在打包阶段，一般是uglify.js分析并删除无用代码。\n- 副作用的代码不能treeshking，如在window对象挂载属性值，但是没有使用；export封装成对象导出，没有使用的方法不能被treeshking，原因是treeshking只能做到export级别，编译期间的静态分析只能对es module的相关语法做分析，是不会真正去执行代码的。\n\n## Scope Hoisting（作用域提升）\n\nScope Hoisting 是 webpack3 的新功能，它可以让 webpack 打包出来的代码文件更小，运行更快。原理是将多个模块放在同一个作用域下，并重命名防止命名冲突，通过这种方式可以减少函数声明和内存开销。\n\n当前现状：webpack构建后的代码存在大量的闭包代码，导致什么问题？\n\n- 大量函数闭包包裹代码，导致包体积增大（模块越多越明显）\n- 代码在运行时因为创建的函数作用域更多，内存开销变大。\n\n### 模块转换分析\n\n- 模块转化为模块初始化函数，转换后的模块会带上一层包裹\n- import会被转换成__webpack_require，__webpack_require的参数有moduleId，exprot也会发生转换\n\n### webpack模块机制\n\n<img src=\"/images/engineering/webpack-module001.png\">\n\n- webpack 打包输出打是一个 IIFE（匿名闭包）；\n- modules 是一个数组，每一项是一个模块初始化函数，modules会传入IIFE函数中；\n- IIFE函数最核心的是使用 __webpack_require() 来加载和处理模块，返回 module.exports；\n- __webpack_require()根据moduleId来查看installModules里是否存在，不存在会创建一个新的module存放到installModules；\n- 通过 __webpack_require__(__webpack_require__.s = 0)，entry入口依赖，启动程序。\n\n## Scope Hoisting原理（从rollup借鉴）\n\n- 原理：将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突，消除包裹\n- Scope Hoisting的使用：webpack4以上，模式为production默认开启，必须是ESM，不支持cjs\n- ModuleConcatenationPlugin() 插件\n  [参考Scope Hoisting](https://juejin.cn/post/6844904003109650445)\n\n1. 没有 Scope Hoisting 时用 webpack 打包下面两个文件\n\n```js\n// main.js\nexport default \"hello\";\n\n// index.js\nimport str from \"./main.js\";\nconsole.log(str);\n```\n\n2. 使用 webpack 打包后输出文件内容如下：\n\n```js\n// module指代源代码，__webpack_exports__就是export、__webpack_require__是import\n/* harmony import 是ES6语法的标识 */\n/* harmony exports 是ES6语法的标识 */\n[  (function (module, __webpack_exports__, __webpack_require__) {    \n        var __WEBPACK_IMPORTED_MODULE_0__main_js__ = __webpack_require__(1);    \n        console.log(__WEBPACK_IMPORTED_MODULE_0__main_js__[\"a\"]);  \n    }),  \n    (function (module, __webpack_exports__, __webpack_require__) {    \n        __webpack_exports__[\"a\"] = ('hello');  \n    })\n]\n```\n\n3. 再开启 Scope Hoisting 后，相同源码打包输出结果变为：\n\n```js\n[  (function (module, __webpack_exports__, __webpack_require__) {    \n        var main = ('hello');    \n        console.log(main);  \n    })\n]\n```\n\n对比两种打包方式输出的代码，我们可以看出，启用 Scope Hoisting 后，函数声明变成一个， main.js 中定义的内容被直接注入到 main.js 对应模块中，这样做的好处：\n\n- 代码体积更小，因为函数申明语句会产生大量代码，导致包体积增大（模块越多越明显）；\n- 代码在运行时因为创建的函数作用域更少，内存开销也随之变小。\n- 对比结果: 通过scope hoisting 可以减少函数声明代码和内存开销\n\nscope hoisting理解为是把每个模块被webpack处理成的模块初始化函数整理到一个统一的包裹函数里，也就是把多个作用域用一个作用域取代，以减少内存消耗并减少包裹块代码，从每个模块有一个包裹函数变成只有一个包裹函数包裹所有的模块，但是有一个前提就是，当模块的引用次数大于1时，比如被引用了两次或以上，那么这个效果会无效，也就是被引用多次的模块在被webpack处理后，会被独立的包裹函数所包裹\n\nScope housting对模块的引用次数大于1次是不产生效果的，这个其实也很好理解，如果一个模块引用次数大于1次，那么这个模块的代码会被内联多次，从而增加了打包出来的js bundle的体积。\n\n## 代码分割和动态import\n\n代码分割场景\n\n1. 抽离相同代码到一个共享模块\n2. 脚本懒加载，使得初始下载的代码更小，懒加载方式：\n\n- cjs：require.ensure\n- esm：动态import（目前还没有原生支持，需要babel转换）\n  - 静态分析（在模块的头部import xxx from 'xxx'）\n  - 动态引入（在if...else{ import('xxx')}），按需加载\n\n3. 动态import的js代码在打包时，会被抽离出来，用到的时候才会加载这个被抽离出来的js文件，通过webpackJsonp的一个请求加载。\n   （典型的通过jsonp的形式往html插入script标签），动态import（懒加载）必定会分割代码，生成新的chunk。\n- prefetch (预获取)：浏览器空闲的时候进行资源的拉取\n```js\nimport( /* webpackPrefetch: true */ './src/xxx').then(() => {})\n```\n- preload (预加载)：提前加载后面会用到的关键资源（谨慎使用）\n```js\nimport(/* webpackPreload: true */ 'ChartingLibrary');\n```\n\n- preload chunk 会在父 chunk 加载时，以并行方式开始加载。prefetch chunk 会在父 chunk 加载结束后开始加载。\n- preload chunk 具有中等优先级，并立即下载。prefetch chunk 在浏览器闲置时下载。\n- preload chunk 会在父 chunk 中立即请求，用于当下时刻。prefetch chunk 会用于未来的某个时刻。\n\n### 如何动态import\n\n- 使用@babel/plugin-syntax-dynamic-import插件，下载该插件，并在.babelrc的plugins配置插件\n\n```js\n/*\n  通过js代码，让某个文件被单独打包成一个chunk\n  import动态导入语法：能将某个文件单独打包\n*/\n\n// 魔法注释当注解用了，标注打包后的文件名为test\n/* webpackChunkName: 'test' */  \n\nimport(/* webpackChunkName: 'test' */'./test')\n  .then(({ add }) => {\n    // 文件加载成功~\n    // eslint-disable-next-line\n    console.log(add(1, 2));\n  })\n  .catch(() => {\n    // eslint-disable-next-line\n    console.log('文件加载失败~');\n  });\n```\n\n## 在webpack中使用ESLint\n\n制定ESLint规范，检查JS\n\n- 不重复造轮子，基于eslint:recommend配置并改进\n- 能够帮助发现代码错误的规则，全部开启\n\n<img src=\"/images/engineering/webpack-eslint001.png\">\n\n### ESLint如何执行落地\n\n- 和CI/CD系统集成\n- 和webpack集成\n- 本地开发阶段增加precommit钩子\n- 安装husky，`npm i husky -d`\n- 增加npm script，通过lint-staged增量检查修改的文件\n\n```json\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\",\n  },\n  \"lint-staged\": {\n    \"linters\": {\n        \"*.{js, less}\": [\n            \"eslint --fix\", \"git add\"\n        ],\n    }\n  },\n}\n```\n\n- 使用eslint-webpack-plugin，构建时检查js规范\n\n### eslint-config-airbnb的使用\n\n- eslint-config-airbnb(react项目使用)、eslint-config-airbnb-base(其他项目)\n  [eslint-config-airbnb](https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb)\n- 下载 `npm install eslint eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y -d`\n- 下载 `npm install babel-eslint eslint-config-airbnb -d`\n  [eslint官网](http://eslint.cn/docs/user-guide/getting-started)\n- eslint配置文件：.eslint.*(.eslint.js/.eslint.json/.eslint.yml)\n\n```js\n// .eslint.js\nmodule.exports = {\n    \"parser\": \"babel-eslint\", // 使用的parser是babel-eslint，需要下载安装babel-eslint\n    \"extends\": \"airbnb\",  // 继承airbnb，需要安装\n    \"env\": {   // 识别browser和node环境的一些全局变量\n        \"browser\": true,\n        \"node\": true\n    },\n    // 定义规则\n    \"rules\": {\n        \"indent\": [\"error\", 4] //indent空格， \"error\"错误级别、4是控制的空格数量\n    }\n};\n```\n\n## 优化 resolve 配置\n### alias\nalias 用的创建 import 或 require 的别名，用来简化模块引用，项目中基本都需要进行配置。\n\n[优化 resolve 配置](https://juejin.cn/post/7023242274876162084#heading-25)\n\n```js\nconst path = require('path')\n...\n// 路径处理方法\nfunction resolve(dir){\n  return path.join(__dirname, dir);\n}\n\n const config  = {\n  ...\n  resolve:{\n    // 配置别名\n    alias: {\n      '~': resolve('src'),\n      '@': resolve('src'),\n      'components': resolve('src/components'),\n    }\n  }\n};\n\n```\n配置完成之后，我们在项目中就可以\n```js\n// 使用 src 别名 ~ \nimport '~/fonts/iconfont.css'\n\n// 使用 src 别名 @ \nimport '@/fonts/iconfont.css'\n\n// 使用 components 别名\nimport footer from \"components/footer\";\n```\n\n### extensions和modules\n- 如果用户引入模块时不带扩展名，那么 webpack 就会按照 extensions 配置的数组从左到右的顺序去尝试解析模块，高频文件后缀名放前面。\n- modules，告诉 webpack 解析模块时应该搜索的目录，\n```js\nconst config = {\n  //...\n  resolve: {\n    extensions: ['.js', '.json', '.wasm'], // webpack 默认配置\n    // 手动配置后，默认配置会被覆盖，如果想保留默认配置，可以用 ... 扩展运算符代表默认配置\n    // extensions: ['.ts', '...'],\n    modules: [resolve('src'), 'node_modules']\n  },\n};\n\n```\n### resolveLoader\n用于解析 webpack 的 loader 包，有自定义的 Loader 就需要配置一下，手写loader时可以用\n```js\nconst path = require('path');\nconst config = {\n  //...\n  resolveLoader: {\n    modules: ['node_modules', path.join(__dirname,'loader')]\n  },\n};\n```\n## webpack构建速度和优化体积\n\n### 使用webpack内置的stats分析\n\n```json\n{\n    \"srcipts\":{\n        \"build:stats\": \"webpack --env production --json > stats.json\"\n    }\n}\n```\n\n### 速度分析：使用speed-measure-webpack-plugin\n\n- 分析整个打包的总耗时\n- 每个插件和loader的耗时情况\n- 和一些Loader或者Plugin新版本会不兼容，需要进行降级处理，如mini-css-extract-plugin、html-webpack-plugin\n\n```js\nconst SpeedMeasureWebpackPlugin = require('speed-measure-webpack-plugin');\nconst smp = new SpeedMeasureWebpackPlugin();\nmodule.exports = smp.wrap({\n    ......\n})\n```\n\n### 体积分析：使用webpack-bundle-analyzer\n可以直观的看到打包结果中，文件的体积大小、各模块依赖关系、文件是够重复等问题，极大的方便我们在进行项目优化的时候，进行问题诊断\n\n- 构建完成后会在8888端口展示大小\n  <img src=\"/images/engineering/webpack-bundle-analyzer-001.png\">\n- 依赖的第三方模块文件大小\n- 业务里面的组件代码大小\n\n```js\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');\nmodule.exports = {\n    plugins: [\n      // 配置插件\n      new BundleAnalyzerPlugin({\n        // analyzerMode: 'disabled',  // 不启动展示打包报告的http服务器\n        // generateStatsFile: true, // 是否生成stats.json文件\n      })\n    ]\n}\n```\n\n### webpack4\n\nwebpack4: 优化原因\n\n- V8带来的优化(for of替代 forEach、Map和Set替代 Object、includes替代indexOf)\n- 默认使用更快的md4 hash 算法\n- webpacks AST可以直接从loader传递给AST，减少解析时间\n- 使用字符串方法替代正则表达式\n\n### 多进程/多实例构建：资源并行解析可选方案\n\nthread-loader\n\n- parallel-webpack\n- HappyPack（同样为开启多进程打包的工具，webpack5 已弃用）\n\n### 多进程/多实例：并行压缩\n\n```js\nconst TerserPlugin = require('terser-webpack-plugin');\nmodule.exports = {\n    optimization: {\n        minimizer: [\n            new TerserPlugin({\n                parallel: true,\n                cache: true\n            })\n        ],\n\tminimize: true,\n    },\n}\n```\n\n### 优化构建速度，缩小构建目标\n\n目的：尽可能的少构建模块，比如babel-loader不解析node_modules、减少文件搜索范围\n\n```js\n{\n    test: /\\.js$/,\n    exclude: /node_modules/,\n    // 同时使用多个loader  用use数组，多个可以直接配置\n    use: [\n      /* \n          开启多线程打包。 \n          进程启动大概为600ms，进程通信也有开销。\n          只有工作消耗时间比较长，才需要多线程打包\n      */\n      {\n        loader: 'thread-loader',\n        options: {\n          workers: 2 // 进程2个\n        }\n      },\n      {\n        loader: 'babel-loader',\n        options: {\n          // 预设：指示babel做怎么样的兼容性处理\n          presets: [\n            [\n              '@babel/preset-env',\n              {\n                // 按需加载\n                useBuiltIns: 'usage',\n                // 指定core-js版本\n                corejs: {\n                  version: 3\n                },\n                // 指定兼容性做到哪个版本浏览器\n                targets: {\n                  chrome: '60',\n                  firefox: '60',\n                  ie: '9',\n                  safari: '10',\n                  edge: '17'\n                }\n              }\n            ]\n          ],\n          // 开启babel缓存\n          // 第二次构建时，会读取之前的缓存, 速度会更快一点\n          cacheDirectory: true\n        }\n      }\n    ],\n}\n```\n\n## 无用的CSS如何删除\n\n- PurifyCSS:遍历代码，识别已经用到的CSS class\n\n使用purgecss-webpack-plugin，必须和mini-css-extract-plugin搭配使用\n\n```js\nconst PurgecssPlugin = require('purgecss-webpack-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst glob = require('glob');\nconst PATHS = {\n    src: path.join(__dirname, 'src')\n};\nmodule.exports = {\n    plugins: [\n        new MiniCssExtractPlugin({\n            filename: '[name]_[contenthash:8].css'\n        }),\n        new PurgecssPlugin({\n            paths: glob.sync(`${PATHS.src}/**/*`,  { nodir: true }),\n        })\n    ]\n}\n```\n\n- uncss: HTML需要通过jsdom加载，所有的样式通过PostCSS解析，通过document.querySelector来识别在html文件里面不存在的选择器\n\n## prefetch 与 preload\n\n### prefetch\nprefetch (预获取)：等其他资源加载完毕，浏览器空闲了，会在使用之前，提前加载js文件\n```js\n/*\n  通过js代码，让某个文件被单独打包成一个chunk\n  import动态导入语法：能将某个文件单独打包\n*/\n/* webpackChunkName: 'test' */  // 魔法注释当注解用了,标注打包后的文件名为test\n// 类似路由的懒加载\nimport(/* webpackChunkName: 'test' */'./test')\n\n// 按需加载  必定会分割代码，生成新的chunk\nimg.addEventListener('click', () => {\n  import( /* webpackPrefetch: true */ './desc').then(({ default: element }) => {\n    console.log(element)\n    document.body.appendChild(element)\n  })\n})\n```\n### preload\npreload (预加载)：提前加载后面会用到的关键资源，因为会提前拉取资源，如果不是特殊需要，谨慎使用\n```js\nimport(/* webpackPreload: true */ 'ChartingLibrary');\n```\n## 全局环境变量\n通过 webpack 内置插件 DefinePlugin 定义 DEV 环境变量。\n```js\nconst webpack = require(\"webpack\");\n\nmodule.exports = {\n  mode: \"development\",\n  plugins: [\n    new webpack.DefinePlugin({\n      ENV: JSON.stringify(\"dev\"), // 推荐使用JSON.tringify，不仅可以处理字符串，还可以处理Object中的字符串和Array\n      HELLO: 'hello world',\n    }),\n  ],\n};\n\n```\n# 可维护的webpack构建配置\n\n## 构建配置抽离成npm包的意义\n\n1. 通用性\n\n- 业务开发者无需关注构建配置\n- 统一团队构建脚本\n\n2. 可维护性\n\n- 构建配置合理的拆分\n- README文档、ChangeLog文档等\n\n3. 质量\n\n- 冒烟测试、单元测试、测试覆盖率\n- 持续集成\n\n## 构建配置管理的可选方案\n\n1. 通过多个配置文件管理不同环境的构建，webpack --config 参数进行控制\n2. 将构建配置设计成一个库，比如: hjs-webpack、Neutrino、webpack-blocks\n3. 抽成一个工具进行管理，比如: create-react-app, kyt, nwb（团队规模大抽成一个cli）\n4. 将所有的配置放在一个文件，通过--env参数控制分支选择\n\n## 构建配置包设计\n\n### 通过多个配置文件管理不同环境的webpack构建\n\n- 基础配置:webpack.base.js\n- 开发环境:webpack.dev.js\n- 生产环境:webpack.prod.js\n- SSR环境:webpack.ssr.js\n- ...\n\n### 抽离成一个npm包统一管理\n\n- 规范: git commit日志、README、ESLint规范、Semver规范\n\n### 通过webpack-merge组合配置\n\n合并配置\n\n```js\nconst merge = require('webpack-merge')\nmodule.exports = merge(baseConfig, devConfig)\n```\n\n### 功能模块设计\n\n<img src=\"/images/engineering/webpack-config-001.png\">\n\n### 目录结构设计\n\n```bash\n-/test # 测试代码\n-/lib # 源代码\n  - webpack.dev.js\n  - webpack.prod.js\n  - webpack.ssr.js\n  - webpack.base.js\nindex.js\nREADME.md\nCHANGELOG.md\n.eslinrc.js\npackage.json\n```\n# webpack5\n\n- node版本大于10.13.0\n\n## 功能清除：清理弃用功能\n\n- 所有在webpack4里面被废弃的能力都被清除，因此需要确保webpack4没有打印警告。\n- require.includes语法已被废弃，可以通过 Rule.parser.requirelnclude 将行为改为允许、废弃或禁用。预加载一些模块，并不会马上执行\n- 不再为Node.js模块引入polyfill，之前的版本是：如果某个模块依赖Node.js里面的核心模块，那么这个模块被引入的时候会把Node.js整个polyfill顺带引入。\n\n## 长期缓存\n\n确定的模块ld、chunk和导出名称。在生产模式下，默认的chunklds:\"deterministic\", modulelds:\"deterministic\"。设置成deterministic时默认最小3位数会被使用，不会因为某一个文件发生了变化，其他的会产生变化。\n\n### chunklds\n\n| 选项值        | 描述                                                                   |\n| ------------- | ---------------------------------------------------------------------- |\n| natural       | 按使用顺序的数字id。                                                   |\n| named         | 对调试更友好的可读的id。                                               |\n| deterministic | 在不同的编译中不变的短数字id。有益于长期缓存。在生产模式中会默认开启。 |\n| size          | 专注于让初始下载包大小更小的数字id。                                   |\n| total-size    | 专注于让总下载包大小更小的数字id。                                     |\n\n### modulelds\n\n| 选荐值        | 描述                                 |\n| ------------- | ------------------------------------ |\n| natural       | 按使用顺序的数字id。                 |\n| named         | 对调试更友好的可读的id。             |\n| deterministic | 被哈希转化成的小位数值模块名。       |\n| size          | 专注于让初始下载包大小更小的数字id。 |\n\n## cache持久化缓存\n\n在webpack4里面，可以使用cache-loader将编译结果写入硬盘缓存，还可以使用babel-loader，设置option.cacheDirectory将babel-loader编译的结果写进磁盘。\n\n### webpack5缓存策略\n\n- 默认开启缓存，缓存默认是在内存里。可以对cache进行设置。\n- 缓存淘汰策略︰文件缓存存储在node_modules/.cache/webpack，最大500MB，缓存时常两个星期，旧的缓存先淘汰\n- 后面打包可以直接利用它原生缓存的打包的能力\n\n```js\nmodule.exports= {\n    cache: {\n        // 将缓存类型设置为文件系统\n        type: 'filesystem',\n        buildDependencies: {\n            // 将你的 config添加为 buildDependency，以便在改变config时获得缓存无效\n            config: [__filename],\n\n            // 如果你有其他的东西被构建依赖，你可以在这里添加它们\n            // 注意 webpack、加载器和所有从你的配置中引用的模块都会被自动添加\n        }\n    }\n}\n```\n\n## 构建优化：TreeShaking\n\n- 支持嵌套的TreeShaking\n- 可以分析这个模块直接的一个依赖关系\n\n## 代码生成：支持生成ES6代码\n\n- webpack 4之前只生成ES5的代码。webpack 5则现在既可以生成ES5又可以生成ES6/ES2015代码。\n- 两种设置方式:`5 =<ecmaVersion <= 11或2009 =< ecmaVersion <= 2020`\n\n```js\nmodule.exports = {\n    output:{\n        path: path.join(__dirname, 'dist'),\n        filename: 'bundle.js',\n        ecmaVersion: 6, // 输出ES6代码\n    }\n}\n```\n\n## 开创性的特性：模块联邦\n\n基本解释: 使一个JavaScript 应用在运行过程中可以动态加载另一个应用的代码，并支持共享依赖(CDN)。不再需要本地安装Npm包。\n通过CDN加载，应用A通过一个CDN，它去加载应用B，然后这两个应用分别在不同的端口。使用组件或者模块的分享更加方便了\n\n- Remote: 被依赖方，被Host消费的 Webpack构建，提供一些组件或者依赖出来，给其他的依赖方去用，相当于服务提供方。\n- Host: 依赖方，消费其他 Remote 的 Webpack 构建，使用其他Remote提供的模块，\n- 一个应用可以是Host，也可以是Remote，也可以同时是Host和Remote\n\n### 开创性的特性: ModuleFederationPlugin介绍\n\nWebpack内部通过ModuleFederationPlugin 插件将多个应用结合起来。\n\n- name: 必须，唯一ID，作为输出的模块名，使用的时通过 `${name}/${expose}`的方式使用;\n- library: 必须，其中这里的name为作为umd的name;\n- remotes: 可选，表示作为Host时，去消费哪些Remote;\n- shared: 可选，优先用Host的依赖，如果Host没有，再用自己的;\n- main.js: 应用主文件\n- remoteEntry.js: 作为remote 时被引的文件\n\n## bundle和bundless\n\n### bundle和bundless资源加载差异\n\n- bundle：浏览器加载的是构建好的文件，最开始会加载一个bundle.js；\n- bundless: 直接加载原文件，不是加载构建好的文件；\n\n### bundle和bundless打包速度对比\n\n- bundless的冷启动时间大大缩短（使用esbuild）\n- bundless的HMR速度不受整个项目体积影响，HMR效率高\n- bundless的单文件粒度的缓存更优\n- bundless在开发阶段的体验是更优的\n\n### vite构建速度快的原因\n\n预构建使用ESBuild（冷启动快的原因），ESBuild使用golang进行打包\n\n# 参考 \n- [玩转 webpack](https://time.geekbang.org/course/intro/100028901)\n- [webpack知识体系](https://juejin.cn/post/7023242274876162084)\n- [从v4升级到v5](https://webpack.docschina.org/migrate/5/#update-outdated-options)\n- [webpack5资源模块](https://webpack.docschina.org/guides/asset-modules/)\n- [webpack5资源模块的使用](https://juejin.cn/post/7023242274876162084)\n- [构建webpack5知识体系](https://juejin.cn/post/7062899360995999780)","slug":"engineering/webpack-base","published":1,"updated":"2022-07-09T03:02:13.997Z","layout":"post","photos":[],"link":"","_id":"cl5f0bii3000ov4uw711m6h5t","content":"<h1 id=\"Webpack基础\"><a href=\"#Webpack基础\" class=\"headerlink\" title=\"Webpack基础\"></a>Webpack基础</h1><h2 id=\"为什么需要构建工具，它有什么作用？\"><a href=\"#为什么需要构建工具，它有什么作用？\" class=\"headerlink\" title=\"为什么需要构建工具，它有什么作用？\"></a>为什么需要构建工具，它有什么作用？</h2><ul>\n<li><strong>转换ES6语法</strong>：ES6语法在前端领域广泛使用，然而很多浏览器对ES6没有提供全面的兼容和支持，所以需要构建工具来对ES6语法进行编译。</li>\n<li><strong>转换JSX、vue指令</strong>：前端框架React的JSX，VUE指令都是浏览器无法识别的，需要编译转换。</li>\n<li><strong>CSS前缀补全，预处理器</strong>：经常使用less、sass等预编译语法写样式，需要构建工具做编译转化为CSS。</li>\n<li><strong>多媒体资源压缩</strong>：经常使用的图片、字体、图标等多媒体资源，需要构建工具对它们进行压缩，减少体积大小。</li>\n<li><strong>压缩混淆代码</strong>：当前的前端开发都是模块开发，也引入了大量的依赖包，为了让浏览器对代码的加载更快，需要构建工具对代码进行压缩和混淆。</li>\n</ul>\n<h2 id=\"Webpack基础知识\"><a href=\"#Webpack基础知识\" class=\"headerlink\" title=\"Webpack基础知识\"></a>Webpack基础知识</h2><ul>\n<li>loader作用：webpack仅支持js和json文件，想对其他类型的文件打包需要使用loader，转化成为有效的模块。loader本身是一个函数，接受源文件作为参数，返回转换的结果，loader的执行顺序是从右往左。</li>\n<li>plugins作用：plugins是增强webpack功能，是 bundle 的一个优化，干预输出的结果，作用于整个构建过程。可以简单理解为任何loader没办法做的事情，都可以用plugins去完成。</li>\n<li>chunk和bundle：chunk是webpack打包过程中依赖，bundle是输出的产物。</li>\n<li>基本的配置文件如下：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 为JSON模块使用具名导出，可能需要使用 package.json 中的一些字段</span>\n<span class=\"token comment\">// package.json的 homepage 属性会告诉 webpack 项目的路径需要打包到哪个路径下，如github路径、CDN路径</span>\n<span class=\"token keyword\">import</span> pkg <span class=\"token keyword\">from</span> <span class=\"token string\">'./package.json'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// console.log(pkg.version);</span>\n\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 模式：development、production、none</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 打包入口地址</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 输出文件名</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出文件目录</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugin</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"mode模式\"><a href=\"#mode模式\" class=\"headerlink\" title=\"mode模式\"></a>mode模式</h3><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">development</td>\n<td align=\"center\">开发模式，打包更加快速</td>\n</tr>\n<tr>\n<td align=\"center\">production</td>\n<td align=\"center\">生产模式，打包比较慢，会开启 tree-shaking、压缩代码和清除无用代码</td>\n</tr>\n<tr>\n<td align=\"center\">none</td>\n<td align=\"center\">不开启任何优化选项</td>\n</tr>\n</tbody></table>\n<ul>\n<li>development：更快的构建速度、热更新(hot)、快速定位问题(sourcemap )</li>\n<li>production: 生产环境下会自动压缩js代码，构建体积小（代码压缩 + tree-shaking）、代码分割、压缩images。</li>\n</ul>\n<h2 id=\"webpack常用指令\"><a href=\"#webpack常用指令\" class=\"headerlink\" title=\"webpack常用指令\"></a>webpack常用指令</h2><ul>\n<li>webpack默认配置文件是根目录下的webpack.config.js，自定义配置打包文件的命令：<code>webpack --config filename</code></li>\n<li>监听变动并自动打包（文件监听是在发现源码发生变化时，自动重新构建出新的输出文件）：<ul>\n<li>方式一：在package.json的script命令添加：<code>webpack --watch</code></li>\n<li>方式二：在webpack.config.js中设置<code>watch: true</code></li>\n</ul>\n</li>\n<li>压缩混淆代码：<code>webpack -p</code></li>\n<li>方便出错时能查阅更详尽的信息：<code>webpack --display-error-details</code></li>\n<li>让编译的输出内容带有进度和颜色：<code>webpack --progress --colors</code></li>\n<li>模块热替换，在前端代码变动的时候无需整个刷新页面，只把变化的部分替换掉：<code>webpack-dev-server --hot</code></li>\n<li>inline选项会为入口页面添加热加载功能，即代码改变后重新加载页面（刷新浏览器）：<code>webpack-dev-server --inline</code></li>\n</ul>\n<h2 id=\"Webpack的整个生命周期\"><a href=\"#Webpack的整个生命周期\" class=\"headerlink\" title=\"Webpack的整个生命周期\"></a>Webpack的整个生命周期</h2><p>Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p>\n<ul>\n<li><code>初始化参数</code> 从配置文件和 Shell 语句中读取与合并参数，得出最终的参数</li>\n<li><code>开始编译</code> 用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译</li>\n<li><code>确定入口</code> 根据配置中的 entry 找出所有的入口文件</li>\n<li><code>编译模块</code> 从入口文件出发，调用所有配置的 Loader 对模块进行编译，再找出该模块被编译后的最终内容以及它们之间的依赖关系</li>\n<li><code>完成模块编译</code> 在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</li>\n<li><code>输出资源</code> 根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li>\n<li><code>输出完成</code> 在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li>\n</ul>\n<p>在以上过程中，在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，并且plugin可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p>\n<h2 id=\"常见的loaders\"><a href=\"#常见的loaders\" class=\"headerlink\" title=\"常见的loaders\"></a>常见的loaders</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>babel-loader</td>\n<td>转换ES6、ES7等JS新特性语法</td>\n</tr>\n<tr>\n<td>css-loader</td>\n<td>加载和解析.css文件，不会将样式加载到页面上</td>\n</tr>\n<tr>\n<td>style-loader</td>\n<td>将处理好的css以style标签形式添加到页面上</td>\n</tr>\n<tr>\n<td>postcss-loader</td>\n<td>添加CSS3部分属性的浏览器前缀（先添加前缀，再使用css-loader）</td>\n</tr>\n<tr>\n<td>less-loader</td>\n<td>将less文件转换成css</td>\n</tr>\n<tr>\n<td>ts-loader</td>\n<td>将TS转换成JS</td>\n</tr>\n<tr>\n<td>vue-loader</td>\n<td>支持 Vue</td>\n</tr>\n<tr>\n<td>thread-loader</td>\n<td>正常情况下webpack开一个进程打包，thread-loader作用是多进程打包JS和CSS</td>\n</tr>\n<tr>\n<td>file-loader</td>\n<td>解决图片、字体、媒体等资源引入问题，并将资源copy到指定目录，默认为 dist</td>\n</tr>\n<tr>\n<td>url-loader</td>\n<td>url-loader内部使用了file-loader，可以设置较小的资源自动base64，多了一个limit的配置</td>\n</tr>\n<tr>\n<td>raw-loader</td>\n<td>raw-loader可以将文件转化成字符串的形式导入</td>\n</tr>\n</tbody></table>\n<p><strong>注意</strong>：webpack5内置了资源处理模块，file-loader、url-loader和raw-loader都可以不用安装</p>\n<h2 id=\"常见的plugins\"><a href=\"#常见的plugins\" class=\"headerlink\" title=\"常见的plugins\"></a>常见的plugins</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HtmlWebpackPlugin</td>\n<td>将打包好的bundle如js、css 文件可以自动引入到html中</td>\n</tr>\n<tr>\n<td>mini-css-extract-plugin</td>\n<td>将CSS从 bunlde文件里提取成一个独立的CSS文件(MiniCssExtractPlugin.loader)</td>\n</tr>\n<tr>\n<td>TerserPlugin</td>\n<td>压缩JS，支持ES6，清除console（webpack5内置）</td>\n</tr>\n<tr>\n<td>splitchunksplugin</td>\n<td>将chunks相同的模块代码提取成公共js</td>\n</tr>\n<tr>\n<td>CleanWebpackPlugin</td>\n<td>自动清空打包目录</td>\n</tr>\n<tr>\n<td>copyWebpackPlugin</td>\n<td>将文件或者文件夹拷贝到构建的输出目录（webpack5内置）</td>\n</tr>\n<tr>\n<td>UglifyjsWebpackPlugin</td>\n<td>压缩JS</td>\n</tr>\n<tr>\n<td>ZipWebpackPlugin</td>\n<td>将打包出的资源生成一个zip包</td>\n</tr>\n</tbody></table>\n<h2 id=\"基本的webpack配置\"><a href=\"#基本的webpack配置\" class=\"headerlink\" title=\"基本的webpack配置\"></a>基本的webpack配置</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成html模板</span>\n<span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将css单独提取</span>\n<span class=\"token keyword\">const</span> OptimizeCssAssetsWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'optimize-css-assets-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压缩css</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> CleanWebpackPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打包输出前清空文件夹</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 通过 process.env.NODE_ENV 获取当前环境</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// production or development or none</span>\n  <span class=\"token comment\">/**\n   * 单入口entry: './src/js/index.js'\n   * 多入口entry: &#123; key: 'value' &#125;\n   * key可自定义，value是入口文件路径\n  */</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 定义应用的入口点 src/app.js，并命名为 main</span>\n    <span class=\"token literal-property property\">main</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/app.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/js/index.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 输出index</span>\n    <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/js/test.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 输出test</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * filename, path\n   * [name].[hash:8].bundle.js、[name].[chunkhash:8].bundle.js\n   * hash字段是根据每次编译compilation的内容计算所得、chunkhash是根据模块内容计算出的hash值\n  */</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 打包输出的文件名</span>\n    <span class=\"token comment\">// name是一个占位符，通过占位符确保文件名称的唯一，一般entry多入口使用占位符区分</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'js/[name].[contenthash:10].js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 10位hash值, name取原来的文件名 </span>\n    <span class=\"token comment\">// 定义打包结果的输出位置build目录</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// publicPath表示的是打包生成的index.html文件里面引用资源的前缀</span>\n\n    <span class=\"token comment\">// webpack5清除输出目录可用，无需安装clean-webpack-plugin</span>\n    <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * test指定匹配规则\n   * use指定使用的loader名称\n  */</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 定义处理源文件的规则，rules 下会按顺序使用匹配的规则</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 遇到 .js 结尾的文件则使用这个规则</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 忽略 node_modules 目录下的 js 文件</span>\n\n        <span class=\"token comment\">// 在配置 loader 的时候，我们需要更精确的去指定 loader 的作用目录或者需要排除的目录，</span>\n        <span class=\"token comment\">// 通过使用 include 和 exclude 两个配置项</span>\n        <span class=\"token literal-property property\">include</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 符合条件的模块进行解析</span>\n        <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 排除符合条件的模块，不解析</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\">/* \n              开启多线程打包。 \n              进程启动大概为600ms，进程通信也有开销。\n              只有工作消耗时间比较长，才需要多线程打包\n          */</span>\n          <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'thread-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token literal-property property\">workers</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 进程2个</span>\n            <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 使用 babel-loader 处理 js</span>\n            <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// babel-loader 的一些选项</span>\n            <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token literal-property property\">presets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 确保 Babel 能够处理 JSX 语法</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 按需加载</span>\n                    <span class=\"token literal-property property\">useBuiltIns</span><span class=\"token operator\">:</span> <span class=\"token string\">'usage'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token comment\">// 指定core-js版本</span>\n                    <span class=\"token literal-property property\">corejs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                      <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token comment\">// 指定兼容性做到哪个版本浏览器</span>\n                    <span class=\"token literal-property property\">targets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                      <span class=\"token literal-property property\">chrome</span><span class=\"token operator\">:</span> <span class=\"token string\">'60'</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token literal-property property\">firefox</span><span class=\"token operator\">:</span> <span class=\"token string\">'60'</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token literal-property property\">ie</span><span class=\"token operator\">:</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token literal-property property\">safari</span><span class=\"token operator\">:</span> <span class=\"token string\">'10'</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token literal-property property\">edge</span><span class=\"token operator\">:</span> <span class=\"token string\">'17'</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                  <span class=\"token punctuation\">&#125;</span>\n              \n              <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n              <span class=\"token comment\">// babel 在转译 js 过程中时间开销比价大，将 babel-loader 的执行结果缓存起来，重新打包的时候，直接读取缓存</span>\n              <span class=\"token comment\">// 开启babel缓存, 第二次构建时，会读取之前的缓存, 速度会更快一点</span>\n              <span class=\"token literal-property property\">cacheDirectory</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 启用缓存，缓存位置： node_modules/.cache/babel-loader</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/**\n         * css-loader用于处理加载.css文件，并且转换成commonjs对象\n         * style-loader将样式通过&lt;style>标签插入到head中\n        */</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\">// 'style-loader', // 以 style标签 添加到head</span>\n          MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 将js中的css单独提取出来</span>\n          <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 将css文件整合到js文件中</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>  \n        <span class=\"token comment\">// 检测 less 文件  </span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>  \n        <span class=\"token comment\">// 使用了三个 loader，注意执行顺序是数组的倒序  </span>\n        <span class=\"token comment\">// 也就是先执行 less-loader ，将less转换成css   </span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\">// 'style-loader', </span>\n          MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// 缓存一些性能开销比较大的 loader 的处理结果，缓存位置：node_modules/.cache/cache-loader</span>\n          <span class=\"token string\">'cache-loader'</span><span class=\"token punctuation\">,</span> \n          <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span> \n          <span class=\"token comment\">// 'less-loader'</span>\n          <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token literal-property property\">sourceMap</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n              <span class=\"token comment\">// 替换某个属性值，如修改antd默认主题色@primary-color，入口文件样式引入@import '~antd/dist/antd.less';</span>\n              <span class=\"token literal-property property\">modifyVars</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token string-property property\">'@primary-color'</span><span class=\"token operator\">:</span> <span class=\"token string\">'#13c2c2'</span><span class=\"token punctuation\">,</span>　　\n              <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  \n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// webpack 默认处理不了html中img图片</span>\n        <span class=\"token comment\">// 匹配 图片资源</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(jpg|png|gif|jpeg)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 通过 url-loader 或者 file-loader 处理图片资源</span>\n        <span class=\"token comment\">// url-loader内部使用了file-loader，可以设置较小的资源自动base64</span>\n        <span class=\"token comment\">// base64格式的图片  可打包在js中直接使用</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span> \n        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 图片大小小于8kb，就会被base64处理</span>\n          <span class=\"token comment\">// 优点: 减少请求数量（减轻服务器压力）</span>\n          <span class=\"token comment\">// 缺点：图片体积会更大（文件请求速度更慢）</span>\n          <span class=\"token literal-property property\">limit</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs</span>\n          <span class=\"token comment\">// 解析时会出问题：[object Module]</span>\n          <span class=\"token comment\">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span>\n          <span class=\"token literal-property property\">esModule</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// 给图片进行重命名</span>\n          <span class=\"token comment\">// [hash:10]取图片的hash的前10位</span>\n          <span class=\"token comment\">// [ext]取文件原来扩展名</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'[contenthash:10].[ext]'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">outputPath</span><span class=\"token operator\">:</span> <span class=\"token string\">'imgs'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.html$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'html-loader'</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 打包其他资源(除了html/js/css资源以外的资源)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// file-loader处理字体文件</span>\n        <span class=\"token comment\">// 排除css/js/html资源</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(woff|woff2|ttf|eot|otf)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(css|js|html|less)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'[contenthash:10].[ext]'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">outputPath</span><span class=\"token operator\">:</span> <span class=\"token string\">'media'</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS），并配置了页面的 title</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Webpack Output'</span><span class=\"token punctuation\">,</span>\n       <span class=\"token comment\">// 复制 './src/index.html' 文件，并自动引入打包输出的所有资源（JS/CSS）</span>\n      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.html'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 压缩html代码</span>\n      <span class=\"token literal-property property\">minify</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 移除空格</span>\n        <span class=\"token literal-property property\">collapseWhitespace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 移除注释</span>\n        <span class=\"token literal-property property\">removeComments</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 提取js中的css成单独文件</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> \n      <span class=\"token comment\">// 对输出的css文件进行重命名，如filename: 'css/built.css'，放到输出目录的css文件夹下</span>\n      <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].[hash:8].css'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 打包输出前清空文件夹clean-webpack-plugin（webpack5不需要）</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 压缩css</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptimizeCssAssetsWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token comment\">/*\n    1. 可以将node_modules中代码单独打包一个chunk最终输出（单入口）\n    2. 自动分析多入口文件的chunk中，有没有公共的文件。如果有会打包成单独一个chunk\n  */</span>\n  <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">splitChunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 解决代码引入的复用问题，不会重复打包多次</span>\n      <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 开发服务器 devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器）</span>\n  <span class=\"token comment\">// 特点：只会在内存中编译打包，不会有任何输出    devServer只能在 开发环境使用，生产环境不需要</span>\n  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 项目构建后路径</span>\n    <span class=\"token literal-property property\">contentBase</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 启动gzip压缩</span>\n    <span class=\"token literal-property property\">compress</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 端口号</span>\n    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8888</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 自动打开浏览器</span>\n    <span class=\"token literal-property property\">open</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// 开启HMR功能(webpack优化配置)</span>\n    <span class=\"token comment\">// 当修改了webpack配置，新配置要想生效，必须重新webpack服务</span>\n    <span class=\"token literal-property property\">hot</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// HMR只能在 开发环境使用，生产环境不需要</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 拒绝XXX包 被打包进来，再用cdn 引进来(在html中手动通过srcipt标签引入、link引入)</span>\n  <span class=\"token comment\">// CDN内容分发网络，分布式存放静态资源，缓解服务器压力，就近获取资源，加快访问速度</span>\n  <span class=\"token comment\">// 某些包需要用cdn引入进来，就可以使用externals</span>\n  <span class=\"token literal-property property\">externals</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 拒绝jQuery被打包进来</span>\n    <span class=\"token literal-property property\">jquery</span><span class=\"token operator\">:</span> <span class=\"token string\">'jQuery'</span>\n    <span class=\"token comment\">// jquery: '$'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">devtool</span><span class=\"token operator\">:</span> <span class=\"token string\">'eval-source-map'</span> <span class=\"token comment\">//  source-map</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"babel（解析ES6、处理jsx）\"><a href=\"#babel（解析ES6、处理jsx）\" class=\"headerlink\" title=\"babel（解析ES6、处理jsx）\"></a>babel（解析ES6、处理jsx）</h2><ul>\n<li><p>解析ES6，需要在rules里面匹配js文件，并use: ‘babel-loader’。babel-loader是依赖babel的，需要在根目录创建babel的配置文件.babelrc。</p>\n</li>\n<li><p>需要安装@babel&#x2F;core、@babel&#x2F;preset-env、babel-loader</p>\n</li>\n<li><p>babel-loader 使用 Babel 加载 ES2015+ 代码并将其转换为 ES5</p>\n</li>\n<li><p>@babel&#x2F;core Babel 编译的核心包</p>\n</li>\n<li><p>@babel&#x2F;preset-env Babel 编译的预设，可以理解为 Babel 插件的超集</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// .babelrc</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 一系列plugins的集合</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 增加ES6的babel preset配置，解析ES6</span>\n    <span class=\"token string\">\"@babel/preset-react\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 安装该依赖，并增加react的babel preset配置，解析react相关的语法，jsx</span>\n    <span class=\"token comment\">// @babel/preset-typescript</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 一个plugins对应一个功能</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 处理 装饰器的使用</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/plugin-proposal-decorators\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> legacy<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/plugin-proposal-class-properties\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> loose<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"babel-plugin-vs-babel-preset（预设）\"><a href=\"#babel-plugin-vs-babel-preset（预设）\" class=\"headerlink\" title=\"babel-plugin vs babel-preset（预设）\"></a>babel-plugin vs babel-preset（预设）</h3><p><a href=\"https://juejin.cn/post/6975556168752037919\">Babel polyfill 常见配置对比</a></p>\n<p>babel存在太多的plugin，实现某种功能，比如ES2015语法兼容时需要用到众多的插件。preset是plugin的集合，将多个plugin合并在一起（预设是插件的集合）</p>\n<ol>\n<li>插件plugin和预设preset的执行顺序</li>\n</ol>\n<ul>\n<li>plugin先执行，preset后执行</li>\n<li>plugin集从前往后执行</li>\n<li>preset集从后往前执行</li>\n</ul>\n<p>@babel&#x2F;preset-env（官方提供），作用是根据 targets 的配置引入对应插件来实现编译和 polyfill，自动根据 targets 来引入需要的插件</p>\n<p>所谓Polyfill就是这样解决API的兼容问题的，抹平差异化</p>\n<ol start=\"2\">\n<li>官方给出了两种 polyfill 方案：</li>\n</ol>\n<ul>\n<li>babel-polyfill：会污染全局适合在业务项目中使用。（Babel7.4.0版本开始，babel&#x2F;polyfill 已经被废弃，推荐直接使用core-js）</li>\n<li>babel-runtime：不污染全局适合在组件或类库项目中使用。</li>\n</ul>\n<p>开启 polyfill 功能要指定它的引入方式，也就是 useBuiltIns。设置为 usage 是在每个模块引入用到的，设置为 entry 是统一在入口处引入 targets 需要的。</p>\n<p>polyfill 的实现就是 core-js，需要再指定下 corejs 版本，一般是指定 3</p>\n<p>@babel&#x2F;preset-env 会导致多个模块重复注入同样的代码，会污染全局环境。解决这个问题就要使用 @babel&#x2F;plugin-transform-runtime 插件</p>\n<p>这样就不会多个模块重复注入同样的实现代码了，而且 core-js 的 api 也不是全局引入了，变成了模块化引入。</p>\n<p>这样就解决了 corejs 的重复注入和全局引入 polyfill 的两个问题</p>\n<p>@babel&#x2F;plugin-transform-runtime 的功能，把注入的代码和 core-js 全局引入的代码转换成从 @babel&#x2F;runtime-corejs3 中引入的形式</p>\n<p>@babel&#x2F;runtime-corejs3 就包含了 helpers、core-js、regenerator 这 3 部分</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">presets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">targets</span><span class=\"token operator\">:</span> <span class=\"token string\">'chrome 30'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">debug</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">useBuiltIns</span><span class=\"token operator\">:</span> <span class=\"token string\">'usage'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">corejs</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/plugin-transform-runtime'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">corejs</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\">// 插件也是处理 polyfill ，也就同样需要指定 corejs 的版本</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"babel的原理\"><a href=\"#babel的原理\" class=\"headerlink\" title=\"babel的原理\"></a>babel的原理</h3><p>babel是一个JS、JSX、TS 的编译器，能把新语法写的代码转换成目标环境支持的语法的代码</p>\n<h4 id=\"babel工作的三个步骤\"><a href=\"#babel工作的三个步骤\" class=\"headerlink\" title=\"babel工作的三个步骤\"></a>babel工作的三个步骤</h4><ol>\n<li>解析：将源码解析为AST（词法解析和语法解析）</li>\n<li>转换：旧AST转换成为新的AST（应用插件&#x2F;预设中，对AST节点增删改查的操作）</li>\n<li>生成：根据AST生成源码（深度优先遍历AST生成转译后的源码）</li>\n</ol>\n<h4 id=\"bable-x2F-core\"><a href=\"#bable-x2F-core\" class=\"headerlink\" title=\"@bable&#x2F;core\"></a>@bable&#x2F;core</h4><ul>\n<li>内核@bable&#x2F;core类似一个调度器，并不直接实现功能细节，而是调度各模块插件去实现相关功能</li>\n<li>@babel&#x2F;core的功能可以简单概况为 向外读取配置 &#x3D;&gt; 向内调度插件模块协同工作 &#x3D;&gt; 向外输出转译后的源码。详细版本如下：</li>\n</ul>\n<p>加载配置文件，读取所需使用的插件、预处理器等等</p>\n<ul>\n<li>调用@babel&#x2F;parser进行词法分析、语法分析后转换为AST</li>\n<li>调用@babel&#x2F;traverse对AST进行遍历，并采用visitor模式应用配置项中的插件对AST进行转换</li>\n<li>调用@babel&#x2F;generator生成源码和源码对应的sourceMap</li>\n</ul>\n<h4 id=\"解析（parse）\"><a href=\"#解析（parse）\" class=\"headerlink\" title=\"解析（parse）\"></a>解析（parse）</h4><p>解析的核心是：词法分析将源码分词、语法分析将分词后的源码按照JS语法逻辑转换为AST（抽象语法树）。</p>\n<ul>\n<li>词法分析：简单理解为：将源码分割为不同种类，保留关键词（如function）、条件判断词（if&#x2F;else）、运算符、数字、字符串、空格等</li>\n<li>语法分析：将词法分析生成的分词，组合为各类型的语法短语（抽象语法树AST）</li>\n</ul>\n<h4 id=\"转换（Traverser）\"><a href=\"#转换（Traverser）\" class=\"headerlink\" title=\"转换（Traverser）\"></a>转换（Traverser）</h4><p>转换器会遍历AST树，然后按照配置的插件对其中需要转换的节点进行操作</p>\n<h4 id=\"生成（generator）\"><a href=\"#生成（generator）\" class=\"headerlink\" title=\"生成（generator）\"></a>生成（generator）</h4><p>调度器调用generator插件将AST转译成源码</p>\n<h4 id=\"babel-cli\"><a href=\"#babel-cli\" class=\"headerlink\" title=\"babel-cli\"></a>babel-cli</h4><p>babel官方提供的脚手架，允许你以命令行的方式运行babel</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">$ npm install babel<span class=\"token operator\">-</span>cli <span class=\"token operator\">-</span>g\n​\n# 将示例js输出到编译后的js中\n$ babel example<span class=\"token punctuation\">.</span>js <span class=\"token operator\">-</span>o compiled<span class=\"token punctuation\">.</span>js\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"webpack文件监听的原理\"><a href=\"#webpack文件监听的原理\" class=\"headerlink\" title=\"webpack文件监听的原理\"></a>webpack文件监听的原理</h2><p>轮询判断文件的最后编辑时间是否变化，<br>某个文件发生变化了，并不会立刻告诉监听者，而是先缓存起来，等aggregateTimeout.</p>\n<p><a href=\"https://www.webpackjs.com/configuration/watch/#watch\">watch 和 watchOptions</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 默认是false，不开起监听</span>\n  <span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">watchOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 默认为空，不监听的文件或者文件夹，支持正则匹配</span>\n    <span class=\"token literal-property property\">ignored</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 监听到变化发生后会等300ms再去执行，默认300ms</span>\n    <span class=\"token literal-property property\">aggregateTimeout</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒检查1次变化</span>\n    <span class=\"token comment\">// 间隔xxx秒检查一次变化</span>\n    <span class=\"token literal-property property\">poll</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"文件指纹\"><a href=\"#文件指纹\" class=\"headerlink\" title=\"文件指纹\"></a>文件指纹</h2><p>打包后输出的文件名的后缀，如 <code>index_0a4dfa7c33787eec103e.chunk.js</code>中的0a4dfa7c33787eec103e</p>\n<ul>\n<li>hash：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改</li>\n<li>chunkhash：对于 JS 文件，和 webpack 打包的 chunk 相关，不同的entry会生成不同的 chunkhash 值</li>\n<li>contenthash：将根据资源内容创建出唯一 hash。当资源内容发生变化时，[contenthash] 也会发生变化。</li>\n</ul>\n<ol>\n<li>JS 的文件指纹设置，在output 的 filename，使用 [chunkhash]</li>\n<li>CSS 的文件指纹设置，可以在MiniCssExtractPlugin使用[contenthash]</li>\n</ol>\n<p>使用hash的场景还应该结合mode来考虑，如果mode是development的时候，在使用hmr的情况下，尽量避免使用chunkhash和contenthash，应该使用hash。而在mode是production的时候，就是不用hmr的情况下，这时候就适合使用chunkhash了。hmr只在development开发阶段使用。</p>\n<p>js使用chunkhash是便于寻找资源，js的资源的关联度更高；而css采用contenthash是因为css一般是根据不同的页面书写的，css资源之前的关联度不高，也就不用在其他资源修改，而css部分没有修改的时候重新更新css。</p>\n<p>MiniCssExtractPlugin作用</p>\n<ul>\n<li>将 CSS 提取到单独的文件中</li>\n<li>为每个包含 CSS 的 JS 文件创建一个 CSS 文件</li>\n<li>支持按需加载 CSS 和 SourceMaps</li>\n<li>下载</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i mini-css-extract-plugin -D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'/dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name][chunkhash:8].js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name][contenthash:8].css'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"图片的文件指纹设置\"><a href=\"#图片的文件指纹设置\" class=\"headerlink\" title=\"图片的文件指纹设置\"></a>图片的文件指纹设置</h3><p>在 file-loader或者url-loader 的options参数中设置name，使用[contenthash]</p>\n<p>当 webpack 配置中使用了 <code>[hash]</code> 占位符时，请考虑将它改为 <code>[contenthash]</code></p>\n<table>\n<thead>\n<tr>\n<th>占位符名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[ext]</td>\n<td>资源后缀名</td>\n</tr>\n<tr>\n<td>[name]</td>\n<td>文件名称</td>\n</tr>\n<tr>\n<td>[path]</td>\n<td>文件的相对路径</td>\n</tr>\n<tr>\n<td>[folder]</td>\n<td>文件所在的文件夹</td>\n</tr>\n<tr>\n<td>[hash]</td>\n<td>每次构建生成的唯一 hash 值，默认是 md5 生成</td>\n</tr>\n<tr>\n<td>[chunkhash]</td>\n<td>根据chunk生成hash值</td>\n</tr>\n<tr>\n<td>[contenthash]</td>\n<td>根据文件内容生成hash 值，默认是md5生成，默认有32位，一般取前8位</td>\n</tr>\n<tr>\n<td>[emoji]</td>\n<td>一个随机的指代文件内容的 emoji</td>\n</tr>\n</tbody></table>\n<ul>\n<li>hash：任何一个文件改动，整个项目的构建 hash 值都会改变；</li>\n<li>chunkhash：文件的改动只会影响其所在 chunk 的 hash 值；</li>\n<li>contenthash：每个文件都有单独的 hash 值，文件的改动只会影响自身的 hash 值；</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|svg|jpg|gif)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'images/[name][hash:8].[ext]'</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"sourcemap\"><a href=\"#sourcemap\" class=\"headerlink\" title=\"sourcemap\"></a>sourcemap</h2><ul>\n<li>sourcemap是一种提供源代码到构建后代码映射技术（如果构建后代码出错了，通过映射可以追踪源代码错误）</li>\n<li>sourcemap一般在开发环境使用，生产环境关闭</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>eval</td>\n<td>使用eval包裹模块代码</td>\n</tr>\n<tr>\n<td>source-map</td>\n<td>产生.map文件</td>\n</tr>\n<tr>\n<td>cheap</td>\n<td>只需要定位到行信息，不需要列信息</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>将.map作为DataURI嵌入，不单独生成.map文件</td>\n</tr>\n<tr>\n<td>module</td>\n<td>包含loader的sourcemap，展示源代码中的错误位置</td>\n</tr>\n</tbody></table>\n<h3 id=\"sourcemap的类型\"><a href=\"#sourcemap的类型\" class=\"headerlink\" title=\"sourcemap的类型\"></a>sourcemap的类型</h3><img src=\"/images/engineering/webpack-source-map001.png\">\n\n<ul>\n<li>不开起source-map调试是打包之后的内容，不方便调试</li>\n<li>开启source-map调试看到的是源代码，方面调试</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">devtool</span><span class=\"token operator\">:</span> <span class=\"token string\">'source-map'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"sourcemap的类型总结\"><a href=\"#sourcemap的类型总结\" class=\"headerlink\" title=\"sourcemap的类型总结\"></a>sourcemap的类型总结</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>inline<span class=\"token operator\">-</span>、hidden<span class=\"token operator\">-</span>、eval<span class=\"token operator\">-</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nosources<span class=\"token operator\">-</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cheap<span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>module<span class=\"token operator\">-</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>source<span class=\"token operator\">-</span>map<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>说明：外部则是生成xxx.js.map文件，内联则是将.map内嵌，不生成.map文件，内联构建速度更快，但是体积比外部大</p>\n<ol>\n<li>source-map：外部，能显示出错误代码准确信息和源代码的错误位置</li>\n<li>inline-source-map：内联，只生成一个内联source-map，能显示错误代码准确信息和源代码的错误位置</li>\n<li>eval-source-map：内联，每一个文件都生成对应的source-map，都在eval中，能显示错误代码准确信息和源代码的错误位置(文件后面会多一个hash值，print.js?8d3a)</li>\n<li>hidden-source-map：外部，为了隐藏源代码而诞生的，错误代码能显示错误原因，但是没有源代码的错误位置，不能追踪源代码错误，只能提示到构建后代码的错误位置</li>\n<li>nosources-source-map：外部，为了隐藏源代码而诞生的，错误代码准确信息，但是没有任何源代码信息(找不到任何代码信息)</li>\n<li>cheap-source-map：外部，能显示错误代码准确信息和源代码的错误位置，<strong>只能精确的行的错误，不能精确到列</strong>（比如第四行只是后面的一个代码错误，但是是整行报错，<strong>而source-map可以准确提示哪一行的那一列出错了</strong>，同一行没错误的分号(;) 不提示错误）</li>\n<li>cheap-module-source-map：外部，能错误代码准确信息和源代码的错误位置，有module，会将loader的source map加入。</li>\n<li>开发环境：速度快，调试更友好</li>\n</ol>\n<ul>\n<li>速度快慢，eval&gt;inline&gt;cheap&gt;…<ul>\n<li>eval-cheap-souce-map (有cheap只精确到行)</li>\n<li>eval-source-map</li>\n</ul>\n</li>\n<li>调试更友好<ul>\n<li>souce-map</li>\n<li>cheap-module-souce-map(module会将loader的source map加入)</li>\n<li>cheap-souce-map</li>\n</ul>\n</li>\n<li>eval-source-map(调试最友好) 、eval-cheap-module-souce-map(调试性能最友好)、react脚手架（cra）默认使用的是eval-source-map</li>\n<li>本地开发推荐eval-cheap-souce-map<ul>\n<li>本地开发首次打包慢点没关系，因为eval缓存的原因，rebuild会很快</li>\n<li>开发中，我们每行代码不会写的太长，只需要定位到行就行，所以加上cheap</li>\n<li>我们希望能够找到源代码的错误，而不是打包后的，所以需要加上module</li>\n</ul>\n</li>\n</ul>\n<ol start=\"9\">\n<li>生产环境：源代码要不要隐藏? 调试要不要更友好</li>\n</ol>\n<ul>\n<li>内联会让代码体积变大，所以在生产环境不用内联，我们要让体积变小，就不要内联，而采用外部的方式。</li>\n<li>nosources-source-map 全部隐藏（源码和构建后的代码都会隐藏）</li>\n<li>hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</li>\n<li>source-map(调试友好)</li>\n<li>cheap-module-souce-map（cheap的速度会快一点）</li>\n<li>推荐none：不想别人看到我的源代码</li>\n</ul>\n<h1 id=\"webpack进阶\"><a href=\"#webpack进阶\" class=\"headerlink\" title=\"webpack进阶\"></a>webpack进阶</h1><h2 id=\"自动清理构建产物\"><a href=\"#自动清理构建产物\" class=\"headerlink\" title=\"自动清理构建产物\"></a>自动清理构建产物</h2><ul>\n<li>通过 npm scripts 清理构建目录</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> -rf ./dist <span class=\"token operator\">&amp;&amp;</span> webpack\nrimraf ./dist <span class=\"token operator\">&amp;&amp;</span> webpack<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>避免构建前每次都需要手动删除 dist，使用 clean-webpack-plugin，默认会删除 output 指定的输出目录</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CleanWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name][chunkhash:8].js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"webpack之PostCSS插件autoprefixer自动补齐CSS3前缀\"><a href=\"#webpack之PostCSS插件autoprefixer自动补齐CSS3前缀\" class=\"headerlink\" title=\"webpack之PostCSS插件autoprefixer自动补齐CSS3前缀\"></a>webpack之PostCSS插件autoprefixer自动补齐CSS3前缀</h2><p>为了实现 CSS3 前缀的自动补齐，使用autoprefixer 插件：对代码打包完成后的 CSS 进行后置处理，与 postcss-loader 结合使用<br><a href=\"https://caniuse.com/\">Can I Use 插件</a> 查看兼容性</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i autoprefixer postcss-loader -d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name]_[chunkhash:8].js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 有单行注释代码的时候，需要把less loader放到后面，不然会报错的</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">.less$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token function-variable function\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n                                <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'autoprefixer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n                                    <span class=\"token comment\">// browsers 指定 autoprefixer 所需要兼容的浏览器版本</span>\n                                    <span class=\"token comment\">// 最近两个版本，浏览器使用量大于1%</span>\n                                    <span class=\"token literal-property property\">browsers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'last 2 version'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>1%'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ios 7'</span><span class=\"token punctuation\">]</span>\n                                    <span class=\"token comment\">// browsers改成overrideBrowserslist</span>\n                                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">]</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name]_[contenthash:8].css'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"移动端CSS-px自动转换成rem\"><a href=\"#移动端CSS-px自动转换成rem\" class=\"headerlink\" title=\"移动端CSS px自动转换成rem\"></a>移动端CSS px自动转换成rem</h2><p>px2rem-loader：将 px 自动转换成 rem</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">.less$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token comment\">// 移动端CSS px自动转换成rem</span>\n                    <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'px2rem-loader'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token literal-property property\">remUnit</span><span class=\"token operator\">:</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 1rem = 75px</span>\n                            <span class=\"token literal-property property\">remPrecision</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span>  <span class=\"token comment\">// px 转换为 rem 时小数点后的位数</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>lib-flexible：页面渲染时计算根元素的 font-size 值(可以使用手淘的 lib-flexible 库<code>https://github.com/amfe/lib-flexible</code>)</li>\n<li>将 node_modules -&gt; lib-flexible -&gt; flexible.js 文件全部代码手动引入到 模板html 文件中</li>\n</ul>\n<h2 id=\"多页面应用-PWA\"><a href=\"#多页面应用-PWA\" class=\"headerlink\" title=\"多页面应用(PWA)\"></a>多页面应用(PWA)</h2><ol>\n<li>页面有多个入口，多页面应用每个应用都是解耦的，多页面应用对SEO更加友好。</li>\n</ol>\n<ul>\n<li>多页面跳转需要刷新所有资源，每个公共资源(js、css等)需选择性重新加载;</li>\n<li>页面跳转：使用window.location.href &#x3D; “.&#x2F;index.html”进行页面间的跳转；</li>\n<li>数据传递：可以使用path?account&#x3D;123&amp;password&#x3D;456 路径携带数据传递的方式，或者localstorage、cookie等存储方式;</li>\n</ul>\n<ol start=\"2\">\n<li>每个页面对应一个entry，一个html-webpack-plugin，缺点是每次新增或者删除页面需要修改webpack配置</li>\n<li>解决方案：动态获取entry和设置html-webpack-plugin的数量</li>\n</ol>\n<ul>\n<li>约定js入口文件放置格式为 <code>./src/xxx/index.js</code>，xxx为某个特定模块的名称，html模板为index.html</li>\n<li>利用glob.sync读取文件：<a href=\"https://github.com/isaacs/node-glob\">glob</a></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// npm i glob -d</span>\nglob<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/*/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token keyword\">const</span> glob <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'glob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setMPA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> htmlWebpackPlugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> entryFiles <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/*/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>entryFiles<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> entryFile <span class=\"token operator\">=</span> entryFiles<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> entryFile<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">src\\/(.*)\\/index\\.js</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> pageName <span class=\"token operator\">=</span> match <span class=\"token operator\">&amp;&amp;</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            entry<span class=\"token punctuation\">[</span>pageName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> entryFile<span class=\"token punctuation\">;</span>\n            htmlWebpackPlugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token literal-property property\">inlineSource</span><span class=\"token operator\">:</span> <span class=\"token string\">'.css$'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">src/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>pageName<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/index.html</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>pageName<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.html</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'vendors'</span><span class=\"token punctuation\">,</span> pageName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">minify</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token literal-property property\">html5</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">collapseWhitespace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">preserveLineBreaks</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">minifyCSS</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">minifyJS</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">removeComments</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n        entry<span class=\"token punctuation\">,</span>\n        htmlWebpackPlugins\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> entry<span class=\"token punctuation\">,</span> htmlWebpackPlugins <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">setMPA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> entry<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name]_[chunkhash:8].js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// module: &#123;......&#125;,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name]_[contenthash:8].css'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptimizeCSSAssetsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">assetNameRegExp</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">cssProcessor</span><span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cssnano'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTMLInlineCSSWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>htmlWebpackPlugins<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"热更新（HMR）\"><a href=\"#热更新（HMR）\" class=\"headerlink\" title=\"热更新（HMR）\"></a>热更新（HMR）</h2><p>1、使用 webpack-dev-server</p>\n<ul>\n<li>自动编译并运行，不需要手动刷新浏览器，每次修改代码都需要重新执行 webpack 命令，可以使用 webpack-dev-server 自动打包运行</li>\n<li>不输出文件，而是放在内存中，watch是放在磁盘里</li>\n<li>与 HotModuleReplacementPlugin 插件配合使用</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i webpack-dev-server -d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>webpack.config.js</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 热更新一般只在开发模式使用</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HotModuleReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 告诉服务器从哪里提供静态资源（只有想提供静态文件时才需要）</span>\n        <span class=\"token literal-property property\">contentBase</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 静态资源所在的路径，默认为项目根目录</span>\n        <span class=\"token literal-property property\">hot</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 开启热更新</span>\n\t      <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8888</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 端口号</span>\n        <span class=\"token literal-property property\">compress</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//是否启动压缩 gzip</span>\n\t      <span class=\"token literal-property property\">open</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span>  <span class=\"token comment\">// 是否自动打开浏览器</span>\n        <span class=\"token comment\">// devServer里面的publicPath表示的是打包生成的静态文件所在的位置</span>\n        <span class=\"token comment\">//（若是devServer里面的publicPath没有设置，则会认为是output里面设置的publicPath的值）</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>package.json，–open打开浏览器</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server --open\"</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"热更新原理分析\"><a href=\"#热更新原理分析\" class=\"headerlink\" title=\"热更新原理分析\"></a>热更新原理分析</h3><img src=\"/images/engineering/webpack-hot001.png\">\n\n<ul>\n<li>首次编译：① -&gt; ② -&gt; A -&gt; B</li>\n<li>修改代码后的热更新：① -&gt; ② -&gt; ③ -&gt; ④</li>\n<li>HMR Server -&gt; HMR Runtime 以json形式传递</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>概念</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Webpack Compiler(webpack编译器)</td>\n<td>将JS编译成 Bundle</td>\n</tr>\n<tr>\n<td>HMR Server</td>\n<td>将热更新的文件传输给 HMR Runtime</td>\n</tr>\n<tr>\n<td>Bundle Server</td>\n<td>提供文件在浏览器的访问，提供类似的服务器环境访问，如localhost:3003&#x2F;bundle.js，服务器和浏览器是ws链接</td>\n</tr>\n<tr>\n<td>HMR Runtime</td>\n<td>会被注入到浏览器，更新文件的变化</td>\n</tr>\n<tr>\n<td>bundle.js</td>\n<td>构建输出的文件</td>\n</tr>\n</tbody></table>\n<h2 id=\"webpack之JS、css和html文件的压缩\"><a href=\"#webpack之JS、css和html文件的压缩\" class=\"headerlink\" title=\"webpack之JS、css和html文件的压缩\"></a>webpack之JS、css和html文件的压缩</h2><p>webpack4 内置了uglifyjs-webpack-plugin 插件（mode为production），默认打包出的 JS 文件已压缩过， webpack5 内置了terser-webpack-plugin 插件</p>\n<ol>\n<li>CSS 文件的压缩</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 安装依赖，使用 optimize-css-assets-webpack-plugin 插件，同时使用预处理器 cssnano</span>\n<span class=\"token function\">npm</span> i optimize-css-assets-webpack-plugin cssnano -D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>html文件的压缩</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> OptimizeCssAssetsPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'optimize-css-assets-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> TerserPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'terser-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name][chunkhash:8].js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// 添加 css 压缩配置</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptimizeCssAssetsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">assetNameRegExp</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">cssProcessor</span><span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cssnano'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 通常是一个html页面对应一个HtmlWebpackPlugin，多个html就使用多个HtmlWebpackPlugin</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// html 模板所在的位置</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 指定打包出 html 的文件名称</span>\n            <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 指定生成的 html 要 使用哪些 chunk</span>\n            <span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 将指定的chunks（js、css）引入到 html中</span>\n            <span class=\"token literal-property property\">minify</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">html5</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// 移除空格</span>\n                <span class=\"token literal-property property\">collapseWhitespace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// 当标记之间的空格包含换行符时，始终折叠为1换行符(不完全删除它)，必须与collapseWhitespace=true一起使用</span>\n                <span class=\"token literal-property property\">preserveLineBreaks</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">minifyCSS</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 压缩文内css</span>\n                <span class=\"token literal-property property\">minifyJS</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 压缩文内js</span>\n                <span class=\"token comment\">// 移除注释</span>\n                <span class=\"token literal-property property\">removeComments</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">minimize</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">minimizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// 添加 css 压缩配置</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptimizeCssAssetsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 压缩 JS</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerserPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"提取页面的公共资源\"><a href=\"#提取页面的公共资源\" class=\"headerlink\" title=\"提取页面的公共资源\"></a>提取页面的公共资源</h2><h3 id=\"基础库的分离\"><a href=\"#基础库的分离\" class=\"headerlink\" title=\"基础库的分离\"></a>基础库的分离</h3><ul>\n<li>思路:将react、react-dom 基础包通过cdn 引入，不打入bundle 中</li>\n<li>方法:使用html-webpack-externals-plugin</li>\n<li>entry: 可以是本地文件、cdn引入等<img src=\"/images/engineering/webpack-001.png\"></li>\n</ul>\n<h3 id=\"externals\"><a href=\"#externals\" class=\"headerlink\" title=\"externals\"></a>externals</h3><p>externals 配置选项提供了「从输出的 bundle 中排除依赖」的方法</p>\n<p>例如，从CDN引入React，而不是把它打包</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"> <span class=\"token comment\">&lt;!-- anonymous：CORS请求将不设置凭据标志 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span>\n  <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@16/umd/react.development.js<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">crossorigin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anonymous<span class=\"token punctuation\">\"</span></span> \n<span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>配置externals</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token literal-property property\">externals</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">react</span><span class=\"token operator\">:</span> <span class=\"token string\">'React'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用React</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h3><p>CDN用来托管静态资源，就近获取，加快访问速度，缓解服务器压力，还可以防止一些网络的攻击</p>\n<p>CDN的原理是：本地DNS系统解析的时候，发现该URL对应的是一个CDN专用的DNS服务器，将解析权利交给了 专门处理CDN的DNS服务处理</p>\n<h3 id=\"使用SplitChunksPlugin进行公共脚本分离\"><a href=\"#使用SplitChunksPlugin进行公共脚本分离\" class=\"headerlink\" title=\"使用SplitChunksPlugin进行公共脚本分离\"></a>使用SplitChunksPlugin进行公共脚本分离</h3><p>optimization.splitChunks 是基于 SplitChunksPlugin 插件实现的，webpack内置的。</p>\n<p><a href=\"https://juejin.cn/post/7023242274876162084#heading-52\">splitChunks 分包配置</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">splitChunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// async：异步引入的库进行分离（默认），  initial： 同步引入的库进行分离， all：所有引入的库进行分离（推荐）</span>\n        <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token string\">'async'</span><span class=\"token punctuation\">,</span> \n        <span class=\"token literal-property property\">minSize</span><span class=\"token operator\">:</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 抽离的公共包最小的大小，单位字节 30k   如果minSize: 0,只要有引用，就会抽离</span>\n        <span class=\"token literal-property property\">minRemainingSize</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 确保拆分后剩余的最小 chunk 体积超过限制来避免大小为零的模块</span>\n        <span class=\"token literal-property property\">maxSize</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 最大的大小</span>\n        <span class=\"token literal-property property\">minChunks</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 资源使用的次数(在多个页面使用到)， 大于1， 最小使用次数</span>\n        <span class=\"token literal-property property\">maxAsyncRequests</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 并发请求的资源数量</span>\n        <span class=\"token literal-property property\">maxInitialRequests</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 入口文件做代码分割最多能分成30个js文件</span>\n        <span class=\"token literal-property property\">automaticNameDelimiter</span><span class=\"token operator\">:</span> <span class=\"token string\">'~'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 文件生成时的连接符</span>\n        <span class=\"token literal-property property\">automaticNameMaxLength</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 自动自动命名最大长度</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 让cacheGroups里设置的名字有效</span>\n        <span class=\"token literal-property property\">cacheGroups</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//当打包同步代码时，上面的参数生效，配置提取模块的方案</span>\n          <span class=\"token literal-property property\">vendors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\\\/]node_modules[\\\\/]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//检测引入的库是否在node_modlues目录下的</span>\n            <span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//值越大,优先级越高.模块先打包到优先级高的组里</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'vendors.js'</span><span class=\"token comment\">//把所有的库都打包到一个叫vendors.js的文件里</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">minChunks</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 上面有</span>\n            <span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 上面有</span>\n            <span class=\"token literal-property property\">reuseExistingChunk</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//如果一个模块已经被打包过了,那么再打包时就忽略这个上模块</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">commons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(react|react-dom)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n              <span class=\"token comment\">// 分离处理的名称，可将vendors这个chunk添加到html-webpack-plugin中的chunks数组里使用，chunks: ['vendors', pageName]</span>\n              <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'vendors'</span><span class=\"token punctuation\">,</span> \n              <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Tree-Shaking的使用和原理分析\"><a href=\"#Tree-Shaking的使用和原理分析\" class=\"headerlink\" title=\"Tree Shaking的使用和原理分析\"></a>Tree Shaking的使用和原理分析</h2><ul>\n<li>webpack默认支持，模式为production默认开启，必须是es module的模块规范，cjs不支持</li>\n<li>Tree Shaking就是把模块中使用到的代码打入bundle，引入了但是没有使用，也不会被打包进入bundle。</li>\n<li><strong>Tree Shaking原理</strong>：Tree Shaking会对模块的代码进行静态的分析，在编译的阶段已经确定了哪些代码需要使用的，不需要的代码会被Tree Shaking进行注释标记，最终在uglify阶段删除无用的代码。</li>\n<li>DCE<br>dead code elimination，消除死代码，通常在编译阶段由编译器进行判断某些代码是否可达从而删除那些不可能执行的代码</li>\n<li>代码不会被执行，不可到达</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这段代码永远不会执行</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>代码的执行结果不会被用到</li>\n<li>代码只会影响死变量（只写不读）</li>\n<li>常规的死代码消除一般来说包含上面这几种类型的无用代码，会在打包阶段，一般是uglify.js分析并删除无用代码。</li>\n<li>副作用的代码不能treeshking，如在window对象挂载属性值，但是没有使用；export封装成对象导出，没有使用的方法不能被treeshking，原因是treeshking只能做到export级别，编译期间的静态分析只能对es module的相关语法做分析，是不会真正去执行代码的。</li>\n</ul>\n<h2 id=\"Scope-Hoisting（作用域提升）\"><a href=\"#Scope-Hoisting（作用域提升）\" class=\"headerlink\" title=\"Scope Hoisting（作用域提升）\"></a>Scope Hoisting（作用域提升）</h2><p>Scope Hoisting 是 webpack3 的新功能，它可以让 webpack 打包出来的代码文件更小，运行更快。原理是将多个模块放在同一个作用域下，并重命名防止命名冲突，通过这种方式可以减少函数声明和内存开销。</p>\n<p>当前现状：webpack构建后的代码存在大量的闭包代码，导致什么问题？</p>\n<ul>\n<li>大量函数闭包包裹代码，导致包体积增大（模块越多越明显）</li>\n<li>代码在运行时因为创建的函数作用域更多，内存开销变大。</li>\n</ul>\n<h3 id=\"模块转换分析\"><a href=\"#模块转换分析\" class=\"headerlink\" title=\"模块转换分析\"></a>模块转换分析</h3><ul>\n<li>模块转化为模块初始化函数，转换后的模块会带上一层包裹</li>\n<li>import会被转换成__webpack_require，__webpack_require的参数有moduleId，exprot也会发生转换</li>\n</ul>\n<h3 id=\"webpack模块机制\"><a href=\"#webpack模块机制\" class=\"headerlink\" title=\"webpack模块机制\"></a>webpack模块机制</h3><img src=\"/images/engineering/webpack-module001.png\">\n\n<ul>\n<li>webpack 打包输出打是一个 IIFE（匿名闭包）；</li>\n<li>modules 是一个数组，每一项是一个模块初始化函数，modules会传入IIFE函数中；</li>\n<li>IIFE函数最核心的是使用 __webpack_require() 来加载和处理模块，返回 module.exports；</li>\n<li>__webpack_require()根据moduleId来查看installModules里是否存在，不存在会创建一个新的module存放到installModules；</li>\n<li>通过 <strong>webpack_require</strong>(<strong>webpack_require</strong>.s &#x3D; 0)，entry入口依赖，启动程序。</li>\n</ul>\n<h2 id=\"Scope-Hoisting原理（从rollup借鉴）\"><a href=\"#Scope-Hoisting原理（从rollup借鉴）\" class=\"headerlink\" title=\"Scope Hoisting原理（从rollup借鉴）\"></a>Scope Hoisting原理（从rollup借鉴）</h2><ul>\n<li>原理：将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突，消除包裹</li>\n<li>Scope Hoisting的使用：webpack4以上，模式为production默认开启，必须是ESM，不支持cjs</li>\n<li>ModuleConcatenationPlugin() 插件<br><a href=\"https://juejin.cn/post/6844904003109650445\">参考Scope Hoisting</a></li>\n</ul>\n<ol>\n<li>没有 Scope Hoisting 时用 webpack 打包下面两个文件</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> str <span class=\"token keyword\">from</span> <span class=\"token string\">\"./main.js\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>使用 webpack 打包后输出文件内容如下：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// module指代源代码，__webpack_exports__就是export、__webpack_require__是import</span>\n<span class=\"token comment\">/* harmony import 是ES6语法的标识 */</span>\n<span class=\"token comment\">/* harmony exports 是ES6语法的标识 */</span>\n<span class=\"token punctuation\">[</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> __webpack_exports__<span class=\"token punctuation\">,</span> __webpack_require__</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    \n        <span class=\"token keyword\">var</span> __WEBPACK_IMPORTED_MODULE_0__main_js__ <span class=\"token operator\">=</span> <span class=\"token function\">__webpack_require__</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>__WEBPACK_IMPORTED_MODULE_0__main_js__<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> __webpack_exports__<span class=\"token punctuation\">,</span> __webpack_require__</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    \n        __webpack_exports__<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>再开启 Scope Hoisting 后，相同源码打包输出结果变为：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> __webpack_exports__<span class=\"token punctuation\">,</span> __webpack_require__</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    \n        <span class=\"token keyword\">var</span> main <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对比两种打包方式输出的代码，我们可以看出，启用 Scope Hoisting 后，函数声明变成一个， main.js 中定义的内容被直接注入到 main.js 对应模块中，这样做的好处：</p>\n<ul>\n<li>代码体积更小，因为函数申明语句会产生大量代码，导致包体积增大（模块越多越明显）；</li>\n<li>代码在运行时因为创建的函数作用域更少，内存开销也随之变小。</li>\n<li>对比结果: 通过scope hoisting 可以减少函数声明代码和内存开销</li>\n</ul>\n<p>scope hoisting理解为是把每个模块被webpack处理成的模块初始化函数整理到一个统一的包裹函数里，也就是把多个作用域用一个作用域取代，以减少内存消耗并减少包裹块代码，从每个模块有一个包裹函数变成只有一个包裹函数包裹所有的模块，但是有一个前提就是，当模块的引用次数大于1时，比如被引用了两次或以上，那么这个效果会无效，也就是被引用多次的模块在被webpack处理后，会被独立的包裹函数所包裹</p>\n<p>Scope housting对模块的引用次数大于1次是不产生效果的，这个其实也很好理解，如果一个模块引用次数大于1次，那么这个模块的代码会被内联多次，从而增加了打包出来的js bundle的体积。</p>\n<h2 id=\"代码分割和动态import\"><a href=\"#代码分割和动态import\" class=\"headerlink\" title=\"代码分割和动态import\"></a>代码分割和动态import</h2><p>代码分割场景</p>\n<ol>\n<li>抽离相同代码到一个共享模块</li>\n<li>脚本懒加载，使得初始下载的代码更小，懒加载方式：</li>\n</ol>\n<ul>\n<li>cjs：require.ensure</li>\n<li>esm：动态import（目前还没有原生支持，需要babel转换）<ul>\n<li>静态分析（在模块的头部import xxx from ‘xxx’）</li>\n<li>动态引入（在if…else{ import(‘xxx’)}），按需加载</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>动态import的js代码在打包时，会被抽离出来，用到的时候才会加载这个被抽离出来的js文件，通过webpackJsonp的一个请求加载。<br>（典型的通过jsonp的形式往html插入script标签），动态import（懒加载）必定会分割代码，生成新的chunk。</li>\n</ol>\n<ul>\n<li><p>prefetch (预获取)：浏览器空闲的时候进行资源的拉取</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">/* webpackPrefetch: true */</span> <span class=\"token string\">'./src/xxx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>preload (预加载)：提前加载后面会用到的关键资源（谨慎使用）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackPreload: true */</span> <span class=\"token string\">'ChartingLibrary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>preload chunk 会在父 chunk 加载时，以并行方式开始加载。prefetch chunk 会在父 chunk 加载结束后开始加载。</p>\n</li>\n<li><p>preload chunk 具有中等优先级，并立即下载。prefetch chunk 在浏览器闲置时下载。</p>\n</li>\n<li><p>preload chunk 会在父 chunk 中立即请求，用于当下时刻。prefetch chunk 会用于未来的某个时刻。</p>\n</li>\n</ul>\n<h3 id=\"如何动态import\"><a href=\"#如何动态import\" class=\"headerlink\" title=\"如何动态import\"></a>如何动态import</h3><ul>\n<li>使用@babel&#x2F;plugin-syntax-dynamic-import插件，下载该插件，并在.babelrc的plugins配置插件</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n  通过js代码，让某个文件被单独打包成一个chunk\n  import动态导入语法：能将某个文件单独打包\n*/</span>\n\n<span class=\"token comment\">// 魔法注释当注解用了，标注打包后的文件名为test</span>\n<span class=\"token comment\">/* webpackChunkName: 'test' */</span>  \n\n<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: 'test' */</span><span class=\"token string\">'./test'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> add <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 文件加载成功~</span>\n    <span class=\"token comment\">// eslint-disable-next-line</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// eslint-disable-next-line</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件加载失败~'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"在webpack中使用ESLint\"><a href=\"#在webpack中使用ESLint\" class=\"headerlink\" title=\"在webpack中使用ESLint\"></a>在webpack中使用ESLint</h2><p>制定ESLint规范，检查JS</p>\n<ul>\n<li>不重复造轮子，基于eslint:recommend配置并改进</li>\n<li>能够帮助发现代码错误的规则，全部开启</li>\n</ul>\n<img src=\"/images/engineering/webpack-eslint001.png\">\n\n<h3 id=\"ESLint如何执行落地\"><a href=\"#ESLint如何执行落地\" class=\"headerlink\" title=\"ESLint如何执行落地\"></a>ESLint如何执行落地</h3><ul>\n<li>和CI&#x2F;CD系统集成</li>\n<li>和webpack集成</li>\n<li>本地开发阶段增加precommit钩子</li>\n<li>安装husky，<code>npm i husky -d</code></li>\n<li>增加npm script，通过lint-staged增量检查修改的文件</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"precommit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"linters\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"*.&#123;js, less&#125;\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"eslint --fix\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"git add\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>使用eslint-webpack-plugin，构建时检查js规范</li>\n</ul>\n<h3 id=\"eslint-config-airbnb的使用\"><a href=\"#eslint-config-airbnb的使用\" class=\"headerlink\" title=\"eslint-config-airbnb的使用\"></a>eslint-config-airbnb的使用</h3><ul>\n<li>eslint-config-airbnb(react项目使用)、eslint-config-airbnb-base(其他项目)<br><a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\">eslint-config-airbnb</a></li>\n<li>下载 <code>npm install eslint eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y -d</code></li>\n<li>下载 <code>npm install babel-eslint eslint-config-airbnb -d</code><br><a href=\"http://eslint.cn/docs/user-guide/getting-started\">eslint官网</a></li>\n<li>eslint配置文件：.eslint.*(.eslint.js&#x2F;.eslint.json&#x2F;.eslint.yml)</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// .eslint.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-eslint\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用的parser是babel-eslint，需要下载安装babel-eslint</span>\n    <span class=\"token string-property property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"airbnb\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 继承airbnb，需要安装</span>\n    <span class=\"token string-property property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 识别browser和node环境的一些全局变量</span>\n        <span class=\"token string-property property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 定义规则</span>\n    <span class=\"token string-property property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string-property property\">\"indent\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//indent空格， \"error\"错误级别、4是控制的空格数量</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"优化-resolve-配置\"><a href=\"#优化-resolve-配置\" class=\"headerlink\" title=\"优化 resolve 配置\"></a>优化 resolve 配置</h2><h3 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h3><p>alias 用的创建 import 或 require 的别名，用来简化模块引用，项目中基本都需要进行配置。</p>\n<p><a href=\"https://juejin.cn/post/7023242274876162084#heading-25\">优化 resolve 配置</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// 路径处理方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">const</span> config  <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 配置别名</span>\n    <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string-property property\">'~'</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">'@'</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">'components'</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/components'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>配置完成之后，我们在项目中就可以</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用 src 别名 ~ </span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'~/fonts/iconfont.css'</span>\n\n<span class=\"token comment\">// 使用 src 别名 @ </span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'@/fonts/iconfont.css'</span>\n\n<span class=\"token comment\">// 使用 components 别名</span>\n<span class=\"token keyword\">import</span> footer <span class=\"token keyword\">from</span> <span class=\"token string\">\"components/footer\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"extensions和modules\"><a href=\"#extensions和modules\" class=\"headerlink\" title=\"extensions和modules\"></a>extensions和modules</h3><ul>\n<li>如果用户引入模块时不带扩展名，那么 webpack 就会按照 extensions 配置的数组从左到右的顺序去尝试解析模块，高频文件后缀名放前面。</li>\n<li>modules，告诉 webpack 解析模块时应该搜索的目录，<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.wasm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// webpack 默认配置</span>\n    <span class=\"token comment\">// 手动配置后，默认配置会被覆盖，如果想保留默认配置，可以用 ... 扩展运算符代表默认配置</span>\n    <span class=\"token comment\">// extensions: ['.ts', '...'],</span>\n    <span class=\"token literal-property property\">modules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"resolveLoader\"><a href=\"#resolveLoader\" class=\"headerlink\" title=\"resolveLoader\"></a>resolveLoader</h3><p>用于解析 webpack 的 loader 包，有自定义的 Loader 就需要配置一下，手写loader时可以用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token literal-property property\">resolveLoader</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">modules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span><span class=\"token string\">'loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"webpack构建速度和优化体积\"><a href=\"#webpack构建速度和优化体积\" class=\"headerlink\" title=\"webpack构建速度和优化体积\"></a>webpack构建速度和优化体积</h2><h3 id=\"使用webpack内置的stats分析\"><a href=\"#使用webpack内置的stats分析\" class=\"headerlink\" title=\"使用webpack内置的stats分析\"></a>使用webpack内置的stats分析</h3><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"srcipts\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"build:stats\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --env production --json > stats.json\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"速度分析：使用speed-measure-webpack-plugin\"><a href=\"#速度分析：使用speed-measure-webpack-plugin\" class=\"headerlink\" title=\"速度分析：使用speed-measure-webpack-plugin\"></a>速度分析：使用speed-measure-webpack-plugin</h3><ul>\n<li>分析整个打包的总耗时</li>\n<li>每个插件和loader的耗时情况</li>\n<li>和一些Loader或者Plugin新版本会不兼容，需要进行降级处理，如mini-css-extract-plugin、html-webpack-plugin</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> SpeedMeasureWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'speed-measure-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> smp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpeedMeasureWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> smp<span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"体积分析：使用webpack-bundle-analyzer\"><a href=\"#体积分析：使用webpack-bundle-analyzer\" class=\"headerlink\" title=\"体积分析：使用webpack-bundle-analyzer\"></a>体积分析：使用webpack-bundle-analyzer</h3><p>可以直观的看到打包结果中，文件的体积大小、各模块依赖关系、文件是够重复等问题，极大的方便我们在进行项目优化的时候，进行问题诊断</p>\n<ul>\n<li>构建完成后会在8888端口展示大小<img src=\"/images/engineering/webpack-bundle-analyzer-001.png\"></li>\n<li>依赖的第三方模块文件大小</li>\n<li>业务里面的组件代码大小</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> BundleAnalyzerPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-bundle-analyzer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// 配置插件</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">BundleAnalyzerPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// analyzerMode: 'disabled',  // 不启动展示打包报告的http服务器</span>\n        <span class=\"token comment\">// generateStatsFile: true, // 是否生成stats.json文件</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"webpack4\"><a href=\"#webpack4\" class=\"headerlink\" title=\"webpack4\"></a>webpack4</h3><p>webpack4: 优化原因</p>\n<ul>\n<li>V8带来的优化(for of替代 forEach、Map和Set替代 Object、includes替代indexOf)</li>\n<li>默认使用更快的md4 hash 算法</li>\n<li>webpacks AST可以直接从loader传递给AST，减少解析时间</li>\n<li>使用字符串方法替代正则表达式</li>\n</ul>\n<h3 id=\"多进程-x2F-多实例构建：资源并行解析可选方案\"><a href=\"#多进程-x2F-多实例构建：资源并行解析可选方案\" class=\"headerlink\" title=\"多进程&#x2F;多实例构建：资源并行解析可选方案\"></a>多进程&#x2F;多实例构建：资源并行解析可选方案</h3><p>thread-loader</p>\n<ul>\n<li>parallel-webpack</li>\n<li>HappyPack（同样为开启多进程打包的工具，webpack5 已弃用）</li>\n</ul>\n<h3 id=\"多进程-x2F-多实例：并行压缩\"><a href=\"#多进程-x2F-多实例：并行压缩\" class=\"headerlink\" title=\"多进程&#x2F;多实例：并行压缩\"></a>多进程&#x2F;多实例：并行压缩</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> TerserPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'terser-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">minimizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerserPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">parallel</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">minimize</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"优化构建速度，缩小构建目标\"><a href=\"#优化构建速度，缩小构建目标\" class=\"headerlink\" title=\"优化构建速度，缩小构建目标\"></a>优化构建速度，缩小构建目标</h3><p>目的：尽可能的少构建模块，比如babel-loader不解析node_modules、减少文件搜索范围</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 同时使用多个loader  用use数组，多个可以直接配置</span>\n    <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">/* \n          开启多线程打包。 \n          进程启动大概为600ms，进程通信也有开销。\n          只有工作消耗时间比较长，才需要多线程打包\n      */</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'thread-loader'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">workers</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 进程2个</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 预设：指示babel做怎么样的兼容性处理</span>\n          <span class=\"token literal-property property\">presets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">[</span>\n              <span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 按需加载</span>\n                <span class=\"token literal-property property\">useBuiltIns</span><span class=\"token operator\">:</span> <span class=\"token string\">'usage'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// 指定core-js版本</span>\n                <span class=\"token literal-property property\">corejs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                  <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// 指定兼容性做到哪个版本浏览器</span>\n                <span class=\"token literal-property property\">targets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                  <span class=\"token literal-property property\">chrome</span><span class=\"token operator\">:</span> <span class=\"token string\">'60'</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">firefox</span><span class=\"token operator\">:</span> <span class=\"token string\">'60'</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">ie</span><span class=\"token operator\">:</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">safari</span><span class=\"token operator\">:</span> <span class=\"token string\">'10'</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">edge</span><span class=\"token operator\">:</span> <span class=\"token string\">'17'</span>\n                <span class=\"token punctuation\">&#125;</span>\n              <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// 开启babel缓存</span>\n          <span class=\"token comment\">// 第二次构建时，会读取之前的缓存, 速度会更快一点</span>\n          <span class=\"token literal-property property\">cacheDirectory</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"无用的CSS如何删除\"><a href=\"#无用的CSS如何删除\" class=\"headerlink\" title=\"无用的CSS如何删除\"></a>无用的CSS如何删除</h2><ul>\n<li>PurifyCSS:遍历代码，识别已经用到的CSS class</li>\n</ul>\n<p>使用purgecss-webpack-plugin，必须和mini-css-extract-plugin搭配使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> PurgecssPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'purgecss-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> glob <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'glob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PATHS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">src</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name]_[contenthash:8].css'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">PurgecssPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">paths</span><span class=\"token operator\">:</span> glob<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">PATHS</span><span class=\"token punctuation\">.</span>src<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/**/*</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">nodir</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>uncss: HTML需要通过jsdom加载，所有的样式通过PostCSS解析，通过document.querySelector来识别在html文件里面不存在的选择器</li>\n</ul>\n<h2 id=\"prefetch-与-preload\"><a href=\"#prefetch-与-preload\" class=\"headerlink\" title=\"prefetch 与 preload\"></a>prefetch 与 preload</h2><h3 id=\"prefetch\"><a href=\"#prefetch\" class=\"headerlink\" title=\"prefetch\"></a>prefetch</h3><p>prefetch (预获取)：等其他资源加载完毕，浏览器空闲了，会在使用之前，提前加载js文件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n  通过js代码，让某个文件被单独打包成一个chunk\n  import动态导入语法：能将某个文件单独打包\n*/</span>\n<span class=\"token comment\">/* webpackChunkName: 'test' */</span>  <span class=\"token comment\">// 魔法注释当注解用了,标注打包后的文件名为test</span>\n<span class=\"token comment\">// 类似路由的懒加载</span>\n<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: 'test' */</span><span class=\"token string\">'./test'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 按需加载  必定会分割代码，生成新的chunk</span>\nimg<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">/* webpackPrefetch: true */</span> <span class=\"token string\">'./desc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> element <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"preload\"><a href=\"#preload\" class=\"headerlink\" title=\"preload\"></a>preload</h3><p>preload (预加载)：提前加载后面会用到的关键资源，因为会提前拉取资源，如果不是特殊需要，谨慎使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackPreload: true */</span> <span class=\"token string\">'ChartingLibrary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"全局环境变量\"><a href=\"#全局环境变量\" class=\"headerlink\" title=\"全局环境变量\"></a>全局环境变量</h2><p>通过 webpack 内置插件 DefinePlugin 定义 DEV 环境变量。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webpack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token constant\">ENV</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 推荐使用JSON.tringify，不仅可以处理字符串，还可以处理Object中的字符串和Array</span>\n      <span class=\"token constant\">HELLO</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"可维护的webpack构建配置\"><a href=\"#可维护的webpack构建配置\" class=\"headerlink\" title=\"可维护的webpack构建配置\"></a>可维护的webpack构建配置</h1><h2 id=\"构建配置抽离成npm包的意义\"><a href=\"#构建配置抽离成npm包的意义\" class=\"headerlink\" title=\"构建配置抽离成npm包的意义\"></a>构建配置抽离成npm包的意义</h2><ol>\n<li>通用性</li>\n</ol>\n<ul>\n<li>业务开发者无需关注构建配置</li>\n<li>统一团队构建脚本</li>\n</ul>\n<ol start=\"2\">\n<li>可维护性</li>\n</ol>\n<ul>\n<li>构建配置合理的拆分</li>\n<li>README文档、ChangeLog文档等</li>\n</ul>\n<ol start=\"3\">\n<li>质量</li>\n</ol>\n<ul>\n<li>冒烟测试、单元测试、测试覆盖率</li>\n<li>持续集成</li>\n</ul>\n<h2 id=\"构建配置管理的可选方案\"><a href=\"#构建配置管理的可选方案\" class=\"headerlink\" title=\"构建配置管理的可选方案\"></a>构建配置管理的可选方案</h2><ol>\n<li>通过多个配置文件管理不同环境的构建，webpack –config 参数进行控制</li>\n<li>将构建配置设计成一个库，比如: hjs-webpack、Neutrino、webpack-blocks</li>\n<li>抽成一个工具进行管理，比如: create-react-app, kyt, nwb（团队规模大抽成一个cli）</li>\n<li>将所有的配置放在一个文件，通过–env参数控制分支选择</li>\n</ol>\n<h2 id=\"构建配置包设计\"><a href=\"#构建配置包设计\" class=\"headerlink\" title=\"构建配置包设计\"></a>构建配置包设计</h2><h3 id=\"通过多个配置文件管理不同环境的webpack构建\"><a href=\"#通过多个配置文件管理不同环境的webpack构建\" class=\"headerlink\" title=\"通过多个配置文件管理不同环境的webpack构建\"></a>通过多个配置文件管理不同环境的webpack构建</h3><ul>\n<li>基础配置:webpack.base.js</li>\n<li>开发环境:webpack.dev.js</li>\n<li>生产环境:webpack.prod.js</li>\n<li>SSR环境:webpack.ssr.js</li>\n<li>…</li>\n</ul>\n<h3 id=\"抽离成一个npm包统一管理\"><a href=\"#抽离成一个npm包统一管理\" class=\"headerlink\" title=\"抽离成一个npm包统一管理\"></a>抽离成一个npm包统一管理</h3><ul>\n<li>规范: git commit日志、README、ESLint规范、Semver规范</li>\n</ul>\n<h3 id=\"通过webpack-merge组合配置\"><a href=\"#通过webpack-merge组合配置\" class=\"headerlink\" title=\"通过webpack-merge组合配置\"></a>通过webpack-merge组合配置</h3><p>合并配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> merge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>baseConfig<span class=\"token punctuation\">,</span> devConfig<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"功能模块设计\"><a href=\"#功能模块设计\" class=\"headerlink\" title=\"功能模块设计\"></a>功能模块设计</h3><img src=\"/images/engineering/webpack-config-001.png\">\n\n<h3 id=\"目录结构设计\"><a href=\"#目录结构设计\" class=\"headerlink\" title=\"目录结构设计\"></a>目录结构设计</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-/test <span class=\"token comment\"># 测试代码</span>\n-/lib <span class=\"token comment\"># 源代码</span>\n  - webpack.dev.js\n  - webpack.prod.js\n  - webpack.ssr.js\n  - webpack.base.js\nindex.js\nREADME.md\nCHANGELOG.md\n.eslinrc.js\npackage.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"webpack5\"><a href=\"#webpack5\" class=\"headerlink\" title=\"webpack5\"></a>webpack5</h1><ul>\n<li>node版本大于10.13.0</li>\n</ul>\n<h2 id=\"功能清除：清理弃用功能\"><a href=\"#功能清除：清理弃用功能\" class=\"headerlink\" title=\"功能清除：清理弃用功能\"></a>功能清除：清理弃用功能</h2><ul>\n<li>所有在webpack4里面被废弃的能力都被清除，因此需要确保webpack4没有打印警告。</li>\n<li>require.includes语法已被废弃，可以通过 Rule.parser.requirelnclude 将行为改为允许、废弃或禁用。预加载一些模块，并不会马上执行</li>\n<li>不再为Node.js模块引入polyfill，之前的版本是：如果某个模块依赖Node.js里面的核心模块，那么这个模块被引入的时候会把Node.js整个polyfill顺带引入。</li>\n</ul>\n<h2 id=\"长期缓存\"><a href=\"#长期缓存\" class=\"headerlink\" title=\"长期缓存\"></a>长期缓存</h2><p>确定的模块ld、chunk和导出名称。在生产模式下，默认的chunklds:”deterministic”, modulelds:”deterministic”。设置成deterministic时默认最小3位数会被使用，不会因为某一个文件发生了变化，其他的会产生变化。</p>\n<h3 id=\"chunklds\"><a href=\"#chunklds\" class=\"headerlink\" title=\"chunklds\"></a>chunklds</h3><table>\n<thead>\n<tr>\n<th>选项值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>natural</td>\n<td>按使用顺序的数字id。</td>\n</tr>\n<tr>\n<td>named</td>\n<td>对调试更友好的可读的id。</td>\n</tr>\n<tr>\n<td>deterministic</td>\n<td>在不同的编译中不变的短数字id。有益于长期缓存。在生产模式中会默认开启。</td>\n</tr>\n<tr>\n<td>size</td>\n<td>专注于让初始下载包大小更小的数字id。</td>\n</tr>\n<tr>\n<td>total-size</td>\n<td>专注于让总下载包大小更小的数字id。</td>\n</tr>\n</tbody></table>\n<h3 id=\"modulelds\"><a href=\"#modulelds\" class=\"headerlink\" title=\"modulelds\"></a>modulelds</h3><table>\n<thead>\n<tr>\n<th>选荐值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>natural</td>\n<td>按使用顺序的数字id。</td>\n</tr>\n<tr>\n<td>named</td>\n<td>对调试更友好的可读的id。</td>\n</tr>\n<tr>\n<td>deterministic</td>\n<td>被哈希转化成的小位数值模块名。</td>\n</tr>\n<tr>\n<td>size</td>\n<td>专注于让初始下载包大小更小的数字id。</td>\n</tr>\n</tbody></table>\n<h2 id=\"cache持久化缓存\"><a href=\"#cache持久化缓存\" class=\"headerlink\" title=\"cache持久化缓存\"></a>cache持久化缓存</h2><p>在webpack4里面，可以使用cache-loader将编译结果写入硬盘缓存，还可以使用babel-loader，设置option.cacheDirectory将babel-loader编译的结果写进磁盘。</p>\n<h3 id=\"webpack5缓存策略\"><a href=\"#webpack5缓存策略\" class=\"headerlink\" title=\"webpack5缓存策略\"></a>webpack5缓存策略</h3><ul>\n<li>默认开启缓存，缓存默认是在内存里。可以对cache进行设置。</li>\n<li>缓存淘汰策略︰文件缓存存储在node_modules&#x2F;.cache&#x2F;webpack，最大500MB，缓存时常两个星期，旧的缓存先淘汰</li>\n<li>后面打包可以直接利用它原生缓存的打包的能力</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports<span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 将缓存类型设置为文件系统</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'filesystem'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">buildDependencies</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 将你的 config添加为 buildDependency，以便在改变config时获得缓存无效</span>\n            <span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>__filename<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\">// 如果你有其他的东西被构建依赖，你可以在这里添加它们</span>\n            <span class=\"token comment\">// 注意 webpack、加载器和所有从你的配置中引用的模块都会被自动添加</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"构建优化：TreeShaking\"><a href=\"#构建优化：TreeShaking\" class=\"headerlink\" title=\"构建优化：TreeShaking\"></a>构建优化：TreeShaking</h2><ul>\n<li>支持嵌套的TreeShaking</li>\n<li>可以分析这个模块直接的一个依赖关系</li>\n</ul>\n<h2 id=\"代码生成：支持生成ES6代码\"><a href=\"#代码生成：支持生成ES6代码\" class=\"headerlink\" title=\"代码生成：支持生成ES6代码\"></a>代码生成：支持生成ES6代码</h2><ul>\n<li>webpack 4之前只生成ES5的代码。webpack 5则现在既可以生成ES5又可以生成ES6&#x2F;ES2015代码。</li>\n<li>两种设置方式:<code>5 =&lt;ecmaVersion &lt;= 11或2009 =&lt; ecmaVersion &lt;= 2020</code></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">ecmaVersion</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 输出ES6代码</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"开创性的特性：模块联邦\"><a href=\"#开创性的特性：模块联邦\" class=\"headerlink\" title=\"开创性的特性：模块联邦\"></a>开创性的特性：模块联邦</h2><p>基本解释: 使一个JavaScript 应用在运行过程中可以动态加载另一个应用的代码，并支持共享依赖(CDN)。不再需要本地安装Npm包。<br>通过CDN加载，应用A通过一个CDN，它去加载应用B，然后这两个应用分别在不同的端口。使用组件或者模块的分享更加方便了</p>\n<ul>\n<li>Remote: 被依赖方，被Host消费的 Webpack构建，提供一些组件或者依赖出来，给其他的依赖方去用，相当于服务提供方。</li>\n<li>Host: 依赖方，消费其他 Remote 的 Webpack 构建，使用其他Remote提供的模块，</li>\n<li>一个应用可以是Host，也可以是Remote，也可以同时是Host和Remote</li>\n</ul>\n<h3 id=\"开创性的特性-ModuleFederationPlugin介绍\"><a href=\"#开创性的特性-ModuleFederationPlugin介绍\" class=\"headerlink\" title=\"开创性的特性: ModuleFederationPlugin介绍\"></a>开创性的特性: ModuleFederationPlugin介绍</h3><p>Webpack内部通过ModuleFederationPlugin 插件将多个应用结合起来。</p>\n<ul>\n<li>name: 必须，唯一ID，作为输出的模块名，使用的时通过 <code>$&#123;name&#125;/$&#123;expose&#125;</code>的方式使用;</li>\n<li>library: 必须，其中这里的name为作为umd的name;</li>\n<li>remotes: 可选，表示作为Host时，去消费哪些Remote;</li>\n<li>shared: 可选，优先用Host的依赖，如果Host没有，再用自己的;</li>\n<li>main.js: 应用主文件</li>\n<li>remoteEntry.js: 作为remote 时被引的文件</li>\n</ul>\n<h2 id=\"bundle和bundless\"><a href=\"#bundle和bundless\" class=\"headerlink\" title=\"bundle和bundless\"></a>bundle和bundless</h2><h3 id=\"bundle和bundless资源加载差异\"><a href=\"#bundle和bundless资源加载差异\" class=\"headerlink\" title=\"bundle和bundless资源加载差异\"></a>bundle和bundless资源加载差异</h3><ul>\n<li>bundle：浏览器加载的是构建好的文件，最开始会加载一个bundle.js；</li>\n<li>bundless: 直接加载原文件，不是加载构建好的文件；</li>\n</ul>\n<h3 id=\"bundle和bundless打包速度对比\"><a href=\"#bundle和bundless打包速度对比\" class=\"headerlink\" title=\"bundle和bundless打包速度对比\"></a>bundle和bundless打包速度对比</h3><ul>\n<li>bundless的冷启动时间大大缩短（使用esbuild）</li>\n<li>bundless的HMR速度不受整个项目体积影响，HMR效率高</li>\n<li>bundless的单文件粒度的缓存更优</li>\n<li>bundless在开发阶段的体验是更优的</li>\n</ul>\n<h3 id=\"vite构建速度快的原因\"><a href=\"#vite构建速度快的原因\" class=\"headerlink\" title=\"vite构建速度快的原因\"></a>vite构建速度快的原因</h3><p>预构建使用ESBuild（冷启动快的原因），ESBuild使用golang进行打包</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://time.geekbang.org/course/intro/100028901\">玩转 webpack</a></li>\n<li><a href=\"https://juejin.cn/post/7023242274876162084\">webpack知识体系</a></li>\n<li><a href=\"https://webpack.docschina.org/migrate/5/#update-outdated-options\">从v4升级到v5</a></li>\n<li><a href=\"https://webpack.docschina.org/guides/asset-modules/\">webpack5资源模块</a></li>\n<li><a href=\"https://juejin.cn/post/7023242274876162084\">webpack5资源模块的使用</a></li>\n<li><a href=\"https://juejin.cn/post/7062899360995999780\">构建webpack5知识体系</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Webpack基础\"><a href=\"#Webpack基础\" class=\"headerlink\" title=\"Webpack基础\"></a>Webpack基础</h1><h2 id=\"为什么需要构建工具，它有什么作用？\"><a href=\"#为什么需要构建工具，它有什么作用？\" class=\"headerlink\" title=\"为什么需要构建工具，它有什么作用？\"></a>为什么需要构建工具，它有什么作用？</h2><ul>\n<li><strong>转换ES6语法</strong>：ES6语法在前端领域广泛使用，然而很多浏览器对ES6没有提供全面的兼容和支持，所以需要构建工具来对ES6语法进行编译。</li>\n<li><strong>转换JSX、vue指令</strong>：前端框架React的JSX，VUE指令都是浏览器无法识别的，需要编译转换。</li>\n<li><strong>CSS前缀补全，预处理器</strong>：经常使用less、sass等预编译语法写样式，需要构建工具做编译转化为CSS。</li>\n<li><strong>多媒体资源压缩</strong>：经常使用的图片、字体、图标等多媒体资源，需要构建工具对它们进行压缩，减少体积大小。</li>\n<li><strong>压缩混淆代码</strong>：当前的前端开发都是模块开发，也引入了大量的依赖包，为了让浏览器对代码的加载更快，需要构建工具对代码进行压缩和混淆。</li>\n</ul>\n<h2 id=\"Webpack基础知识\"><a href=\"#Webpack基础知识\" class=\"headerlink\" title=\"Webpack基础知识\"></a>Webpack基础知识</h2><ul>\n<li>loader作用：webpack仅支持js和json文件，想对其他类型的文件打包需要使用loader，转化成为有效的模块。loader本身是一个函数，接受源文件作为参数，返回转换的结果，loader的执行顺序是从右往左。</li>\n<li>plugins作用：plugins是增强webpack功能，是 bundle 的一个优化，干预输出的结果，作用于整个构建过程。可以简单理解为任何loader没办法做的事情，都可以用plugins去完成。</li>\n<li>chunk和bundle：chunk是webpack打包过程中依赖，bundle是输出的产物。</li>\n<li>基本的配置文件如下：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 为JSON模块使用具名导出，可能需要使用 package.json 中的一些字段</span>\n<span class=\"token comment\">// package.json的 homepage 属性会告诉 webpack 项目的路径需要打包到哪个路径下，如github路径、CDN路径</span>\n<span class=\"token keyword\">import</span> pkg <span class=\"token keyword\">from</span> <span class=\"token string\">'./package.json'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// console.log(pkg.version);</span>\n\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 模式：development、production、none</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 打包入口地址</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 输出文件名</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出文件目录</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugin</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"mode模式\"><a href=\"#mode模式\" class=\"headerlink\" title=\"mode模式\"></a>mode模式</h3><table>\n<thead>\n<tr>\n<th align=\"center\">名称</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">development</td>\n<td align=\"center\">开发模式，打包更加快速</td>\n</tr>\n<tr>\n<td align=\"center\">production</td>\n<td align=\"center\">生产模式，打包比较慢，会开启 tree-shaking、压缩代码和清除无用代码</td>\n</tr>\n<tr>\n<td align=\"center\">none</td>\n<td align=\"center\">不开启任何优化选项</td>\n</tr>\n</tbody></table>\n<ul>\n<li>development：更快的构建速度、热更新(hot)、快速定位问题(sourcemap )</li>\n<li>production: 生产环境下会自动压缩js代码，构建体积小（代码压缩 + tree-shaking）、代码分割、压缩images。</li>\n</ul>\n<h2 id=\"webpack常用指令\"><a href=\"#webpack常用指令\" class=\"headerlink\" title=\"webpack常用指令\"></a>webpack常用指令</h2><ul>\n<li>webpack默认配置文件是根目录下的webpack.config.js，自定义配置打包文件的命令：<code>webpack --config filename</code></li>\n<li>监听变动并自动打包（文件监听是在发现源码发生变化时，自动重新构建出新的输出文件）：<ul>\n<li>方式一：在package.json的script命令添加：<code>webpack --watch</code></li>\n<li>方式二：在webpack.config.js中设置<code>watch: true</code></li>\n</ul>\n</li>\n<li>压缩混淆代码：<code>webpack -p</code></li>\n<li>方便出错时能查阅更详尽的信息：<code>webpack --display-error-details</code></li>\n<li>让编译的输出内容带有进度和颜色：<code>webpack --progress --colors</code></li>\n<li>模块热替换，在前端代码变动的时候无需整个刷新页面，只把变化的部分替换掉：<code>webpack-dev-server --hot</code></li>\n<li>inline选项会为入口页面添加热加载功能，即代码改变后重新加载页面（刷新浏览器）：<code>webpack-dev-server --inline</code></li>\n</ul>\n<h2 id=\"Webpack的整个生命周期\"><a href=\"#Webpack的整个生命周期\" class=\"headerlink\" title=\"Webpack的整个生命周期\"></a>Webpack的整个生命周期</h2><p>Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p>\n<ul>\n<li><code>初始化参数</code> 从配置文件和 Shell 语句中读取与合并参数，得出最终的参数</li>\n<li><code>开始编译</code> 用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译</li>\n<li><code>确定入口</code> 根据配置中的 entry 找出所有的入口文件</li>\n<li><code>编译模块</code> 从入口文件出发，调用所有配置的 Loader 对模块进行编译，再找出该模块被编译后的最终内容以及它们之间的依赖关系</li>\n<li><code>完成模块编译</code> 在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</li>\n<li><code>输出资源</code> 根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li>\n<li><code>输出完成</code> 在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li>\n</ul>\n<p>在以上过程中，在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，并且plugin可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p>\n<h2 id=\"常见的loaders\"><a href=\"#常见的loaders\" class=\"headerlink\" title=\"常见的loaders\"></a>常见的loaders</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>babel-loader</td>\n<td>转换ES6、ES7等JS新特性语法</td>\n</tr>\n<tr>\n<td>css-loader</td>\n<td>加载和解析.css文件，不会将样式加载到页面上</td>\n</tr>\n<tr>\n<td>style-loader</td>\n<td>将处理好的css以style标签形式添加到页面上</td>\n</tr>\n<tr>\n<td>postcss-loader</td>\n<td>添加CSS3部分属性的浏览器前缀（先添加前缀，再使用css-loader）</td>\n</tr>\n<tr>\n<td>less-loader</td>\n<td>将less文件转换成css</td>\n</tr>\n<tr>\n<td>ts-loader</td>\n<td>将TS转换成JS</td>\n</tr>\n<tr>\n<td>vue-loader</td>\n<td>支持 Vue</td>\n</tr>\n<tr>\n<td>thread-loader</td>\n<td>正常情况下webpack开一个进程打包，thread-loader作用是多进程打包JS和CSS</td>\n</tr>\n<tr>\n<td>file-loader</td>\n<td>解决图片、字体、媒体等资源引入问题，并将资源copy到指定目录，默认为 dist</td>\n</tr>\n<tr>\n<td>url-loader</td>\n<td>url-loader内部使用了file-loader，可以设置较小的资源自动base64，多了一个limit的配置</td>\n</tr>\n<tr>\n<td>raw-loader</td>\n<td>raw-loader可以将文件转化成字符串的形式导入</td>\n</tr>\n</tbody></table>\n<p><strong>注意</strong>：webpack5内置了资源处理模块，file-loader、url-loader和raw-loader都可以不用安装</p>\n<h2 id=\"常见的plugins\"><a href=\"#常见的plugins\" class=\"headerlink\" title=\"常见的plugins\"></a>常见的plugins</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HtmlWebpackPlugin</td>\n<td>将打包好的bundle如js、css 文件可以自动引入到html中</td>\n</tr>\n<tr>\n<td>mini-css-extract-plugin</td>\n<td>将CSS从 bunlde文件里提取成一个独立的CSS文件(MiniCssExtractPlugin.loader)</td>\n</tr>\n<tr>\n<td>TerserPlugin</td>\n<td>压缩JS，支持ES6，清除console（webpack5内置）</td>\n</tr>\n<tr>\n<td>splitchunksplugin</td>\n<td>将chunks相同的模块代码提取成公共js</td>\n</tr>\n<tr>\n<td>CleanWebpackPlugin</td>\n<td>自动清空打包目录</td>\n</tr>\n<tr>\n<td>copyWebpackPlugin</td>\n<td>将文件或者文件夹拷贝到构建的输出目录（webpack5内置）</td>\n</tr>\n<tr>\n<td>UglifyjsWebpackPlugin</td>\n<td>压缩JS</td>\n</tr>\n<tr>\n<td>ZipWebpackPlugin</td>\n<td>将打包出的资源生成一个zip包</td>\n</tr>\n</tbody></table>\n<h2 id=\"基本的webpack配置\"><a href=\"#基本的webpack配置\" class=\"headerlink\" title=\"基本的webpack配置\"></a>基本的webpack配置</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 生成html模板</span>\n<span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将css单独提取</span>\n<span class=\"token keyword\">const</span> OptimizeCssAssetsWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'optimize-css-assets-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 压缩css</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> CleanWebpackPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打包输出前清空文件夹</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 通过 process.env.NODE_ENV 获取当前环境</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// production or development or none</span>\n  <span class=\"token comment\">/**\n   * 单入口entry: './src/js/index.js'\n   * 多入口entry: &#123; key: 'value' &#125;\n   * key可自定义，value是入口文件路径\n  */</span>\n  <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 定义应用的入口点 src/app.js，并命名为 main</span>\n    <span class=\"token literal-property property\">main</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/app.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/js/index.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 输出index</span>\n    <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/js/test.js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 输出test</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * filename, path\n   * [name].[hash:8].bundle.js、[name].[chunkhash:8].bundle.js\n   * hash字段是根据每次编译compilation的内容计算所得、chunkhash是根据模块内容计算出的hash值\n  */</span>\n  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 打包输出的文件名</span>\n    <span class=\"token comment\">// name是一个占位符，通过占位符确保文件名称的唯一，一般entry多入口使用占位符区分</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'js/[name].[contenthash:10].js'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 10位hash值, name取原来的文件名 </span>\n    <span class=\"token comment\">// 定义打包结果的输出位置build目录</span>\n    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// publicPath表示的是打包生成的index.html文件里面引用资源的前缀</span>\n\n    <span class=\"token comment\">// webpack5清除输出目录可用，无需安装clean-webpack-plugin</span>\n    <span class=\"token literal-property property\">clean</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * test指定匹配规则\n   * use指定使用的loader名称\n  */</span>\n  <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 定义处理源文件的规则，rules 下会按顺序使用匹配的规则</span>\n    <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 遇到 .js 结尾的文件则使用这个规则</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 忽略 node_modules 目录下的 js 文件</span>\n\n        <span class=\"token comment\">// 在配置 loader 的时候，我们需要更精确的去指定 loader 的作用目录或者需要排除的目录，</span>\n        <span class=\"token comment\">// 通过使用 include 和 exclude 两个配置项</span>\n        <span class=\"token literal-property property\">include</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 符合条件的模块进行解析</span>\n        <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 排除符合条件的模块，不解析</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\">/* \n              开启多线程打包。 \n              进程启动大概为600ms，进程通信也有开销。\n              只有工作消耗时间比较长，才需要多线程打包\n          */</span>\n          <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'thread-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token literal-property property\">workers</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 进程2个</span>\n            <span class=\"token punctuation\">&#125;</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 使用 babel-loader 处理 js</span>\n            <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token comment\">// babel-loader 的一些选项</span>\n            <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token literal-property property\">presets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 确保 Babel 能够处理 JSX 语法</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 按需加载</span>\n                    <span class=\"token literal-property property\">useBuiltIns</span><span class=\"token operator\">:</span> <span class=\"token string\">'usage'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token comment\">// 指定core-js版本</span>\n                    <span class=\"token literal-property property\">corejs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                      <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token comment\">// 指定兼容性做到哪个版本浏览器</span>\n                    <span class=\"token literal-property property\">targets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                      <span class=\"token literal-property property\">chrome</span><span class=\"token operator\">:</span> <span class=\"token string\">'60'</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token literal-property property\">firefox</span><span class=\"token operator\">:</span> <span class=\"token string\">'60'</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token literal-property property\">ie</span><span class=\"token operator\">:</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token literal-property property\">safari</span><span class=\"token operator\">:</span> <span class=\"token string\">'10'</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token literal-property property\">edge</span><span class=\"token operator\">:</span> <span class=\"token string\">'17'</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                  <span class=\"token punctuation\">&#125;</span>\n              \n              <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n              <span class=\"token comment\">// babel 在转译 js 过程中时间开销比价大，将 babel-loader 的执行结果缓存起来，重新打包的时候，直接读取缓存</span>\n              <span class=\"token comment\">// 开启babel缓存, 第二次构建时，会读取之前的缓存, 速度会更快一点</span>\n              <span class=\"token literal-property property\">cacheDirectory</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 启用缓存，缓存位置： node_modules/.cache/babel-loader</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">/**\n         * css-loader用于处理加载.css文件，并且转换成commonjs对象\n         * style-loader将样式通过&lt;style>标签插入到head中\n        */</span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\">// 'style-loader', // 以 style标签 添加到head</span>\n          MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 将js中的css单独提取出来</span>\n          <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 将css文件整合到js文件中</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>  \n        <span class=\"token comment\">// 检测 less 文件  </span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.less$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>  \n        <span class=\"token comment\">// 使用了三个 loader，注意执行顺序是数组的倒序  </span>\n        <span class=\"token comment\">// 也就是先执行 less-loader ，将less转换成css   </span>\n        <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\">// 'style-loader', </span>\n          MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// 缓存一些性能开销比较大的 loader 的处理结果，缓存位置：node_modules/.cache/cache-loader</span>\n          <span class=\"token string\">'cache-loader'</span><span class=\"token punctuation\">,</span> \n          <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span> \n          <span class=\"token comment\">// 'less-loader'</span>\n          <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token literal-property property\">sourceMap</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n              <span class=\"token comment\">// 替换某个属性值，如修改antd默认主题色@primary-color，入口文件样式引入@import '~antd/dist/antd.less';</span>\n              <span class=\"token literal-property property\">modifyVars</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token string-property property\">'@primary-color'</span><span class=\"token operator\">:</span> <span class=\"token string\">'#13c2c2'</span><span class=\"token punctuation\">,</span>　　\n              <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  \n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// webpack 默认处理不了html中img图片</span>\n        <span class=\"token comment\">// 匹配 图片资源</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(jpg|png|gif|jpeg)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 通过 url-loader 或者 file-loader 处理图片资源</span>\n        <span class=\"token comment\">// url-loader内部使用了file-loader，可以设置较小的资源自动base64</span>\n        <span class=\"token comment\">// base64格式的图片  可打包在js中直接使用</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'url-loader'</span><span class=\"token punctuation\">,</span> \n        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 图片大小小于8kb，就会被base64处理</span>\n          <span class=\"token comment\">// 优点: 减少请求数量（减轻服务器压力）</span>\n          <span class=\"token comment\">// 缺点：图片体积会更大（文件请求速度更慢）</span>\n          <span class=\"token literal-property property\">limit</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// 问题：因为url-loader默认使用es6模块化解析，而html-loader引入图片是commonjs</span>\n          <span class=\"token comment\">// 解析时会出问题：[object Module]</span>\n          <span class=\"token comment\">// 解决：关闭url-loader的es6模块化，使用commonjs解析</span>\n          <span class=\"token literal-property property\">esModule</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// 给图片进行重命名</span>\n          <span class=\"token comment\">// [hash:10]取图片的hash的前10位</span>\n          <span class=\"token comment\">// [ext]取文件原来扩展名</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'[contenthash:10].[ext]'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">outputPath</span><span class=\"token operator\">:</span> <span class=\"token string\">'imgs'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.html$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 处理html文件的img图片（负责引入img，从而能被url-loader进行处理）</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'html-loader'</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 打包其他资源(除了html/js/css资源以外的资源)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// file-loader处理字体文件</span>\n        <span class=\"token comment\">// 排除css/js/html资源</span>\n        <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(woff|woff2|ttf|eot|otf)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(css|js|html|less)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'[contenthash:10].[ext]'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">outputPath</span><span class=\"token operator\">:</span> <span class=\"token string\">'media'</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 功能：默认会创建一个空的HTML，自动引入打包输出的所有资源（JS/CSS），并配置了页面的 title</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Webpack Output'</span><span class=\"token punctuation\">,</span>\n       <span class=\"token comment\">// 复制 './src/index.html' 文件，并自动引入打包输出的所有资源（JS/CSS）</span>\n      <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.html'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 压缩html代码</span>\n      <span class=\"token literal-property property\">minify</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 移除空格</span>\n        <span class=\"token literal-property property\">collapseWhitespace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 移除注释</span>\n        <span class=\"token literal-property property\">removeComments</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 提取js中的css成单独文件</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> \n      <span class=\"token comment\">// 对输出的css文件进行重命名，如filename: 'css/built.css'，放到输出目录的css文件夹下</span>\n      <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].[hash:8].css'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 打包输出前清空文件夹clean-webpack-plugin（webpack5不需要）</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 压缩css</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptimizeCssAssetsWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n   <span class=\"token comment\">/*\n    1. 可以将node_modules中代码单独打包一个chunk最终输出（单入口）\n    2. 自动分析多入口文件的chunk中，有没有公共的文件。如果有会打包成单独一个chunk\n  */</span>\n  <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">splitChunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 解决代码引入的复用问题，不会重复打包多次</span>\n      <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 开发服务器 devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器）</span>\n  <span class=\"token comment\">// 特点：只会在内存中编译打包，不会有任何输出    devServer只能在 开发环境使用，生产环境不需要</span>\n  <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 项目构建后路径</span>\n    <span class=\"token literal-property property\">contentBase</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'build'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 启动gzip压缩</span>\n    <span class=\"token literal-property property\">compress</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 端口号</span>\n    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8888</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 自动打开浏览器</span>\n    <span class=\"token literal-property property\">open</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">// 开启HMR功能(webpack优化配置)</span>\n    <span class=\"token comment\">// 当修改了webpack配置，新配置要想生效，必须重新webpack服务</span>\n    <span class=\"token literal-property property\">hot</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// HMR只能在 开发环境使用，生产环境不需要</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 拒绝XXX包 被打包进来，再用cdn 引进来(在html中手动通过srcipt标签引入、link引入)</span>\n  <span class=\"token comment\">// CDN内容分发网络，分布式存放静态资源，缓解服务器压力，就近获取资源，加快访问速度</span>\n  <span class=\"token comment\">// 某些包需要用cdn引入进来，就可以使用externals</span>\n  <span class=\"token literal-property property\">externals</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 拒绝jQuery被打包进来</span>\n    <span class=\"token literal-property property\">jquery</span><span class=\"token operator\">:</span> <span class=\"token string\">'jQuery'</span>\n    <span class=\"token comment\">// jquery: '$'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">devtool</span><span class=\"token operator\">:</span> <span class=\"token string\">'eval-source-map'</span> <span class=\"token comment\">//  source-map</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"babel（解析ES6、处理jsx）\"><a href=\"#babel（解析ES6、处理jsx）\" class=\"headerlink\" title=\"babel（解析ES6、处理jsx）\"></a>babel（解析ES6、处理jsx）</h2><ul>\n<li><p>解析ES6，需要在rules里面匹配js文件，并use: ‘babel-loader’。babel-loader是依赖babel的，需要在根目录创建babel的配置文件.babelrc。</p>\n</li>\n<li><p>需要安装@babel&#x2F;core、@babel&#x2F;preset-env、babel-loader</p>\n</li>\n<li><p>babel-loader 使用 Babel 加载 ES2015+ 代码并将其转换为 ES5</p>\n</li>\n<li><p>@babel&#x2F;core Babel 编译的核心包</p>\n</li>\n<li><p>@babel&#x2F;preset-env Babel 编译的预设，可以理解为 Babel 插件的超集</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// .babelrc</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 一系列plugins的集合</span>\n  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 增加ES6的babel preset配置，解析ES6</span>\n    <span class=\"token string\">\"@babel/preset-react\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 安装该依赖，并增加react的babel preset配置，解析react相关的语法，jsx</span>\n    <span class=\"token comment\">// @babel/preset-typescript</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 一个plugins对应一个功能</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 处理 装饰器的使用</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/plugin-proposal-decorators\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> legacy<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/plugin-proposal-class-properties\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> loose<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"babel-plugin-vs-babel-preset（预设）\"><a href=\"#babel-plugin-vs-babel-preset（预设）\" class=\"headerlink\" title=\"babel-plugin vs babel-preset（预设）\"></a>babel-plugin vs babel-preset（预设）</h3><p><a href=\"https://juejin.cn/post/6975556168752037919\">Babel polyfill 常见配置对比</a></p>\n<p>babel存在太多的plugin，实现某种功能，比如ES2015语法兼容时需要用到众多的插件。preset是plugin的集合，将多个plugin合并在一起（预设是插件的集合）</p>\n<ol>\n<li>插件plugin和预设preset的执行顺序</li>\n</ol>\n<ul>\n<li>plugin先执行，preset后执行</li>\n<li>plugin集从前往后执行</li>\n<li>preset集从后往前执行</li>\n</ul>\n<p>@babel&#x2F;preset-env（官方提供），作用是根据 targets 的配置引入对应插件来实现编译和 polyfill，自动根据 targets 来引入需要的插件</p>\n<p>所谓Polyfill就是这样解决API的兼容问题的，抹平差异化</p>\n<ol start=\"2\">\n<li>官方给出了两种 polyfill 方案：</li>\n</ol>\n<ul>\n<li>babel-polyfill：会污染全局适合在业务项目中使用。（Babel7.4.0版本开始，babel&#x2F;polyfill 已经被废弃，推荐直接使用core-js）</li>\n<li>babel-runtime：不污染全局适合在组件或类库项目中使用。</li>\n</ul>\n<p>开启 polyfill 功能要指定它的引入方式，也就是 useBuiltIns。设置为 usage 是在每个模块引入用到的，设置为 entry 是统一在入口处引入 targets 需要的。</p>\n<p>polyfill 的实现就是 core-js，需要再指定下 corejs 版本，一般是指定 3</p>\n<p>@babel&#x2F;preset-env 会导致多个模块重复注入同样的代码，会污染全局环境。解决这个问题就要使用 @babel&#x2F;plugin-transform-runtime 插件</p>\n<p>这样就不会多个模块重复注入同样的实现代码了，而且 core-js 的 api 也不是全局引入了，变成了模块化引入。</p>\n<p>这样就解决了 corejs 的重复注入和全局引入 polyfill 的两个问题</p>\n<p>@babel&#x2F;plugin-transform-runtime 的功能，把注入的代码和 core-js 全局引入的代码转换成从 @babel&#x2F;runtime-corejs3 中引入的形式</p>\n<p>@babel&#x2F;runtime-corejs3 就包含了 helpers、core-js、regenerator 这 3 部分</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">presets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">targets</span><span class=\"token operator\">:</span> <span class=\"token string\">'chrome 30'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">debug</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">useBuiltIns</span><span class=\"token operator\">:</span> <span class=\"token string\">'usage'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">corejs</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/plugin-transform-runtime'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">corejs</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\">// 插件也是处理 polyfill ，也就同样需要指定 corejs 的版本</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"babel的原理\"><a href=\"#babel的原理\" class=\"headerlink\" title=\"babel的原理\"></a>babel的原理</h3><p>babel是一个JS、JSX、TS 的编译器，能把新语法写的代码转换成目标环境支持的语法的代码</p>\n<h4 id=\"babel工作的三个步骤\"><a href=\"#babel工作的三个步骤\" class=\"headerlink\" title=\"babel工作的三个步骤\"></a>babel工作的三个步骤</h4><ol>\n<li>解析：将源码解析为AST（词法解析和语法解析）</li>\n<li>转换：旧AST转换成为新的AST（应用插件&#x2F;预设中，对AST节点增删改查的操作）</li>\n<li>生成：根据AST生成源码（深度优先遍历AST生成转译后的源码）</li>\n</ol>\n<h4 id=\"bable-x2F-core\"><a href=\"#bable-x2F-core\" class=\"headerlink\" title=\"@bable&#x2F;core\"></a>@bable&#x2F;core</h4><ul>\n<li>内核@bable&#x2F;core类似一个调度器，并不直接实现功能细节，而是调度各模块插件去实现相关功能</li>\n<li>@babel&#x2F;core的功能可以简单概况为 向外读取配置 &#x3D;&gt; 向内调度插件模块协同工作 &#x3D;&gt; 向外输出转译后的源码。详细版本如下：</li>\n</ul>\n<p>加载配置文件，读取所需使用的插件、预处理器等等</p>\n<ul>\n<li>调用@babel&#x2F;parser进行词法分析、语法分析后转换为AST</li>\n<li>调用@babel&#x2F;traverse对AST进行遍历，并采用visitor模式应用配置项中的插件对AST进行转换</li>\n<li>调用@babel&#x2F;generator生成源码和源码对应的sourceMap</li>\n</ul>\n<h4 id=\"解析（parse）\"><a href=\"#解析（parse）\" class=\"headerlink\" title=\"解析（parse）\"></a>解析（parse）</h4><p>解析的核心是：词法分析将源码分词、语法分析将分词后的源码按照JS语法逻辑转换为AST（抽象语法树）。</p>\n<ul>\n<li>词法分析：简单理解为：将源码分割为不同种类，保留关键词（如function）、条件判断词（if&#x2F;else）、运算符、数字、字符串、空格等</li>\n<li>语法分析：将词法分析生成的分词，组合为各类型的语法短语（抽象语法树AST）</li>\n</ul>\n<h4 id=\"转换（Traverser）\"><a href=\"#转换（Traverser）\" class=\"headerlink\" title=\"转换（Traverser）\"></a>转换（Traverser）</h4><p>转换器会遍历AST树，然后按照配置的插件对其中需要转换的节点进行操作</p>\n<h4 id=\"生成（generator）\"><a href=\"#生成（generator）\" class=\"headerlink\" title=\"生成（generator）\"></a>生成（generator）</h4><p>调度器调用generator插件将AST转译成源码</p>\n<h4 id=\"babel-cli\"><a href=\"#babel-cli\" class=\"headerlink\" title=\"babel-cli\"></a>babel-cli</h4><p>babel官方提供的脚手架，允许你以命令行的方式运行babel</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">$ npm install babel<span class=\"token operator\">-</span>cli <span class=\"token operator\">-</span>g\n​\n# 将示例js输出到编译后的js中\n$ babel example<span class=\"token punctuation\">.</span>js <span class=\"token operator\">-</span>o compiled<span class=\"token punctuation\">.</span>js\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"webpack文件监听的原理\"><a href=\"#webpack文件监听的原理\" class=\"headerlink\" title=\"webpack文件监听的原理\"></a>webpack文件监听的原理</h2><p>轮询判断文件的最后编辑时间是否变化，<br>某个文件发生变化了，并不会立刻告诉监听者，而是先缓存起来，等aggregateTimeout.</p>\n<p><a href=\"https://www.webpackjs.com/configuration/watch/#watch\">watch 和 watchOptions</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 默认是false，不开起监听</span>\n  <span class=\"token literal-property property\">watch</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">watchOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 默认为空，不监听的文件或者文件夹，支持正则匹配</span>\n    <span class=\"token literal-property property\">ignored</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 监听到变化发生后会等300ms再去执行，默认300ms</span>\n    <span class=\"token literal-property property\">aggregateTimeout</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒检查1次变化</span>\n    <span class=\"token comment\">// 间隔xxx秒检查一次变化</span>\n    <span class=\"token literal-property property\">poll</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"文件指纹\"><a href=\"#文件指纹\" class=\"headerlink\" title=\"文件指纹\"></a>文件指纹</h2><p>打包后输出的文件名的后缀，如 <code>index_0a4dfa7c33787eec103e.chunk.js</code>中的0a4dfa7c33787eec103e</p>\n<ul>\n<li>hash：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改</li>\n<li>chunkhash：对于 JS 文件，和 webpack 打包的 chunk 相关，不同的entry会生成不同的 chunkhash 值</li>\n<li>contenthash：将根据资源内容创建出唯一 hash。当资源内容发生变化时，[contenthash] 也会发生变化。</li>\n</ul>\n<ol>\n<li>JS 的文件指纹设置，在output 的 filename，使用 [chunkhash]</li>\n<li>CSS 的文件指纹设置，可以在MiniCssExtractPlugin使用[contenthash]</li>\n</ol>\n<p>使用hash的场景还应该结合mode来考虑，如果mode是development的时候，在使用hmr的情况下，尽量避免使用chunkhash和contenthash，应该使用hash。而在mode是production的时候，就是不用hmr的情况下，这时候就适合使用chunkhash了。hmr只在development开发阶段使用。</p>\n<p>js使用chunkhash是便于寻找资源，js的资源的关联度更高；而css采用contenthash是因为css一般是根据不同的页面书写的，css资源之前的关联度不高，也就不用在其他资源修改，而css部分没有修改的时候重新更新css。</p>\n<p>MiniCssExtractPlugin作用</p>\n<ul>\n<li>将 CSS 提取到单独的文件中</li>\n<li>为每个包含 CSS 的 JS 文件创建一个 CSS 文件</li>\n<li>支持按需加载 CSS 和 SourceMaps</li>\n<li>下载</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i mini-css-extract-plugin -D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'/dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name][chunkhash:8].js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name][contenthash:8].css'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"图片的文件指纹设置\"><a href=\"#图片的文件指纹设置\" class=\"headerlink\" title=\"图片的文件指纹设置\"></a>图片的文件指纹设置</h3><p>在 file-loader或者url-loader 的options参数中设置name，使用[contenthash]</p>\n<p>当 webpack 配置中使用了 <code>[hash]</code> 占位符时，请考虑将它改为 <code>[contenthash]</code></p>\n<table>\n<thead>\n<tr>\n<th>占位符名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[ext]</td>\n<td>资源后缀名</td>\n</tr>\n<tr>\n<td>[name]</td>\n<td>文件名称</td>\n</tr>\n<tr>\n<td>[path]</td>\n<td>文件的相对路径</td>\n</tr>\n<tr>\n<td>[folder]</td>\n<td>文件所在的文件夹</td>\n</tr>\n<tr>\n<td>[hash]</td>\n<td>每次构建生成的唯一 hash 值，默认是 md5 生成</td>\n</tr>\n<tr>\n<td>[chunkhash]</td>\n<td>根据chunk生成hash值</td>\n</tr>\n<tr>\n<td>[contenthash]</td>\n<td>根据文件内容生成hash 值，默认是md5生成，默认有32位，一般取前8位</td>\n</tr>\n<tr>\n<td>[emoji]</td>\n<td>一个随机的指代文件内容的 emoji</td>\n</tr>\n</tbody></table>\n<ul>\n<li>hash：任何一个文件改动，整个项目的构建 hash 值都会改变；</li>\n<li>chunkhash：文件的改动只会影响其所在 chunk 的 hash 值；</li>\n<li>contenthash：每个文件都有单独的 hash 值，文件的改动只会影响自身的 hash 值；</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.(png|svg|jpg|gif)$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'file-loader'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'images/[name][hash:8].[ext]'</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"sourcemap\"><a href=\"#sourcemap\" class=\"headerlink\" title=\"sourcemap\"></a>sourcemap</h2><ul>\n<li>sourcemap是一种提供源代码到构建后代码映射技术（如果构建后代码出错了，通过映射可以追踪源代码错误）</li>\n<li>sourcemap一般在开发环境使用，生产环境关闭</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>关键字</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>eval</td>\n<td>使用eval包裹模块代码</td>\n</tr>\n<tr>\n<td>source-map</td>\n<td>产生.map文件</td>\n</tr>\n<tr>\n<td>cheap</td>\n<td>只需要定位到行信息，不需要列信息</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>将.map作为DataURI嵌入，不单独生成.map文件</td>\n</tr>\n<tr>\n<td>module</td>\n<td>包含loader的sourcemap，展示源代码中的错误位置</td>\n</tr>\n</tbody></table>\n<h3 id=\"sourcemap的类型\"><a href=\"#sourcemap的类型\" class=\"headerlink\" title=\"sourcemap的类型\"></a>sourcemap的类型</h3><img src=\"/images/engineering/webpack-source-map001.png\">\n\n<ul>\n<li>不开起source-map调试是打包之后的内容，不方便调试</li>\n<li>开启source-map调试看到的是源代码，方面调试</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">devtool</span><span class=\"token operator\">:</span> <span class=\"token string\">'source-map'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"sourcemap的类型总结\"><a href=\"#sourcemap的类型总结\" class=\"headerlink\" title=\"sourcemap的类型总结\"></a>sourcemap的类型总结</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>inline<span class=\"token operator\">-</span>、hidden<span class=\"token operator\">-</span>、eval<span class=\"token operator\">-</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nosources<span class=\"token operator\">-</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>cheap<span class=\"token operator\">-</span><span class=\"token punctuation\">[</span>module<span class=\"token operator\">-</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>source<span class=\"token operator\">-</span>map<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>说明：外部则是生成xxx.js.map文件，内联则是将.map内嵌，不生成.map文件，内联构建速度更快，但是体积比外部大</p>\n<ol>\n<li>source-map：外部，能显示出错误代码准确信息和源代码的错误位置</li>\n<li>inline-source-map：内联，只生成一个内联source-map，能显示错误代码准确信息和源代码的错误位置</li>\n<li>eval-source-map：内联，每一个文件都生成对应的source-map，都在eval中，能显示错误代码准确信息和源代码的错误位置(文件后面会多一个hash值，print.js?8d3a)</li>\n<li>hidden-source-map：外部，为了隐藏源代码而诞生的，错误代码能显示错误原因，但是没有源代码的错误位置，不能追踪源代码错误，只能提示到构建后代码的错误位置</li>\n<li>nosources-source-map：外部，为了隐藏源代码而诞生的，错误代码准确信息，但是没有任何源代码信息(找不到任何代码信息)</li>\n<li>cheap-source-map：外部，能显示错误代码准确信息和源代码的错误位置，<strong>只能精确的行的错误，不能精确到列</strong>（比如第四行只是后面的一个代码错误，但是是整行报错，<strong>而source-map可以准确提示哪一行的那一列出错了</strong>，同一行没错误的分号(;) 不提示错误）</li>\n<li>cheap-module-source-map：外部，能错误代码准确信息和源代码的错误位置，有module，会将loader的source map加入。</li>\n<li>开发环境：速度快，调试更友好</li>\n</ol>\n<ul>\n<li>速度快慢，eval&gt;inline&gt;cheap&gt;…<ul>\n<li>eval-cheap-souce-map (有cheap只精确到行)</li>\n<li>eval-source-map</li>\n</ul>\n</li>\n<li>调试更友好<ul>\n<li>souce-map</li>\n<li>cheap-module-souce-map(module会将loader的source map加入)</li>\n<li>cheap-souce-map</li>\n</ul>\n</li>\n<li>eval-source-map(调试最友好) 、eval-cheap-module-souce-map(调试性能最友好)、react脚手架（cra）默认使用的是eval-source-map</li>\n<li>本地开发推荐eval-cheap-souce-map<ul>\n<li>本地开发首次打包慢点没关系，因为eval缓存的原因，rebuild会很快</li>\n<li>开发中，我们每行代码不会写的太长，只需要定位到行就行，所以加上cheap</li>\n<li>我们希望能够找到源代码的错误，而不是打包后的，所以需要加上module</li>\n</ul>\n</li>\n</ul>\n<ol start=\"9\">\n<li>生产环境：源代码要不要隐藏? 调试要不要更友好</li>\n</ol>\n<ul>\n<li>内联会让代码体积变大，所以在生产环境不用内联，我们要让体积变小，就不要内联，而采用外部的方式。</li>\n<li>nosources-source-map 全部隐藏（源码和构建后的代码都会隐藏）</li>\n<li>hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</li>\n<li>source-map(调试友好)</li>\n<li>cheap-module-souce-map（cheap的速度会快一点）</li>\n<li>推荐none：不想别人看到我的源代码</li>\n</ul>\n<h1 id=\"webpack进阶\"><a href=\"#webpack进阶\" class=\"headerlink\" title=\"webpack进阶\"></a>webpack进阶</h1><h2 id=\"自动清理构建产物\"><a href=\"#自动清理构建产物\" class=\"headerlink\" title=\"自动清理构建产物\"></a>自动清理构建产物</h2><ul>\n<li>通过 npm scripts 清理构建目录</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> -rf ./dist <span class=\"token operator\">&amp;&amp;</span> webpack\nrimraf ./dist <span class=\"token operator\">&amp;&amp;</span> webpack<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>避免构建前每次都需要手动删除 dist，使用 clean-webpack-plugin，默认会删除 output 指定的输出目录</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CleanWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clean-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name][chunkhash:8].js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"webpack之PostCSS插件autoprefixer自动补齐CSS3前缀\"><a href=\"#webpack之PostCSS插件autoprefixer自动补齐CSS3前缀\" class=\"headerlink\" title=\"webpack之PostCSS插件autoprefixer自动补齐CSS3前缀\"></a>webpack之PostCSS插件autoprefixer自动补齐CSS3前缀</h2><p>为了实现 CSS3 前缀的自动补齐，使用autoprefixer 插件：对代码打包完成后的 CSS 进行后置处理，与 postcss-loader 结合使用<br><a href=\"https://caniuse.com/\">Can I Use 插件</a> 查看兼容性</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i autoprefixer postcss-loader -d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name]_[chunkhash:8].js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 有单行注释代码的时候，需要把less loader放到后面，不然会报错的</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">.less$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'postcss-loader'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token function-variable function\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>\n                                <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'autoprefixer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n                                    <span class=\"token comment\">// browsers 指定 autoprefixer 所需要兼容的浏览器版本</span>\n                                    <span class=\"token comment\">// 最近两个版本，浏览器使用量大于1%</span>\n                                    <span class=\"token literal-property property\">browsers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'last 2 version'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'>1%'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ios 7'</span><span class=\"token punctuation\">]</span>\n                                    <span class=\"token comment\">// browsers改成overrideBrowserslist</span>\n                                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">]</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name]_[contenthash:8].css'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"移动端CSS-px自动转换成rem\"><a href=\"#移动端CSS-px自动转换成rem\" class=\"headerlink\" title=\"移动端CSS px自动转换成rem\"></a>移动端CSS px自动转换成rem</h2><p>px2rem-loader：将 px 自动转换成 rem</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">.less$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                    MiniCssExtractPlugin<span class=\"token punctuation\">.</span>loader<span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'css-loader'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token string\">'less-loader'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token comment\">// 移动端CSS px自动转换成rem</span>\n                    <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'px2rem-loader'</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                            <span class=\"token literal-property property\">remUnit</span><span class=\"token operator\">:</span> <span class=\"token number\">75</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 1rem = 75px</span>\n                            <span class=\"token literal-property property\">remPrecision</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span>  <span class=\"token comment\">// px 转换为 rem 时小数点后的位数</span>\n                        <span class=\"token punctuation\">&#125;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>lib-flexible：页面渲染时计算根元素的 font-size 值(可以使用手淘的 lib-flexible 库<code>https://github.com/amfe/lib-flexible</code>)</li>\n<li>将 node_modules -&gt; lib-flexible -&gt; flexible.js 文件全部代码手动引入到 模板html 文件中</li>\n</ul>\n<h2 id=\"多页面应用-PWA\"><a href=\"#多页面应用-PWA\" class=\"headerlink\" title=\"多页面应用(PWA)\"></a>多页面应用(PWA)</h2><ol>\n<li>页面有多个入口，多页面应用每个应用都是解耦的，多页面应用对SEO更加友好。</li>\n</ol>\n<ul>\n<li>多页面跳转需要刷新所有资源，每个公共资源(js、css等)需选择性重新加载;</li>\n<li>页面跳转：使用window.location.href &#x3D; “.&#x2F;index.html”进行页面间的跳转；</li>\n<li>数据传递：可以使用path?account&#x3D;123&amp;password&#x3D;456 路径携带数据传递的方式，或者localstorage、cookie等存储方式;</li>\n</ul>\n<ol start=\"2\">\n<li>每个页面对应一个entry，一个html-webpack-plugin，缺点是每次新增或者删除页面需要修改webpack配置</li>\n<li>解决方案：动态获取entry和设置html-webpack-plugin的数量</li>\n</ol>\n<ul>\n<li>约定js入口文件放置格式为 <code>./src/xxx/index.js</code>，xxx为某个特定模块的名称，html模板为index.html</li>\n<li>利用glob.sync读取文件：<a href=\"https://github.com/isaacs/node-glob\">glob</a></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// npm i glob -d</span>\nglob<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/*/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token keyword\">const</span> glob <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'glob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setMPA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> htmlWebpackPlugins <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> entryFiles <span class=\"token operator\">=</span> glob<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/*/index.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>entryFiles<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">const</span> entryFile <span class=\"token operator\">=</span> entryFiles<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> entryFile<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">src\\/(.*)\\/index\\.js</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> pageName <span class=\"token operator\">=</span> match <span class=\"token operator\">&amp;&amp;</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            entry<span class=\"token punctuation\">[</span>pageName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> entryFile<span class=\"token punctuation\">;</span>\n            htmlWebpackPlugins<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token literal-property property\">inlineSource</span><span class=\"token operator\">:</span> <span class=\"token string\">'.css$'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">src/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>pageName<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/index.html</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>pageName<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.html</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'vendors'</span><span class=\"token punctuation\">,</span> pageName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token literal-property property\">minify</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token literal-property property\">html5</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">collapseWhitespace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">preserveLineBreaks</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">minifyCSS</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">minifyJS</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token literal-property property\">removeComments</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>\n        entry<span class=\"token punctuation\">,</span>\n        htmlWebpackPlugins\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> entry<span class=\"token punctuation\">,</span> htmlWebpackPlugins <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">setMPA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> entry<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name]_[chunkhash:8].js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// module: &#123;......&#125;,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name]_[contenthash:8].css'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptimizeCSSAssetsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">assetNameRegExp</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">cssProcessor</span><span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cssnano'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">CleanWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HTMLInlineCSSWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>htmlWebpackPlugins<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"热更新（HMR）\"><a href=\"#热更新（HMR）\" class=\"headerlink\" title=\"热更新（HMR）\"></a>热更新（HMR）</h2><p>1、使用 webpack-dev-server</p>\n<ul>\n<li>自动编译并运行，不需要手动刷新浏览器，每次修改代码都需要重新执行 webpack 命令，可以使用 webpack-dev-server 自动打包运行</li>\n<li>不输出文件，而是放在内存中，watch是放在磁盘里</li>\n<li>与 HotModuleReplacementPlugin 插件配合使用</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i webpack-dev-server -d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>webpack.config.js</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name].js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 热更新一般只在开发模式使用</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>HotModuleReplacementPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 告诉服务器从哪里提供静态资源（只有想提供静态文件时才需要）</span>\n        <span class=\"token literal-property property\">contentBase</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 静态资源所在的路径，默认为项目根目录</span>\n        <span class=\"token literal-property property\">hot</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 开启热更新</span>\n\t      <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8888</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 端口号</span>\n        <span class=\"token literal-property property\">compress</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//是否启动压缩 gzip</span>\n\t      <span class=\"token literal-property property\">open</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span>  <span class=\"token comment\">// 是否自动打开浏览器</span>\n        <span class=\"token comment\">// devServer里面的publicPath表示的是打包生成的静态文件所在的位置</span>\n        <span class=\"token comment\">//（若是devServer里面的publicPath没有设置，则会认为是output里面设置的publicPath的值）</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>package.json，–open打开浏览器</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack-dev-server --open\"</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"热更新原理分析\"><a href=\"#热更新原理分析\" class=\"headerlink\" title=\"热更新原理分析\"></a>热更新原理分析</h3><img src=\"/images/engineering/webpack-hot001.png\">\n\n<ul>\n<li>首次编译：① -&gt; ② -&gt; A -&gt; B</li>\n<li>修改代码后的热更新：① -&gt; ② -&gt; ③ -&gt; ④</li>\n<li>HMR Server -&gt; HMR Runtime 以json形式传递</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>概念</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Webpack Compiler(webpack编译器)</td>\n<td>将JS编译成 Bundle</td>\n</tr>\n<tr>\n<td>HMR Server</td>\n<td>将热更新的文件传输给 HMR Runtime</td>\n</tr>\n<tr>\n<td>Bundle Server</td>\n<td>提供文件在浏览器的访问，提供类似的服务器环境访问，如localhost:3003&#x2F;bundle.js，服务器和浏览器是ws链接</td>\n</tr>\n<tr>\n<td>HMR Runtime</td>\n<td>会被注入到浏览器，更新文件的变化</td>\n</tr>\n<tr>\n<td>bundle.js</td>\n<td>构建输出的文件</td>\n</tr>\n</tbody></table>\n<h2 id=\"webpack之JS、css和html文件的压缩\"><a href=\"#webpack之JS、css和html文件的压缩\" class=\"headerlink\" title=\"webpack之JS、css和html文件的压缩\"></a>webpack之JS、css和html文件的压缩</h2><p>webpack4 内置了uglifyjs-webpack-plugin 插件（mode为production），默认打包出的 JS 文件已压缩过， webpack5 内置了terser-webpack-plugin 插件</p>\n<ol>\n<li>CSS 文件的压缩</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 安装依赖，使用 optimize-css-assets-webpack-plugin 插件，同时使用预处理器 cssnano</span>\n<span class=\"token function\">npm</span> i optimize-css-assets-webpack-plugin cssnano -D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>html文件的压缩</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> OptimizeCssAssetsPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'optimize-css-assets-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> HtmlWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> TerserPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'terser-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token string\">'./src/index.js'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name][chunkhash:8].js'</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// 添加 css 压缩配置</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptimizeCssAssetsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">assetNameRegExp</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">cssProcessor</span><span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cssnano'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 通常是一个html页面对应一个HtmlWebpackPlugin，多个html就使用多个HtmlWebpackPlugin</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">HtmlWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// html 模板所在的位置</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 指定打包出 html 的文件名称</span>\n            <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 指定生成的 html 要 使用哪些 chunk</span>\n            <span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 将指定的chunks（js、css）引入到 html中</span>\n            <span class=\"token literal-property property\">minify</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">html5</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// 移除空格</span>\n                <span class=\"token literal-property property\">collapseWhitespace</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// 当标记之间的空格包含换行符时，始终折叠为1换行符(不完全删除它)，必须与collapseWhitespace=true一起使用</span>\n                <span class=\"token literal-property property\">preserveLineBreaks</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">minifyCSS</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 压缩文内css</span>\n                <span class=\"token literal-property property\">minifyJS</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 压缩文内js</span>\n                <span class=\"token comment\">// 移除注释</span>\n                <span class=\"token literal-property property\">removeComments</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">minimize</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">minimizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// 添加 css 压缩配置</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">OptimizeCssAssetsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// 压缩 JS</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerserPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"提取页面的公共资源\"><a href=\"#提取页面的公共资源\" class=\"headerlink\" title=\"提取页面的公共资源\"></a>提取页面的公共资源</h2><h3 id=\"基础库的分离\"><a href=\"#基础库的分离\" class=\"headerlink\" title=\"基础库的分离\"></a>基础库的分离</h3><ul>\n<li>思路:将react、react-dom 基础包通过cdn 引入，不打入bundle 中</li>\n<li>方法:使用html-webpack-externals-plugin</li>\n<li>entry: 可以是本地文件、cdn引入等<img src=\"/images/engineering/webpack-001.png\"></li>\n</ul>\n<h3 id=\"externals\"><a href=\"#externals\" class=\"headerlink\" title=\"externals\"></a>externals</h3><p>externals 配置选项提供了「从输出的 bundle 中排除依赖」的方法</p>\n<p>例如，从CDN引入React，而不是把它打包</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"> <span class=\"token comment\">&lt;!-- anonymous：CORS请求将不设置凭据标志 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span>\n  <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/react@16/umd/react.development.js<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">crossorigin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anonymous<span class=\"token punctuation\">\"</span></span> \n<span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>配置externals</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token literal-property property\">externals</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">react</span><span class=\"token operator\">:</span> <span class=\"token string\">'React'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用React</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"CDN\"><a href=\"#CDN\" class=\"headerlink\" title=\"CDN\"></a>CDN</h3><p>CDN用来托管静态资源，就近获取，加快访问速度，缓解服务器压力，还可以防止一些网络的攻击</p>\n<p>CDN的原理是：本地DNS系统解析的时候，发现该URL对应的是一个CDN专用的DNS服务器，将解析权利交给了 专门处理CDN的DNS服务处理</p>\n<h3 id=\"使用SplitChunksPlugin进行公共脚本分离\"><a href=\"#使用SplitChunksPlugin进行公共脚本分离\" class=\"headerlink\" title=\"使用SplitChunksPlugin进行公共脚本分离\"></a>使用SplitChunksPlugin进行公共脚本分离</h3><p>optimization.splitChunks 是基于 SplitChunksPlugin 插件实现的，webpack内置的。</p>\n<p><a href=\"https://juejin.cn/post/7023242274876162084#heading-52\">splitChunks 分包配置</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//...</span>\n    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token literal-property property\">splitChunks</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// async：异步引入的库进行分离（默认），  initial： 同步引入的库进行分离， all：所有引入的库进行分离（推荐）</span>\n        <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token string\">'async'</span><span class=\"token punctuation\">,</span> \n        <span class=\"token literal-property property\">minSize</span><span class=\"token operator\">:</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 抽离的公共包最小的大小，单位字节 30k   如果minSize: 0,只要有引用，就会抽离</span>\n        <span class=\"token literal-property property\">minRemainingSize</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 确保拆分后剩余的最小 chunk 体积超过限制来避免大小为零的模块</span>\n        <span class=\"token literal-property property\">maxSize</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 最大的大小</span>\n        <span class=\"token literal-property property\">minChunks</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 资源使用的次数(在多个页面使用到)， 大于1， 最小使用次数</span>\n        <span class=\"token literal-property property\">maxAsyncRequests</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 并发请求的资源数量</span>\n        <span class=\"token literal-property property\">maxInitialRequests</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 入口文件做代码分割最多能分成30个js文件</span>\n        <span class=\"token literal-property property\">automaticNameDelimiter</span><span class=\"token operator\">:</span> <span class=\"token string\">'~'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 文件生成时的连接符</span>\n        <span class=\"token literal-property property\">automaticNameMaxLength</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 自动自动命名最大长度</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 让cacheGroups里设置的名字有效</span>\n        <span class=\"token literal-property property\">cacheGroups</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//当打包同步代码时，上面的参数生效，配置提取模块的方案</span>\n          <span class=\"token literal-property property\">vendors</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[\\\\/]node_modules[\\\\/]</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">//检测引入的库是否在node_modlues目录下的</span>\n            <span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//值越大,优先级越高.模块先打包到优先级高的组里</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'vendors.js'</span><span class=\"token comment\">//把所有的库都打包到一个叫vendors.js的文件里</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">minChunks</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 上面有</span>\n            <span class=\"token literal-property property\">priority</span><span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 上面有</span>\n            <span class=\"token literal-property property\">reuseExistingChunk</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//如果一个模块已经被打包过了,那么再打包时就忽略这个上模块</span>\n          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">commons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n              <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(react|react-dom)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n              <span class=\"token comment\">// 分离处理的名称，可将vendors这个chunk添加到html-webpack-plugin中的chunks数组里使用，chunks: ['vendors', pageName]</span>\n              <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'vendors'</span><span class=\"token punctuation\">,</span> \n              <span class=\"token literal-property property\">chunks</span><span class=\"token operator\">:</span> <span class=\"token string\">'all'</span>\n          <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Tree-Shaking的使用和原理分析\"><a href=\"#Tree-Shaking的使用和原理分析\" class=\"headerlink\" title=\"Tree Shaking的使用和原理分析\"></a>Tree Shaking的使用和原理分析</h2><ul>\n<li>webpack默认支持，模式为production默认开启，必须是es module的模块规范，cjs不支持</li>\n<li>Tree Shaking就是把模块中使用到的代码打入bundle，引入了但是没有使用，也不会被打包进入bundle。</li>\n<li><strong>Tree Shaking原理</strong>：Tree Shaking会对模块的代码进行静态的分析，在编译的阶段已经确定了哪些代码需要使用的，不需要的代码会被Tree Shaking进行注释标记，最终在uglify阶段删除无用的代码。</li>\n<li>DCE<br>dead code elimination，消除死代码，通常在编译阶段由编译器进行判断某些代码是否可达从而删除那些不可能执行的代码</li>\n<li>代码不会被执行，不可到达</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 这段代码永远不会执行</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>代码的执行结果不会被用到</li>\n<li>代码只会影响死变量（只写不读）</li>\n<li>常规的死代码消除一般来说包含上面这几种类型的无用代码，会在打包阶段，一般是uglify.js分析并删除无用代码。</li>\n<li>副作用的代码不能treeshking，如在window对象挂载属性值，但是没有使用；export封装成对象导出，没有使用的方法不能被treeshking，原因是treeshking只能做到export级别，编译期间的静态分析只能对es module的相关语法做分析，是不会真正去执行代码的。</li>\n</ul>\n<h2 id=\"Scope-Hoisting（作用域提升）\"><a href=\"#Scope-Hoisting（作用域提升）\" class=\"headerlink\" title=\"Scope Hoisting（作用域提升）\"></a>Scope Hoisting（作用域提升）</h2><p>Scope Hoisting 是 webpack3 的新功能，它可以让 webpack 打包出来的代码文件更小，运行更快。原理是将多个模块放在同一个作用域下，并重命名防止命名冲突，通过这种方式可以减少函数声明和内存开销。</p>\n<p>当前现状：webpack构建后的代码存在大量的闭包代码，导致什么问题？</p>\n<ul>\n<li>大量函数闭包包裹代码，导致包体积增大（模块越多越明显）</li>\n<li>代码在运行时因为创建的函数作用域更多，内存开销变大。</li>\n</ul>\n<h3 id=\"模块转换分析\"><a href=\"#模块转换分析\" class=\"headerlink\" title=\"模块转换分析\"></a>模块转换分析</h3><ul>\n<li>模块转化为模块初始化函数，转换后的模块会带上一层包裹</li>\n<li>import会被转换成__webpack_require，__webpack_require的参数有moduleId，exprot也会发生转换</li>\n</ul>\n<h3 id=\"webpack模块机制\"><a href=\"#webpack模块机制\" class=\"headerlink\" title=\"webpack模块机制\"></a>webpack模块机制</h3><img src=\"/images/engineering/webpack-module001.png\">\n\n<ul>\n<li>webpack 打包输出打是一个 IIFE（匿名闭包）；</li>\n<li>modules 是一个数组，每一项是一个模块初始化函数，modules会传入IIFE函数中；</li>\n<li>IIFE函数最核心的是使用 __webpack_require() 来加载和处理模块，返回 module.exports；</li>\n<li>__webpack_require()根据moduleId来查看installModules里是否存在，不存在会创建一个新的module存放到installModules；</li>\n<li>通过 <strong>webpack_require</strong>(<strong>webpack_require</strong>.s &#x3D; 0)，entry入口依赖，启动程序。</li>\n</ul>\n<h2 id=\"Scope-Hoisting原理（从rollup借鉴）\"><a href=\"#Scope-Hoisting原理（从rollup借鉴）\" class=\"headerlink\" title=\"Scope Hoisting原理（从rollup借鉴）\"></a>Scope Hoisting原理（从rollup借鉴）</h2><ul>\n<li>原理：将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突，消除包裹</li>\n<li>Scope Hoisting的使用：webpack4以上，模式为production默认开启，必须是ESM，不支持cjs</li>\n<li>ModuleConcatenationPlugin() 插件<br><a href=\"https://juejin.cn/post/6844904003109650445\">参考Scope Hoisting</a></li>\n</ul>\n<ol>\n<li>没有 Scope Hoisting 时用 webpack 打包下面两个文件</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> str <span class=\"token keyword\">from</span> <span class=\"token string\">\"./main.js\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li>使用 webpack 打包后输出文件内容如下：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// module指代源代码，__webpack_exports__就是export、__webpack_require__是import</span>\n<span class=\"token comment\">/* harmony import 是ES6语法的标识 */</span>\n<span class=\"token comment\">/* harmony exports 是ES6语法的标识 */</span>\n<span class=\"token punctuation\">[</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> __webpack_exports__<span class=\"token punctuation\">,</span> __webpack_require__</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    \n        <span class=\"token keyword\">var</span> __WEBPACK_IMPORTED_MODULE_0__main_js__ <span class=\"token operator\">=</span> <span class=\"token function\">__webpack_require__</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>__WEBPACK_IMPORTED_MODULE_0__main_js__<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> __webpack_exports__<span class=\"token punctuation\">,</span> __webpack_require__</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    \n        __webpack_exports__<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol start=\"3\">\n<li>再开启 Scope Hoisting 后，相同源码打包输出结果变为：</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">module<span class=\"token punctuation\">,</span> __webpack_exports__<span class=\"token punctuation\">,</span> __webpack_require__</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    \n        <span class=\"token keyword\">var</span> main <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对比两种打包方式输出的代码，我们可以看出，启用 Scope Hoisting 后，函数声明变成一个， main.js 中定义的内容被直接注入到 main.js 对应模块中，这样做的好处：</p>\n<ul>\n<li>代码体积更小，因为函数申明语句会产生大量代码，导致包体积增大（模块越多越明显）；</li>\n<li>代码在运行时因为创建的函数作用域更少，内存开销也随之变小。</li>\n<li>对比结果: 通过scope hoisting 可以减少函数声明代码和内存开销</li>\n</ul>\n<p>scope hoisting理解为是把每个模块被webpack处理成的模块初始化函数整理到一个统一的包裹函数里，也就是把多个作用域用一个作用域取代，以减少内存消耗并减少包裹块代码，从每个模块有一个包裹函数变成只有一个包裹函数包裹所有的模块，但是有一个前提就是，当模块的引用次数大于1时，比如被引用了两次或以上，那么这个效果会无效，也就是被引用多次的模块在被webpack处理后，会被独立的包裹函数所包裹</p>\n<p>Scope housting对模块的引用次数大于1次是不产生效果的，这个其实也很好理解，如果一个模块引用次数大于1次，那么这个模块的代码会被内联多次，从而增加了打包出来的js bundle的体积。</p>\n<h2 id=\"代码分割和动态import\"><a href=\"#代码分割和动态import\" class=\"headerlink\" title=\"代码分割和动态import\"></a>代码分割和动态import</h2><p>代码分割场景</p>\n<ol>\n<li>抽离相同代码到一个共享模块</li>\n<li>脚本懒加载，使得初始下载的代码更小，懒加载方式：</li>\n</ol>\n<ul>\n<li>cjs：require.ensure</li>\n<li>esm：动态import（目前还没有原生支持，需要babel转换）<ul>\n<li>静态分析（在模块的头部import xxx from ‘xxx’）</li>\n<li>动态引入（在if…else{ import(‘xxx’)}），按需加载</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>动态import的js代码在打包时，会被抽离出来，用到的时候才会加载这个被抽离出来的js文件，通过webpackJsonp的一个请求加载。<br>（典型的通过jsonp的形式往html插入script标签），动态import（懒加载）必定会分割代码，生成新的chunk。</li>\n</ol>\n<ul>\n<li><p>prefetch (预获取)：浏览器空闲的时候进行资源的拉取</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">/* webpackPrefetch: true */</span> <span class=\"token string\">'./src/xxx'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>preload (预加载)：提前加载后面会用到的关键资源（谨慎使用）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackPreload: true */</span> <span class=\"token string\">'ChartingLibrary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>preload chunk 会在父 chunk 加载时，以并行方式开始加载。prefetch chunk 会在父 chunk 加载结束后开始加载。</p>\n</li>\n<li><p>preload chunk 具有中等优先级，并立即下载。prefetch chunk 在浏览器闲置时下载。</p>\n</li>\n<li><p>preload chunk 会在父 chunk 中立即请求，用于当下时刻。prefetch chunk 会用于未来的某个时刻。</p>\n</li>\n</ul>\n<h3 id=\"如何动态import\"><a href=\"#如何动态import\" class=\"headerlink\" title=\"如何动态import\"></a>如何动态import</h3><ul>\n<li>使用@babel&#x2F;plugin-syntax-dynamic-import插件，下载该插件，并在.babelrc的plugins配置插件</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n  通过js代码，让某个文件被单独打包成一个chunk\n  import动态导入语法：能将某个文件单独打包\n*/</span>\n\n<span class=\"token comment\">// 魔法注释当注解用了，标注打包后的文件名为test</span>\n<span class=\"token comment\">/* webpackChunkName: 'test' */</span>  \n\n<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: 'test' */</span><span class=\"token string\">'./test'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> add <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 文件加载成功~</span>\n    <span class=\"token comment\">// eslint-disable-next-line</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// eslint-disable-next-line</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件加载失败~'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"在webpack中使用ESLint\"><a href=\"#在webpack中使用ESLint\" class=\"headerlink\" title=\"在webpack中使用ESLint\"></a>在webpack中使用ESLint</h2><p>制定ESLint规范，检查JS</p>\n<ul>\n<li>不重复造轮子，基于eslint:recommend配置并改进</li>\n<li>能够帮助发现代码错误的规则，全部开启</li>\n</ul>\n<img src=\"/images/engineering/webpack-eslint001.png\">\n\n<h3 id=\"ESLint如何执行落地\"><a href=\"#ESLint如何执行落地\" class=\"headerlink\" title=\"ESLint如何执行落地\"></a>ESLint如何执行落地</h3><ul>\n<li>和CI&#x2F;CD系统集成</li>\n<li>和webpack集成</li>\n<li>本地开发阶段增加precommit钩子</li>\n<li>安装husky，<code>npm i husky -d</code></li>\n<li>增加npm script，通过lint-staged增量检查修改的文件</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"precommit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lint-staged\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"linters\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"*.&#123;js, less&#125;\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string\">\"eslint --fix\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"git add\"</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>使用eslint-webpack-plugin，构建时检查js规范</li>\n</ul>\n<h3 id=\"eslint-config-airbnb的使用\"><a href=\"#eslint-config-airbnb的使用\" class=\"headerlink\" title=\"eslint-config-airbnb的使用\"></a>eslint-config-airbnb的使用</h3><ul>\n<li>eslint-config-airbnb(react项目使用)、eslint-config-airbnb-base(其他项目)<br><a href=\"https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb\">eslint-config-airbnb</a></li>\n<li>下载 <code>npm install eslint eslint-plugin-import eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y -d</code></li>\n<li>下载 <code>npm install babel-eslint eslint-config-airbnb -d</code><br><a href=\"http://eslint.cn/docs/user-guide/getting-started\">eslint官网</a></li>\n<li>eslint配置文件：.eslint.*(.eslint.js&#x2F;.eslint.json&#x2F;.eslint.yml)</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// .eslint.js</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel-eslint\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用的parser是babel-eslint，需要下载安装babel-eslint</span>\n    <span class=\"token string-property property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"airbnb\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 继承airbnb，需要安装</span>\n    <span class=\"token string-property property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 识别browser和node环境的一些全局变量</span>\n        <span class=\"token string-property property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string-property property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 定义规则</span>\n    <span class=\"token string-property property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string-property property\">\"indent\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">//indent空格， \"error\"错误级别、4是控制的空格数量</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"优化-resolve-配置\"><a href=\"#优化-resolve-配置\" class=\"headerlink\" title=\"优化 resolve 配置\"></a>优化 resolve 配置</h2><h3 id=\"alias\"><a href=\"#alias\" class=\"headerlink\" title=\"alias\"></a>alias</h3><p>alias 用的创建 import 或 require 的别名，用来简化模块引用，项目中基本都需要进行配置。</p>\n<p><a href=\"https://juejin.cn/post/7023242274876162084#heading-25\">优化 resolve 配置</a></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">...</span>\n<span class=\"token comment\">// 路径处理方法</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dir</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n <span class=\"token keyword\">const</span> config  <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 配置别名</span>\n    <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string-property property\">'~'</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">'@'</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string-property property\">'components'</span><span class=\"token operator\">:</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src/components'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>配置完成之后，我们在项目中就可以</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 使用 src 别名 ~ </span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'~/fonts/iconfont.css'</span>\n\n<span class=\"token comment\">// 使用 src 别名 @ </span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'@/fonts/iconfont.css'</span>\n\n<span class=\"token comment\">// 使用 components 别名</span>\n<span class=\"token keyword\">import</span> footer <span class=\"token keyword\">from</span> <span class=\"token string\">\"components/footer\"</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"extensions和modules\"><a href=\"#extensions和modules\" class=\"headerlink\" title=\"extensions和modules\"></a>extensions和modules</h3><ul>\n<li>如果用户引入模块时不带扩展名，那么 webpack 就会按照 extensions 配置的数组从左到右的顺序去尝试解析模块，高频文件后缀名放前面。</li>\n<li>modules，告诉 webpack 解析模块时应该搜索的目录，<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.wasm'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// webpack 默认配置</span>\n    <span class=\"token comment\">// 手动配置后，默认配置会被覆盖，如果想保留默认配置，可以用 ... 扩展运算符代表默认配置</span>\n    <span class=\"token comment\">// extensions: ['.ts', '...'],</span>\n    <span class=\"token literal-property property\">modules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"resolveLoader\"><a href=\"#resolveLoader\" class=\"headerlink\" title=\"resolveLoader\"></a>resolveLoader</h3><p>用于解析 webpack 的 loader 包，有自定义的 Loader 就需要配置一下，手写loader时可以用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token literal-property property\">resolveLoader</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">modules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'node_modules'</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span><span class=\"token string\">'loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"webpack构建速度和优化体积\"><a href=\"#webpack构建速度和优化体积\" class=\"headerlink\" title=\"webpack构建速度和优化体积\"></a>webpack构建速度和优化体积</h2><h3 id=\"使用webpack内置的stats分析\"><a href=\"#使用webpack内置的stats分析\" class=\"headerlink\" title=\"使用webpack内置的stats分析\"></a>使用webpack内置的stats分析</h3><pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"srcipts\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token property\">\"build:stats\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --env production --json > stats.json\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"速度分析：使用speed-measure-webpack-plugin\"><a href=\"#速度分析：使用speed-measure-webpack-plugin\" class=\"headerlink\" title=\"速度分析：使用speed-measure-webpack-plugin\"></a>速度分析：使用speed-measure-webpack-plugin</h3><ul>\n<li>分析整个打包的总耗时</li>\n<li>每个插件和loader的耗时情况</li>\n<li>和一些Loader或者Plugin新版本会不兼容，需要进行降级处理，如mini-css-extract-plugin、html-webpack-plugin</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> SpeedMeasureWebpackPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'speed-measure-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> smp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpeedMeasureWebpackPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> smp<span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">...</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"体积分析：使用webpack-bundle-analyzer\"><a href=\"#体积分析：使用webpack-bundle-analyzer\" class=\"headerlink\" title=\"体积分析：使用webpack-bundle-analyzer\"></a>体积分析：使用webpack-bundle-analyzer</h3><p>可以直观的看到打包结果中，文件的体积大小、各模块依赖关系、文件是够重复等问题，极大的方便我们在进行项目优化的时候，进行问题诊断</p>\n<ul>\n<li>构建完成后会在8888端口展示大小<img src=\"/images/engineering/webpack-bundle-analyzer-001.png\"></li>\n<li>依赖的第三方模块文件大小</li>\n<li>业务里面的组件代码大小</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> BundleAnalyzerPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-bundle-analyzer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">// 配置插件</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">BundleAnalyzerPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// analyzerMode: 'disabled',  // 不启动展示打包报告的http服务器</span>\n        <span class=\"token comment\">// generateStatsFile: true, // 是否生成stats.json文件</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"webpack4\"><a href=\"#webpack4\" class=\"headerlink\" title=\"webpack4\"></a>webpack4</h3><p>webpack4: 优化原因</p>\n<ul>\n<li>V8带来的优化(for of替代 forEach、Map和Set替代 Object、includes替代indexOf)</li>\n<li>默认使用更快的md4 hash 算法</li>\n<li>webpacks AST可以直接从loader传递给AST，减少解析时间</li>\n<li>使用字符串方法替代正则表达式</li>\n</ul>\n<h3 id=\"多进程-x2F-多实例构建：资源并行解析可选方案\"><a href=\"#多进程-x2F-多实例构建：资源并行解析可选方案\" class=\"headerlink\" title=\"多进程&#x2F;多实例构建：资源并行解析可选方案\"></a>多进程&#x2F;多实例构建：资源并行解析可选方案</h3><p>thread-loader</p>\n<ul>\n<li>parallel-webpack</li>\n<li>HappyPack（同样为开启多进程打包的工具，webpack5 已弃用）</li>\n</ul>\n<h3 id=\"多进程-x2F-多实例：并行压缩\"><a href=\"#多进程-x2F-多实例：并行压缩\" class=\"headerlink\" title=\"多进程&#x2F;多实例：并行压缩\"></a>多进程&#x2F;多实例：并行压缩</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> TerserPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'terser-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">minimizer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">TerserPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token literal-property property\">parallel</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">minimize</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"优化构建速度，缩小构建目标\"><a href=\"#优化构建速度，缩小构建目标\" class=\"headerlink\" title=\"优化构建速度，缩小构建目标\"></a>优化构建速度，缩小构建目标</h3><p>目的：尽可能的少构建模块，比如babel-loader不解析node_modules、减少文件搜索范围</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 同时使用多个loader  用use数组，多个可以直接配置</span>\n    <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token comment\">/* \n          开启多线程打包。 \n          进程启动大概为600ms，进程通信也有开销。\n          只有工作消耗时间比较长，才需要多线程打包\n      */</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'thread-loader'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">workers</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 进程2个</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">loader</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-loader'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n          <span class=\"token comment\">// 预设：指示babel做怎么样的兼容性处理</span>\n          <span class=\"token literal-property property\">presets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">[</span>\n              <span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 按需加载</span>\n                <span class=\"token literal-property property\">useBuiltIns</span><span class=\"token operator\">:</span> <span class=\"token string\">'usage'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// 指定core-js版本</span>\n                <span class=\"token literal-property property\">corejs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                  <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// 指定兼容性做到哪个版本浏览器</span>\n                <span class=\"token literal-property property\">targets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n                  <span class=\"token literal-property property\">chrome</span><span class=\"token operator\">:</span> <span class=\"token string\">'60'</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">firefox</span><span class=\"token operator\">:</span> <span class=\"token string\">'60'</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">ie</span><span class=\"token operator\">:</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">safari</span><span class=\"token operator\">:</span> <span class=\"token string\">'10'</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token literal-property property\">edge</span><span class=\"token operator\">:</span> <span class=\"token string\">'17'</span>\n                <span class=\"token punctuation\">&#125;</span>\n              <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// 开启babel缓存</span>\n          <span class=\"token comment\">// 第二次构建时，会读取之前的缓存, 速度会更快一点</span>\n          <span class=\"token literal-property property\">cacheDirectory</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"无用的CSS如何删除\"><a href=\"#无用的CSS如何删除\" class=\"headerlink\" title=\"无用的CSS如何删除\"></a>无用的CSS如何删除</h2><ul>\n<li>PurifyCSS:遍历代码，识别已经用到的CSS class</li>\n</ul>\n<p>使用purgecss-webpack-plugin，必须和mini-css-extract-plugin搭配使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> PurgecssPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'purgecss-webpack-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> MiniCssExtractPlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mini-css-extract-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> glob <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'glob'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PATHS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">src</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">MiniCssExtractPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[name]_[contenthash:8].css'</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">PurgecssPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token literal-property property\">paths</span><span class=\"token operator\">:</span> glob<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token constant\">PATHS</span><span class=\"token punctuation\">.</span>src<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/**/*</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">nodir</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>uncss: HTML需要通过jsdom加载，所有的样式通过PostCSS解析，通过document.querySelector来识别在html文件里面不存在的选择器</li>\n</ul>\n<h2 id=\"prefetch-与-preload\"><a href=\"#prefetch-与-preload\" class=\"headerlink\" title=\"prefetch 与 preload\"></a>prefetch 与 preload</h2><h3 id=\"prefetch\"><a href=\"#prefetch\" class=\"headerlink\" title=\"prefetch\"></a>prefetch</h3><p>prefetch (预获取)：等其他资源加载完毕，浏览器空闲了，会在使用之前，提前加载js文件</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n  通过js代码，让某个文件被单独打包成一个chunk\n  import动态导入语法：能将某个文件单独打包\n*/</span>\n<span class=\"token comment\">/* webpackChunkName: 'test' */</span>  <span class=\"token comment\">// 魔法注释当注解用了,标注打包后的文件名为test</span>\n<span class=\"token comment\">// 类似路由的懒加载</span>\n<span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: 'test' */</span><span class=\"token string\">'./test'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 按需加载  必定会分割代码，生成新的chunk</span>\nimg<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">/* webpackPrefetch: true */</span> <span class=\"token string\">'./desc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> element <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"preload\"><a href=\"#preload\" class=\"headerlink\" title=\"preload\"></a>preload</h3><p>preload (预加载)：提前加载后面会用到的关键资源，因为会提前拉取资源，如果不是特殊需要，谨慎使用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackPreload: true */</span> <span class=\"token string\">'ChartingLibrary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"全局环境变量\"><a href=\"#全局环境变量\" class=\"headerlink\" title=\"全局环境变量\"></a>全局环境变量</h2><p>通过 webpack 内置插件 DefinePlugin 定义 DEV 环境变量。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> webpack <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"webpack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">webpack<span class=\"token punctuation\">.</span>DefinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token constant\">ENV</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 推荐使用JSON.tringify，不仅可以处理字符串，还可以处理Object中的字符串和Array</span>\n      <span class=\"token constant\">HELLO</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"可维护的webpack构建配置\"><a href=\"#可维护的webpack构建配置\" class=\"headerlink\" title=\"可维护的webpack构建配置\"></a>可维护的webpack构建配置</h1><h2 id=\"构建配置抽离成npm包的意义\"><a href=\"#构建配置抽离成npm包的意义\" class=\"headerlink\" title=\"构建配置抽离成npm包的意义\"></a>构建配置抽离成npm包的意义</h2><ol>\n<li>通用性</li>\n</ol>\n<ul>\n<li>业务开发者无需关注构建配置</li>\n<li>统一团队构建脚本</li>\n</ul>\n<ol start=\"2\">\n<li>可维护性</li>\n</ol>\n<ul>\n<li>构建配置合理的拆分</li>\n<li>README文档、ChangeLog文档等</li>\n</ul>\n<ol start=\"3\">\n<li>质量</li>\n</ol>\n<ul>\n<li>冒烟测试、单元测试、测试覆盖率</li>\n<li>持续集成</li>\n</ul>\n<h2 id=\"构建配置管理的可选方案\"><a href=\"#构建配置管理的可选方案\" class=\"headerlink\" title=\"构建配置管理的可选方案\"></a>构建配置管理的可选方案</h2><ol>\n<li>通过多个配置文件管理不同环境的构建，webpack –config 参数进行控制</li>\n<li>将构建配置设计成一个库，比如: hjs-webpack、Neutrino、webpack-blocks</li>\n<li>抽成一个工具进行管理，比如: create-react-app, kyt, nwb（团队规模大抽成一个cli）</li>\n<li>将所有的配置放在一个文件，通过–env参数控制分支选择</li>\n</ol>\n<h2 id=\"构建配置包设计\"><a href=\"#构建配置包设计\" class=\"headerlink\" title=\"构建配置包设计\"></a>构建配置包设计</h2><h3 id=\"通过多个配置文件管理不同环境的webpack构建\"><a href=\"#通过多个配置文件管理不同环境的webpack构建\" class=\"headerlink\" title=\"通过多个配置文件管理不同环境的webpack构建\"></a>通过多个配置文件管理不同环境的webpack构建</h3><ul>\n<li>基础配置:webpack.base.js</li>\n<li>开发环境:webpack.dev.js</li>\n<li>生产环境:webpack.prod.js</li>\n<li>SSR环境:webpack.ssr.js</li>\n<li>…</li>\n</ul>\n<h3 id=\"抽离成一个npm包统一管理\"><a href=\"#抽离成一个npm包统一管理\" class=\"headerlink\" title=\"抽离成一个npm包统一管理\"></a>抽离成一个npm包统一管理</h3><ul>\n<li>规范: git commit日志、README、ESLint规范、Semver规范</li>\n</ul>\n<h3 id=\"通过webpack-merge组合配置\"><a href=\"#通过webpack-merge组合配置\" class=\"headerlink\" title=\"通过webpack-merge组合配置\"></a>通过webpack-merge组合配置</h3><p>合并配置</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> merge <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webpack-merge'</span><span class=\"token punctuation\">)</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>baseConfig<span class=\"token punctuation\">,</span> devConfig<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"功能模块设计\"><a href=\"#功能模块设计\" class=\"headerlink\" title=\"功能模块设计\"></a>功能模块设计</h3><img src=\"/images/engineering/webpack-config-001.png\">\n\n<h3 id=\"目录结构设计\"><a href=\"#目录结构设计\" class=\"headerlink\" title=\"目录结构设计\"></a>目录结构设计</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-/test <span class=\"token comment\"># 测试代码</span>\n-/lib <span class=\"token comment\"># 源代码</span>\n  - webpack.dev.js\n  - webpack.prod.js\n  - webpack.ssr.js\n  - webpack.base.js\nindex.js\nREADME.md\nCHANGELOG.md\n.eslinrc.js\npackage.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"webpack5\"><a href=\"#webpack5\" class=\"headerlink\" title=\"webpack5\"></a>webpack5</h1><ul>\n<li>node版本大于10.13.0</li>\n</ul>\n<h2 id=\"功能清除：清理弃用功能\"><a href=\"#功能清除：清理弃用功能\" class=\"headerlink\" title=\"功能清除：清理弃用功能\"></a>功能清除：清理弃用功能</h2><ul>\n<li>所有在webpack4里面被废弃的能力都被清除，因此需要确保webpack4没有打印警告。</li>\n<li>require.includes语法已被废弃，可以通过 Rule.parser.requirelnclude 将行为改为允许、废弃或禁用。预加载一些模块，并不会马上执行</li>\n<li>不再为Node.js模块引入polyfill，之前的版本是：如果某个模块依赖Node.js里面的核心模块，那么这个模块被引入的时候会把Node.js整个polyfill顺带引入。</li>\n</ul>\n<h2 id=\"长期缓存\"><a href=\"#长期缓存\" class=\"headerlink\" title=\"长期缓存\"></a>长期缓存</h2><p>确定的模块ld、chunk和导出名称。在生产模式下，默认的chunklds:”deterministic”, modulelds:”deterministic”。设置成deterministic时默认最小3位数会被使用，不会因为某一个文件发生了变化，其他的会产生变化。</p>\n<h3 id=\"chunklds\"><a href=\"#chunklds\" class=\"headerlink\" title=\"chunklds\"></a>chunklds</h3><table>\n<thead>\n<tr>\n<th>选项值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>natural</td>\n<td>按使用顺序的数字id。</td>\n</tr>\n<tr>\n<td>named</td>\n<td>对调试更友好的可读的id。</td>\n</tr>\n<tr>\n<td>deterministic</td>\n<td>在不同的编译中不变的短数字id。有益于长期缓存。在生产模式中会默认开启。</td>\n</tr>\n<tr>\n<td>size</td>\n<td>专注于让初始下载包大小更小的数字id。</td>\n</tr>\n<tr>\n<td>total-size</td>\n<td>专注于让总下载包大小更小的数字id。</td>\n</tr>\n</tbody></table>\n<h3 id=\"modulelds\"><a href=\"#modulelds\" class=\"headerlink\" title=\"modulelds\"></a>modulelds</h3><table>\n<thead>\n<tr>\n<th>选荐值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>natural</td>\n<td>按使用顺序的数字id。</td>\n</tr>\n<tr>\n<td>named</td>\n<td>对调试更友好的可读的id。</td>\n</tr>\n<tr>\n<td>deterministic</td>\n<td>被哈希转化成的小位数值模块名。</td>\n</tr>\n<tr>\n<td>size</td>\n<td>专注于让初始下载包大小更小的数字id。</td>\n</tr>\n</tbody></table>\n<h2 id=\"cache持久化缓存\"><a href=\"#cache持久化缓存\" class=\"headerlink\" title=\"cache持久化缓存\"></a>cache持久化缓存</h2><p>在webpack4里面，可以使用cache-loader将编译结果写入硬盘缓存，还可以使用babel-loader，设置option.cacheDirectory将babel-loader编译的结果写进磁盘。</p>\n<h3 id=\"webpack5缓存策略\"><a href=\"#webpack5缓存策略\" class=\"headerlink\" title=\"webpack5缓存策略\"></a>webpack5缓存策略</h3><ul>\n<li>默认开启缓存，缓存默认是在内存里。可以对cache进行设置。</li>\n<li>缓存淘汰策略︰文件缓存存储在node_modules&#x2F;.cache&#x2F;webpack，最大500MB，缓存时常两个星期，旧的缓存先淘汰</li>\n<li>后面打包可以直接利用它原生缓存的打包的能力</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports<span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 将缓存类型设置为文件系统</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'filesystem'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">buildDependencies</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 将你的 config添加为 buildDependency，以便在改变config时获得缓存无效</span>\n            <span class=\"token literal-property property\">config</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>__filename<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n            <span class=\"token comment\">// 如果你有其他的东西被构建依赖，你可以在这里添加它们</span>\n            <span class=\"token comment\">// 注意 webpack、加载器和所有从你的配置中引用的模块都会被自动添加</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"构建优化：TreeShaking\"><a href=\"#构建优化：TreeShaking\" class=\"headerlink\" title=\"构建优化：TreeShaking\"></a>构建优化：TreeShaking</h2><ul>\n<li>支持嵌套的TreeShaking</li>\n<li>可以分析这个模块直接的一个依赖关系</li>\n</ul>\n<h2 id=\"代码生成：支持生成ES6代码\"><a href=\"#代码生成：支持生成ES6代码\" class=\"headerlink\" title=\"代码生成：支持生成ES6代码\"></a>代码生成：支持生成ES6代码</h2><ul>\n<li>webpack 4之前只生成ES5的代码。webpack 5则现在既可以生成ES5又可以生成ES6&#x2F;ES2015代码。</li>\n<li>两种设置方式:<code>5 =&lt;ecmaVersion &lt;= 11或2009 =&lt; ecmaVersion &lt;= 2020</code></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">ecmaVersion</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 输出ES6代码</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"开创性的特性：模块联邦\"><a href=\"#开创性的特性：模块联邦\" class=\"headerlink\" title=\"开创性的特性：模块联邦\"></a>开创性的特性：模块联邦</h2><p>基本解释: 使一个JavaScript 应用在运行过程中可以动态加载另一个应用的代码，并支持共享依赖(CDN)。不再需要本地安装Npm包。<br>通过CDN加载，应用A通过一个CDN，它去加载应用B，然后这两个应用分别在不同的端口。使用组件或者模块的分享更加方便了</p>\n<ul>\n<li>Remote: 被依赖方，被Host消费的 Webpack构建，提供一些组件或者依赖出来，给其他的依赖方去用，相当于服务提供方。</li>\n<li>Host: 依赖方，消费其他 Remote 的 Webpack 构建，使用其他Remote提供的模块，</li>\n<li>一个应用可以是Host，也可以是Remote，也可以同时是Host和Remote</li>\n</ul>\n<h3 id=\"开创性的特性-ModuleFederationPlugin介绍\"><a href=\"#开创性的特性-ModuleFederationPlugin介绍\" class=\"headerlink\" title=\"开创性的特性: ModuleFederationPlugin介绍\"></a>开创性的特性: ModuleFederationPlugin介绍</h3><p>Webpack内部通过ModuleFederationPlugin 插件将多个应用结合起来。</p>\n<ul>\n<li>name: 必须，唯一ID，作为输出的模块名，使用的时通过 <code>$&#123;name&#125;/$&#123;expose&#125;</code>的方式使用;</li>\n<li>library: 必须，其中这里的name为作为umd的name;</li>\n<li>remotes: 可选，表示作为Host时，去消费哪些Remote;</li>\n<li>shared: 可选，优先用Host的依赖，如果Host没有，再用自己的;</li>\n<li>main.js: 应用主文件</li>\n<li>remoteEntry.js: 作为remote 时被引的文件</li>\n</ul>\n<h2 id=\"bundle和bundless\"><a href=\"#bundle和bundless\" class=\"headerlink\" title=\"bundle和bundless\"></a>bundle和bundless</h2><h3 id=\"bundle和bundless资源加载差异\"><a href=\"#bundle和bundless资源加载差异\" class=\"headerlink\" title=\"bundle和bundless资源加载差异\"></a>bundle和bundless资源加载差异</h3><ul>\n<li>bundle：浏览器加载的是构建好的文件，最开始会加载一个bundle.js；</li>\n<li>bundless: 直接加载原文件，不是加载构建好的文件；</li>\n</ul>\n<h3 id=\"bundle和bundless打包速度对比\"><a href=\"#bundle和bundless打包速度对比\" class=\"headerlink\" title=\"bundle和bundless打包速度对比\"></a>bundle和bundless打包速度对比</h3><ul>\n<li>bundless的冷启动时间大大缩短（使用esbuild）</li>\n<li>bundless的HMR速度不受整个项目体积影响，HMR效率高</li>\n<li>bundless的单文件粒度的缓存更优</li>\n<li>bundless在开发阶段的体验是更优的</li>\n</ul>\n<h3 id=\"vite构建速度快的原因\"><a href=\"#vite构建速度快的原因\" class=\"headerlink\" title=\"vite构建速度快的原因\"></a>vite构建速度快的原因</h3><p>预构建使用ESBuild（冷启动快的原因），ESBuild使用golang进行打包</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://time.geekbang.org/course/intro/100028901\">玩转 webpack</a></li>\n<li><a href=\"https://juejin.cn/post/7023242274876162084\">webpack知识体系</a></li>\n<li><a href=\"https://webpack.docschina.org/migrate/5/#update-outdated-options\">从v4升级到v5</a></li>\n<li><a href=\"https://webpack.docschina.org/guides/asset-modules/\">webpack5资源模块</a></li>\n<li><a href=\"https://juejin.cn/post/7023242274876162084\">webpack5资源模块的使用</a></li>\n<li><a href=\"https://juejin.cn/post/7062899360995999780\">构建webpack5知识体系</a></li>\n</ul>\n"},{"title":"React+Mobx6.0","date":"2022-04-16T18:05:10.000Z","toc":true,"comments":1,"copyright":false,"_content":"# mobx入门\n\n- 在 Mobx6 中不推荐使用装饰器语法，因为它不是 ES 标准\n- mobx：mobx 核心库\n- mobx-react-lite：仅支持函数组件\n- mobx-react：既支持函数组件也支持类组件\n- 下载 `npm install mobx@6.5.0 mobx-react-lite@3.3.0`\n\n# mobx核心概念\n\n- observable state：被 Mobx 跟踪的状态。\n- action：允许修改状态的方法，在严格模式下只有 action 方法被允许修改状态。\n- computed：根据应用程序状态派生的新值，计算值。\n- mobx 每次都是修改的同一个状态对象，基于响应式代理，也就是 Object.defineProperty 代理 get、set 的处理，get 时把依赖收集起来，set 修改时通知所有的依赖做更新。\n\n# mobx基础实践\n\n- [Mobx官方文档](https://zh.mobx.js.org/observable-state.html)\n\n- [React+Mobx6从入门到实践](https://juejin.cn/post/7063329425948934180)\n\n# 查看mobx的proxy对象的数据\n\n```js\nimport { toJS } from \"mobx\";\nconsole.log(toJS(user.name));\n```\n\n# 持久化存储mobx-persist-store\n\n解决页面刷新的时候数据会丢失的情况\n\n[mobx-persist-store文档](https://github.com/quarrant/mobx-persist-store)\n\n## makePersistable实践\n\n```js\nimport { makeAutoObservable, action, toJS } from \"mobx\";\nimport { makePersistable, isHydrated } from \"mobx-persist-store\"; // 引入相关api\n\n// import localForage from \"localforage\";  // localforage前端数据存储\n\nclass User {\n  token: string;\n  constructor() {\n    // 自动将已经存在的对象属性并且使得它们可观察，makeAutoObservable 不能被用于带有super的类或子类。\n    makeAutoObservable(this, {}, { autoBind: true });\n    // 数据持久化存储，在构造函数内使用 makePersistable\n    makePersistable(this, {\n      // 保存的name，用于在storage中的名称标识，只要不和storage中其他名称重复就可以\n      name: \"userInfo\",\n\n      // 注意：不写在这里面的字段将不会被保存，刷新页面也将丢失：get字段例外。get数据会在数据返回后再自动计算\n      properties: [\"token\"],\n\n      // 保存的位置：看自己的业务情况选择，可以是localStorage，sessionstorage\n      // localForage, window.localStorage\n      storage: window.localStorage,\n      // 还有一些其他配置参数，例如数据过期时间\n      expireIn: 86400000, // 以毫秒为单位，一天过期\n      removeOnExpiration: true, // 到期删除\n      stringify: false, // 是否转化成json字符串\n\n    }).then(action((persistStore) => {\n      // persist完成的回调，在这里可以执行一些拿到数据后需要执行的操作，如果在页面上要判断是否成persist，使用isHydrated\n      console.log(persistStore.isHydrated);\n    }))\n  }\n  // 注意这个字段的使用：在页面useEffect的时候，如果你没有添加依赖数组（初始化执行）\n  // 那么你可能拿不到computed计算的数据（原因是这时候还没有persist结束）所以这个属性还是比较重要的\n  // 因为它可以在页面上做判断，当页面load完成，get数据计算完成之后，isHydrated会置为true\n  get isHydrated() {\n      return isHydrated(this);\n  }\n\n  /**\n   * computed\n   */\n  get token() {\n    return this.token;\n  }\n  /**\n   * action\n   */\n  setToken(val) {\n    this.token = val || \"\";\n  }\n}\n\nexport default new User();\n```\n\n## 使用持久数据\n\n```js\n\nuseEffect(() => {\n  if (user.isHydrated) {\n    // ... 这个时候就可以拿到user里缓存的值\n  }\n  return () => {\n    // ... \n  }\n  // eslint-disable-next-line \n}, [user.isHydrated])\n```\n\n# Redux和Mobx的区别\n\n- Mobx是学习成本低，比较简单，自由度更高（可直接修改状态）；Redux写起来有点繁琐，创建store，编写reducer，触发action等等。\n- Mobx比较推荐面向对象编程的写法；Redux则是推荐函数式编程，如reducer就是一个纯函数。\n- Mobx中的数据可读可写，并且不一定需要 action 修改状态，可直接修改状态；Redux是单一数据源，State 是只读的。\n- 参考：[Redux和Mobx的区别](https://juejin.cn/post/6844903562095362056)\n","source":"_posts/front_end/react-mobx6.md","raw":"---\ntitle: React+Mobx6.0 \ndate: 2022-04-16 18:05:10\ncategories:\n  - 前端\ntags:\n  - React\ntoc: true # 是否启用内容索引\ncomments: true\ncopyright: false\n---\n# mobx入门\n\n- 在 Mobx6 中不推荐使用装饰器语法，因为它不是 ES 标准\n- mobx：mobx 核心库\n- mobx-react-lite：仅支持函数组件\n- mobx-react：既支持函数组件也支持类组件\n- 下载 `npm install mobx@6.5.0 mobx-react-lite@3.3.0`\n\n# mobx核心概念\n\n- observable state：被 Mobx 跟踪的状态。\n- action：允许修改状态的方法，在严格模式下只有 action 方法被允许修改状态。\n- computed：根据应用程序状态派生的新值，计算值。\n- mobx 每次都是修改的同一个状态对象，基于响应式代理，也就是 Object.defineProperty 代理 get、set 的处理，get 时把依赖收集起来，set 修改时通知所有的依赖做更新。\n\n# mobx基础实践\n\n- [Mobx官方文档](https://zh.mobx.js.org/observable-state.html)\n\n- [React+Mobx6从入门到实践](https://juejin.cn/post/7063329425948934180)\n\n# 查看mobx的proxy对象的数据\n\n```js\nimport { toJS } from \"mobx\";\nconsole.log(toJS(user.name));\n```\n\n# 持久化存储mobx-persist-store\n\n解决页面刷新的时候数据会丢失的情况\n\n[mobx-persist-store文档](https://github.com/quarrant/mobx-persist-store)\n\n## makePersistable实践\n\n```js\nimport { makeAutoObservable, action, toJS } from \"mobx\";\nimport { makePersistable, isHydrated } from \"mobx-persist-store\"; // 引入相关api\n\n// import localForage from \"localforage\";  // localforage前端数据存储\n\nclass User {\n  token: string;\n  constructor() {\n    // 自动将已经存在的对象属性并且使得它们可观察，makeAutoObservable 不能被用于带有super的类或子类。\n    makeAutoObservable(this, {}, { autoBind: true });\n    // 数据持久化存储，在构造函数内使用 makePersistable\n    makePersistable(this, {\n      // 保存的name，用于在storage中的名称标识，只要不和storage中其他名称重复就可以\n      name: \"userInfo\",\n\n      // 注意：不写在这里面的字段将不会被保存，刷新页面也将丢失：get字段例外。get数据会在数据返回后再自动计算\n      properties: [\"token\"],\n\n      // 保存的位置：看自己的业务情况选择，可以是localStorage，sessionstorage\n      // localForage, window.localStorage\n      storage: window.localStorage,\n      // 还有一些其他配置参数，例如数据过期时间\n      expireIn: 86400000, // 以毫秒为单位，一天过期\n      removeOnExpiration: true, // 到期删除\n      stringify: false, // 是否转化成json字符串\n\n    }).then(action((persistStore) => {\n      // persist完成的回调，在这里可以执行一些拿到数据后需要执行的操作，如果在页面上要判断是否成persist，使用isHydrated\n      console.log(persistStore.isHydrated);\n    }))\n  }\n  // 注意这个字段的使用：在页面useEffect的时候，如果你没有添加依赖数组（初始化执行）\n  // 那么你可能拿不到computed计算的数据（原因是这时候还没有persist结束）所以这个属性还是比较重要的\n  // 因为它可以在页面上做判断，当页面load完成，get数据计算完成之后，isHydrated会置为true\n  get isHydrated() {\n      return isHydrated(this);\n  }\n\n  /**\n   * computed\n   */\n  get token() {\n    return this.token;\n  }\n  /**\n   * action\n   */\n  setToken(val) {\n    this.token = val || \"\";\n  }\n}\n\nexport default new User();\n```\n\n## 使用持久数据\n\n```js\n\nuseEffect(() => {\n  if (user.isHydrated) {\n    // ... 这个时候就可以拿到user里缓存的值\n  }\n  return () => {\n    // ... \n  }\n  // eslint-disable-next-line \n}, [user.isHydrated])\n```\n\n# Redux和Mobx的区别\n\n- Mobx是学习成本低，比较简单，自由度更高（可直接修改状态）；Redux写起来有点繁琐，创建store，编写reducer，触发action等等。\n- Mobx比较推荐面向对象编程的写法；Redux则是推荐函数式编程，如reducer就是一个纯函数。\n- Mobx中的数据可读可写，并且不一定需要 action 修改状态，可直接修改状态；Redux是单一数据源，State 是只读的。\n- 参考：[Redux和Mobx的区别](https://juejin.cn/post/6844903562095362056)\n","slug":"front_end/react-mobx6","published":1,"updated":"2022-07-07T16:32:29.036Z","layout":"post","photos":[],"link":"","_id":"cl5f0bii4000sv4uwbgcw5zn6","content":"<h1 id=\"mobx入门\"><a href=\"#mobx入门\" class=\"headerlink\" title=\"mobx入门\"></a>mobx入门</h1><ul>\n<li>在 Mobx6 中不推荐使用装饰器语法，因为它不是 ES 标准</li>\n<li>mobx：mobx 核心库</li>\n<li>mobx-react-lite：仅支持函数组件</li>\n<li>mobx-react：既支持函数组件也支持类组件</li>\n<li>下载 <code>npm install mobx@6.5.0 mobx-react-lite@3.3.0</code></li>\n</ul>\n<h1 id=\"mobx核心概念\"><a href=\"#mobx核心概念\" class=\"headerlink\" title=\"mobx核心概念\"></a>mobx核心概念</h1><ul>\n<li>observable state：被 Mobx 跟踪的状态。</li>\n<li>action：允许修改状态的方法，在严格模式下只有 action 方法被允许修改状态。</li>\n<li>computed：根据应用程序状态派生的新值，计算值。</li>\n<li>mobx 每次都是修改的同一个状态对象，基于响应式代理，也就是 Object.defineProperty 代理 get、set 的处理，get 时把依赖收集起来，set 修改时通知所有的依赖做更新。</li>\n</ul>\n<h1 id=\"mobx基础实践\"><a href=\"#mobx基础实践\" class=\"headerlink\" title=\"mobx基础实践\"></a>mobx基础实践</h1><ul>\n<li><p><a href=\"https://zh.mobx.js.org/observable-state.html\">Mobx官方文档</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/7063329425948934180\">React+Mobx6从入门到实践</a></p>\n</li>\n</ul>\n<h1 id=\"查看mobx的proxy对象的数据\"><a href=\"#查看mobx的proxy对象的数据\" class=\"headerlink\" title=\"查看mobx的proxy对象的数据\"></a>查看mobx的proxy对象的数据</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> toJS <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toJS</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"持久化存储mobx-persist-store\"><a href=\"#持久化存储mobx-persist-store\" class=\"headerlink\" title=\"持久化存储mobx-persist-store\"></a>持久化存储mobx-persist-store</h1><p>解决页面刷新的时候数据会丢失的情况</p>\n<p><a href=\"https://github.com/quarrant/mobx-persist-store\">mobx-persist-store文档</a></p>\n<h2 id=\"makePersistable实践\"><a href=\"#makePersistable实践\" class=\"headerlink\" title=\"makePersistable实践\"></a>makePersistable实践</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> makeAutoObservable<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> toJS <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> makePersistable<span class=\"token punctuation\">,</span> isHydrated <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx-persist-store\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入相关api</span>\n\n<span class=\"token comment\">// import localForage from \"localforage\";  // localforage前端数据存储</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">token</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 自动将已经存在的对象属性并且使得它们可观察，makeAutoObservable 不能被用于带有super的类或子类。</span>\n    <span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">autoBind</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 数据持久化存储，在构造函数内使用 makePersistable</span>\n    <span class=\"token function\">makePersistable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 保存的name，用于在storage中的名称标识，只要不和storage中其他名称重复就可以</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"userInfo\"</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// 注意：不写在这里面的字段将不会被保存，刷新页面也将丢失：get字段例外。get数据会在数据返回后再自动计算</span>\n      <span class=\"token literal-property property\">properties</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// 保存的位置：看自己的业务情况选择，可以是localStorage，sessionstorage</span>\n      <span class=\"token comment\">// localForage, window.localStorage</span>\n      <span class=\"token literal-property property\">storage</span><span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 还有一些其他配置参数，例如数据过期时间</span>\n      <span class=\"token literal-property property\">expireIn</span><span class=\"token operator\">:</span> <span class=\"token number\">86400000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 以毫秒为单位，一天过期</span>\n      <span class=\"token literal-property property\">removeOnExpiration</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 到期删除</span>\n      <span class=\"token literal-property property\">stringify</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否转化成json字符串</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">persistStore</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// persist完成的回调，在这里可以执行一些拿到数据后需要执行的操作，如果在页面上要判断是否成persist，使用isHydrated</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>persistStore<span class=\"token punctuation\">.</span>isHydrated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 注意这个字段的使用：在页面useEffect的时候，如果你没有添加依赖数组（初始化执行）</span>\n  <span class=\"token comment\">// 那么你可能拿不到computed计算的数据（原因是这时候还没有persist结束）所以这个属性还是比较重要的</span>\n  <span class=\"token comment\">// 因为它可以在页面上做判断，当页面load完成，get数据计算完成之后，isHydrated会置为true</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">isHydrated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">isHydrated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">/**\n   * computed\n   */</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">token</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">/**\n   * action\n   */</span>\n  <span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> val <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用持久数据\"><a href=\"#使用持久数据\" class=\"headerlink\" title=\"使用持久数据\"></a>使用持久数据</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isHydrated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ... 这个时候就可以拿到user里缓存的值</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ... </span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// eslint-disable-next-line </span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">.</span>isHydrated<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Redux和Mobx的区别\"><a href=\"#Redux和Mobx的区别\" class=\"headerlink\" title=\"Redux和Mobx的区别\"></a>Redux和Mobx的区别</h1><ul>\n<li>Mobx是学习成本低，比较简单，自由度更高（可直接修改状态）；Redux写起来有点繁琐，创建store，编写reducer，触发action等等。</li>\n<li>Mobx比较推荐面向对象编程的写法；Redux则是推荐函数式编程，如reducer就是一个纯函数。</li>\n<li>Mobx中的数据可读可写，并且不一定需要 action 修改状态，可直接修改状态；Redux是单一数据源，State 是只读的。</li>\n<li>参考：<a href=\"https://juejin.cn/post/6844903562095362056\">Redux和Mobx的区别</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mobx入门\"><a href=\"#mobx入门\" class=\"headerlink\" title=\"mobx入门\"></a>mobx入门</h1><ul>\n<li>在 Mobx6 中不推荐使用装饰器语法，因为它不是 ES 标准</li>\n<li>mobx：mobx 核心库</li>\n<li>mobx-react-lite：仅支持函数组件</li>\n<li>mobx-react：既支持函数组件也支持类组件</li>\n<li>下载 <code>npm install mobx@6.5.0 mobx-react-lite@3.3.0</code></li>\n</ul>\n<h1 id=\"mobx核心概念\"><a href=\"#mobx核心概念\" class=\"headerlink\" title=\"mobx核心概念\"></a>mobx核心概念</h1><ul>\n<li>observable state：被 Mobx 跟踪的状态。</li>\n<li>action：允许修改状态的方法，在严格模式下只有 action 方法被允许修改状态。</li>\n<li>computed：根据应用程序状态派生的新值，计算值。</li>\n<li>mobx 每次都是修改的同一个状态对象，基于响应式代理，也就是 Object.defineProperty 代理 get、set 的处理，get 时把依赖收集起来，set 修改时通知所有的依赖做更新。</li>\n</ul>\n<h1 id=\"mobx基础实践\"><a href=\"#mobx基础实践\" class=\"headerlink\" title=\"mobx基础实践\"></a>mobx基础实践</h1><ul>\n<li><p><a href=\"https://zh.mobx.js.org/observable-state.html\">Mobx官方文档</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/7063329425948934180\">React+Mobx6从入门到实践</a></p>\n</li>\n</ul>\n<h1 id=\"查看mobx的proxy对象的数据\"><a href=\"#查看mobx的proxy对象的数据\" class=\"headerlink\" title=\"查看mobx的proxy对象的数据\"></a>查看mobx的proxy对象的数据</h1><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> toJS <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">toJS</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h1 id=\"持久化存储mobx-persist-store\"><a href=\"#持久化存储mobx-persist-store\" class=\"headerlink\" title=\"持久化存储mobx-persist-store\"></a>持久化存储mobx-persist-store</h1><p>解决页面刷新的时候数据会丢失的情况</p>\n<p><a href=\"https://github.com/quarrant/mobx-persist-store\">mobx-persist-store文档</a></p>\n<h2 id=\"makePersistable实践\"><a href=\"#makePersistable实践\" class=\"headerlink\" title=\"makePersistable实践\"></a>makePersistable实践</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> makeAutoObservable<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> toJS <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> makePersistable<span class=\"token punctuation\">,</span> isHydrated <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx-persist-store\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 引入相关api</span>\n\n<span class=\"token comment\">// import localForage from \"localforage\";  // localforage前端数据存储</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">token</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 自动将已经存在的对象属性并且使得它们可观察，makeAutoObservable 不能被用于带有super的类或子类。</span>\n    <span class=\"token function\">makeAutoObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">autoBind</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 数据持久化存储，在构造函数内使用 makePersistable</span>\n    <span class=\"token function\">makePersistable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 保存的name，用于在storage中的名称标识，只要不和storage中其他名称重复就可以</span>\n      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"userInfo\"</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// 注意：不写在这里面的字段将不会被保存，刷新页面也将丢失：get字段例外。get数据会在数据返回后再自动计算</span>\n      <span class=\"token literal-property property\">properties</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n      <span class=\"token comment\">// 保存的位置：看自己的业务情况选择，可以是localStorage，sessionstorage</span>\n      <span class=\"token comment\">// localForage, window.localStorage</span>\n      <span class=\"token literal-property property\">storage</span><span class=\"token operator\">:</span> window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// 还有一些其他配置参数，例如数据过期时间</span>\n      <span class=\"token literal-property property\">expireIn</span><span class=\"token operator\">:</span> <span class=\"token number\">86400000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 以毫秒为单位，一天过期</span>\n      <span class=\"token literal-property property\">removeOnExpiration</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 到期删除</span>\n      <span class=\"token literal-property property\">stringify</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否转化成json字符串</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">persistStore</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// persist完成的回调，在这里可以执行一些拿到数据后需要执行的操作，如果在页面上要判断是否成persist，使用isHydrated</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>persistStore<span class=\"token punctuation\">.</span>isHydrated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// 注意这个字段的使用：在页面useEffect的时候，如果你没有添加依赖数组（初始化执行）</span>\n  <span class=\"token comment\">// 那么你可能拿不到computed计算的数据（原因是这时候还没有persist结束）所以这个属性还是比较重要的</span>\n  <span class=\"token comment\">// 因为它可以在页面上做判断，当页面load完成，get数据计算完成之后，isHydrated会置为true</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">isHydrated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">isHydrated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">/**\n   * computed\n   */</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">token</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">/**\n   * action\n   */</span>\n  <span class=\"token function\">setToken</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> val <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用持久数据\"><a href=\"#使用持久数据\" class=\"headerlink\" title=\"使用持久数据\"></a>使用持久数据</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isHydrated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ... 这个时候就可以拿到user里缓存的值</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ... </span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token comment\">// eslint-disable-next-line </span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">.</span>isHydrated<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Redux和Mobx的区别\"><a href=\"#Redux和Mobx的区别\" class=\"headerlink\" title=\"Redux和Mobx的区别\"></a>Redux和Mobx的区别</h1><ul>\n<li>Mobx是学习成本低，比较简单，自由度更高（可直接修改状态）；Redux写起来有点繁琐，创建store，编写reducer，触发action等等。</li>\n<li>Mobx比较推荐面向对象编程的写法；Redux则是推荐函数式编程，如reducer就是一个纯函数。</li>\n<li>Mobx中的数据可读可写，并且不一定需要 action 修改状态，可直接修改状态；Redux是单一数据源，State 是只读的。</li>\n<li>参考：<a href=\"https://juejin.cn/post/6844903562095362056\">Redux和Mobx的区别</a></li>\n</ul>\n"},{"title":"React Hooks 总结","date":"2021-07-14T12:02:11.000Z","toc":true,"comments":1,"copyright":false,"_content":"## 为什么要设计Hooks，Hooks有什么优势？\n\n- 解决了 Class 组件存在的一些代码冗余、难以逻辑复用的问题，替代了高阶组件的负担，能够让代码更加容易理解和维护。\n- 让函数组件拥有类组件的一些特性，内部状态（useState）和类似 class 组件的生命周期（useEffect）。\n\n## 函数组件和类组件本质的区别是？\n\n- Class组件，底层只需要实例化一次，实例中保存了组件的 state 状态。对于每一次更新只需要调用 render 方法以及对应的生命周期就可以了。\n- Function组件，每一次更新都是一次新的函数执行，一次函数组件的更新，里面的变量会重新声明。React 对函数组件的调用，是采用直接执行函数的方式，而不是通过new的方式。\n\n## 使用Hooks需要注意的地方\n\n- 只在 function 组件和自定义 hooks 中使用 hooks。\n- 不能将 hooks 放在循环、条件语句或者嵌套方法内执行，原因是 react 是根据 hooks 出现顺序来记录对应状态的。\n\n## useState\n\n### useState基本使用\n\nuseState的参数可以是任意的值，也可以是一个函数，函数的返回值作为其初始值。\n\n```js\nconst [count, setCount] = useState(initialState)\n\nconst [state, setState] = useState(() => {\n    // 初始化initialState\n    return initialState;\n})\n```\n\nuseState 返回值为一个数组，数组的第一个参数为我们需要使用的 state，第二个参数为更新state的函数\n\n```js\nsetCount(0)\n\n// 需要获取上一个state的值\nsetCount(prevCount => prevCount + 1)  \n\n// state为对象时\nsetState(prevState => ({\n    ...prevState,\n    attr: 'value'\n}))\n\n// state为数组时\nsetArr((arr) => {\n    arr.push(5)\n    return [...arr]\n})\n```\n\n### useState为什么返回的是一个数组而不是一个对象？\n\n简单来说，数组解构是有顺序的，开发者可自定义名称，对象解构是根据对象的key解构。\n\n### useState的实现原理\n\n- 第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 count 增加 1。\n- 更新 state，触发再次渲染的时候，count 被重置为 0。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新。\n\n```js\nconst stateArr = []; // 多个状态，保存在一个全局容器 Array 中\nlet count = 0;\n\nfunction useState(initialState) {\n  const curCount = count;\n  stateArr[curCount] = stateArr[curCount] || initialState; // 检查是否渲染过\n\n  function dispatch(newState) {\n    stateArr[curCount] = newState;\n    render();  // 调用函数组件的render方法\n  }\n\n  ++count; // update: count\n  return [stateArr[curCount], dispatch];\n}\n```\n\n## useEffect\n\n```js\nuseEffect(effect, deps);\n```\n\n- 第一个参数为 effect 副作用函数，副作用函数返回值是一个回调函数returnFunction，这个回调函数不只是会在组件销毁时执行，而且是每次 Effect 重新执行之前都会先执行returnFunction，用于清理上一次 effect 的执行结果。\n- 每次组件 render 完成后，会根据deps里的依赖，是否要执行 effect\n- 第二个参数 deps 依赖的不同情况\n  - 没有依赖项，则每次 render 后都会重新执行，如果存在returnFunction则先执行returnFunction，再触发 effect（componentDidUpdate）\n  - 空数组作为依赖项，则只在第一次 render 后执行，对应到 Class 组件就是 componentDidMount\n  - returnFunction 用于在组件销毁的时候做一些清理的操作，比如移除事件的监听、定时器的清除（componentWillUnmount）\n- 依赖项中定义的变量一般是会在回调函数中用到的，否则声明依赖项其实是没有意义的。\n- React 会使用浅比较来对比依赖项是否发生了变化，所以要特别注意数组或者对象类型。如果你是每次创建一个新对象，即使和之前的值是等价的，也会被认为是依赖项发生了变化。（deps为非原始类型时，每次渲染都会发生改变）\n- 不要把 effect 写成一个 async 函数，useEffect 中约定 Effect 函数要么没有返回值，要么返回一个函数， async 函数会隐式地返回一个 Promise，直接违反了这一约定，会造成不可预测的结果。\n\n### useEffect的实现原理\n\n在 useEffect 的第二个参数中，我们可以指定一个数组，如果下次渲染时，数组中的元素没变，那么就不会触发这个副作用\n\n```javascript\n// 利用 Array + Count 的思路，不包括销毁副作用功能的 useEffect 的实现\nconst allDeps = [];\nlet effectCount = 0;\n\nfunction useEffect(callback, deps) {\n  if (!allDeps[effectCount]) {\n    // 初次渲染：赋值 + 调用回调函数\n    allDeps[effectCount] = deps;\n    ++effectCount;\n    callback();\n    return;\n  }\n\n  const currEffectCount = effectCount;\n  const rawDeps = allDeps[currEffectCount];\n  // 检测依赖项是否发生变化，发生变化需要重新render\n  const isChanged = rawDeps.some(\n    (dep, index) => dep !== deps[index]\n  );\n  if (isChanged) {\n    callback();\n  }\n  ++effectCount;\n}\n\nfunction render() {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n  effectCount = 0; // 注意将 effectCount 重置为0\n}\n```\n\n## useLayoutEffect\n\n```js\nuseLayoutEffect(effect, deps);\n```\n\nuseLayoutEffect 与 useEffect 使用方法一样，只是执行回调函数的时机不同。useLayoutEffect在浏览器执行绘制之前执行（会阻碍浏览器 paint，慎用），只有当我们需要进行DOM的操作时才使用该函数。\n\n```js\nuseLayoutEffect(() => {\n    console.log('useLayoutEffect————2')\n    return () => {\n        console.log('组件卸载了：useLayoutEffect————1')\n    }\n}, [deps])\nuseEffect(() => {\n    console.log('useEffect————4')\n    return () => {\n        console.log('组件卸载了：useEffect————3')\n    }\n}, [deps])\n// 监听的状态发生改变时： useLayoutEffect返回的函数（1） ——> useLayoutEffect（2） ——> useEffect返回的函数（3） ——> useEffect（4）\n```\n\n## useMemo\n\n- 第一个参数为一个回调函数，该函数返回一个缓存的值\n- 第一个参数为依赖项，依赖的值发生变化时，回调函数才会重新计算缓存数据\n- 这样避免在每次重新渲染时都进行复杂的数据计算\n\n```js\nfunction Counter({ countA,  countB}) {\n  const sum = useMemo(() => {\n    // ... 只有当countA 或 countB变化时才重新计算count\n    return countA + countB;\n  }, [countA, countB]);\n  \n  return (\n    <div>{sum}</div>\n  )\n}\n```\n\n### useMemo的实现原理\n\n```js\nfunction useMemo(fn, deps){\n   return useCallback(fn(), deps)\n}\n```\n\n## momo\n\n上个例子中，只要父组件render方法执行，Counter函数依旧会触发重新渲染，要让函数不执行，在最外层加上memo\n\n```js\nconst Counter = memo(({ countA,  countB}) => {\n  const sum = useMemo(() => {\n    // ... 只有当countA 或 countB变化时才重新计算count\n    return countA + countB;\n  }, [countA, countB]);\n  \n  return (\n    <div>{sum}</div>\n  )\n})\n```\n\n## useCallback\n\n- useCallback 的用法和 useMemo 类似，只有依赖项发生变化的时候，才需要重新创建一个回调函数，这样就保证了组件不会创建重复的回调函数。\n- 接收这个回调函数作为属性的组件，也不会频繁地需要重新渲染。\n- `useCallback(fn, deps) 等同于 useMemo(() => fn, deps)`\n\n```js\n// 这样，\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const handleIncrement = useCallback(() => setCount(count + 1), [count]);\n  // ...\n  return <button onClick={handleIncrement}>+</button>\n}\n```\n\n### useCallback实现原理\n\n```js\nlet memoizedState = null\nfunction useCallback(callback, deps) {\n  const nextDeps = (deps !== undefined ) && (deps !== null) ? deps : [callback]\n  const prevState = memoizedState;\n  if (prevState !== null) {\n    const prevDeps = prevState[1]\n    if (areHookdepsEqual(nextDeps, prevDeps)) {\n      return prevState[0]\n    }\n  }\n  memoizedState = [callback, nextDeps]\n  return callback\n}\n```\n\n## useRef\n\n- 组件的引用：返回一个可变的 ref 对象，该对象下面有一个 current 属性指向被引用对象的实例，当做 ref 正常使用时，和 createRef 效果一样。\n- useRef 返回的 ref 对象在组件的整个生命周期内保持不变，useRef 每次都会返回相同的引用，createRef 每次渲染都会重新创建 ref\n\n```js\nimport { React, useRef, createRef} from 'react'\n\nconst App = () => {\n  const inputElement = createRef()\n  const flieElement = useRef();\n\n  if (!inputElement.current) {\n    console.log('inputElement') // 函数重新执行时，每一次都打印\n  }\n\n  if (!flieElement.current) {\n    console.log('flieElement') // 只打印第一次\n  }\n\n  // flieElement.current.click() 上传文件\n  // inputElement.current.focus() 聚焦\n  return (\n    <>\n      <input type='text' ref={inputElement} />\n      <input type='flie' ref={flieElement} />\n    </>\n  )\n}\n```\n\n- useRef 可以拿到最新的值， current 指向初始化为传入的参数，可以存放任何变量\n\n```js\nconst refVal = useRef(value);\n// refVal.current => value\n\nconst [count, setCount] = useState(value)\nconst newCount = useRef()\nnew.current = count\n```\n\n## useImperativeHandle\n\n- useImperativeHandle 一般和 forwardRef 一起使用的，减少暴露给父组件的属性\n- forwardRef的作用是：引用父组件的 ref 实例，成为子组件的一个参数，可以引用父组件的 ref 绑定到子组件自身的节点上。它有两个参数，第一个是父组件传递的 props，第二个就是 ref 的引用\n\n```js\nforwardRef((props, ref) => {\n  // 父组件传来的 ref\n  return (\n   <input ref={ref}></input>\n  )\n})\n```\n\nuseImperativeHandle 有三个参数：\n\n- 第一个参数，接收一个通过 forwardRef 引用父组件的 ref 实例。\n- 第二个参数一个回调函数，返回一个对象，对象里面存储需要暴露给父组件的属性或方法。\n- 第三个参数为一个可选参数，该参数是一个依赖项数组deps。\n\n```js\nfunction Example(props, ref) {\n    const inputRef = useRef()\n    useImperativeHandle(ref, () => ({\n        // 父组件可以通过this.xxx.current.focus的方式使用子组件传递出去的focus方法\n        focus: () => {\n            inputRef.current.focus()\n        }\n    }))\n    return <input ref={inputRef} />\n}\n\nexport default forwardRef(Example)\n```\n\n```js\n// 父组件\nclass App extends Component {\n  constructor(props){\n      super(props)\n      this.inputRef = createRef()\n  }\n  \n  render() {\n    return (\n        <>\n          <Example ref={this.inputRef}/>\n          <button onClick={() => {this.inputRef.current.focus()}}>Click</button>\n        </>\n    )\n  }\n\n```\n\n## useReducer\n\n- useReducer是useState 的一种替代方案，它接收三个参数，第一个参数为一个 reducer 函数，第二个参数是reducer的初始值，第三个参数为可选参数，值为一个函数，可以用来惰性提供初始状态。\n- reducer 函数接受两个参数一个是 state 另一个是 action ，用法原理和 redux 中的 reducer\n\n```js\nconst [state, dispatch] = useReducer(reducer, initialArg, init)\n```\n\n```js\nfunction init(initialCount) { \n    return {count: initialCount}; \n} \n\nfunction reducer(state, action) { \n    switch (action.type) { \n        case 'increment': \n            return {count: state.count + 1}; \n        case 'decrement': \n            return {count: state.count - 1}; \n        case 'reset': \n            return init(action.payload); \n        default: \n            throw new Error(); \n    } \n} \n\nfunction Counter({initialCount}) { \n    const [state, dispatch] = useReducer(reducer, initialCount, init); \n    return ( \n     <> \n        Count: {state.count} \n        <button \n            onClick={() => dispatch({type: 'reset', payload: initialCount})}\n        > \n          Reset\n        </button> \n        <button onClick={() => dispatch({type: 'increment'})}>+</button> \n        <button onClick={() => dispatch({type: 'decrement'})}>-</button> \n     </> \n\t); \n} \n\nfunction render () { \n    ReactDOM.render(<Counter initialCount={0} />, document.getElementById('root')); \n}\n```\n\n## useContext\n\n- 定义全局状态，当这个 Context 的数据发生变化时，使用这个数据的组件就能够自动刷新\n- React 的开发中，我们很少会使用 Context 来做太多数据的共享，Context 更多的是提供了一个强大的机制，让 React 应用具备定义全局的响应式数据的能力。主要是用来实现 Theme(主题)、Language (多语)等功能\n\n```jsx\nconst globalContext = React.createContext()\n\nfunction App(){\n  return (\n    <globalContext.Provider value={'light'}>\n        <Count />\n    </globalContext.Provider>\n  )\n}\n\nfunction Count(props) {\n  const context = useContext(globalContext)\n  return (\n    <div>\n      {context} // light\n    </div>\n  )\n}\n```\n\n## 参考\n\n- [React Hooks 使用总结](https://juejin.cn/post/6850037283535880205)\n- [useEffect 完整指南](https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/)\n- [React Hooks 原理](https://github.com/brickspert/blog/issues/26)\n","source":"_posts/front_end/reacthooks.md","raw":"---\ntitle: React Hooks 总结\ndate: 2021-07-14 12:02:11\ncategories:\n  - 前端\ntags:\n  - React\ntoc: true # 是否启用内容索引\ncomments: true\ncopyright: false\n---\n## 为什么要设计Hooks，Hooks有什么优势？\n\n- 解决了 Class 组件存在的一些代码冗余、难以逻辑复用的问题，替代了高阶组件的负担，能够让代码更加容易理解和维护。\n- 让函数组件拥有类组件的一些特性，内部状态（useState）和类似 class 组件的生命周期（useEffect）。\n\n## 函数组件和类组件本质的区别是？\n\n- Class组件，底层只需要实例化一次，实例中保存了组件的 state 状态。对于每一次更新只需要调用 render 方法以及对应的生命周期就可以了。\n- Function组件，每一次更新都是一次新的函数执行，一次函数组件的更新，里面的变量会重新声明。React 对函数组件的调用，是采用直接执行函数的方式，而不是通过new的方式。\n\n## 使用Hooks需要注意的地方\n\n- 只在 function 组件和自定义 hooks 中使用 hooks。\n- 不能将 hooks 放在循环、条件语句或者嵌套方法内执行，原因是 react 是根据 hooks 出现顺序来记录对应状态的。\n\n## useState\n\n### useState基本使用\n\nuseState的参数可以是任意的值，也可以是一个函数，函数的返回值作为其初始值。\n\n```js\nconst [count, setCount] = useState(initialState)\n\nconst [state, setState] = useState(() => {\n    // 初始化initialState\n    return initialState;\n})\n```\n\nuseState 返回值为一个数组，数组的第一个参数为我们需要使用的 state，第二个参数为更新state的函数\n\n```js\nsetCount(0)\n\n// 需要获取上一个state的值\nsetCount(prevCount => prevCount + 1)  \n\n// state为对象时\nsetState(prevState => ({\n    ...prevState,\n    attr: 'value'\n}))\n\n// state为数组时\nsetArr((arr) => {\n    arr.push(5)\n    return [...arr]\n})\n```\n\n### useState为什么返回的是一个数组而不是一个对象？\n\n简单来说，数组解构是有顺序的，开发者可自定义名称，对象解构是根据对象的key解构。\n\n### useState的实现原理\n\n- 第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 count 增加 1。\n- 更新 state，触发再次渲染的时候，count 被重置为 0。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新。\n\n```js\nconst stateArr = []; // 多个状态，保存在一个全局容器 Array 中\nlet count = 0;\n\nfunction useState(initialState) {\n  const curCount = count;\n  stateArr[curCount] = stateArr[curCount] || initialState; // 检查是否渲染过\n\n  function dispatch(newState) {\n    stateArr[curCount] = newState;\n    render();  // 调用函数组件的render方法\n  }\n\n  ++count; // update: count\n  return [stateArr[curCount], dispatch];\n}\n```\n\n## useEffect\n\n```js\nuseEffect(effect, deps);\n```\n\n- 第一个参数为 effect 副作用函数，副作用函数返回值是一个回调函数returnFunction，这个回调函数不只是会在组件销毁时执行，而且是每次 Effect 重新执行之前都会先执行returnFunction，用于清理上一次 effect 的执行结果。\n- 每次组件 render 完成后，会根据deps里的依赖，是否要执行 effect\n- 第二个参数 deps 依赖的不同情况\n  - 没有依赖项，则每次 render 后都会重新执行，如果存在returnFunction则先执行returnFunction，再触发 effect（componentDidUpdate）\n  - 空数组作为依赖项，则只在第一次 render 后执行，对应到 Class 组件就是 componentDidMount\n  - returnFunction 用于在组件销毁的时候做一些清理的操作，比如移除事件的监听、定时器的清除（componentWillUnmount）\n- 依赖项中定义的变量一般是会在回调函数中用到的，否则声明依赖项其实是没有意义的。\n- React 会使用浅比较来对比依赖项是否发生了变化，所以要特别注意数组或者对象类型。如果你是每次创建一个新对象，即使和之前的值是等价的，也会被认为是依赖项发生了变化。（deps为非原始类型时，每次渲染都会发生改变）\n- 不要把 effect 写成一个 async 函数，useEffect 中约定 Effect 函数要么没有返回值，要么返回一个函数， async 函数会隐式地返回一个 Promise，直接违反了这一约定，会造成不可预测的结果。\n\n### useEffect的实现原理\n\n在 useEffect 的第二个参数中，我们可以指定一个数组，如果下次渲染时，数组中的元素没变，那么就不会触发这个副作用\n\n```javascript\n// 利用 Array + Count 的思路，不包括销毁副作用功能的 useEffect 的实现\nconst allDeps = [];\nlet effectCount = 0;\n\nfunction useEffect(callback, deps) {\n  if (!allDeps[effectCount]) {\n    // 初次渲染：赋值 + 调用回调函数\n    allDeps[effectCount] = deps;\n    ++effectCount;\n    callback();\n    return;\n  }\n\n  const currEffectCount = effectCount;\n  const rawDeps = allDeps[currEffectCount];\n  // 检测依赖项是否发生变化，发生变化需要重新render\n  const isChanged = rawDeps.some(\n    (dep, index) => dep !== deps[index]\n  );\n  if (isChanged) {\n    callback();\n  }\n  ++effectCount;\n}\n\nfunction render() {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n  effectCount = 0; // 注意将 effectCount 重置为0\n}\n```\n\n## useLayoutEffect\n\n```js\nuseLayoutEffect(effect, deps);\n```\n\nuseLayoutEffect 与 useEffect 使用方法一样，只是执行回调函数的时机不同。useLayoutEffect在浏览器执行绘制之前执行（会阻碍浏览器 paint，慎用），只有当我们需要进行DOM的操作时才使用该函数。\n\n```js\nuseLayoutEffect(() => {\n    console.log('useLayoutEffect————2')\n    return () => {\n        console.log('组件卸载了：useLayoutEffect————1')\n    }\n}, [deps])\nuseEffect(() => {\n    console.log('useEffect————4')\n    return () => {\n        console.log('组件卸载了：useEffect————3')\n    }\n}, [deps])\n// 监听的状态发生改变时： useLayoutEffect返回的函数（1） ——> useLayoutEffect（2） ——> useEffect返回的函数（3） ——> useEffect（4）\n```\n\n## useMemo\n\n- 第一个参数为一个回调函数，该函数返回一个缓存的值\n- 第一个参数为依赖项，依赖的值发生变化时，回调函数才会重新计算缓存数据\n- 这样避免在每次重新渲染时都进行复杂的数据计算\n\n```js\nfunction Counter({ countA,  countB}) {\n  const sum = useMemo(() => {\n    // ... 只有当countA 或 countB变化时才重新计算count\n    return countA + countB;\n  }, [countA, countB]);\n  \n  return (\n    <div>{sum}</div>\n  )\n}\n```\n\n### useMemo的实现原理\n\n```js\nfunction useMemo(fn, deps){\n   return useCallback(fn(), deps)\n}\n```\n\n## momo\n\n上个例子中，只要父组件render方法执行，Counter函数依旧会触发重新渲染，要让函数不执行，在最外层加上memo\n\n```js\nconst Counter = memo(({ countA,  countB}) => {\n  const sum = useMemo(() => {\n    // ... 只有当countA 或 countB变化时才重新计算count\n    return countA + countB;\n  }, [countA, countB]);\n  \n  return (\n    <div>{sum}</div>\n  )\n})\n```\n\n## useCallback\n\n- useCallback 的用法和 useMemo 类似，只有依赖项发生变化的时候，才需要重新创建一个回调函数，这样就保证了组件不会创建重复的回调函数。\n- 接收这个回调函数作为属性的组件，也不会频繁地需要重新渲染。\n- `useCallback(fn, deps) 等同于 useMemo(() => fn, deps)`\n\n```js\n// 这样，\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const handleIncrement = useCallback(() => setCount(count + 1), [count]);\n  // ...\n  return <button onClick={handleIncrement}>+</button>\n}\n```\n\n### useCallback实现原理\n\n```js\nlet memoizedState = null\nfunction useCallback(callback, deps) {\n  const nextDeps = (deps !== undefined ) && (deps !== null) ? deps : [callback]\n  const prevState = memoizedState;\n  if (prevState !== null) {\n    const prevDeps = prevState[1]\n    if (areHookdepsEqual(nextDeps, prevDeps)) {\n      return prevState[0]\n    }\n  }\n  memoizedState = [callback, nextDeps]\n  return callback\n}\n```\n\n## useRef\n\n- 组件的引用：返回一个可变的 ref 对象，该对象下面有一个 current 属性指向被引用对象的实例，当做 ref 正常使用时，和 createRef 效果一样。\n- useRef 返回的 ref 对象在组件的整个生命周期内保持不变，useRef 每次都会返回相同的引用，createRef 每次渲染都会重新创建 ref\n\n```js\nimport { React, useRef, createRef} from 'react'\n\nconst App = () => {\n  const inputElement = createRef()\n  const flieElement = useRef();\n\n  if (!inputElement.current) {\n    console.log('inputElement') // 函数重新执行时，每一次都打印\n  }\n\n  if (!flieElement.current) {\n    console.log('flieElement') // 只打印第一次\n  }\n\n  // flieElement.current.click() 上传文件\n  // inputElement.current.focus() 聚焦\n  return (\n    <>\n      <input type='text' ref={inputElement} />\n      <input type='flie' ref={flieElement} />\n    </>\n  )\n}\n```\n\n- useRef 可以拿到最新的值， current 指向初始化为传入的参数，可以存放任何变量\n\n```js\nconst refVal = useRef(value);\n// refVal.current => value\n\nconst [count, setCount] = useState(value)\nconst newCount = useRef()\nnew.current = count\n```\n\n## useImperativeHandle\n\n- useImperativeHandle 一般和 forwardRef 一起使用的，减少暴露给父组件的属性\n- forwardRef的作用是：引用父组件的 ref 实例，成为子组件的一个参数，可以引用父组件的 ref 绑定到子组件自身的节点上。它有两个参数，第一个是父组件传递的 props，第二个就是 ref 的引用\n\n```js\nforwardRef((props, ref) => {\n  // 父组件传来的 ref\n  return (\n   <input ref={ref}></input>\n  )\n})\n```\n\nuseImperativeHandle 有三个参数：\n\n- 第一个参数，接收一个通过 forwardRef 引用父组件的 ref 实例。\n- 第二个参数一个回调函数，返回一个对象，对象里面存储需要暴露给父组件的属性或方法。\n- 第三个参数为一个可选参数，该参数是一个依赖项数组deps。\n\n```js\nfunction Example(props, ref) {\n    const inputRef = useRef()\n    useImperativeHandle(ref, () => ({\n        // 父组件可以通过this.xxx.current.focus的方式使用子组件传递出去的focus方法\n        focus: () => {\n            inputRef.current.focus()\n        }\n    }))\n    return <input ref={inputRef} />\n}\n\nexport default forwardRef(Example)\n```\n\n```js\n// 父组件\nclass App extends Component {\n  constructor(props){\n      super(props)\n      this.inputRef = createRef()\n  }\n  \n  render() {\n    return (\n        <>\n          <Example ref={this.inputRef}/>\n          <button onClick={() => {this.inputRef.current.focus()}}>Click</button>\n        </>\n    )\n  }\n\n```\n\n## useReducer\n\n- useReducer是useState 的一种替代方案，它接收三个参数，第一个参数为一个 reducer 函数，第二个参数是reducer的初始值，第三个参数为可选参数，值为一个函数，可以用来惰性提供初始状态。\n- reducer 函数接受两个参数一个是 state 另一个是 action ，用法原理和 redux 中的 reducer\n\n```js\nconst [state, dispatch] = useReducer(reducer, initialArg, init)\n```\n\n```js\nfunction init(initialCount) { \n    return {count: initialCount}; \n} \n\nfunction reducer(state, action) { \n    switch (action.type) { \n        case 'increment': \n            return {count: state.count + 1}; \n        case 'decrement': \n            return {count: state.count - 1}; \n        case 'reset': \n            return init(action.payload); \n        default: \n            throw new Error(); \n    } \n} \n\nfunction Counter({initialCount}) { \n    const [state, dispatch] = useReducer(reducer, initialCount, init); \n    return ( \n     <> \n        Count: {state.count} \n        <button \n            onClick={() => dispatch({type: 'reset', payload: initialCount})}\n        > \n          Reset\n        </button> \n        <button onClick={() => dispatch({type: 'increment'})}>+</button> \n        <button onClick={() => dispatch({type: 'decrement'})}>-</button> \n     </> \n\t); \n} \n\nfunction render () { \n    ReactDOM.render(<Counter initialCount={0} />, document.getElementById('root')); \n}\n```\n\n## useContext\n\n- 定义全局状态，当这个 Context 的数据发生变化时，使用这个数据的组件就能够自动刷新\n- React 的开发中，我们很少会使用 Context 来做太多数据的共享，Context 更多的是提供了一个强大的机制，让 React 应用具备定义全局的响应式数据的能力。主要是用来实现 Theme(主题)、Language (多语)等功能\n\n```jsx\nconst globalContext = React.createContext()\n\nfunction App(){\n  return (\n    <globalContext.Provider value={'light'}>\n        <Count />\n    </globalContext.Provider>\n  )\n}\n\nfunction Count(props) {\n  const context = useContext(globalContext)\n  return (\n    <div>\n      {context} // light\n    </div>\n  )\n}\n```\n\n## 参考\n\n- [React Hooks 使用总结](https://juejin.cn/post/6850037283535880205)\n- [useEffect 完整指南](https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/)\n- [React Hooks 原理](https://github.com/brickspert/blog/issues/26)\n","slug":"front_end/reacthooks","published":1,"updated":"2022-07-10T09:29:39.454Z","_id":"cl5f0bii5000uv4uw8rfke59d","layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么要设计Hooks，Hooks有什么优势？\"><a href=\"#为什么要设计Hooks，Hooks有什么优势？\" class=\"headerlink\" title=\"为什么要设计Hooks，Hooks有什么优势？\"></a>为什么要设计Hooks，Hooks有什么优势？</h2><ul>\n<li>解决了 Class 组件存在的一些代码冗余、难以逻辑复用的问题，替代了高阶组件的负担，能够让代码更加容易理解和维护。</li>\n<li>让函数组件拥有类组件的一些特性，内部状态（useState）和类似 class 组件的生命周期（useEffect）。</li>\n</ul>\n<h2 id=\"函数组件和类组件本质的区别是？\"><a href=\"#函数组件和类组件本质的区别是？\" class=\"headerlink\" title=\"函数组件和类组件本质的区别是？\"></a>函数组件和类组件本质的区别是？</h2><ul>\n<li>Class组件，底层只需要实例化一次，实例中保存了组件的 state 状态。对于每一次更新只需要调用 render 方法以及对应的生命周期就可以了。</li>\n<li>Function组件，每一次更新都是一次新的函数执行，一次函数组件的更新，里面的变量会重新声明。React 对函数组件的调用，是采用直接执行函数的方式，而不是通过new的方式。</li>\n</ul>\n<h2 id=\"使用Hooks需要注意的地方\"><a href=\"#使用Hooks需要注意的地方\" class=\"headerlink\" title=\"使用Hooks需要注意的地方\"></a>使用Hooks需要注意的地方</h2><ul>\n<li>只在 function 组件和自定义 hooks 中使用 hooks。</li>\n<li>不能将 hooks 放在循环、条件语句或者嵌套方法内执行，原因是 react 是根据 hooks 出现顺序来记录对应状态的。</li>\n</ul>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><h3 id=\"useState基本使用\"><a href=\"#useState基本使用\" class=\"headerlink\" title=\"useState基本使用\"></a>useState基本使用</h3><p>useState的参数可以是任意的值，也可以是一个函数，函数的返回值作为其初始值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 初始化initialState</span>\n    <span class=\"token keyword\">return</span> initialState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>useState 返回值为一个数组，数组的第一个参数为我们需要使用的 state，第二个参数为更新state的函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 需要获取上一个state的值</span>\n<span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevCount</span> <span class=\"token operator\">=></span> prevCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n\n<span class=\"token comment\">// state为对象时</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">attr</span><span class=\"token operator\">:</span> <span class=\"token string\">'value'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// state为数组时</span>\n<span class=\"token function\">setArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"useState为什么返回的是一个数组而不是一个对象？\"><a href=\"#useState为什么返回的是一个数组而不是一个对象？\" class=\"headerlink\" title=\"useState为什么返回的是一个数组而不是一个对象？\"></a>useState为什么返回的是一个数组而不是一个对象？</h3><p>简单来说，数组解构是有顺序的，开发者可自定义名称，对象解构是根据对象的key解构。</p>\n<h3 id=\"useState的实现原理\"><a href=\"#useState的实现原理\" class=\"headerlink\" title=\"useState的实现原理\"></a>useState的实现原理</h3><ul>\n<li>第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 count 增加 1。</li>\n<li>更新 state，触发再次渲染的时候，count 被重置为 0。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> stateArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 多个状态，保存在一个全局容器 Array 中</span>\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> curCount <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n  stateArr<span class=\"token punctuation\">[</span>curCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stateArr<span class=\"token punctuation\">[</span>curCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> initialState<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 检查是否渲染过</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stateArr<span class=\"token punctuation\">[</span>curCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用函数组件的render方法</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span> <span class=\"token comment\">// update: count</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>stateArr<span class=\"token punctuation\">[</span>curCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>第一个参数为 effect 副作用函数，副作用函数返回值是一个回调函数returnFunction，这个回调函数不只是会在组件销毁时执行，而且是每次 Effect 重新执行之前都会先执行returnFunction，用于清理上一次 effect 的执行结果。</li>\n<li>每次组件 render 完成后，会根据deps里的依赖，是否要执行 effect</li>\n<li>第二个参数 deps 依赖的不同情况<ul>\n<li>没有依赖项，则每次 render 后都会重新执行，如果存在returnFunction则先执行returnFunction，再触发 effect（componentDidUpdate）</li>\n<li>空数组作为依赖项，则只在第一次 render 后执行，对应到 Class 组件就是 componentDidMount</li>\n<li>returnFunction 用于在组件销毁的时候做一些清理的操作，比如移除事件的监听、定时器的清除（componentWillUnmount）</li>\n</ul>\n</li>\n<li>依赖项中定义的变量一般是会在回调函数中用到的，否则声明依赖项其实是没有意义的。</li>\n<li>React 会使用浅比较来对比依赖项是否发生了变化，所以要特别注意数组或者对象类型。如果你是每次创建一个新对象，即使和之前的值是等价的，也会被认为是依赖项发生了变化。（deps为非原始类型时，每次渲染都会发生改变）</li>\n<li>不要把 effect 写成一个 async 函数，useEffect 中约定 Effect 函数要么没有返回值，要么返回一个函数， async 函数会隐式地返回一个 Promise，直接违反了这一约定，会造成不可预测的结果。</li>\n</ul>\n<h3 id=\"useEffect的实现原理\"><a href=\"#useEffect的实现原理\" class=\"headerlink\" title=\"useEffect的实现原理\"></a>useEffect的实现原理</h3><p>在 useEffect 的第二个参数中，我们可以指定一个数组，如果下次渲染时，数组中的元素没变，那么就不会触发这个副作用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 利用 Array + Count 的思路，不包括销毁副作用功能的 useEffect 的实现</span>\n<span class=\"token keyword\">const</span> allDeps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> effectCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> deps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>allDeps<span class=\"token punctuation\">[</span>effectCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 初次渲染：赋值 + 调用回调函数</span>\n    allDeps<span class=\"token punctuation\">[</span>effectCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> deps<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>effectCount<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">const</span> currEffectCount <span class=\"token operator\">=</span> effectCount<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> rawDeps <span class=\"token operator\">=</span> allDeps<span class=\"token punctuation\">[</span>currEffectCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 检测依赖项是否发生变化，发生变化需要重新render</span>\n  <span class=\"token keyword\">const</span> isChanged <span class=\"token operator\">=</span> rawDeps<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">dep<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> dep <span class=\"token operator\">!==</span> deps<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isChanged<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token operator\">++</span>effectCount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  effectCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意将 effectCount 重置为0</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useLayoutEffect\"><a href=\"#useLayoutEffect\" class=\"headerlink\" title=\"useLayoutEffect\"></a>useLayoutEffect</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>useLayoutEffect 与 useEffect 使用方法一样，只是执行回调函数的时机不同。useLayoutEffect在浏览器执行绘制之前执行（会阻碍浏览器 paint，慎用），只有当我们需要进行DOM的操作时才使用该函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'useLayoutEffect————2'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'组件卸载了：useLayoutEffect————1'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>deps<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'useEffect————4'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'组件卸载了：useEffect————3'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>deps<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 监听的状态发生改变时： useLayoutEffect返回的函数（1） ——> useLayoutEffect（2） ——> useEffect返回的函数（3） ——> useEffect（4）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><ul>\n<li>第一个参数为一个回调函数，该函数返回一个缓存的值</li>\n<li>第一个参数为依赖项，依赖的值发生变化时，回调函数才会重新计算缓存数据</li>\n<li>这样避免在每次重新渲染时都进行复杂的数据计算</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> countA<span class=\"token punctuation\">,</span>  countB<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ... 只有当countA 或 countB变化时才重新计算count</span>\n    <span class=\"token keyword\">return</span> countA <span class=\"token operator\">+</span> countB<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>countA<span class=\"token punctuation\">,</span> countB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>sum<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"useMemo的实现原理\"><a href=\"#useMemo的实现原理\" class=\"headerlink\" title=\"useMemo的实现原理\"></a>useMemo的实现原理</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> deps</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"momo\"><a href=\"#momo\" class=\"headerlink\" title=\"momo\"></a>momo</h2><p>上个例子中，只要父组件render方法执行，Counter函数依旧会触发重新渲染，要让函数不执行，在最外层加上memo</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Counter <span class=\"token operator\">=</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> countA<span class=\"token punctuation\">,</span>  countB<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ... 只有当countA 或 countB变化时才重新计算count</span>\n    <span class=\"token keyword\">return</span> countA <span class=\"token operator\">+</span> countB<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>countA<span class=\"token punctuation\">,</span> countB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>sum<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><ul>\n<li>useCallback 的用法和 useMemo 类似，只有依赖项发生变化的时候，才需要重新创建一个回调函数，这样就保证了组件不会创建重复的回调函数。</li>\n<li>接收这个回调函数作为属性的组件，也不会频繁地需要重新渲染。</li>\n<li><code>useCallback(fn, deps) 等同于 useMemo(() =&gt; fn, deps)</code></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 这样，</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> handleIncrement <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handleIncrement<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"useCallback实现原理\"><a href=\"#useCallback实现原理\" class=\"headerlink\" title=\"useCallback实现原理\"></a>useCallback实现原理</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> memoizedState <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> deps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> nextDeps <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>deps <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>deps <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> deps <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>callback<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> prevState <span class=\"token operator\">=</span> memoizedState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevState <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> prevDeps <span class=\"token operator\">=</span> prevState<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">areHookdepsEqual</span><span class=\"token punctuation\">(</span>nextDeps<span class=\"token punctuation\">,</span> prevDeps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> prevState<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  memoizedState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>callback<span class=\"token punctuation\">,</span> nextDeps<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> callback\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><ul>\n<li>组件的引用：返回一个可变的 ref 对象，该对象下面有一个 current 属性指向被引用对象的实例，当做 ref 正常使用时，和 createRef 效果一样。</li>\n<li>useRef 返回的 ref 对象在组件的整个生命周期内保持不变，useRef 每次都会返回相同的引用，createRef 每次渲染都会重新创建 ref</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> React<span class=\"token punctuation\">,</span> useRef<span class=\"token punctuation\">,</span> createRef<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> inputElement <span class=\"token operator\">=</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> flieElement <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inputElement<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inputElement'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 函数重新执行时，每一次都打印</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flieElement<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flieElement'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 只打印第一次</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// flieElement.current.click() 上传文件</span>\n  <span class=\"token comment\">// inputElement.current.focus() 聚焦</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">'text'</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>inputElement<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">'flie'</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>flieElement<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>useRef 可以拿到最新的值， current 指向初始化为传入的参数，可以存放任何变量</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> refVal <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// refVal.current => value</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> newCount <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> count<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useImperativeHandle\"><a href=\"#useImperativeHandle\" class=\"headerlink\" title=\"useImperativeHandle\"></a>useImperativeHandle</h2><ul>\n<li>useImperativeHandle 一般和 forwardRef 一起使用的，减少暴露给父组件的属性</li>\n<li>forwardRef的作用是：引用父组件的 ref 实例，成为子组件的一个参数，可以引用父组件的 ref 绑定到子组件自身的节点上。它有两个参数，第一个是父组件传递的 props，第二个就是 ref 的引用</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 父组件传来的 ref</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n   <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>ref<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>input<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>useImperativeHandle 有三个参数：</p>\n<ul>\n<li>第一个参数，接收一个通过 forwardRef 引用父组件的 ref 实例。</li>\n<li>第二个参数一个回调函数，返回一个对象，对象里面存储需要暴露给父组件的属性或方法。</li>\n<li>第三个参数为一个可选参数，该参数是一个依赖项数组deps。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 父组件可以通过this.xxx.current.focus的方式使用子组件传递出去的focus方法</span>\n        <span class=\"token function-variable function\">focus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>inputRef<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>Example<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 父组件</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef <span class=\"token operator\">=</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Example ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Click<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><ul>\n<li>useReducer是useState 的一种替代方案，它接收三个参数，第一个参数为一个 reducer 函数，第二个参数是reducer的初始值，第三个参数为可选参数，值为一个函数，可以用来惰性提供初始状态。</li>\n<li>reducer 函数接受两个参数一个是 state 另一个是 action ，用法原理和 redux 中的 reducer</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialArg<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> initialCount<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">case</span> <span class=\"token string\">'increment'</span><span class=\"token operator\">:</span> \n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">case</span> <span class=\"token string\">'decrement'</span><span class=\"token operator\">:</span> \n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">case</span> <span class=\"token string\">'reset'</span><span class=\"token operator\">:</span> \n            <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> \n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>initialCount<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialCount<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> \n     <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span> \n        <span class=\"token literal-property property\">Count</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span> \n        <span class=\"token operator\">&lt;</span>button \n            onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> initialCount<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token operator\">></span> \n          Reset\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> \n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> \n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> \n     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span> \n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Counter initialCount<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><ul>\n<li>定义全局状态，当这个 Context 的数据发生变化时，使用这个数据的组件就能够自动刷新</li>\n<li>React 的开发中，我们很少会使用 Context 来做太多数据的共享，Context 更多的是提供了一个强大的机制，让 React 应用具备定义全局的响应式数据的能力。主要是用来实现 Theme(主题)、Language (多语)等功能</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> globalContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>globalContext.Provider</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Count</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>globalContext.Provider</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>globalContext<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">&#123;</span>context<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"> // light\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://juejin.cn/post/6850037283535880205\">React Hooks 使用总结</a></li>\n<li><a href=\"https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/\">useEffect 完整指南</a></li>\n<li><a href=\"https://github.com/brickspert/blog/issues/26\">React Hooks 原理</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么要设计Hooks，Hooks有什么优势？\"><a href=\"#为什么要设计Hooks，Hooks有什么优势？\" class=\"headerlink\" title=\"为什么要设计Hooks，Hooks有什么优势？\"></a>为什么要设计Hooks，Hooks有什么优势？</h2><ul>\n<li>解决了 Class 组件存在的一些代码冗余、难以逻辑复用的问题，替代了高阶组件的负担，能够让代码更加容易理解和维护。</li>\n<li>让函数组件拥有类组件的一些特性，内部状态（useState）和类似 class 组件的生命周期（useEffect）。</li>\n</ul>\n<h2 id=\"函数组件和类组件本质的区别是？\"><a href=\"#函数组件和类组件本质的区别是？\" class=\"headerlink\" title=\"函数组件和类组件本质的区别是？\"></a>函数组件和类组件本质的区别是？</h2><ul>\n<li>Class组件，底层只需要实例化一次，实例中保存了组件的 state 状态。对于每一次更新只需要调用 render 方法以及对应的生命周期就可以了。</li>\n<li>Function组件，每一次更新都是一次新的函数执行，一次函数组件的更新，里面的变量会重新声明。React 对函数组件的调用，是采用直接执行函数的方式，而不是通过new的方式。</li>\n</ul>\n<h2 id=\"使用Hooks需要注意的地方\"><a href=\"#使用Hooks需要注意的地方\" class=\"headerlink\" title=\"使用Hooks需要注意的地方\"></a>使用Hooks需要注意的地方</h2><ul>\n<li>只在 function 组件和自定义 hooks 中使用 hooks。</li>\n<li>不能将 hooks 放在循环、条件语句或者嵌套方法内执行，原因是 react 是根据 hooks 出现顺序来记录对应状态的。</li>\n</ul>\n<h2 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h2><h3 id=\"useState基本使用\"><a href=\"#useState基本使用\" class=\"headerlink\" title=\"useState基本使用\"></a>useState基本使用</h3><p>useState的参数可以是任意的值，也可以是一个函数，函数的返回值作为其初始值。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 初始化initialState</span>\n    <span class=\"token keyword\">return</span> initialState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>useState 返回值为一个数组，数组的第一个参数为我们需要使用的 state，第二个参数为更新state的函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 需要获取上一个state的值</span>\n<span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevCount</span> <span class=\"token operator\">=></span> prevCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  \n\n<span class=\"token comment\">// state为对象时</span>\n<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevState</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">...</span>prevState<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">attr</span><span class=\"token operator\">:</span> <span class=\"token string\">'value'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// state为数组时</span>\n<span class=\"token function\">setArr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"useState为什么返回的是一个数组而不是一个对象？\"><a href=\"#useState为什么返回的是一个数组而不是一个对象？\" class=\"headerlink\" title=\"useState为什么返回的是一个数组而不是一个对象？\"></a>useState为什么返回的是一个数组而不是一个对象？</h3><p>简单来说，数组解构是有顺序的，开发者可自定义名称，对象解构是根据对象的key解构。</p>\n<h3 id=\"useState的实现原理\"><a href=\"#useState的实现原理\" class=\"headerlink\" title=\"useState的实现原理\"></a>useState的实现原理</h3><ul>\n<li>第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 count 增加 1。</li>\n<li>更新 state，触发再次渲染的时候，count 被重置为 0。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> stateArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 多个状态，保存在一个全局容器 Array 中</span>\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> curCount <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n  stateArr<span class=\"token punctuation\">[</span>curCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> stateArr<span class=\"token punctuation\">[</span>curCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> initialState<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 检查是否渲染过</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    stateArr<span class=\"token punctuation\">[</span>curCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newState<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用函数组件的render方法</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span> <span class=\"token comment\">// update: count</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>stateArr<span class=\"token punctuation\">[</span>curCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>第一个参数为 effect 副作用函数，副作用函数返回值是一个回调函数returnFunction，这个回调函数不只是会在组件销毁时执行，而且是每次 Effect 重新执行之前都会先执行returnFunction，用于清理上一次 effect 的执行结果。</li>\n<li>每次组件 render 完成后，会根据deps里的依赖，是否要执行 effect</li>\n<li>第二个参数 deps 依赖的不同情况<ul>\n<li>没有依赖项，则每次 render 后都会重新执行，如果存在returnFunction则先执行returnFunction，再触发 effect（componentDidUpdate）</li>\n<li>空数组作为依赖项，则只在第一次 render 后执行，对应到 Class 组件就是 componentDidMount</li>\n<li>returnFunction 用于在组件销毁的时候做一些清理的操作，比如移除事件的监听、定时器的清除（componentWillUnmount）</li>\n</ul>\n</li>\n<li>依赖项中定义的变量一般是会在回调函数中用到的，否则声明依赖项其实是没有意义的。</li>\n<li>React 会使用浅比较来对比依赖项是否发生了变化，所以要特别注意数组或者对象类型。如果你是每次创建一个新对象，即使和之前的值是等价的，也会被认为是依赖项发生了变化。（deps为非原始类型时，每次渲染都会发生改变）</li>\n<li>不要把 effect 写成一个 async 函数，useEffect 中约定 Effect 函数要么没有返回值，要么返回一个函数， async 函数会隐式地返回一个 Promise，直接违反了这一约定，会造成不可预测的结果。</li>\n</ul>\n<h3 id=\"useEffect的实现原理\"><a href=\"#useEffect的实现原理\" class=\"headerlink\" title=\"useEffect的实现原理\"></a>useEffect的实现原理</h3><p>在 useEffect 的第二个参数中，我们可以指定一个数组，如果下次渲染时，数组中的元素没变，那么就不会触发这个副作用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 利用 Array + Count 的思路，不包括销毁副作用功能的 useEffect 的实现</span>\n<span class=\"token keyword\">const</span> allDeps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> effectCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> deps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>allDeps<span class=\"token punctuation\">[</span>effectCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 初次渲染：赋值 + 调用回调函数</span>\n    allDeps<span class=\"token punctuation\">[</span>effectCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> deps<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>effectCount<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">const</span> currEffectCount <span class=\"token operator\">=</span> effectCount<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> rawDeps <span class=\"token operator\">=</span> allDeps<span class=\"token punctuation\">[</span>currEffectCount<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 检测依赖项是否发生变化，发生变化需要重新render</span>\n  <span class=\"token keyword\">const</span> isChanged <span class=\"token operator\">=</span> rawDeps<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">dep<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> dep <span class=\"token operator\">!==</span> deps<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isChanged<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token operator\">++</span>effectCount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  effectCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意将 effectCount 重置为0</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useLayoutEffect\"><a href=\"#useLayoutEffect\" class=\"headerlink\" title=\"useLayoutEffect\"></a>useLayoutEffect</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span>effect<span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>useLayoutEffect 与 useEffect 使用方法一样，只是执行回调函数的时机不同。useLayoutEffect在浏览器执行绘制之前执行（会阻碍浏览器 paint，慎用），只有当我们需要进行DOM的操作时才使用该函数。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'useLayoutEffect————2'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'组件卸载了：useLayoutEffect————1'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>deps<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'useEffect————4'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'组件卸载了：useEffect————3'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>deps<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 监听的状态发生改变时： useLayoutEffect返回的函数（1） ——> useLayoutEffect（2） ——> useEffect返回的函数（3） ——> useEffect（4）</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><ul>\n<li>第一个参数为一个回调函数，该函数返回一个缓存的值</li>\n<li>第一个参数为依赖项，依赖的值发生变化时，回调函数才会重新计算缓存数据</li>\n<li>这样避免在每次重新渲染时都进行复杂的数据计算</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> countA<span class=\"token punctuation\">,</span>  countB<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ... 只有当countA 或 countB变化时才重新计算count</span>\n    <span class=\"token keyword\">return</span> countA <span class=\"token operator\">+</span> countB<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>countA<span class=\"token punctuation\">,</span> countB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>sum<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"useMemo的实现原理\"><a href=\"#useMemo的实现原理\" class=\"headerlink\" title=\"useMemo的实现原理\"></a>useMemo的实现原理</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> deps</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> deps<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"momo\"><a href=\"#momo\" class=\"headerlink\" title=\"momo\"></a>momo</h2><p>上个例子中，只要父组件render方法执行，Counter函数依旧会触发重新渲染，要让函数不执行，在最外层加上memo</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Counter <span class=\"token operator\">=</span> <span class=\"token function\">memo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> countA<span class=\"token punctuation\">,</span>  countB<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// ... 只有当countA 或 countB变化时才重新计算count</span>\n    <span class=\"token keyword\">return</span> countA <span class=\"token operator\">+</span> countB<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>countA<span class=\"token punctuation\">,</span> countB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>sum<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><ul>\n<li>useCallback 的用法和 useMemo 类似，只有依赖项发生变化的时候，才需要重新创建一个回调函数，这样就保证了组件不会创建重复的回调函数。</li>\n<li>接收这个回调函数作为属性的组件，也不会频繁地需要重新渲染。</li>\n<li><code>useCallback(fn, deps) 等同于 useMemo(() =&gt; fn, deps)</code></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 这样，</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> handleIncrement <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>handleIncrement<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"useCallback实现原理\"><a href=\"#useCallback实现原理\" class=\"headerlink\" title=\"useCallback实现原理\"></a>useCallback实现原理</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> memoizedState <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> deps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> nextDeps <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>deps <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>deps <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> deps <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>callback<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> prevState <span class=\"token operator\">=</span> memoizedState<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevState <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> prevDeps <span class=\"token operator\">=</span> prevState<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">areHookdepsEqual</span><span class=\"token punctuation\">(</span>nextDeps<span class=\"token punctuation\">,</span> prevDeps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> prevState<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  memoizedState <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>callback<span class=\"token punctuation\">,</span> nextDeps<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> callback\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><ul>\n<li>组件的引用：返回一个可变的 ref 对象，该对象下面有一个 current 属性指向被引用对象的实例，当做 ref 正常使用时，和 createRef 效果一样。</li>\n<li>useRef 返回的 ref 对象在组件的整个生命周期内保持不变，useRef 每次都会返回相同的引用，createRef 每次渲染都会重新创建 ref</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> React<span class=\"token punctuation\">,</span> useRef<span class=\"token punctuation\">,</span> createRef<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> inputElement <span class=\"token operator\">=</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> flieElement <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inputElement<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inputElement'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 函数重新执行时，每一次都打印</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>flieElement<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flieElement'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 只打印第一次</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// flieElement.current.click() 上传文件</span>\n  <span class=\"token comment\">// inputElement.current.focus() 聚焦</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">'text'</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>inputElement<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">'flie'</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>flieElement<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>useRef 可以拿到最新的值， current 指向初始化为传入的参数，可以存放任何变量</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> refVal <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// refVal.current => value</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> newCount <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> count<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useImperativeHandle\"><a href=\"#useImperativeHandle\" class=\"headerlink\" title=\"useImperativeHandle\"></a>useImperativeHandle</h2><ul>\n<li>useImperativeHandle 一般和 forwardRef 一起使用的，减少暴露给父组件的属性</li>\n<li>forwardRef的作用是：引用父组件的 ref 实例，成为子组件的一个参数，可以引用父组件的 ref 绑定到子组件自身的节点上。它有两个参数，第一个是父组件传递的 props，第二个就是 ref 的引用</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 父组件传来的 ref</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n   <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>ref<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>input<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>useImperativeHandle 有三个参数：</p>\n<ul>\n<li>第一个参数，接收一个通过 forwardRef 引用父组件的 ref 实例。</li>\n<li>第二个参数一个回调函数，返回一个对象，对象里面存储需要暴露给父组件的属性或方法。</li>\n<li>第三个参数为一个可选参数，该参数是一个依赖项数组deps。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">const</span> inputRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 父组件可以通过this.xxx.current.focus的方式使用子组件传递出去的focus方法</span>\n        <span class=\"token function-variable function\">focus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>inputRef<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span>Example<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 父组件</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef <span class=\"token operator\">=</span> <span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>Example ref<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span>Click<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><ul>\n<li>useReducer是useState 的一种替代方案，它接收三个参数，第一个参数为一个 reducer 函数，第二个参数是reducer的初始值，第三个参数为可选参数，值为一个函数，可以用来惰性提供初始状态。</li>\n<li>reducer 函数接受两个参数一个是 state 另一个是 action ，用法原理和 redux 中的 reducer</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialArg<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> initialCount<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">case</span> <span class=\"token string\">'increment'</span><span class=\"token operator\">:</span> \n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">case</span> <span class=\"token string\">'decrement'</span><span class=\"token operator\">:</span> \n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">case</span> <span class=\"token string\">'reset'</span><span class=\"token operator\">:</span> \n            <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> \n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>initialCount<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialCount<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> \n     <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span> \n        <span class=\"token literal-property property\">Count</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">&#125;</span> \n        <span class=\"token operator\">&lt;</span>button \n            onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'reset'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">payload</span><span class=\"token operator\">:</span> initialCount<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n        <span class=\"token operator\">></span> \n          Reset\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> \n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">+</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> \n        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span> \n     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span> \n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span> \n\n<span class=\"token keyword\">function</span> <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Counter initialCount<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><ul>\n<li>定义全局状态，当这个 Context 的数据发生变化时，使用这个数据的组件就能够自动刷新</li>\n<li>React 的开发中，我们很少会使用 Context 来做太多数据的共享，Context 更多的是提供了一个强大的机制，让 React 应用具备定义全局的响应式数据的能力。主要是用来实现 Theme(主题)、Language (多语)等功能</li>\n</ul>\n<pre class=\"line-numbers language-jsx\" data-language=\"jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> globalContext <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>globalContext.Provider</span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'light'</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Count</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>globalContext.Provider</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>globalContext<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">&#123;</span>context<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"> // light\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://juejin.cn/post/6850037283535880205\">React Hooks 使用总结</a></li>\n<li><a href=\"https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/\">useEffect 完整指南</a></li>\n<li><a href=\"https://github.com/brickspert/blog/issues/26\">React Hooks 原理</a></li>\n</ul>\n"},{"title":"TypeScript 知识汇总","date":"2021-12-27T18:32:14.000Z","toc":true,"comments":1,"copyright":false,"_content":"## TypeScript 基本使用\n\n- [2021 typescript史上最强学习入门文章](https://juejin.cn/post/7018805943710253086)\n- [如何优雅地在 React 中使用TypeScript](https://juejin.cn/post/7021674818621669389)\n- [React 中完美运用](https://juejin.cn/post/6910863689260204039)\n\n## TypeScript 工具类型\n\n### Partial\n\n`Partial<T>` 将类型的属性变成可选，只支持处理第一层的属性\n\n```tsx\ntype Partial<T> = {\n\t[key in keyof T]?: T[key]\n}\n```\n\n### DeepPartial\n\n`DeepPartial<T>` 将类型的属性变成可选，只支持**多**层的属性\n\n```tsx\ntype DeepPartial<T> = {\n\t[key in keyof T]?: T[key] extends object\n  \t? DeepPartial<T[key]> \n  \t: T[key]\n}\n```\n\n### Required\n\n`Required<T>`将类型的属性变成必选\n\n```tsx\ntype Required<T> = {\n\t[key in keyof T]-?: T[key]\n}\n```\n\n### Readonly\n\n`Readonly<T>` 的作用是将某个类型所有属性变为只读属性，也就意味着这些属性不能被重新赋值。只对一级的属性做限制不能修改，如果是引用类型，还是可以修改的。\n\n```tsx\ntype Readonly<T> = {\n\treadonly\t[key in keyof T]: T[key]\n}\n```\n\n### Pick（挑选）\n\nPick 从某个类型中挑出一些属性出来\n\n```tsx\ntype Pick<T, K extends keyof T> = {\n\t[key in K]: T[key]\n}\n```\n\n### Record（转化）\n\n`Record<K extends keyof any, T>` 的作用是将 K 中所有的属性的值转化为 T 类型。\n\n```tsx\ntype Record<K extends keyof any, T> = {\n\t[key in K]: T\n}\n\ninterface PageInfo {\n  title: string;\n}\n\ntype Page = \"home\" | \"about\" | \"contact\";\n\nconst x: Record<Page, PageInfo> = {\n  about: { title: \"about\" },\n  contact: { title: \"contact\" },\n  home: { title: \"home\" },\n};\n```\n\n### Exclude（移除）\n\n`Exclude<T, U>` 的作用是将某个类型中属于另一个的类型移除掉。如果 T 能赋值给 U 类型的话，那么就会返回 never 类型，否则返回 T 类型。最终实现的效果就是将 T 中某些属于 U 的类型移除掉。\n\n```tsx\ntype Exclude<T, U> = T extends U ? never : T;\n\n// 例子\ntype T0 = Exclude<\"a\" | \"b\" | \"c\", \"a\">; // \"b\" | \"c\"\ntype T1 = Exclude<\"a\" | \"b\" | \"c\", \"a\" | \"b\">; // \"c\"\ntype T2 = Exclude<string | number | (() => void), Function>; // string | number\n\n```\n\n### Extract（公共）\n\n`Extract<T, U>` 的作用是从 T 中提取出 U，提取公共部分。\n\n```tsx\ntype Extract<T, U> = T extends U ? T : never;\n\ntype T0 = Extract<\"a\" | \"b\" | \"c\", \"a\" | \"f\">; // \"a\"\ntype T1 = Extract<string | number | (() => void), Function>; // () =>void\n\n```\n\n### Omit（差集）\n\n`Omit<T, K extends keyof any>` 的作用是使用 T 类型中除了 K 类型的所有属性，来构造一个新的类型。\n\n```tsx\ntype Omit<T, K extends keyof any> = \n  Pick<T, Exclude<keyof T, K>>;\n```\n\n```tsx\ninterface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\ntype TodoPreview = Omit<Todo, \"description\">;\n\nconst todo: TodoPreview = {\n  title: \"Clean room\",\n  completed: false,\n};\n```\n\n### NonNullable\n\n`NonNullable<T>` 的作用是用来过滤类型中的 null 及 undefined 类型。\n\n```tsx\ntype NonNullable<T> = T extends null|undefined ? never : T\n```\n\n```tsx\ntype T0 = NonNullable<string | number | undefined>; // string | number\ntype T1 = NonNullable<string[] | null | undefined>; // string[]\n```\n\n### Parameters\n\n`Parameters<T>`的作用是用于获得函数的参数类型组成的元组类型。\n\n```tsx\ntype Parameters<T extends (...args: any) => any> = \n  T extends (...args: infer P) => any ? P : never;\n\ntype A = Parameters<() =>void>; // []\ntype B = Parameters<typeof Array.isArray>; // [any]\ntype C = Parameters<typeof parseInt>; // [string, (number | undefined)?]\ntype D = Parameters<typeof Math.max>; // number[]\n\n```\n\n### ReturnType\n\n获取函数的返回值的类型\n\n```ts\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\n\ntype E = ReturnType<() => string> // E的类型是string\n```\n\n## tsconfig.json介绍\n\ntsconfig.json 是 TypeScript 编译的相关配置，用于描述将TS转化为JS代码的配置文件，通过更改编译配置项，我们可以让 TypeScript 编译出 ES6、ES5、node 的代码。\n\n- 生成tsconfig.js文件：`tsc --init`\n- 查看更多配置和使用说名: `tsc -h`\n- 应当将tsc作为类型检查工具，而不是编译项目的工具，代码编译的工作应该交给babel、webpack等工具\n\n## tsconfig.json 重要字段\n\n- files，设置需要编译的单个文件的列表；\n\n```json\n// 只编译 src下的 index.ts文件\n{\n  \"files\": [\"src/index.ts\"]\n}\n```\n\n- include，设置需要进行编译的文件或者目录，支持路径模式匹配；\n  include和files会合并\n\n```json\n// 编译src所有的ts文件\n// 支持通配符，只编译src下的一级目录的ts文件，如\"src/*\"，二级文件 \"src/*/*\"\n{\n  \"include\": [\"src\"]\n}\n```\n\n- exclude，排除不需要进行编译的文件，支持路径模式匹配（排除）；默认排除node_modules下的所有文件、排除所有声明文件(xxx.d.ts)，只对include字段有排除效果，对file字段无影响。\n\n```json\n// 排除src/lib的文件编译\n{\n  \"include\": [\"src/lib\"]\n}\n```\n\n- extends，导入或者继承其他tsconfig配置\n\n```json\n// 导入当前目录下的tsconfig.base.json里的配置，但是导入的配置容易被覆盖（在tsconfig.json可以覆盖导入的配置）\n{\n  \"extends\": \"./tsconfig.base.json\"\n}\n```\n\n- compileOnSave: true, 保存文件时自动触发tsc编译文件（VScode不支持这个配置），一般来说，代码编译过程会通过webpack等打包构建工具，并且使用热更新，因此一般不需要配置该项。\n- compilerOptions，设置与编译流程相关的选项。\n- 如果ts.config文件为空，则会按照默认是编译当前目录下的所有ts文件。\n\n### compilerOptions 选项\n\n```tsx\n{\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": './buildFile',      // 指定编译后的文件放在哪里\n\n    /* 基本选项 */\n    \"target\": \"es5\",                       // 指定编译后ECMAScript目标版本: 要将ts编译成js哪个版本的语法，'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'\n    \"module\": \"commonjs\",                  // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'\n    \"lib\": [],                             // 指定要包含在编译中的库文件\n    \"allowJs\": true,                       // 允许编译 javascript 文件\n    \"checkJs\": true,                       // 报告 javascript 文件中的错误\n    \"jsx\": \"preserve\",                     // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'\n    \"declaration\": true,                   // 生成相应的 '.d.ts' 文件\n    \"sourceMap\": true,                     // 生成相应的 '.map' 文件\n    \"outFile\": \"./\",                       // 将输出文件合并为一个文件\n    \"outDir\": \"./\",                        // 指定输出目录\n    \"rootDir\": \"./\",                       // 用来控制只能引用当前目录下的ts文件.\n    \"removeComments\": true,                // 删除编译后的所有的注释\n    \"noEmit\": true,                        // 不生成输出文件\n    \"importHelpers\": true,                 // 从 tslib 导入辅助工具函数\n    \"isolatedModules\": true,              // 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.\n\n    /* 严格的类型检查选项 */\n    \"strict\": true,                        // 启用所有严格类型检查选项\n    \"noImplicitAny\": true,                 // 在表达式和声明上有隐含的 any类型时报错\n    \"strictNullChecks\": true,              // 启用严格的 null 检查\n    \"noImplicitThis\": true,                // 当 this 表达式值为 any 类型的时候，生成一个错误\n    \"alwaysStrict\": true,                  // 以严格模式检查每个模块，并在每个文件里加入 'use strict'\n\n    /* 额外的检查 */\n    \"noUnusedLocals\": true,                // 有未使用的变量时，抛出错误\n    \"noUnusedParameters\": true,            // 有未使用的参数时，抛出错误\n    \"noImplicitReturns\": true,             // 并不是所有函数里的代码都有返回值时，抛出错误\n    \"noFallthroughCasesInSwitch\": true,    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）\n\n    /* 模块解析选项 */\n    \"moduleResolution\": \"node\",            // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)\n    \"baseUrl\": \"./\",                       // 用于解析非相对模块名称的基目录\n    \"paths\": {},                           // 模块名到基于 baseUrl 的路径映射的列表\n    \"rootDirs\": [],                        // 根文件夹列表，其组合内容表示项目运行时的结构内容\n    \"typeRoots\": [],                       // 包含类型声明的文件列表\n    \"types\": [],                           // 需要包含的类型声明文件名列表\n    \"allowSyntheticDefaultImports\": true,  // 允许从没有设置默认导出的模块中默认导入。\n\n    /* Source Map Options */\n    \"sourceRoot\": \"./\",                    // 指定调试器应该找到 TypeScript 文件而不是源文件的位置\n    \"mapRoot\": \"./\",                       // 指定调试器应该找到映射文件而不是生成文件的位置\n    \"inlineSourceMap\": true,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件\n    \"inlineSources\": true,                // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性\n\n    /* 其他选项 */\n    \"experimentalDecorators\": true,        // 启用装饰器\n    \"emitDecoratorMetadata\": true          // 为装饰器提供元数据的支持\n  }\n}\n```\n\n## TypeScript 面试\n\n- [TypeScript 面试题](https://juejin.cn/post/6988763249982308382)\n- [TypeScript 面试题及答案](https://juejin.cn/post/6999985372440559624)\n","source":"_posts/front_end/typescript.md","raw":"---\ntitle: TypeScript 知识汇总\ndate: 2021-12-27 18:32:14\ncategories:\n  - 前端\ntags:\n  - TypeScript\ntoc: true # 是否启用内容索引\ncomments: true\ncopyright: false\n---\n## TypeScript 基本使用\n\n- [2021 typescript史上最强学习入门文章](https://juejin.cn/post/7018805943710253086)\n- [如何优雅地在 React 中使用TypeScript](https://juejin.cn/post/7021674818621669389)\n- [React 中完美运用](https://juejin.cn/post/6910863689260204039)\n\n## TypeScript 工具类型\n\n### Partial\n\n`Partial<T>` 将类型的属性变成可选，只支持处理第一层的属性\n\n```tsx\ntype Partial<T> = {\n\t[key in keyof T]?: T[key]\n}\n```\n\n### DeepPartial\n\n`DeepPartial<T>` 将类型的属性变成可选，只支持**多**层的属性\n\n```tsx\ntype DeepPartial<T> = {\n\t[key in keyof T]?: T[key] extends object\n  \t? DeepPartial<T[key]> \n  \t: T[key]\n}\n```\n\n### Required\n\n`Required<T>`将类型的属性变成必选\n\n```tsx\ntype Required<T> = {\n\t[key in keyof T]-?: T[key]\n}\n```\n\n### Readonly\n\n`Readonly<T>` 的作用是将某个类型所有属性变为只读属性，也就意味着这些属性不能被重新赋值。只对一级的属性做限制不能修改，如果是引用类型，还是可以修改的。\n\n```tsx\ntype Readonly<T> = {\n\treadonly\t[key in keyof T]: T[key]\n}\n```\n\n### Pick（挑选）\n\nPick 从某个类型中挑出一些属性出来\n\n```tsx\ntype Pick<T, K extends keyof T> = {\n\t[key in K]: T[key]\n}\n```\n\n### Record（转化）\n\n`Record<K extends keyof any, T>` 的作用是将 K 中所有的属性的值转化为 T 类型。\n\n```tsx\ntype Record<K extends keyof any, T> = {\n\t[key in K]: T\n}\n\ninterface PageInfo {\n  title: string;\n}\n\ntype Page = \"home\" | \"about\" | \"contact\";\n\nconst x: Record<Page, PageInfo> = {\n  about: { title: \"about\" },\n  contact: { title: \"contact\" },\n  home: { title: \"home\" },\n};\n```\n\n### Exclude（移除）\n\n`Exclude<T, U>` 的作用是将某个类型中属于另一个的类型移除掉。如果 T 能赋值给 U 类型的话，那么就会返回 never 类型，否则返回 T 类型。最终实现的效果就是将 T 中某些属于 U 的类型移除掉。\n\n```tsx\ntype Exclude<T, U> = T extends U ? never : T;\n\n// 例子\ntype T0 = Exclude<\"a\" | \"b\" | \"c\", \"a\">; // \"b\" | \"c\"\ntype T1 = Exclude<\"a\" | \"b\" | \"c\", \"a\" | \"b\">; // \"c\"\ntype T2 = Exclude<string | number | (() => void), Function>; // string | number\n\n```\n\n### Extract（公共）\n\n`Extract<T, U>` 的作用是从 T 中提取出 U，提取公共部分。\n\n```tsx\ntype Extract<T, U> = T extends U ? T : never;\n\ntype T0 = Extract<\"a\" | \"b\" | \"c\", \"a\" | \"f\">; // \"a\"\ntype T1 = Extract<string | number | (() => void), Function>; // () =>void\n\n```\n\n### Omit（差集）\n\n`Omit<T, K extends keyof any>` 的作用是使用 T 类型中除了 K 类型的所有属性，来构造一个新的类型。\n\n```tsx\ntype Omit<T, K extends keyof any> = \n  Pick<T, Exclude<keyof T, K>>;\n```\n\n```tsx\ninterface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\ntype TodoPreview = Omit<Todo, \"description\">;\n\nconst todo: TodoPreview = {\n  title: \"Clean room\",\n  completed: false,\n};\n```\n\n### NonNullable\n\n`NonNullable<T>` 的作用是用来过滤类型中的 null 及 undefined 类型。\n\n```tsx\ntype NonNullable<T> = T extends null|undefined ? never : T\n```\n\n```tsx\ntype T0 = NonNullable<string | number | undefined>; // string | number\ntype T1 = NonNullable<string[] | null | undefined>; // string[]\n```\n\n### Parameters\n\n`Parameters<T>`的作用是用于获得函数的参数类型组成的元组类型。\n\n```tsx\ntype Parameters<T extends (...args: any) => any> = \n  T extends (...args: infer P) => any ? P : never;\n\ntype A = Parameters<() =>void>; // []\ntype B = Parameters<typeof Array.isArray>; // [any]\ntype C = Parameters<typeof parseInt>; // [string, (number | undefined)?]\ntype D = Parameters<typeof Math.max>; // number[]\n\n```\n\n### ReturnType\n\n获取函数的返回值的类型\n\n```ts\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\n\ntype E = ReturnType<() => string> // E的类型是string\n```\n\n## tsconfig.json介绍\n\ntsconfig.json 是 TypeScript 编译的相关配置，用于描述将TS转化为JS代码的配置文件，通过更改编译配置项，我们可以让 TypeScript 编译出 ES6、ES5、node 的代码。\n\n- 生成tsconfig.js文件：`tsc --init`\n- 查看更多配置和使用说名: `tsc -h`\n- 应当将tsc作为类型检查工具，而不是编译项目的工具，代码编译的工作应该交给babel、webpack等工具\n\n## tsconfig.json 重要字段\n\n- files，设置需要编译的单个文件的列表；\n\n```json\n// 只编译 src下的 index.ts文件\n{\n  \"files\": [\"src/index.ts\"]\n}\n```\n\n- include，设置需要进行编译的文件或者目录，支持路径模式匹配；\n  include和files会合并\n\n```json\n// 编译src所有的ts文件\n// 支持通配符，只编译src下的一级目录的ts文件，如\"src/*\"，二级文件 \"src/*/*\"\n{\n  \"include\": [\"src\"]\n}\n```\n\n- exclude，排除不需要进行编译的文件，支持路径模式匹配（排除）；默认排除node_modules下的所有文件、排除所有声明文件(xxx.d.ts)，只对include字段有排除效果，对file字段无影响。\n\n```json\n// 排除src/lib的文件编译\n{\n  \"include\": [\"src/lib\"]\n}\n```\n\n- extends，导入或者继承其他tsconfig配置\n\n```json\n// 导入当前目录下的tsconfig.base.json里的配置，但是导入的配置容易被覆盖（在tsconfig.json可以覆盖导入的配置）\n{\n  \"extends\": \"./tsconfig.base.json\"\n}\n```\n\n- compileOnSave: true, 保存文件时自动触发tsc编译文件（VScode不支持这个配置），一般来说，代码编译过程会通过webpack等打包构建工具，并且使用热更新，因此一般不需要配置该项。\n- compilerOptions，设置与编译流程相关的选项。\n- 如果ts.config文件为空，则会按照默认是编译当前目录下的所有ts文件。\n\n### compilerOptions 选项\n\n```tsx\n{\n  \"compilerOptions\": {\n    \"tsBuildInfoFile\": './buildFile',      // 指定编译后的文件放在哪里\n\n    /* 基本选项 */\n    \"target\": \"es5\",                       // 指定编译后ECMAScript目标版本: 要将ts编译成js哪个版本的语法，'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'\n    \"module\": \"commonjs\",                  // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'\n    \"lib\": [],                             // 指定要包含在编译中的库文件\n    \"allowJs\": true,                       // 允许编译 javascript 文件\n    \"checkJs\": true,                       // 报告 javascript 文件中的错误\n    \"jsx\": \"preserve\",                     // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'\n    \"declaration\": true,                   // 生成相应的 '.d.ts' 文件\n    \"sourceMap\": true,                     // 生成相应的 '.map' 文件\n    \"outFile\": \"./\",                       // 将输出文件合并为一个文件\n    \"outDir\": \"./\",                        // 指定输出目录\n    \"rootDir\": \"./\",                       // 用来控制只能引用当前目录下的ts文件.\n    \"removeComments\": true,                // 删除编译后的所有的注释\n    \"noEmit\": true,                        // 不生成输出文件\n    \"importHelpers\": true,                 // 从 tslib 导入辅助工具函数\n    \"isolatedModules\": true,              // 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.\n\n    /* 严格的类型检查选项 */\n    \"strict\": true,                        // 启用所有严格类型检查选项\n    \"noImplicitAny\": true,                 // 在表达式和声明上有隐含的 any类型时报错\n    \"strictNullChecks\": true,              // 启用严格的 null 检查\n    \"noImplicitThis\": true,                // 当 this 表达式值为 any 类型的时候，生成一个错误\n    \"alwaysStrict\": true,                  // 以严格模式检查每个模块，并在每个文件里加入 'use strict'\n\n    /* 额外的检查 */\n    \"noUnusedLocals\": true,                // 有未使用的变量时，抛出错误\n    \"noUnusedParameters\": true,            // 有未使用的参数时，抛出错误\n    \"noImplicitReturns\": true,             // 并不是所有函数里的代码都有返回值时，抛出错误\n    \"noFallthroughCasesInSwitch\": true,    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）\n\n    /* 模块解析选项 */\n    \"moduleResolution\": \"node\",            // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)\n    \"baseUrl\": \"./\",                       // 用于解析非相对模块名称的基目录\n    \"paths\": {},                           // 模块名到基于 baseUrl 的路径映射的列表\n    \"rootDirs\": [],                        // 根文件夹列表，其组合内容表示项目运行时的结构内容\n    \"typeRoots\": [],                       // 包含类型声明的文件列表\n    \"types\": [],                           // 需要包含的类型声明文件名列表\n    \"allowSyntheticDefaultImports\": true,  // 允许从没有设置默认导出的模块中默认导入。\n\n    /* Source Map Options */\n    \"sourceRoot\": \"./\",                    // 指定调试器应该找到 TypeScript 文件而不是源文件的位置\n    \"mapRoot\": \"./\",                       // 指定调试器应该找到映射文件而不是生成文件的位置\n    \"inlineSourceMap\": true,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件\n    \"inlineSources\": true,                // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性\n\n    /* 其他选项 */\n    \"experimentalDecorators\": true,        // 启用装饰器\n    \"emitDecoratorMetadata\": true          // 为装饰器提供元数据的支持\n  }\n}\n```\n\n## TypeScript 面试\n\n- [TypeScript 面试题](https://juejin.cn/post/6988763249982308382)\n- [TypeScript 面试题及答案](https://juejin.cn/post/6999985372440559624)\n","slug":"front_end/typescript","published":1,"updated":"2022-07-08T14:26:34.275Z","layout":"post","photos":[],"link":"","_id":"cl5f0biib001ov4uwakzi49k6","content":"<h2 id=\"TypeScript-基本使用\"><a href=\"#TypeScript-基本使用\" class=\"headerlink\" title=\"TypeScript 基本使用\"></a>TypeScript 基本使用</h2><ul>\n<li><a href=\"https://juejin.cn/post/7018805943710253086\">2021 typescript史上最强学习入门文章</a></li>\n<li><a href=\"https://juejin.cn/post/7021674818621669389\">如何优雅地在 React 中使用TypeScript</a></li>\n<li><a href=\"https://juejin.cn/post/6910863689260204039\">React 中完美运用</a></li>\n</ul>\n<h2 id=\"TypeScript-工具类型\"><a href=\"#TypeScript-工具类型\" class=\"headerlink\" title=\"TypeScript 工具类型\"></a>TypeScript 工具类型</h2><h3 id=\"Partial\"><a href=\"#Partial\" class=\"headerlink\" title=\"Partial\"></a>Partial</h3><p><code>Partial&lt;T&gt;</code> 将类型的属性变成可选，只支持处理第一层的属性</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"DeepPartial\"><a href=\"#DeepPartial\" class=\"headerlink\" title=\"DeepPartial\"></a>DeepPartial</h3><p><code>DeepPartial&lt;T&gt;</code> 将类型的属性变成可选，只支持<strong>多</strong>层的属性</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">DeepPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span>\n  \t<span class=\"token operator\">?</span> DeepPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> \n  \t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Required\"><a href=\"#Required\" class=\"headerlink\" title=\"Required\"></a>Required</h3><p><code>Required&lt;T&gt;</code>将类型的属性变成必选</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Required<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Readonly\"><a href=\"#Readonly\" class=\"headerlink\" title=\"Readonly\"></a>Readonly</h3><p><code>Readonly&lt;T&gt;</code> 的作用是将某个类型所有属性变为只读属性，也就意味着这些属性不能被重新赋值。只对一级的属性做限制不能修改，如果是引用类型，还是可以修改的。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">readonly</span>\t<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Pick（挑选）\"><a href=\"#Pick（挑选）\" class=\"headerlink\" title=\"Pick（挑选）\"></a>Pick（挑选）</h3><p>Pick 从某个类型中挑出一些属性出来</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Record（转化）\"><a href=\"#Record（转化）\" class=\"headerlink\" title=\"Record（转化）\"></a>Record（转化）</h3><p><code>Record&lt;K extends keyof any, T&gt;</code> 的作用是将 K 中所有的属性的值转化为 T 类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Record<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Page</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"home\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"about\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"contact\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span>Page<span class=\"token punctuation\">,</span> PageInfo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  about<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"about\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  contact<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"contact\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  home<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"home\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Exclude（移除）\"><a href=\"#Exclude（移除）\" class=\"headerlink\" title=\"Exclude（移除）\"></a>Exclude（移除）</h3><p><code>Exclude&lt;T, U&gt;</code> 的作用是将某个类型中属于另一个的类型移除掉。如果 T 能赋值给 U 类型的话，那么就会返回 never 类型，否则返回 T 类型。最终实现的效果就是将 T 中某些属于 U 的类型移除掉。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Exclude<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 例子</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"b\" | \"c\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"c\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string | number</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Extract（公共）\"><a href=\"#Extract（公共）\" class=\"headerlink\" title=\"Extract（公共）\"></a>Extract（公共）</h3><p><code>Extract&lt;T, U&gt;</code> 的作用是从 T 中提取出 U，提取公共部分。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Extract<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"f\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// () =>void</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Omit（差集）\"><a href=\"#Omit（差集）\" class=\"headerlink\" title=\"Omit（差集）\"></a>Omit（差集）</h3><p><code>Omit&lt;T, K extends keyof any&gt;</code> 的作用是使用 T 类型中除了 K 类型的所有属性，来构造一个新的类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> \n  Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TodoPreview</span> <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"description\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Clean room\"</span><span class=\"token punctuation\">,</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"NonNullable\"><a href=\"#NonNullable\" class=\"headerlink\" title=\"NonNullable\"></a>NonNullable</h3><p><code>NonNullable&lt;T&gt;</code> 的作用是用来过滤类型中的 null 及 undefined 类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">NonNullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token keyword\">null</span></span><span class=\"token operator\">|</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string | number</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string[]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"Parameters\"><a href=\"#Parameters\" class=\"headerlink\" title=\"Parameters\"></a>Parameters</h3><p><code>Parameters&lt;T&gt;</code>的作用是用于获得函数的参数类型组成的元组类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Parameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> \n  <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span>isArray<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [any]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> parseInt<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [string, (number | undefined)?]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">D</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">.</span>max<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number[]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"ReturnType\"><a href=\"#ReturnType\" class=\"headerlink\" title=\"ReturnType\"></a>ReturnType</h3><p>获取函数的返回值的类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">E</span></span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token comment\">// E的类型是string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"tsconfig-json介绍\"><a href=\"#tsconfig-json介绍\" class=\"headerlink\" title=\"tsconfig.json介绍\"></a>tsconfig.json介绍</h2><p>tsconfig.json 是 TypeScript 编译的相关配置，用于描述将TS转化为JS代码的配置文件，通过更改编译配置项，我们可以让 TypeScript 编译出 ES6、ES5、node 的代码。</p>\n<ul>\n<li>生成tsconfig.js文件：<code>tsc --init</code></li>\n<li>查看更多配置和使用说名: <code>tsc -h</code></li>\n<li>应当将tsc作为类型检查工具，而不是编译项目的工具，代码编译的工作应该交给babel、webpack等工具</li>\n</ul>\n<h2 id=\"tsconfig-json-重要字段\"><a href=\"#tsconfig-json-重要字段\" class=\"headerlink\" title=\"tsconfig.json 重要字段\"></a>tsconfig.json 重要字段</h2><ul>\n<li>files，设置需要编译的单个文件的列表；</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// 只编译 src下的 index.ts文件</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/index.ts\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>include，设置需要进行编译的文件或者目录，支持路径模式匹配；<br>include和files会合并</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// 编译src所有的ts文件</span>\n<span class=\"token comment\">// 支持通配符，只编译src下的一级目录的ts文件，如\"src/*\"，二级文件 \"src/*/*\"</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>exclude，排除不需要进行编译的文件，支持路径模式匹配（排除）；默认排除node_modules下的所有文件、排除所有声明文件(xxx.d.ts)，只对include字段有排除效果，对file字段无影响。</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// 排除src/lib的文件编译</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/lib\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>extends，导入或者继承其他tsconfig配置</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// 导入当前目录下的tsconfig.base.json里的配置，但是导入的配置容易被覆盖（在tsconfig.json可以覆盖导入的配置）</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./tsconfig.base.json\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>compileOnSave: true, 保存文件时自动触发tsc编译文件（VScode不支持这个配置），一般来说，代码编译过程会通过webpack等打包构建工具，并且使用热更新，因此一般不需要配置该项。</li>\n<li>compilerOptions，设置与编译流程相关的选项。</li>\n<li>如果ts.config文件为空，则会按照默认是编译当前目录下的所有ts文件。</li>\n</ul>\n<h3 id=\"compilerOptions-选项\"><a href=\"#compilerOptions-选项\" class=\"headerlink\" title=\"compilerOptions 选项\"></a>compilerOptions 选项</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">\"tsBuildInfoFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'./buildFile'</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 指定编译后的文件放在哪里</span>\n\n    <span class=\"token comment\">/* 基本选项 */</span>\n    <span class=\"token string-property property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 指定编译后ECMAScript目标版本: 要将ts编译成js哪个版本的语法，'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'</span>\n    <span class=\"token string-property property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'</span>\n    <span class=\"token string-property property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                             <span class=\"token comment\">// 指定要包含在编译中的库文件</span>\n    <span class=\"token string-property property\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 允许编译 javascript 文件</span>\n    <span class=\"token string-property property\">\"checkJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 报告 javascript 文件中的错误</span>\n    <span class=\"token string-property property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\">// 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'</span>\n    <span class=\"token string-property property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 生成相应的 '.d.ts' 文件</span>\n    <span class=\"token string-property property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\">// 生成相应的 '.map' 文件</span>\n    <span class=\"token string-property property\">\"outFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 将输出文件合并为一个文件</span>\n    <span class=\"token string-property property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 指定输出目录</span>\n    <span class=\"token string-property property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 用来控制只能引用当前目录下的ts文件.</span>\n    <span class=\"token string-property property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 删除编译后的所有的注释</span>\n    <span class=\"token string-property property\">\"noEmit\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 不生成输出文件</span>\n    <span class=\"token string-property property\">\"importHelpers\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// 从 tslib 导入辅助工具函数</span>\n    <span class=\"token string-property property\">\"isolatedModules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.</span>\n\n    <span class=\"token comment\">/* 严格的类型检查选项 */</span>\n    <span class=\"token string-property property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 启用所有严格类型检查选项</span>\n    <span class=\"token string-property property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// 在表达式和声明上有隐含的 any类型时报错</span>\n    <span class=\"token string-property property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 启用严格的 null 检查</span>\n    <span class=\"token string-property property\">\"noImplicitThis\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 当 this 表达式值为 any 类型的时候，生成一个错误</span>\n    <span class=\"token string-property property\">\"alwaysStrict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// 以严格模式检查每个模块，并在每个文件里加入 'use strict'</span>\n\n    <span class=\"token comment\">/* 额外的检查 */</span>\n    <span class=\"token string-property property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 有未使用的变量时，抛出错误</span>\n    <span class=\"token string-property property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// 有未使用的参数时，抛出错误</span>\n    <span class=\"token string-property property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 并不是所有函数里的代码都有返回值时，抛出错误</span>\n    <span class=\"token string-property property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span>\n\n    <span class=\"token comment\">/* 模块解析选项 */</span>\n    <span class=\"token string-property property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)</span>\n    <span class=\"token string-property property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 用于解析非相对模块名称的基目录</span>\n    <span class=\"token string-property property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">// 模块名到基于 baseUrl 的路径映射的列表</span>\n    <span class=\"token string-property property\">\"rootDirs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span>\n    <span class=\"token string-property property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 包含类型声明的文件列表</span>\n    <span class=\"token string-property property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">// 需要包含的类型声明文件名列表</span>\n    <span class=\"token string-property property\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 允许从没有设置默认导出的模块中默认导入。</span>\n\n    <span class=\"token comment\">/* Source Map Options */</span>\n    <span class=\"token string-property property\">\"sourceRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                    <span class=\"token comment\">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span>\n    <span class=\"token string-property property\">\"mapRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 指定调试器应该找到映射文件而不是生成文件的位置</span>\n    <span class=\"token string-property property\">\"inlineSourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span>\n    <span class=\"token string-property property\">\"inlineSources\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span>\n\n    <span class=\"token comment\">/* 其他选项 */</span>\n    <span class=\"token string-property property\">\"experimentalDecorators\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 启用装饰器</span>\n    <span class=\"token string-property property\">\"emitDecoratorMetadata\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>          <span class=\"token comment\">// 为装饰器提供元数据的支持</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"TypeScript-面试\"><a href=\"#TypeScript-面试\" class=\"headerlink\" title=\"TypeScript 面试\"></a>TypeScript 面试</h2><ul>\n<li><a href=\"https://juejin.cn/post/6988763249982308382\">TypeScript 面试题</a></li>\n<li><a href=\"https://juejin.cn/post/6999985372440559624\">TypeScript 面试题及答案</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"TypeScript-基本使用\"><a href=\"#TypeScript-基本使用\" class=\"headerlink\" title=\"TypeScript 基本使用\"></a>TypeScript 基本使用</h2><ul>\n<li><a href=\"https://juejin.cn/post/7018805943710253086\">2021 typescript史上最强学习入门文章</a></li>\n<li><a href=\"https://juejin.cn/post/7021674818621669389\">如何优雅地在 React 中使用TypeScript</a></li>\n<li><a href=\"https://juejin.cn/post/6910863689260204039\">React 中完美运用</a></li>\n</ul>\n<h2 id=\"TypeScript-工具类型\"><a href=\"#TypeScript-工具类型\" class=\"headerlink\" title=\"TypeScript 工具类型\"></a>TypeScript 工具类型</h2><h3 id=\"Partial\"><a href=\"#Partial\" class=\"headerlink\" title=\"Partial\"></a>Partial</h3><p><code>Partial&lt;T&gt;</code> 将类型的属性变成可选，只支持处理第一层的属性</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"DeepPartial\"><a href=\"#DeepPartial\" class=\"headerlink\" title=\"DeepPartial\"></a>DeepPartial</h3><p><code>DeepPartial&lt;T&gt;</code> 将类型的属性变成可选，只支持<strong>多</strong>层的属性</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">DeepPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span>\n  \t<span class=\"token operator\">?</span> DeepPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> \n  \t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Required\"><a href=\"#Required\" class=\"headerlink\" title=\"Required\"></a>Required</h3><p><code>Required&lt;T&gt;</code>将类型的属性变成必选</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Required<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Readonly\"><a href=\"#Readonly\" class=\"headerlink\" title=\"Readonly\"></a>Readonly</h3><p><code>Readonly&lt;T&gt;</code> 的作用是将某个类型所有属性变为只读属性，也就意味着这些属性不能被重新赋值。只对一级的属性做限制不能修改，如果是引用类型，还是可以修改的。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Readonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">readonly</span>\t<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Pick（挑选）\"><a href=\"#Pick（挑选）\" class=\"headerlink\" title=\"Pick（挑选）\"></a>Pick（挑选）</h3><p>Pick 从某个类型中挑出一些属性出来</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Record（转化）\"><a href=\"#Record（转化）\" class=\"headerlink\" title=\"Record（转化）\"></a>Record（转化）</h3><p><code>Record&lt;K extends keyof any, T&gt;</code> 的作用是将 K 中所有的属性的值转化为 T 类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Record<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Page</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"home\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"about\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"contact\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span>Page<span class=\"token punctuation\">,</span> PageInfo<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  about<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"about\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  contact<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"contact\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  home<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> title<span class=\"token operator\">:</span> <span class=\"token string\">\"home\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Exclude（移除）\"><a href=\"#Exclude（移除）\" class=\"headerlink\" title=\"Exclude（移除）\"></a>Exclude（移除）</h3><p><code>Exclude&lt;T, U&gt;</code> 的作用是将某个类型中属于另一个的类型移除掉。如果 T 能赋值给 U 类型的话，那么就会返回 never 类型，否则返回 T 类型。最终实现的效果就是将 T 中某些属于 U 的类型移除掉。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Exclude<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 例子</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"b\" | \"c\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"c\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T2</span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string | number</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Extract（公共）\"><a href=\"#Extract（公共）\" class=\"headerlink\" title=\"Extract（公共）\"></a>Extract（公共）</h3><p><code>Extract&lt;T, U&gt;</code> 的作用是从 T 中提取出 U，提取公共部分。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Extract<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"b\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"f\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// () =>void</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Omit（差集）\"><a href=\"#Omit（差集）\" class=\"headerlink\" title=\"Omit（差集）\"></a>Omit（差集）</h3><p><code>Omit&lt;T, K extends keyof any&gt;</code> 的作用是使用 T 类型中除了 K 类型的所有属性，来构造一个新的类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> \n  Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">TodoPreview</span> <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token string\">\"description\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> todo<span class=\"token operator\">:</span> TodoPreview <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Clean room\"</span><span class=\"token punctuation\">,</span>\n  completed<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"NonNullable\"><a href=\"#NonNullable\" class=\"headerlink\" title=\"NonNullable\"></a>NonNullable</h3><p><code>NonNullable&lt;T&gt;</code> 的作用是用来过滤类型中的 null 及 undefined 类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">NonNullable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token keyword\">null</span></span><span class=\"token operator\">|</span><span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T0</span></span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string | number</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">T1</span></span> <span class=\"token operator\">=</span> NonNullable<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string[]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"Parameters\"><a href=\"#Parameters\" class=\"headerlink\" title=\"Parameters\"></a>Parameters</h3><p><code>Parameters&lt;T&gt;</code>的作用是用于获得函数的参数类型组成的元组类型。</p>\n<pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Parameters<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> \n  <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token operator\">?</span> <span class=\"token constant\">P</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// []</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span>isArray<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [any]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> parseInt<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [string, (number | undefined)?]</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">D</span></span> <span class=\"token operator\">=</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Math<span class=\"token punctuation\">.</span>max<span class=\"token operator\">></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// number[]</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"ReturnType\"><a href=\"#ReturnType\" class=\"headerlink\" title=\"ReturnType\"></a>ReturnType</h3><p>获取函数的返回值的类型</p>\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReturnType<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">infer</span> <span class=\"token constant\">R</span> <span class=\"token operator\">?</span> <span class=\"token constant\">R</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">E</span></span> <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token comment\">// E的类型是string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"tsconfig-json介绍\"><a href=\"#tsconfig-json介绍\" class=\"headerlink\" title=\"tsconfig.json介绍\"></a>tsconfig.json介绍</h2><p>tsconfig.json 是 TypeScript 编译的相关配置，用于描述将TS转化为JS代码的配置文件，通过更改编译配置项，我们可以让 TypeScript 编译出 ES6、ES5、node 的代码。</p>\n<ul>\n<li>生成tsconfig.js文件：<code>tsc --init</code></li>\n<li>查看更多配置和使用说名: <code>tsc -h</code></li>\n<li>应当将tsc作为类型检查工具，而不是编译项目的工具，代码编译的工作应该交给babel、webpack等工具</li>\n</ul>\n<h2 id=\"tsconfig-json-重要字段\"><a href=\"#tsconfig-json-重要字段\" class=\"headerlink\" title=\"tsconfig.json 重要字段\"></a>tsconfig.json 重要字段</h2><ul>\n<li>files，设置需要编译的单个文件的列表；</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// 只编译 src下的 index.ts文件</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/index.ts\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>include，设置需要进行编译的文件或者目录，支持路径模式匹配；<br>include和files会合并</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// 编译src所有的ts文件</span>\n<span class=\"token comment\">// 支持通配符，只编译src下的一级目录的ts文件，如\"src/*\"，二级文件 \"src/*/*\"</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>exclude，排除不需要进行编译的文件，支持路径模式匹配（排除）；默认排除node_modules下的所有文件、排除所有声明文件(xxx.d.ts)，只对include字段有排除效果，对file字段无影响。</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// 排除src/lib的文件编译</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/lib\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>extends，导入或者继承其他tsconfig配置</li>\n</ul>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token comment\">// 导入当前目录下的tsconfig.base.json里的配置，但是导入的配置容易被覆盖（在tsconfig.json可以覆盖导入的配置）</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./tsconfig.base.json\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>compileOnSave: true, 保存文件时自动触发tsc编译文件（VScode不支持这个配置），一般来说，代码编译过程会通过webpack等打包构建工具，并且使用热更新，因此一般不需要配置该项。</li>\n<li>compilerOptions，设置与编译流程相关的选项。</li>\n<li>如果ts.config文件为空，则会按照默认是编译当前目录下的所有ts文件。</li>\n</ul>\n<h3 id=\"compilerOptions-选项\"><a href=\"#compilerOptions-选项\" class=\"headerlink\" title=\"compilerOptions 选项\"></a>compilerOptions 选项</h3><pre class=\"line-numbers language-tsx\" data-language=\"tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">\"tsBuildInfoFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">'./buildFile'</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 指定编译后的文件放在哪里</span>\n\n    <span class=\"token comment\">/* 基本选项 */</span>\n    <span class=\"token string-property property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 指定编译后ECMAScript目标版本: 要将ts编译成js哪个版本的语法，'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'</span>\n    <span class=\"token string-property property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'</span>\n    <span class=\"token string-property property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                             <span class=\"token comment\">// 指定要包含在编译中的库文件</span>\n    <span class=\"token string-property property\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 允许编译 javascript 文件</span>\n    <span class=\"token string-property property\">\"checkJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 报告 javascript 文件中的错误</span>\n    <span class=\"token string-property property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\">// 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'</span>\n    <span class=\"token string-property property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 生成相应的 '.d.ts' 文件</span>\n    <span class=\"token string-property property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\">// 生成相应的 '.map' 文件</span>\n    <span class=\"token string-property property\">\"outFile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 将输出文件合并为一个文件</span>\n    <span class=\"token string-property property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 指定输出目录</span>\n    <span class=\"token string-property property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 用来控制只能引用当前目录下的ts文件.</span>\n    <span class=\"token string-property property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 删除编译后的所有的注释</span>\n    <span class=\"token string-property property\">\"noEmit\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 不生成输出文件</span>\n    <span class=\"token string-property property\">\"importHelpers\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// 从 tslib 导入辅助工具函数</span>\n    <span class=\"token string-property property\">\"isolatedModules\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.</span>\n\n    <span class=\"token comment\">/* 严格的类型检查选项 */</span>\n    <span class=\"token string-property property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 启用所有严格类型检查选项</span>\n    <span class=\"token string-property property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                 <span class=\"token comment\">// 在表达式和声明上有隐含的 any类型时报错</span>\n    <span class=\"token string-property property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 启用严格的 null 检查</span>\n    <span class=\"token string-property property\">\"noImplicitThis\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 当 this 表达式值为 any 类型的时候，生成一个错误</span>\n    <span class=\"token string-property property\">\"alwaysStrict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                  <span class=\"token comment\">// 以严格模式检查每个模块，并在每个文件里加入 'use strict'</span>\n\n    <span class=\"token comment\">/* 额外的检查 */</span>\n    <span class=\"token string-property property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 有未使用的变量时，抛出错误</span>\n    <span class=\"token string-property property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// 有未使用的参数时，抛出错误</span>\n    <span class=\"token string-property property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>             <span class=\"token comment\">// 并不是所有函数里的代码都有返回值时，抛出错误</span>\n    <span class=\"token string-property property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span>\n\n    <span class=\"token comment\">/* 模块解析选项 */</span>\n    <span class=\"token string-property property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)</span>\n    <span class=\"token string-property property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 用于解析非相对模块名称的基目录</span>\n    <span class=\"token string-property property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">// 模块名到基于 baseUrl 的路径映射的列表</span>\n    <span class=\"token string-property property\">\"rootDirs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span>\n    <span class=\"token string-property property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 包含类型声明的文件列表</span>\n    <span class=\"token string-property property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">// 需要包含的类型声明文件名列表</span>\n    <span class=\"token string-property property\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 允许从没有设置默认导出的模块中默认导入。</span>\n\n    <span class=\"token comment\">/* Source Map Options */</span>\n    <span class=\"token string-property property\">\"sourceRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                    <span class=\"token comment\">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span>\n    <span class=\"token string-property property\">\"mapRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                       <span class=\"token comment\">// 指定调试器应该找到映射文件而不是生成文件的位置</span>\n    <span class=\"token string-property property\">\"inlineSourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span>\n    <span class=\"token string-property property\">\"inlineSources\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span>\n\n    <span class=\"token comment\">/* 其他选项 */</span>\n    <span class=\"token string-property property\">\"experimentalDecorators\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\">// 启用装饰器</span>\n    <span class=\"token string-property property\">\"emitDecoratorMetadata\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>          <span class=\"token comment\">// 为装饰器提供元数据的支持</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"TypeScript-面试\"><a href=\"#TypeScript-面试\" class=\"headerlink\" title=\"TypeScript 面试\"></a>TypeScript 面试</h2><ul>\n<li><a href=\"https://juejin.cn/post/6988763249982308382\">TypeScript 面试题</a></li>\n<li><a href=\"https://juejin.cn/post/6999985372440559624\">TypeScript 面试题及答案</a></li>\n</ul>\n"},{"title":"localStorage、sessionStorage和cookie的区别","date":"2021-01-15T10:22:49.000Z","toc":true,"comments":1,"copyright":false,"_content":"# localStorage 和 sessionStorage\n\n- localStorage 和 sessionStorage 是 HTML5 新增的浏览器本地缓存API，localstorage，sessionstorage在浏览器无痕模式下会存在丢失问题\n- 只有相同域名的页面才能互相读取 localStorage\n- 浏览器同时打开两个相同域名的tab页面，localstorage是共享的，sessionstorage是不共享的\n- localStorage 和 sessionStorage的存取操作都是同步的\n\n## 主要用途\n\n1. localStorage\n\n- 项目状态管理的持久化，例如redux的持久化、mobx的持久化、vuex的持久化等\n- 项目全局风格状态的切换（页面的默认定制配置），例如主题颜色、语言标识\n- token的存储\n- 项目通用参数的存储，来记录一些不敏感的信息\n\n2. sessionStorage\n\n- sessionStorage 适合一次性临时数据保存\n\n## localStorage、sessionStorage和cookie的异同点\n\n|      分类      |                                  生命周期                                  | 存储容量 |\n| :------------: | :------------------------------------------------------------------------: | :------: |\n|     cookie     | 默认保存在内存中，随浏览器关闭失效（如果设置过期时间，在到过期时间后失效） |   4KB   |\n|  localStorage  |                         永久有效的，除非主动清除。                         |  5M左右  |\n| sessionStorage |          仅在当前tab页会话下有效，关闭tab页面或浏览器后会被清除。          |  5M左右  |\n\n## 基本使用\n\n```js\n// 以 localStorage 为例\nlocalStorage.setItem(key, value);\t// 存储\n\nlocalStorage.getItem(key);\t//  获取\n\nlocalStorage.removeItem(key);\t// 删除\n\nlocalStorage.clear();\t// 清空\n```\n\n## localStorage 数据过期（脏数据）\n\nlocalstorage本身是没有过期机制的，可以通过手动实现。具体的做法是：\n\n- 存入数据时，顺便存一个过期时间 maxAge 和 当前存值时间戳 time\n- 获取数据时，通过（time + maxAge 和 Date.now()的关系）来判断当前数据是否过期，过期则删除当前数据; 否则正常返回数据\n- 参考：[如何实现localStorage的过期机制？](https://juejin.cn/post/7068533397911502879)\n\n没有手动封装localStorage过期的token登录例子：假如前端用localStorage永久存储token（token由过期时间、其他信息组成），发送请求时，后端拿到token检验是否过期，token过期后，后端会返回401状态码，前台统一捕获这个状态码后跳转到登录页面（过期重定向）。一般都是这么个做法，但是这个做法有一个小弊端：需要依靠请求才能感知是否已过期。\n\n# cookie\n\ncookie是客户端保存用户信息的一种机制，用来记录用户的一些信息。\n\n## cookie的组成\n\n服务器一般是通过在http响应消息头增加Set-Cookie，将Cookie信息种在浏览器中，浏览器发送http请求时，会自动带上同源的Cookie请求头字段，传给服务器。\n\n```js\n// 其中name=value是必选项，其它都是可选项\nSet-Cookie: \"name=value;domain=.domain.com;path=/;expires=<date>, 11 Jun 2019 11:29:42 GMT;HttpOnly;secure\"\n```\n\n- expires: 设置cookie的有效期，如果cookie 超过 date 所表示的日期时，cookie将失效。 如果没有设置这个选项，那么cookie将在浏览器关闭时失效。\n  另外，浏览器根据本地时间，决定 Cookie 是否过期，由于本地时间是不精确的，所以没有办法保证 Cookie 一定会在服务器指定的时间过期。\n- Max-Age：指定从现在开始 Cookie 存在的秒数，比如60 * 60 * 24 * 365（即一年）。过了这个时间以后，浏览器就不再保留这个 Cookie。\n  如果同时指定了Expires和Max-Age，那么Max-Age的值将优先生效。\n  如果Set-Cookie字段没有指定Expires或Max-Age属性，那么这个 Cookie 就是 Session Cookie，即它只在本次对话存在，一旦用户关闭浏览器，浏览器就不会再保留这个 Cookie。\n- domain=<domain_name> : .taobao.com(a.taobao.com和b.taobao.com都可以访问)，但是不能设置成taobao.com，这样是不允许的携带cookies\n- path=<some_path>: 一般是 / (注：临时cookie，没有expires参数的cookie，不能带有domain选项)，当客户端发送一个http请求时，会将有效的cookie一起发送给服务器，如果一个cookie的domain和path参数和URL匹配，那么这个cookie就是有效的。\n- secure: secure属性指定浏览器只有在加密协议 HTTPS 下，才能将这个 Cookie 发送到服务器。该属性只是一个开关，不需要指定值。\n- httponly : 表示cookie不能被客户端脚本获取到。HttpOnly属性指定该 Cookie 无法通过 JavaScript 脚本拿到，主要是Document.cookie属性、XMLHttpRequest对象和 Request API 都拿不到该属性。这样就防止了该 Cookie 被脚本读到，只有浏览器发出 HTTP 请求时，才会带上该 Cookie。\n  （但还是能通过 Application 中手动修改 cookie，所以只是在一定程度上可以防止 XSS 攻击，不是绝对的安全）有助于避免 XSS 攻击。（防止通过srcipt标签里面的代码获取cookie）\n\n# localforage前端本地存储\n\n- 可以解决 localStorage/sessionStorage 大小限制的问题\n- localforage.getItem 返回的是 promise\n- 不会因为关闭浏览器就消失，需要手动清理哦 localforage.removeItem(key), localforage.clear()\n- [localforage库](https://www.npmjs.com/package/localforage)\n- [localforage前端数据存储](https://juejin.cn/post/7024119821365149709)\n\n# 参考\n\n- [localStorage、sessionStorage、cookie、session几种web数据存储方式对比总结](https://juejin.cn/post/6844903989096497159)\n- [理解cookie、session、localStorage、sessionStorage的关系与区别](https://juejin.cn/post/6844903975800537096)\n- [傻傻分不清之 Cookie、Session、Token、JWT](https://juejin.cn/post/6844904034181070861)\n","source":"_posts/front_end/browser-cache.md","raw":"---\ntitle: localStorage、sessionStorage和cookie的区别\ndate: 2021-01-15 10:22:49\ncategories:\n  - 前端\ntags:\n  - 浏览器\ntoc: true # 是否启用内容索引\ncomments: true\ncopyright: false\n---\n# localStorage 和 sessionStorage\n\n- localStorage 和 sessionStorage 是 HTML5 新增的浏览器本地缓存API，localstorage，sessionstorage在浏览器无痕模式下会存在丢失问题\n- 只有相同域名的页面才能互相读取 localStorage\n- 浏览器同时打开两个相同域名的tab页面，localstorage是共享的，sessionstorage是不共享的\n- localStorage 和 sessionStorage的存取操作都是同步的\n\n## 主要用途\n\n1. localStorage\n\n- 项目状态管理的持久化，例如redux的持久化、mobx的持久化、vuex的持久化等\n- 项目全局风格状态的切换（页面的默认定制配置），例如主题颜色、语言标识\n- token的存储\n- 项目通用参数的存储，来记录一些不敏感的信息\n\n2. sessionStorage\n\n- sessionStorage 适合一次性临时数据保存\n\n## localStorage、sessionStorage和cookie的异同点\n\n|      分类      |                                  生命周期                                  | 存储容量 |\n| :------------: | :------------------------------------------------------------------------: | :------: |\n|     cookie     | 默认保存在内存中，随浏览器关闭失效（如果设置过期时间，在到过期时间后失效） |   4KB   |\n|  localStorage  |                         永久有效的，除非主动清除。                         |  5M左右  |\n| sessionStorage |          仅在当前tab页会话下有效，关闭tab页面或浏览器后会被清除。          |  5M左右  |\n\n## 基本使用\n\n```js\n// 以 localStorage 为例\nlocalStorage.setItem(key, value);\t// 存储\n\nlocalStorage.getItem(key);\t//  获取\n\nlocalStorage.removeItem(key);\t// 删除\n\nlocalStorage.clear();\t// 清空\n```\n\n## localStorage 数据过期（脏数据）\n\nlocalstorage本身是没有过期机制的，可以通过手动实现。具体的做法是：\n\n- 存入数据时，顺便存一个过期时间 maxAge 和 当前存值时间戳 time\n- 获取数据时，通过（time + maxAge 和 Date.now()的关系）来判断当前数据是否过期，过期则删除当前数据; 否则正常返回数据\n- 参考：[如何实现localStorage的过期机制？](https://juejin.cn/post/7068533397911502879)\n\n没有手动封装localStorage过期的token登录例子：假如前端用localStorage永久存储token（token由过期时间、其他信息组成），发送请求时，后端拿到token检验是否过期，token过期后，后端会返回401状态码，前台统一捕获这个状态码后跳转到登录页面（过期重定向）。一般都是这么个做法，但是这个做法有一个小弊端：需要依靠请求才能感知是否已过期。\n\n# cookie\n\ncookie是客户端保存用户信息的一种机制，用来记录用户的一些信息。\n\n## cookie的组成\n\n服务器一般是通过在http响应消息头增加Set-Cookie，将Cookie信息种在浏览器中，浏览器发送http请求时，会自动带上同源的Cookie请求头字段，传给服务器。\n\n```js\n// 其中name=value是必选项，其它都是可选项\nSet-Cookie: \"name=value;domain=.domain.com;path=/;expires=<date>, 11 Jun 2019 11:29:42 GMT;HttpOnly;secure\"\n```\n\n- expires: 设置cookie的有效期，如果cookie 超过 date 所表示的日期时，cookie将失效。 如果没有设置这个选项，那么cookie将在浏览器关闭时失效。\n  另外，浏览器根据本地时间，决定 Cookie 是否过期，由于本地时间是不精确的，所以没有办法保证 Cookie 一定会在服务器指定的时间过期。\n- Max-Age：指定从现在开始 Cookie 存在的秒数，比如60 * 60 * 24 * 365（即一年）。过了这个时间以后，浏览器就不再保留这个 Cookie。\n  如果同时指定了Expires和Max-Age，那么Max-Age的值将优先生效。\n  如果Set-Cookie字段没有指定Expires或Max-Age属性，那么这个 Cookie 就是 Session Cookie，即它只在本次对话存在，一旦用户关闭浏览器，浏览器就不会再保留这个 Cookie。\n- domain=<domain_name> : .taobao.com(a.taobao.com和b.taobao.com都可以访问)，但是不能设置成taobao.com，这样是不允许的携带cookies\n- path=<some_path>: 一般是 / (注：临时cookie，没有expires参数的cookie，不能带有domain选项)，当客户端发送一个http请求时，会将有效的cookie一起发送给服务器，如果一个cookie的domain和path参数和URL匹配，那么这个cookie就是有效的。\n- secure: secure属性指定浏览器只有在加密协议 HTTPS 下，才能将这个 Cookie 发送到服务器。该属性只是一个开关，不需要指定值。\n- httponly : 表示cookie不能被客户端脚本获取到。HttpOnly属性指定该 Cookie 无法通过 JavaScript 脚本拿到，主要是Document.cookie属性、XMLHttpRequest对象和 Request API 都拿不到该属性。这样就防止了该 Cookie 被脚本读到，只有浏览器发出 HTTP 请求时，才会带上该 Cookie。\n  （但还是能通过 Application 中手动修改 cookie，所以只是在一定程度上可以防止 XSS 攻击，不是绝对的安全）有助于避免 XSS 攻击。（防止通过srcipt标签里面的代码获取cookie）\n\n# localforage前端本地存储\n\n- 可以解决 localStorage/sessionStorage 大小限制的问题\n- localforage.getItem 返回的是 promise\n- 不会因为关闭浏览器就消失，需要手动清理哦 localforage.removeItem(key), localforage.clear()\n- [localforage库](https://www.npmjs.com/package/localforage)\n- [localforage前端数据存储](https://juejin.cn/post/7024119821365149709)\n\n# 参考\n\n- [localStorage、sessionStorage、cookie、session几种web数据存储方式对比总结](https://juejin.cn/post/6844903989096497159)\n- [理解cookie、session、localStorage、sessionStorage的关系与区别](https://juejin.cn/post/6844903975800537096)\n- [傻傻分不清之 Cookie、Session、Token、JWT](https://juejin.cn/post/6844904034181070861)\n","slug":"front_end/browser-cache","published":1,"updated":"2022-07-04T14:36:54.588Z","layout":"post","photos":[],"link":"","_id":"cl5f0biic001pv4uw0oo2d3m6","content":"<h1 id=\"localStorage-和-sessionStorage\"><a href=\"#localStorage-和-sessionStorage\" class=\"headerlink\" title=\"localStorage 和 sessionStorage\"></a>localStorage 和 sessionStorage</h1><ul>\n<li>localStorage 和 sessionStorage 是 HTML5 新增的浏览器本地缓存API，localstorage，sessionstorage在浏览器无痕模式下会存在丢失问题</li>\n<li>只有相同域名的页面才能互相读取 localStorage</li>\n<li>浏览器同时打开两个相同域名的tab页面，localstorage是共享的，sessionstorage是不共享的</li>\n<li>localStorage 和 sessionStorage的存取操作都是同步的</li>\n</ul>\n<h2 id=\"主要用途\"><a href=\"#主要用途\" class=\"headerlink\" title=\"主要用途\"></a>主要用途</h2><ol>\n<li>localStorage</li>\n</ol>\n<ul>\n<li>项目状态管理的持久化，例如redux的持久化、mobx的持久化、vuex的持久化等</li>\n<li>项目全局风格状态的切换（页面的默认定制配置），例如主题颜色、语言标识</li>\n<li>token的存储</li>\n<li>项目通用参数的存储，来记录一些不敏感的信息</li>\n</ul>\n<ol start=\"2\">\n<li>sessionStorage</li>\n</ol>\n<ul>\n<li>sessionStorage 适合一次性临时数据保存</li>\n</ul>\n<h2 id=\"localStorage、sessionStorage和cookie的异同点\"><a href=\"#localStorage、sessionStorage和cookie的异同点\" class=\"headerlink\" title=\"localStorage、sessionStorage和cookie的异同点\"></a>localStorage、sessionStorage和cookie的异同点</h2><table>\n<thead>\n<tr>\n<th align=\"center\">分类</th>\n<th align=\"center\">生命周期</th>\n<th align=\"center\">存储容量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">cookie</td>\n<td align=\"center\">默认保存在内存中，随浏览器关闭失效（如果设置过期时间，在到过期时间后失效）</td>\n<td align=\"center\">4KB</td>\n</tr>\n<tr>\n<td align=\"center\">localStorage</td>\n<td align=\"center\">永久有效的，除非主动清除。</td>\n<td align=\"center\">5M左右</td>\n</tr>\n<tr>\n<td align=\"center\">sessionStorage</td>\n<td align=\"center\">仅在当前tab页会话下有效，关闭tab页面或浏览器后会被清除。</td>\n<td align=\"center\">5M左右</td>\n</tr>\n</tbody></table>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 以 localStorage 为例</span>\nlocalStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 存储</span>\n\nlocalStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//  获取</span>\n\nlocalStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 删除</span>\n\nlocalStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 清空</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"localStorage-数据过期（脏数据）\"><a href=\"#localStorage-数据过期（脏数据）\" class=\"headerlink\" title=\"localStorage 数据过期（脏数据）\"></a>localStorage 数据过期（脏数据）</h2><p>localstorage本身是没有过期机制的，可以通过手动实现。具体的做法是：</p>\n<ul>\n<li>存入数据时，顺便存一个过期时间 maxAge 和 当前存值时间戳 time</li>\n<li>获取数据时，通过（time + maxAge 和 Date.now()的关系）来判断当前数据是否过期，过期则删除当前数据; 否则正常返回数据</li>\n<li>参考：<a href=\"https://juejin.cn/post/7068533397911502879\">如何实现localStorage的过期机制？</a></li>\n</ul>\n<p>没有手动封装localStorage过期的token登录例子：假如前端用localStorage永久存储token（token由过期时间、其他信息组成），发送请求时，后端拿到token检验是否过期，token过期后，后端会返回401状态码，前台统一捕获这个状态码后跳转到登录页面（过期重定向）。一般都是这么个做法，但是这个做法有一个小弊端：需要依靠请求才能感知是否已过期。</p>\n<h1 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h1><p>cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息。</p>\n<h2 id=\"cookie的组成\"><a href=\"#cookie的组成\" class=\"headerlink\" title=\"cookie的组成\"></a>cookie的组成</h2><p>服务器一般是通过在http响应消息头增加Set-Cookie，将Cookie信息种在浏览器中，浏览器发送http请求时，会自动带上同源的Cookie请求头字段，传给服务器。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 其中name=value是必选项，其它都是可选项</span>\nSet<span class=\"token operator\">-</span>Cookie<span class=\"token operator\">:</span> <span class=\"token string\">\"name=value;domain=.domain.com;path=/;expires=&lt;date>, 11 Jun 2019 11:29:42 GMT;HttpOnly;secure\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>expires: 设置cookie的有效期，如果cookie 超过 date 所表示的日期时，cookie将失效。 如果没有设置这个选项，那么cookie将在浏览器关闭时失效。<br>另外，浏览器根据本地时间，决定 Cookie 是否过期，由于本地时间是不精确的，所以没有办法保证 Cookie 一定会在服务器指定的时间过期。</li>\n<li>Max-Age：指定从现在开始 Cookie 存在的秒数，比如60 * 60 * 24 * 365（即一年）。过了这个时间以后，浏览器就不再保留这个 Cookie。<br>如果同时指定了Expires和Max-Age，那么Max-Age的值将优先生效。<br>如果Set-Cookie字段没有指定Expires或Max-Age属性，那么这个 Cookie 就是 Session Cookie，即它只在本次对话存在，一旦用户关闭浏览器，浏览器就不会再保留这个 Cookie。</li>\n<li>domain&#x3D;<domain_name> : .taobao.com(a.taobao.com和b.taobao.com都可以访问)，但是不能设置成taobao.com，这样是不允许的携带cookies</li>\n<li>path&#x3D;<some_path>: 一般是 &#x2F; (注：临时cookie，没有expires参数的cookie，不能带有domain选项)，当客户端发送一个http请求时，会将有效的cookie一起发送给服务器，如果一个cookie的domain和path参数和URL匹配，那么这个cookie就是有效的。</li>\n<li>secure: secure属性指定浏览器只有在加密协议 HTTPS 下，才能将这个 Cookie 发送到服务器。该属性只是一个开关，不需要指定值。</li>\n<li>httponly : 表示cookie不能被客户端脚本获取到。HttpOnly属性指定该 Cookie 无法通过 JavaScript 脚本拿到，主要是Document.cookie属性、XMLHttpRequest对象和 Request API 都拿不到该属性。这样就防止了该 Cookie 被脚本读到，只有浏览器发出 HTTP 请求时，才会带上该 Cookie。<br>（但还是能通过 Application 中手动修改 cookie，所以只是在一定程度上可以防止 XSS 攻击，不是绝对的安全）有助于避免 XSS 攻击。（防止通过srcipt标签里面的代码获取cookie）</li>\n</ul>\n<h1 id=\"localforage前端本地存储\"><a href=\"#localforage前端本地存储\" class=\"headerlink\" title=\"localforage前端本地存储\"></a>localforage前端本地存储</h1><ul>\n<li>可以解决 localStorage&#x2F;sessionStorage 大小限制的问题</li>\n<li>localforage.getItem 返回的是 promise</li>\n<li>不会因为关闭浏览器就消失，需要手动清理哦 localforage.removeItem(key), localforage.clear()</li>\n<li><a href=\"https://www.npmjs.com/package/localforage\">localforage库</a></li>\n<li><a href=\"https://juejin.cn/post/7024119821365149709\">localforage前端数据存储</a></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://juejin.cn/post/6844903989096497159\">localStorage、sessionStorage、cookie、session几种web数据存储方式对比总结</a></li>\n<li><a href=\"https://juejin.cn/post/6844903975800537096\">理解cookie、session、localStorage、sessionStorage的关系与区别</a></li>\n<li><a href=\"https://juejin.cn/post/6844904034181070861\">傻傻分不清之 Cookie、Session、Token、JWT</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"localStorage-和-sessionStorage\"><a href=\"#localStorage-和-sessionStorage\" class=\"headerlink\" title=\"localStorage 和 sessionStorage\"></a>localStorage 和 sessionStorage</h1><ul>\n<li>localStorage 和 sessionStorage 是 HTML5 新增的浏览器本地缓存API，localstorage，sessionstorage在浏览器无痕模式下会存在丢失问题</li>\n<li>只有相同域名的页面才能互相读取 localStorage</li>\n<li>浏览器同时打开两个相同域名的tab页面，localstorage是共享的，sessionstorage是不共享的</li>\n<li>localStorage 和 sessionStorage的存取操作都是同步的</li>\n</ul>\n<h2 id=\"主要用途\"><a href=\"#主要用途\" class=\"headerlink\" title=\"主要用途\"></a>主要用途</h2><ol>\n<li>localStorage</li>\n</ol>\n<ul>\n<li>项目状态管理的持久化，例如redux的持久化、mobx的持久化、vuex的持久化等</li>\n<li>项目全局风格状态的切换（页面的默认定制配置），例如主题颜色、语言标识</li>\n<li>token的存储</li>\n<li>项目通用参数的存储，来记录一些不敏感的信息</li>\n</ul>\n<ol start=\"2\">\n<li>sessionStorage</li>\n</ol>\n<ul>\n<li>sessionStorage 适合一次性临时数据保存</li>\n</ul>\n<h2 id=\"localStorage、sessionStorage和cookie的异同点\"><a href=\"#localStorage、sessionStorage和cookie的异同点\" class=\"headerlink\" title=\"localStorage、sessionStorage和cookie的异同点\"></a>localStorage、sessionStorage和cookie的异同点</h2><table>\n<thead>\n<tr>\n<th align=\"center\">分类</th>\n<th align=\"center\">生命周期</th>\n<th align=\"center\">存储容量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">cookie</td>\n<td align=\"center\">默认保存在内存中，随浏览器关闭失效（如果设置过期时间，在到过期时间后失效）</td>\n<td align=\"center\">4KB</td>\n</tr>\n<tr>\n<td align=\"center\">localStorage</td>\n<td align=\"center\">永久有效的，除非主动清除。</td>\n<td align=\"center\">5M左右</td>\n</tr>\n<tr>\n<td align=\"center\">sessionStorage</td>\n<td align=\"center\">仅在当前tab页会话下有效，关闭tab页面或浏览器后会被清除。</td>\n<td align=\"center\">5M左右</td>\n</tr>\n</tbody></table>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 以 localStorage 为例</span>\nlocalStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 存储</span>\n\nlocalStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//  获取</span>\n\nlocalStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 删除</span>\n\nlocalStorage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 清空</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"localStorage-数据过期（脏数据）\"><a href=\"#localStorage-数据过期（脏数据）\" class=\"headerlink\" title=\"localStorage 数据过期（脏数据）\"></a>localStorage 数据过期（脏数据）</h2><p>localstorage本身是没有过期机制的，可以通过手动实现。具体的做法是：</p>\n<ul>\n<li>存入数据时，顺便存一个过期时间 maxAge 和 当前存值时间戳 time</li>\n<li>获取数据时，通过（time + maxAge 和 Date.now()的关系）来判断当前数据是否过期，过期则删除当前数据; 否则正常返回数据</li>\n<li>参考：<a href=\"https://juejin.cn/post/7068533397911502879\">如何实现localStorage的过期机制？</a></li>\n</ul>\n<p>没有手动封装localStorage过期的token登录例子：假如前端用localStorage永久存储token（token由过期时间、其他信息组成），发送请求时，后端拿到token检验是否过期，token过期后，后端会返回401状态码，前台统一捕获这个状态码后跳转到登录页面（过期重定向）。一般都是这么个做法，但是这个做法有一个小弊端：需要依靠请求才能感知是否已过期。</p>\n<h1 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h1><p>cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息。</p>\n<h2 id=\"cookie的组成\"><a href=\"#cookie的组成\" class=\"headerlink\" title=\"cookie的组成\"></a>cookie的组成</h2><p>服务器一般是通过在http响应消息头增加Set-Cookie，将Cookie信息种在浏览器中，浏览器发送http请求时，会自动带上同源的Cookie请求头字段，传给服务器。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 其中name=value是必选项，其它都是可选项</span>\nSet<span class=\"token operator\">-</span>Cookie<span class=\"token operator\">:</span> <span class=\"token string\">\"name=value;domain=.domain.com;path=/;expires=&lt;date>, 11 Jun 2019 11:29:42 GMT;HttpOnly;secure\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>expires: 设置cookie的有效期，如果cookie 超过 date 所表示的日期时，cookie将失效。 如果没有设置这个选项，那么cookie将在浏览器关闭时失效。<br>另外，浏览器根据本地时间，决定 Cookie 是否过期，由于本地时间是不精确的，所以没有办法保证 Cookie 一定会在服务器指定的时间过期。</li>\n<li>Max-Age：指定从现在开始 Cookie 存在的秒数，比如60 * 60 * 24 * 365（即一年）。过了这个时间以后，浏览器就不再保留这个 Cookie。<br>如果同时指定了Expires和Max-Age，那么Max-Age的值将优先生效。<br>如果Set-Cookie字段没有指定Expires或Max-Age属性，那么这个 Cookie 就是 Session Cookie，即它只在本次对话存在，一旦用户关闭浏览器，浏览器就不会再保留这个 Cookie。</li>\n<li>domain&#x3D;<domain_name> : .taobao.com(a.taobao.com和b.taobao.com都可以访问)，但是不能设置成taobao.com，这样是不允许的携带cookies</li>\n<li>path&#x3D;<some_path>: 一般是 &#x2F; (注：临时cookie，没有expires参数的cookie，不能带有domain选项)，当客户端发送一个http请求时，会将有效的cookie一起发送给服务器，如果一个cookie的domain和path参数和URL匹配，那么这个cookie就是有效的。</li>\n<li>secure: secure属性指定浏览器只有在加密协议 HTTPS 下，才能将这个 Cookie 发送到服务器。该属性只是一个开关，不需要指定值。</li>\n<li>httponly : 表示cookie不能被客户端脚本获取到。HttpOnly属性指定该 Cookie 无法通过 JavaScript 脚本拿到，主要是Document.cookie属性、XMLHttpRequest对象和 Request API 都拿不到该属性。这样就防止了该 Cookie 被脚本读到，只有浏览器发出 HTTP 请求时，才会带上该 Cookie。<br>（但还是能通过 Application 中手动修改 cookie，所以只是在一定程度上可以防止 XSS 攻击，不是绝对的安全）有助于避免 XSS 攻击。（防止通过srcipt标签里面的代码获取cookie）</li>\n</ul>\n<h1 id=\"localforage前端本地存储\"><a href=\"#localforage前端本地存储\" class=\"headerlink\" title=\"localforage前端本地存储\"></a>localforage前端本地存储</h1><ul>\n<li>可以解决 localStorage&#x2F;sessionStorage 大小限制的问题</li>\n<li>localforage.getItem 返回的是 promise</li>\n<li>不会因为关闭浏览器就消失，需要手动清理哦 localforage.removeItem(key), localforage.clear()</li>\n<li><a href=\"https://www.npmjs.com/package/localforage\">localforage库</a></li>\n<li><a href=\"https://juejin.cn/post/7024119821365149709\">localforage前端数据存储</a></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://juejin.cn/post/6844903989096497159\">localStorage、sessionStorage、cookie、session几种web数据存储方式对比总结</a></li>\n<li><a href=\"https://juejin.cn/post/6844903975800537096\">理解cookie、session、localStorage、sessionStorage的关系与区别</a></li>\n<li><a href=\"https://juejin.cn/post/6844904034181070861\">傻傻分不清之 Cookie、Session、Token、JWT</a></li>\n</ul>\n"},{"title":"Node 知识梳理（一）","date":"2022-01-05T22:15:33.000Z","toc":true,"comments":1,"copyright":false,"_content":"- Node 是一个基于谷歌V8引擎的一个JavaScript运行环境（runtime运行时），是服务端的运行环境。\n- Node 的特点是事件驱动、非阻塞式 I/O（input/output）、单线程。触发一次事件，执行回调，是事件驱动的一种体现。\n\n# Node的使用场景\n\n- I/O 密集型场景\n- 提供http接口，组装数据\n- RPC服务，RPC（Remote Procedure Call远程过程调用），RPC服务也是采用的TCP，出名的RPC服务有Google的gRPC、阿里的Dubble\n- 基础工具：构建工具（webpack、vite）、搭建脚手架（cra、vue-cli、umi）等\n- BFF：接口聚合、转发\n- Serverless（无服务器架构）：函数即服务，写一个函数就可以实现一个 API 接口给到前端\n- Microservices（微服务）：小型服务、以独立进程运行、可以使用不同语言\n\n# Node.js 架构（node底层原理）\n\n1. Node.js内置模块（标准库）： http、fs、buffer、path、stream。\n2. Node bindings（桥梁）：是JavaScript与 C++ 连接的桥梁，对底层模块进行封装，为内置模块的提供 API 接口。\n3. Node底层模块\n- V8：Google开源的高性能JavaScript引擎，使用 C++ 开发，并且应用于谷歌浏览器\n- Libuv：提供Event Loop 事件循环和线程池，提供事件驱动的 I/O 库。它是使用 C 和 C++ 语言为 Node.js 所开发的，同时也是 I/O 操作的核心部分，例如读取文件和 OS 交互（几乎所有和操作系统打交道的部分离不开libuv的支持）\n- C-ares（异步 DNS 解析库）\n- Low-Level Components：提供了http 解析、OpenSSL、数据压缩（zlib）等功能。\n\n# Node EventLoop（事件循环）\n\nnode中的事件循环的顺序：\n外部输入数据(incoming) --> 轮询阶段(poll) --> 检查阶段(check)--> 关闭事件回调阶段(close callbacks) --> 定时器检测阶段(timers) --> I/O事件回调阶段(I/O callbacks) --> 闲置阶段(idle, prepare) --> 轮询阶段(按照该顺序反复运行)\n\n每个阶段都有一个先入先出的队列，这个队列存有要执行的回调函数\n\n```js\n   ┌───────────────────────────┐\n┌─>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     I/O callbacks         │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │<─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n```\n## Node事件循环各阶段概述\n\n绝大部分异步任务都是在timers、poll、check这3个阶段处理的。\n1. timers 这个阶段执行 setTimeout() 和 setInterval() 的回调，并且是由 poll 阶段控制的。 在 Node 中定时器指定的时间也不是准确时间，只能是尽快执行，如果操作系统很忙，那么计时器的回调函数就会被推迟执行\n2. I/O callbacks 处理一些上一轮循环中的少数未执行的 I/O 回调（执行一些系统操作的回调函数）\n3. 闲置阶段：idle（空闲），prepare 仅在内部使用。\n4. poll（轮询阶段）：处理大部分的事件，如看看有没有文件可以读，有没有请求可以处理，检查一下最近的计时器，看看有没有需要过会儿去执行的 callback。poll 是一个至关重要的阶段，这一阶段中，系统会做两件事情\n  - 回到 timer 阶段执行回调\n  - 执行 I/O 回调\n\n并且在进入该阶段时如果没有设定了 timer 的话，会发生以下两件事情\n\n- 如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制\n- 如果 poll 队列为空时，会有两件事发生\n\n  - 如果有 setImmediate 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调\n  - 如果没有 setImmediate 回调需要执行，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间设置防止一直等待下去\n5. check（检查） 执行 setImmediate() 的回调\n6. close callbacks 执行 socket 的 close 事件回调，例如：`socket.on('close', ...)`，如果队列是空的，则跳过\n\nNode 不会一直循环循环，如果发现没什么事儿做，就会停留在 poll（轮询）阶段，大部分事件都在 poll 阶段被处理，如文件、网络请求等\n\n# 进程和线程\n\n1. 进程\n\n- 进程可以说是计算机系统进行资源分配和调度的基本单位，启动一个服务、运行一个应用，就是开一个进程，进程是线程的容器。\n- 例如 Java 里的 JVM 本身就是一个进程，Node.js 里通过 node app.js 开启一个服务进程。在任务管理器查看任务进程，Nodejs JavaScript Runtime\n<img src=\"/images/front_end/nodejs-runtime001.png\" >\n- 一个进程无法访问另外一个进程里定义的变量、数据结构，只有建立了 IPC 通信，进程之间才可数据共享。\n- 同一块代码，可以根据系统CPU核心数启动多个进程，每个进程都有属于自己的独立运行空间，进程之间是不相互影响的。\n\n2. 线程\n\n- 线程是属于进程的，进程可以调用线程去执行一些子任务，一个进程是可以拥有多个线程的。\n- 同一进程中的多条线程可以共享该进程中的全部系统资源。\n- 同一进程中的多个线程有各自的调用栈（call stack），本地存储（thread-local storage)等。\n- 线程可以分为单线程（JavaScript）和多线程（Java）。\n\n3. 单线程\n\n- 单线程就是一个进程只开一个线程，Javascript 就是属于单线程，程序顺序执行，前面一个执行完之后，后面才可以执行。\n- 在使用单线程编码时不要有过多耗时的同步操作，否则线程会造成阻塞，导致后续响应无法处理，适当地使用异步操作。\n\n4. 多线程\n\n- 多线程就是，一个进程可以开启多线程，Java 就是多线程编程语言的一种，可以有效避免代码阻塞导致的后续请求无法处理。\n- 多线程创建新的线程来切换开销，由于每创建一个线程就会占用一定的内存，当应用程序并发大了之后，内存将会很快耗尽。\n\n# Node模块机制\n1. Node.js 模块采用Commonjs规范，Node.js的系统模块采用了延迟加载的策略，只有在用到的情况下，系统模块才会被加载，加载完成后会放到 binding_cache缓存中。\n2. 在 Node.js 中模块加载一般会经历 3 个步骤，路径分析、文件定位、编译执行。按照模块的分类，按照以下顺序进行优先加载：\n- 如果有 `./`从当前目录查找，相对路径文件模块\n- 如果没有 `./`，先从系统模块，再从node_modules下查找 （[nodejs模块系统](https://blog.csdn.net/gongch0604/article/details/111748684)）\n- 系统缓存：模块被执行之后会进行缓存，首先是先进行缓存加载，判断缓存中是否有值（require.cache查看已缓存的模块，返回值为对象）。因为 Node.js 默认先从缓存中加载模块，一个模块被加载一次之后，就会在缓存中维持一个副本，如果遇到重复加载的模块会直接提取缓存中的副本，也就是说在任何时候每个模块都只在缓存中有一个实例。\n- 系统模块：也就是原生模块，这个优先级仅次于缓存加载，部分核心模块已经被编译成二进制，省略了 路径分析、文件定位，直接加载到了内存中，系统模块定义在 Node.js 源码的 lib 目录下，可以去查看。\n- 文件模块（开发者自己编写的模块）：优先加载 `.`、`..`、`/` 开头的，如果文件没有加上扩展名，会依次按照 `.js`、`.json`、`.node` 进行扩展名补足尝试，那么在尝试的过程中也是以同步阻塞模式来判断文件是否存在，从性能优化的角度来看待，`.json`、`.node`最好还是加上文件的扩展名。\n- 目录做为模块：这种情况发生在文件模块加载过程中，也没有找到，但是发现是一个目录的情况，这个时候会将这个目录当作一个包来处理，Node 这块采用了 Commonjs 规范，先会在项目根目录查找 package.json 文件，取出文件中定义的 main 属性 `(\"main\": \"lib/index.js\")` 描述的入口文件进行加载，也没加载到，则会抛出默认错误: `Error: Cannot find module 'lib/index.js'`\n- node_modules 目录加载：对于系统模块、路径文件模块都找不到，Node.js 会从当前模块的父目录进行查找，直到系统的根目录\n\n# Node常用模块\n\n|模块名称 | 功能描述|\n|:-:|:-:|\n| buffer | 实现数据缓冲区，Buffer一般用于处理二进制数据，也可以处理字符编码|\n| child_process| （实现多进程任务）创建子进程，实现子进程和主进程之间的通信|\n| cluster | 可以简化`多进程`、`并行化`程序的开发难度，利用多核CPU 实现并行，轻松构建一个用于负载均衡的集群。著名的pm2模块就使用了cluster实现|\n| console| 和浏览里的用法一样，比如console.log、console.dir等\n|crypto|对OpenSSL里的 HMAC、Cipher、Decipher等算法进行加解密封装，一般用户在进行密码处理时都会用到该模块|\n|dns|域名解析，主要API是 lookup和 resolve|\n| events| 事件处理，EventEmitter的核心功能就是对事件触发和事件监听器功能进行封装|\n| fs|文件系统模块，主要针对目录、文件进行操作，开发中使用极其广泛| \n| http | Node.js里使用多的模块，可以非常构建Web应用服务，搭建HTTP服务端和客户端，是Web框架的底层核心库| \n| http2| 下一代HTTP协议，在Node.js 8里是需要通过flag开启的体验功能|\n| https| HTTPS实现，是HTTP的安全加强版| HTTPS的安全基础是SSL，在架构选择上，可以通过Nginx实现，也可以在 Node.js应用层上实现|\n\n## process全局对象\n\nNode.js 中的进程 process 是一个全局对象，无需 require 直接使用（global.process = process），process对象是EventEmitter的实例\n\n- process.title：终端上显示的标题\n- process.version：nodejs的版本号\n- process.versions：nodejs依赖模块的版本信息\n- process.env：环境变量，例如通过 `process.env.NODE_ENV` 获取不同环境项目配置信息，还可以往`process.env`上挂载其他常量。\n- process.nextTick：表示在事件循环（EventLoop）的下一次循环中调用 callback 回调函数，要注意的是它总会在I/O操作（比如查询数据）之前先执行\n- process.pid：获取当前进程id\n- process.ppid：当前进程对应的父进程\n- process.cwd()：获取当前进程工作目录\n- process.argv: 返回当前命令行指令参数，是一个数组，`process.argv[2]`\n- process.execPath：获取当前进程的这个可执行文件的绝对路径\n- process.exit([code])：终止当前进程并返回给定的 code，默认是0\n- process.exitCode：可以自定义退出进程时node shell捕获到的状态码（可以自定义退出进程时node shell捕获到的状态码）\n- process.chdir(directory)：改变进程的当前进程的工作目录（该目录必须已存在），若操作失败则抛出异常\n- process.platform：获取当前进程运行的操作系统平台\n- process.uptime()：当前进程已运行时间，例如：pm2 守护进程的 uptime 值\n- process.moduleLoadList：当前进程已加载的模块列表，nodejs模块系统。NativeModule原生模块\n- process.config：当前nodejs构建时使用的配置信息，可以辅助定位\n- `process.on('exit', callback)`：当进程将要退出时触发。 'exit'的回调结束后，主进程将不再运行\n- `process.on('SIGINT', callback)`：捕获当前进程接收到的信号\n- process.abort()：触发node的abort事件，退出当前进程，执行该函数后，后面的代码不执行。\n- `process.kill(pid, [signal])`：结束对应某pid的进程并发送一个信号\n- 进程事件：`process.on('uncaughtException', cb)` 捕获异常信息、`process.on('exit', cb)`进程推出监听\n- 三个标准流：process.stdout 标准输出、process.stdin 标准输入、process.stderr 标准错误输出\n\n### process.env\n\nprocess.env属性返回一个包含用户环境信息的对象。在node环境中，当我们打印process.env时，发现它并没有NODE_ENV这一个属性。实际上，process.env.NODE_ENV是在package.json的scripts命令中注入的，也就是NODE_ENV并不是node自带的，而是由用户定义的，至于为什么叫NODE_ENV，应该是约定成俗的吧。\n\n\n\n## child_process（创建子进程）\nNode.js 提供了 child_process 内置模块，用于创建子进程\n\n- child_process.spawn()：适用于返回大量数据，例如图像处理，二进制数据处理。\n- child_process.exec()：适用于小量数据，maxBuffer 默认值为 200 * 1024 超出这个默认值将会导致程序崩溃，数据量过大可采用 spawn。\n- child_process.execFile()：类似 child_process.exec()，区别是不能通过 shell 来执行，不支持像 I/O 重定向和文件查找这样的行为\n- child_process.fork()：衍生新的进程，进程之间是相互独立的，每个进程都有自己的 V8 实例、内存，系统资源是有限的，不建议衍生太多的子进程出来，通长根据系统 CPU 核心数设置。\n\n## path\n\n主要作用就是处理文件的目录和路径，在前端项目webpack配置文件中经常用到。\n\n### path.join()\n\n拼接多个路径片段，还原成完整可用路径\n\n```js\npath.join('a/b', 'c', 'index.html'); // a/b/c/index.html\npath.join('/a/b', 'c', 'index.html'); // /a/b/c/index.html\npath.join('a/b', 'c', '../', 'index.html'); // a/b/index.html\n```\n### path.resove()\n返回一个绝对路径\n```js\npath.resove(); // 获取绝对路径\npath.resove(__dirname, 'c', 'index.html');\n```\n### basename()\n获取路径中基础名称\n```js\npath.basename(__filename); // test.js\n// 传入第二个参数如果匹配会省略后缀，不匹配仍旧返回真实的后缀\npath.basename(__filename, '.js'); // test\npath.basename('/a/b/c'); // c\npath.basename('/a/b/c/'); // c\n```\n### path.extname()\n获取路径中的扩展名称\n```js\npath.extname('/src/index.html'); // .html\n```\n### path.parse()\n解析路径\n```js\nconst obj = path.parse('/src/index.html');\n/**\n* root: /\n* dir: /src\n* base: index.html\n* ext: .html\n* name: index\n*/\n```\n## fs(读取文件)\n\n## events（事件模块）\n- 在 Node.js 中一个很重要的模块 Events（EventEmitter 事件触发器），EventEmitter 本质上就是观察者模式的实现。net、http、fs、stream、process 等模块，express、koa 框架都依赖了Events。\n- EventEmitter 对象的事件触发 emit 和监听 on 是同步的，事件的回调是异步的。\n- 在 Node.js 的事件机制中主要有三类角色: 事件(Event)、事件发射器(EventEmitter)、事件监听器(Event Listener)。\n\n### Event\n\n- EventEmitter 提供了 `on()`、`once()`、`removeListener()` 等方法来对事件进行监听移除，可同时注册多个同名的事件。其中`once()`: 当触发多次相同名称事件，通过 once 添加的侦听器只会执行一次。\n\n- EventEmitter 会按照监听器注册的顺序**同步**地调用所有监听器，所以必须确保事件的排序正确。提前触发未监听的事件，不会报错，并且不会执行监听的回调函数。\n\n```js\n// 基本使用\nconst EventEmitter = require('events').EventEmitter;\nconst emitter = new EventEmitter();\nemitter.on(\"起床\", function(time) {\n    console.log(`早上 ${time} 开始起床，新的一天加油！`)\n});\nemitter.emit(\"起床\", \"6:00\");\n\n// 在 Koa 中 new 一个 app 对象，通过 app.emit() 触发一个事件，实现在整个系统中进行传递。\nconst Koa = require('koa');\nconst app = new Koa();\napp.on(\"koa\", function() {\n    console.log(\"在 Koa 中使用 EventEmitter\");\n});\napp.emit(\"koa\");\n\n// 通过Object.setPrototypeOf() 来实现的继承\nfunction MyEmitter(){\n    EventEmitter.call(this);\n}\nObject.setPrototypeOf(MyEmitter.prototype, EventEmitter.prototype);\nObject.setPrototypeOf(MyEmitter, EventEmitter);\n```\n- 默认情况下，如果为特定事件添加了超过 10 个监听器，则 EventEmitter 会打印一个警告。 但是，并不是所有的事件都要限制 10 个监听器。 `emitter.setMaxListeners()` 方法可以为指定的 EventEmitter 实例修改限制。\n\n```js\n// 操作最大事件监听个数\n// 设置同类型事件监听最大个数\nEventEmitter.prototype.setMaxListeners = function (count) {\n    this._count = count;\n}\n\n// 获取同类型事件监听最大个数\nEventEmitter.prototype.getMaxListeners = function () {\n    return this._count || EventEmitter.defaultMaxListeners;\n}\n```\n### error事件\n\n当EventEmitter 实例出错时，应该触发error事件。如果没有为error事件注册监听器，则当error事件触发时，会抛出错误、打印堆栈跟踪，并退出Node.js进程。\n\n```js\nconst EventEmitter = require ('events');\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter ();\n// 模拟触发error事件\nmyEmitter.emit('error', new Error('错误信息')); // 抛出错误\n\nmyEmitter.emit('error', (err) => {\n\tconsole.log(err))\n}); \n\n```\n## Buffer（缓冲区）\n- Buffer 用于读取或操作二进制数据流，将数据缓冲起来，它是临时性的，对于流式数据，会采用缓冲区将数据临时存储起来。\n- 如用于操作网络协议、数据库、图片和文件I/O 等一些需要大量二进制数据的场景，专门存放二进制数据的缓存区。\n- Buffer 作为存在于全局对象上，使用时无需 require 引入模块即可使用。\n- Buffer 在创建时大小已经被确定且是无法调整的，在内存分配这块 Buffer 是由 C++ 层面提供而不是 V8。\n\n### Buffer应用场景\n\nBuffer的应用场景有以下几种。\n\n- 在使用net或 http模块来接收网络数据时，可用 Buffer作为数据结构进行传输，即 data事件的参数。\n- 用于大文件的读取和写入。以前fs读取的内容是string，后来都改用Buffer，在大文件读取上，性能和内存有明显优势。\n- 用于字符转码、进制转换。Unicode 编码虽然能满足绝大部分场景，但有时候还是不够的，由于Node.js内置的转换编码并不支持GBK，因此如果要处理编码为GBK的文档，就需要iconv和 iconv-lite来补充一部分，string decoder模块提供了一个 API，用于把 Buffer对象解码成字符串，但会保留编码过的多字节UTF-8与UTF-16字符。\n- 用作数据结构，处理二进制数据，也可以处理字符编码。\n\n## Buffer与字符串的传输速度\n\nbuffer比string快。在 HTTP 传输中传输的是二进制数据，上面例子中的 /string 接口直接返回的字符串，这时候 HTTP 在传输之前会先将字符串转换为 Buffer 类型，以二进制数据传输，通过流（Stream）的方式一点点返回到客户端。但是直接返回 Buffer 类型，则少了每次的转换操作，对于性能也是有提升的。在一些 Web 应用中，对于静态数据可以预先转为 Buffer 进行传输，可以有效减少 CPU 的重复使用（重复的字符串转 Buffer 操作）。\n\n## buffer模块与Buffer的关系\n\nBuffer是全局global上的一个引用，指向的其实是buffer.Buffer\n\n```js\nconst buffer = require('buffer');\nconsole.log(buffer.Buffer === Buffer); //true\n```\n\n### 创建Buffer\n- Buffer.from()，第一个参数是内容，第二个是按什么格式转。Buffer.from不支持传入数字，传入数字可以采用传入数组的，存入的一组数据最好是：全部落在0到255区间  或者全部落在-128到127，这是因为不同的数字读取时应该调用不同的方法。\n```js\nBuffer.from(1234); // throw new errors.TypeError\n\nconst buf = Buffer.from([1, 2, 3, 4]);\nconsole.log(buf); //  <Buffer 01 02 03 04>  显示的是16进制的\n```\n- Buffer.alloc()，第一个参数是长度，第二个具体buffer内容\n```js\nconst b2 = Buffer.alloc(10);  // 创建一个大小为 10 个字节的缓冲区\nconsole.log(b2); // <Buffer 00 00 00 00 00 00 00 00 00 00>\n\n// 尝试分配一个大小为 2048 的 Buffer 对象\nBuffer.alloc(2 * 1024)\n\n// 打印buffer，将每个字符串对应的ASCII码的十进制，转化为16进制的，比如 H\n'H'.charCodeAt()// ASCII码：'72'\n'H'.charCodeAt().toString(16) // '72'的16进制 '48'\n```\n#### Buffer 字符编码\n通过使用字符编码，可实现 Buffer 实例与 JavaScript 字符串之间的相互转换。如果不传递 encoding 默认按照 UTF-8 格式转换存储\n- `'ascii'`仅适用于 7 位 ASCII 数据，此编码速度很快，如果设置则会剥离高位。\n- `'utf8'`多字节编码的 Unicode 字符，许多网页和其他文档格式都使用 UTF-8。\n- `'base64'`Base64 编码。。\n- `'binary'`一种将 Buffer 编码成单字节编码字符串的方法。\n- `'hex'`将每个字节编码成两个十六进制的字符。\n```js\nconst buf = Buffer.from('hello world', 'utf8');\nconsole.log(buf.toString('hex')); // 68656c6c6f20776f726c64\nconsole.log(buf.toString('utf8')); // hello world\n```\n### 字符串与 Buffer 类型互转\n\n#### 字符串转 Buffer（将字符串数据写入缓冲区）\n```js\nconst b3 = Buffer.from('123456789', 'utf8');\nconsole.log(b3) // <Buffer 31 32 33 34 35 36 37 38 39>\nconsole.log(b3.length) // 9\n```\n#### Buffer 转换为字符串（从缓冲区读取string数据）\n使用 buf.toString([encoding], [start], [end]) 方法，默认编码仍为 UTF-8\n```js\nconst b3 = Buffer.from('123456789', 'utf8');\n\nconsole.log(b3.toString()) // 123456789\nconsole.log(b3.toString('utf8', 0, 5)) // 1234\n```\n### 将buffer转换成JSON对象\nbuf.toJSON()，返回一个JSON对象。当字符串化一个buffer实例是，JSON.stringify()会隐式地调用该toJSON()。\n```js\nconst buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\nconst json = JSON.stringify(buf);\n\n// 输出: { \"type\": \"Buffer\", \"data\": [ 1,2,3,4,5] }\nconsole.log(json);\n\nconst copy = JSON.parse(json,(key, value) =>{\n  return value && value.type === 'Buffer' ? Buffer.from(value.data) :value;\n});\n\n// 输出:<Buffer 01 02 03 04 05>\nconsole.log(copy);\n```\n### buffer缓冲区的合并\nBuffer.concat(list[, totalLength])\n- list <Buffer[]> 要连接的 Buffer。\n- totalLength `<integer>` 连接时list中Buffer 实例的总长度，如果未提供 totalLength，则从 list 中的 Buffer 实例通过相加其长度来计算\n- 返回: `<Buffer>`\n\n```js\nconst buf1 = Buffer.alloc(10);\nconst buf2 = Buffer.alloc(14);\nconst buf3 = Buffer.alloc(18);\nconst totalLength = buf1.length + buf2.length + buf3.length;\nconsole.log(totalLength);\n// 打印: 42\nconst bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\nconsole.log(bufA);\n// 打印: <Buffer 00 00 00 00 ...>\nconsole.log(bufA.length);\n// 打印: 42\n```\n### 缓冲区的拷贝\nBuffer.copy(buf)\n### 缓冲区的比较\nBuffer.compare(buf1, buf2)\n### 缓冲区的裁剪\n- buf.slice([start[, end]])\n- 返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切\n### 转换过程中为什么出现乱码？\n字符串中有中文，一个中文在UTF-8下占用3个字节。转成buffer后，再从buffer转成字符串时，如果字符被截断则容易出现乱码。\n```js\nconst buf = Buffer.from('前端开发');\nconsole.log(buf);  // <Buffer e5 89 8d e7 ab af e5 bc 80 e5 8f 91>\nconsole.log(buf.length); // 12，一个中文在UTF-8下占用3个字节\nconsole.log(buf.toString('UTF-8', 0, 8)); // 前端�\n```\n## Stream（流）\n\nStream在 Node.js 中继承自EventEmitter，它有4种基本流类型。\n- Readable: 可读操作类型，可以产出数据，这些数据可以被传送到其他流中，只需要调用pipe方法即可。\n- Writable: 可写操作类型，只能流进不能流出。\n- Duplex: 可读可写操作类型（net.Socket）。\n- Transform: 转换类型，可以写入数据，然后读出结果。\n\nnode.js创建的流都是运作在字符串和buffer上的。\nStream作为读写方法是最好的。可写流和可读流都会在内部的缓冲区中存储数据，可以分别使用 writable.writableBuffer 或 readable.readableBuffer 来获取。\n\n### 流中的缓冲区\n- 可写流和可读流都会在内部的缓冲区中存储数据，可以 writable.writableBuffer 或 readable.readableBuffer 来获取。\n\n- 可缓冲的数据大小取决于传入流构造函数的 highWaterMark 选项。对于普通的流，highWaterMark 指定了字节的总数。对于对象模式的流，highWaterMark 指定了对象的总数。\n\n- 当调用 stream.push(chunk) 时，数据会缓冲在可读流中。如果流的消费者没有调用 stream.read()，则数据会保留在内部队列中直到被消费。\n\n- 一旦内部的可读缓冲的总大小达到 highWaterMark 指定的或值时，流会停止从底层资源读取数据，直到当前缓冲的数据被消贺（也就是说，流会停止调用内部的用于填充可读缓冲的 readable._read())。\n\n- 当调用 writable.write(chunk）时，数据会被缓冲在可写流中。当内部的缓冲区的总大小小于 highWaterMark 设置的阈值时，调用 writable.write() 会返回true。一旦内部缓冲的大小达到或超过 highWaterMark 时，则会返回false。\n\n因为双工流和转换流都是可读又可写的，所以它们各自维护着两个相互独立的内部缓冲区用于读取和写入，这使得它们在维护数据流时，读取和写入两边可以各自独立地运作。例如，net.Socket实例是双工流，它的可读端可以消费从socket接收的数据，而可写端则可以将数据写入到socket。因为数据写入到socket的速度可能比接收数据的速度快或慢，所以在读写两端独立地进行操作（或缓冲）就显得很重要了。\n\n\n```js\nconst fs = require('fs');\nvar source = fs.readFileSync('/path/to/source', (encoding: 'utf8'));\nfs.writeFileSync('/path/to/dest', source);\n\n// 等价于\n// pipe是用来传递  上一个流的输出  并将其作为  下一个流的输入的链式方法。\nfs.createReadstream('/path/to/source').pipe(fs.createWriteStream('/path/to/dest'));\n```\n### 可读流\nNode. js可读流是对提供数据的来源的一种抽象。所有可读流都实现了stream.Readable类定义的接口。可读流常见的例子包括客户端的HTTP响应、服务器的HTTP请求、fs的读取流、zlib流、crypto流、TCP socket、子进程 stdout 与 stderr、process.stdin。\n\n### stream.Readable类事件\n1. close 事件\nclose 事件在流被关闭时触发。表明不会再触发其他事件，也不会再发生操作。不是所有可读流都会触发close事件。如果使用 emitClose 选项创建可读流，则它将始终发出close事件。\n\n2. data 事件\ndata事件是在流将数据块传送给`消费者`后触发。对于非对象模式的流，数据块可以是字符串或 Buffer。对于对象模式的流，数据块可以是除了 null 的任何 JavaScript 值。\n当调用 readable.pipe()、readable.resume() 或绑定监听器到 data 事件时，流会转换到流动模式。当调用 readable.read() 且有数据块返回时，也会触发data 事件。\n如果使用 readable.setEncoding() 为流指定了默认的字符编码，则监听器回调传入的数据为字符串，否则传入的数据为 Buffer。\n\n3. end 事件\nend 事件只有在数据被完全消费掉后才会触发。要想触发该事件，可以将流转换到流动模式，或反复调用 stream.read() 直到数据被消费完。\n\n4. error 事件\nerror事件通常是在当流因底层内部出错而不能产生数据，或推送无效的数据块时触发，监听器回调将传递一个 Error对象。\n\n5. pause 事件\n调用 stream.pause() 并且 readsFlowing 不为 false 时，会发出 pause 事件。\n\n6. readable 事件\nreadable 事件在当流中有数据可供读取时触发。\n```js\nconst readable = getReadableStreamSomehow();\n\nreadable.on('readable', function(){\n    let data; // 有数据可读\n\n    while(data = this.read()){\n        console.log(data);\n    }\n})\n```\n当到达流数据的尽头时，readable 事件也会触发，但是在 end 事件之前触发。readable 事件表明流有新的动态，要么有新的数据，要么到达流的尽头。对于前者，stream.read() 会返回可用的数据。对于后者，stream.read() 会返回null。\n\n### stream.Readable类方法\n1.destroy\nreadable.destroy([error])方法用于销毁流，并触发error事件和close事件。调用后，可读流将释放所有的内部资源，且忽视后续的 push() 调用。实现流时不应该重写这个方法，而是重写 readable._destroy()。\n\n2.isPaused\nreadable.isPaused() 方法用于返回可读流当前的操作状态。主要用于 readable.pipe() 底层的机制，大多数情况下无须直接使用该方法。\n\n3. pause 与 resume\nreadable.pause() 方法使流动模式的流**停止触发data事件**，并切换到流动模式。任何可用的数据都会保留在内部缓存中。\n相对的，readable.resume() 将被暂停的可读流**恢复触发data事件**，并将流切换到流动模式，在readable事件使用不生效。\n\n4. pipe\nreadable.pipe(destination[, options])方法用于绑定可写流到可读流，将可读流自动切换到流动模式，并将可读流的所有数据推送到绑定的可写流。数据流会被自动管理，所以即使可读流更快，目标可写流也不会超负荷。\n\n- 将可读流的所有数据通过管道推送到write-data.txt文件：\n```js\nconst fs = require('fs');\n\nconst readable = fs.createReadStream('data.txt');\n\nconst writable = fs.createWriteStream('write-data.txt');\n\n// readable的所有数据都推送到'write-data.txt'\nreadable.pipe(writable);\n```\n- 可以在单个可读流上绑定多个可写流\n```js\nreadable.pipe(writable1).pipe(writable2);\n```\n- 默认情况下，当来源可读流触发end事件时，目标可写流也会调用stream.end()结束写入。若要禁用这种默认行为，end选项应设为 false，这样目标流就会保持打开。\n```js\nreader.pipe (writer, { end: false });\nreader.on ('end', () => {\n    writer.end ('结束');\n}\n```\n如果可读流发生错误，目标可写流不会自动关闭，需要手动关闭所有流以避免内存泄漏。process.stderr 和 process.stdout 可写的流在 Node.js 进程退出之前永远不会关闭。\n\n5. read\n- readable.read([size])方法用于从内部缓冲拉取并返回数据。其中，size指定要读取的数据的字节数。如果没有指定size参数，则返回内部缓冲中的所有数据。该方法如果没有可读的数据，则返回null。默认情况下，readable.read()返回的数据是Buffer对象，除非使用readable.setEncoding()指定字符编码或流处于对象模式。如果可读的数据不足size个字节，则返回内部缓冲剩余的数据，如果流已经结束则返回null。\n\n- readable.read()应该只对处于暂停模式的可读流调用。在流动模式中，readable.read()会自动调用直到内部缓冲的数据完全耗尽。\n\n- 如果readable.read()返回一个数据块，则data事件也会触发。\n\n- end事件触发后再调用stream.read([size])会返回null，不会抛出错误。\n```js\nconst fs = require('fs');\n\nconst readable = fs.createReadStream('data.txt');\n\n// 设置字符编码\nreadable.setEncoding('utf-8');\n\n// 读取数据\nreadable.on('readable', () => {\n  let chunk;\n  while (null !== (chunk = readable.read(10))) {\n    console.log(`接收到 ${chunk.length} 字节的数据`);\n    console.log(`接收到的数据是： ${chunk}`);\n  }\n});\n\nreadable.on('end', () => {\n  console.log('结束');\n});\n```\n上述示例中，使用readable.read()处理数据时，while循环是必需的。只有在readable.read()返回null之后，才会发出readable事件;\n\nreadable.setEncoding()用于设置字符编码。默认情况下没有设置字符编码，流数据返回的是 Buffer对象。如果设置了字符编码，则流数据返回指定编码的字符串。例如，本例中调用`readable.setEncoding('utf-8')`会将数据解析为UTF-8数据，并返回字符串。如果调用`readable.setEncoding(hex)`则会将数据编码成十六进制字符串。\n\n6. readable.unpipe([destination])\n解绑之前使用 stream.pipe() 绑定的可写流。如果没有指定目标可写流，则解绑所有管道，如果指定了目标可写流但它没有建立管道，则不起作用。\n```js\nconst fs = require('fs');\n\nconst readable = fs.createReadStream('data.txt');\n\nconst writable = fs.createWriteStream('write-data.txt');\n\n// readable的所有数据都推送到'write-data.txt'\nreadable.pipe(writable);\n\nsetTimeout(() => {\n  console.log('停止写入数据');\n  readable.unpipe(writable);\n  console.log('手动关闭文件流');\n  writable.end();\n}, 3);\n```\n### 两种读取模式\n流动模式或者暂停模式\n\n可读流运作于流动模式(flowing)或暂停模式(paused)两种模式之一。\n- 在流动模式中，数据自动从底层系统读取，并通过EventEmitter 接口的事件尽口能快地被提供给应用程序。\n- 在暂停模式中，必须显式调用stream.read()读取数据块。\n所有可读流都开始于暂停模式，可以通过以下方式切换到流动模式。\n- 添加data事件句柄。\n- 调用stream.resume()。·调用stream.pipe()。\n可读流可以通过以下方式切换回暂停模式。\n- 如果没有管道目标，则调用stream.pause()。\n- 如果有管道目标，则移除所有管道目标。调用stream.unpipe()可以移除多个管道目标。\n\n只有提供了消费或忽略数据的机制后，可读流才会产生数据。如果消费的机制被禁用或移除，则可读流会停止产生数据。\n\n为了向后兼容，移除data事件句柄不会自动地暂停流。如果有管道目标，一旦目标变为drain 状态并请求接收数据时，则调用 stream.pause() 也不能保证流会保持暂停模式。\n\n如果可读流切换到流动模式，且没有可用的“消费者”来处理数据，则数据将会丢失。例如，当调用readable.resume() 时，没有监听data事件或data事件句柄已移除。\n\n添加readable事件句柄会使流自动停止流动，并通过 readable.read() 消费数据。如果 readable 事件句柄被移除，且存在data事件句柄，则流会再次开始流动。\n\n### 可写流\n可写流是对数据要被写入的目的地的一种抽象。所有可写流都实现了stream.Writable类定义的接口。可写流常见的例子包括客户端的HTTP请求、服务器的HTTP响应、fs的写入流、zlib流、crypto流、TCP socket、子进程stdin、process.stdout、process.stderr。上面的一些例子事实上是实现了可写流接口的双工流。\n#### stream.Writable类事件\nstream.Writable类定义了如下事件。\n\n1. close事件\n当流及其任何底层资源（如文件描述符）已关闭时，将发出close事件。该事件表明不会发出更多事件，也不会进一步计算。\n如果使用emitClose选项创建可写流，它将始终发出close事件。\n\n2. drain事件\n如果对stream.write(chunk)的调用返回false，则在适合继续将数据写入流时将发出drain事件。\n\n3. error事件\n如果在写入管道数据时发生错误，则会发出error事件。调用时，监听器回调会传递一个Error参数。\n发出error事件时，流不会关闭。\n\n4. finish事件\n调用stream.end()方法后会发出finish事件，并且所有数据都已刷新到底层系统。\n```js\nconst fs = require('fs');\n\nconst writable = fs.createWriteStream('write-data.txt');\n\nfor (let i = 0; i < 10; i++) {\n  writable.write(`写入 #${i}!\\n`);\n}\n\nwritable.end('写入结尾\\n');\nwritable.on('finish', () => {\n  console.log('写入已完成');\n})\n```\n5. pipe事件\n在可读流上调用stream.pipe()方法时会发出pipe事件，并将此可写流添加到其目标集。\n\n6. unpipe事件\n当在可读流上调用stream.unpipe()时触发。当可读流通过管道流向可写流发生错误时，也会触发unpipe事件。\n\n#### stream.Writable类方法\n\n1. cork\nwritable.cork()方法用于强制把所有写入的数据都缓冲到内存中。当调用stream.uncork()或stream.end()时，缓冲的数据才会被输出。\n\n当写入大量小块数据到流时，内部缓冲可能失效，从而导致性能下降，writable.cork()主要用于避免这种情况。对于这种情况，实现了writable._writev()的流可以用更优的方式对写入的数据进行缓冲。\n\n2. destroy\nwritable.destroy([error])方法用于销毁流。在调用该方法之后，可写流已结束，随后对write()或end()的调用都将导致ERR_STREAM_DESTROYED错误。如果数据在关闭之前应该刷新，则应使用end()方法而不是destroy()方法，或者在销毁流之前等待drain事件。实现者不应该重写此方法，而是实现writable._destroy()。\n\n3. end\n调用writable.end([chunk][, encoding][, callback])方法表示不再将数据写入Writable。该方法的参数如下。\n\n- `chunk<string>|<Buffer>|<Uint8Array>/<any>`:要 写入的可选数据。对于不在对象模式下运行的流，块必须是字符串、Buffer 或 Uint8Array。对于对象模式流，块可以是除null 之外的任何JavaScript 值。\n\n- `encoding<string>`: 如果设置了编码，则 chunk 是一个字符串。\n- `callback<Function>`: 流完成时的可选回调。\n\n调用writable.end()方法表示不再将数据写入Writable。可选的块和编码参数允许在关闭流之前立即写入最后一个额外的数据块。如果提供，则附加可选回调函数作为finish事件的监听器。\n\n调用stream.end()后调用stream.write()方法将引发错误。\n\n4. setDefaultEncoding\nwritable.setDefaultEncoding(encoding)为可写流设置默认的编码。\n\n5. uncork\nwritable.uncork()方法用于将调用stream.cork()后缓冲的所有数据输出到目标。当使用writable.cork() 和 writable.uncork() 来管理流的写入缓冲时，建议使用 process.nextTick() 来延迟调用 writable.uncork()。通过这种方式，可以对单个Node.js事件循环中调用的所有 writable.write() 进行批处理。\n```js\nstream.cork ();\nstream.write ('一些');\nstream.write('数据');\nprocess.nextTick(()=> stream.uncork());\n```\n如果一个流上多次调用 writable.cork()，则必须调用同样次数的 writable.uncork() 才能输出缓冲的数据。\n```js\nstream.cork();\nstream.write ('一些' );\nstream.cork();\nstream.write('数据');\nprocess.nextTick(()=> {\n    stream.uncork ();\n    //数据不会被输出,直到第二次调用uncork()\n    stream.uncork();\n});\n```\n6. write\nwritable.write(chunk[, encoding][, callback]) 写入数据到流，并在数据被完全处理之后调用callback。如果发生错误，则callback可能被调用也可能不被调用。为了可靠地检测错误，可以为error事件添加监听器。该方法的参数如下。\n- `chunk<string>|<Buffer>|<Uint8Array>|<any>`: 要写入的数据。对于非对象模式的流，chunk 必须是字符串、Buffer 或 Uint8Array。对于对象模式的流，chunk 可以除null外的是任何 JavaScript 值。\n- `encoding<string>`: 如果chunk是字符串，则指定字符编码。\n- `callback<Function>`: 当数据块被输出到目标后的回调函数。\n- `writable.write()`: 写入数据到流，并在数据被完全处理之后调用callback。如果发生错误，则callback可能被调用也可能不被调用。为了可靠地检测错误，可以为error事件添加监听器。\n\n在接收了chunk后，如果内部的缓冲小于创建流时配置的highWaterMark, 则返回true。如果返回false，则应该停止向流写入数据，直到drain事件被触发。\n\n当流还未被排空时，调用write()会缓冲chunk，并返回false。一旦所有当前缓冲的数据块都被排空了(被操作系统接收并传输)，则触发drain事件。建议一旦write()返回false，则不再写入任何数据块，直到drain事件被触发。当流还未被排空时，也是可以调用write()， Node.js 会缓冲所有被写入的数据块，直到达到最大内存占用，这时它会无条件中止，甚至在它中止之前，高内存占用将会导致垃圾回收器的性能变差和RSS变高(即使内存不再需要，通常也不会被释放回系统)。如果远程的另一端没有读取数据，TCP的socket 可能永远也不会排空，所以写入到一一个不会排空的socket可能会导致产生远程可利用的漏洞。\n\n对于Transform，写入数据到一一个不会排空的流尤其成问题，因为Transform流默认会被暂停，直到它们被pipe或者添加了 data 或readable 事件句柄。\n\n如果要被写入的数据可以根据需要生成或取得，建议将逻辑封装为一一个可读流并且使用stream.pipe()。 如果要优先调用 write()，则可以使用 drain 事件来防止背压与避免内存问题。\n\n### 双工流与转换流\n\n双工流（Duplex）是同时实现了Readable和 Writable接口的流。双工括TCP socket、zlib流、crypto流。\n转换流（Transform）是一种双工流，但它的输出与输入是相关联的。与双工流一样，转换流也同时实现了 Readable 和 Writable 接口。转换流的例子包括 zlib流和 crypto 流。\n\n### 实现双工流\n双工流同时实现了可读流和可写流，如TCP socket连接。因为JavaScript不支持多重继承，所以使用stream.Duplex类来实现双工流（而不是使用stream.Readable类和stream.Writable类)。\nstream.Duplex类的原型继承自stream.Readable和寄生自stream.Writable，但是instanceof对这两个基础类都可用，因为重写了 stream.Writable 的Symbol.hasInstance。\n自定义的双工流必须调用`new stream.Duplex([options])`构造函数并实现 readable._read() 和 writable._write() 方法。以下是示例。\n\n```js\nconst { Duplex } = require('stream');\n\nclass MyDuplex extends Duplex {\n  constructor(options){\n    super(options);\n    // ...\n  }\n}\n```\n### 双工流的例子\n封装了一个可读可写的底层资源对象\n```js\nconst { Duplex } = require('stream');\nconst kSource = Symbol('source');\n\nclass MyDuplex extends Duplex {\n  constructor(source, options) {\n    super(options);\n    this[kSource] = source;\n  }\n\n  _write(chunk, encoding, callback) {\n    // 底层资源只处理字符串。\n    if (Buffer.isBuffer(chunk)){\n      chunk = chunk.toString();\n    }\n    this[kSource].writeSomeData(chunk);\n    callback();\n  }\n\n  _read(size) {\n    this[kSource].fetchSomeData(size, (data, encoding) => {\n      this.push(Buffer.from(data, encoding));\n    });\n  }\n}\n```\n## net模块\n在nodejs中，net模块用于创建基于流的TCP或IPC的服务器与客户端。net主要包含两个部分：\n- net.Server: TCP Server，内部通过socket来实现与客户端的通信。\n- net.Socket: TCP/本地socket的Node版实现，它实现了全双工的stream接口，可以用来构建TCP客户端。\n\n```js\nconst net = require('net');\n```\n### 创建TCP服务器\n1. net.Server类创建TCP或IPC服务器\n2. net.Server支持如下事件：\n- listening事件: 当服务被绑定后调用server.listen()方法后触发。\n- connection事件: 当一个新的connection建立的时候触发，回调参数为socket连接对象。\n- close事件：当TCP服务器关闭的时候触发，回调函数没有参数。\n- error事件: 当TCP服务器出现错误的时候触发，回调函数的参数为err对象。例如，监听了已经被占用的端口号。\n### 创建TCP服务器示例\n```js\nconst net = require('net');\n\nconst server = net.createServer((socket) => {\n    socket.end('goodbye\\n');\n}).on('error', (err) => {\n    // 处理错误\n    throw err;\n});\n\nserver.on('close', () => {\n    console.log('服务器接收到close事件');\n})\n\n// socket对象，对象可以与客户端进行通信\nserver.on('connection', (socket) => {\n    console.log('服务器接收到connection事件')\n})\n\nserver.on('listening', () => {\n    console.log('服务器接收到listening事件')\n})\n\n// 随机获取未绑定的端口\nserver.listen(() => {\n    console.log('服务器启动，占用端口：', server.address());\n});\n```\n当创建了一个TCP服务器后，可以通过 server.address()方法来查看这个TCP服务器监听的地址，并返回一个JSON对象。这个对象的属性有:\n- port: TCP服务器监听的端口号。\n- family: 说明TCP服务器监听的地址是IPv6还是IPv4。\n- address: TCP服务器监听的地址。\n```js\n/**\n * 查看服务器监听的地址\n */\n\n/* 引入net模块 */\nvar net = require(\"net\");\n\n/* 创建TCP服务器 */\nvar server = net.createServer(function (socket) {\n   console.log('someone connects');\n})\n\n/* 获取地址信息 */\nserver.listen(8000, function () {\n   /* 获取地址信息，得到的是一个json { address: '::', family: 'IPv6', port: 8000 } */\n   var address = server.address();\n\n   /* TCP服务器监听的端口号 */\n   console.log(\"the port of server is\" + address.port);\n\n   /* TCP服务器监听的地址 */\n   console.log(\"the address of server is\" + address.address);\n\n   /* 说明TCP服务器监听的地址是 IPv6 还是 IPv4 */\n   console.log(\"the family of server is\" + address.family);\n})\n```\n创建一个TCP服务器后，可以通过server.getConnections()方法获取连接这个TCP服务器的客户端数量。除此之外，也可以通过maxConnections属性来设置这个服务器的最大连接数量，当连接数量超过最大值时，服务器将拒绝新的连接，例如:\n```js\n/**\n * 连接服务器的客户端数量\n */\n\n/* 引入net模块 */\nvar net = require(\"net\");\n\n/* 创建TCP服务器 */\nvar server = net.createServer(function (socket) {\n    console.log('someone connects');\n\n    /* 设置最大连接数量 */\n    server.maxConnections = 3;\n    server.getConnections(function (err, count) {\n        console.log(\"the count of client is \" + count);\n    })\n})\n\n/* 获取监听端口 */\nserver.listen(8000, function () {\n    console.log(\"Creat server on http://127.0.0.1:8000/\");\n})\n```\n服务器和客户端之间的通信：socket对象可以用来获取客户端发出的流数据，每次接收到数据的时候触发data事件，通过监听这个事件就可以在回调函数中获取客户端发送的数据。\n```js\n/**\n * 连接服务器的客户端数量\n */\n\n/* 引入net模块 */\nvar net = require(\"net\");\n\n/* 创建TCP服务器 */\nvar server = net.createServer(function(socket){\n    /* 获取地址信息 */\n    var address = server.address();\n    var message = \"the server address is\"+JSON.stringify(address);\n\n    /* 发送数据 */\n    socket.write(message,function(){\n        var writeSize = socket.bytesWritten;\n        console.log(message + \"has send\");\n        console.log(\"the size of message is\"+writeSize);\n    })\n\n    /* 监听data事件，每次接收到数据的时候触发data事件 */ \n    socket.on('data',function(data){\n        console.log(data.toString());\n        var readSize = socket.bytesRead;\n        console.log(\"the size of data is\"+readSize);\n    })\n})\n\n/* 获取地址信息 */\nserver.listen(8000,function(){\n    console.log(\"Creat server on http://127.0.0.1:8000/\");\n})\n```\n### server.listen监听链接\nlisten()方法是异步的。当服务器开始监听时，会触发listening事件。最后一个参数callback将被添加为listening事件的监听器。\n\n当且仅当在第一次调用server.listen()或调用server.close()期间出现错误时，才能再次调用server.listen()方法。\n\n监听时最常见的错误之一是EADDRINUSE, 这说明该地址正被另一个服务器所使用。处理此问题的一种方法是在一段时间后重试。\n```js\nserver.on('error', function(e){\n    if(e.code === 'EADDRINUSE'){\n        console.log('地址正被使用，重试中。。。')\n\n        setTimeout(()=>{\n            server.close();\n            server.listen(PORT, HOST)\n        }, 1000)\n    }\n})\n```\nserver.listen(options[, callback])方法中的options参数支持如下属性\n- `port<number>`: 端口号。\n- `host<string>`: 主机。\n- `path<string>`: 如果指定了port，将被忽略。\n- `backlog<number>`。如果exclusive为 false，则集群将使用相同的底层句柄，从而允许共享连接处理。当exclusive为 true时，不共享句柄，并且尝试端口共享会导致错误。监听专用端口的示例如下。\n- `exclusive<boolean>`: 默认值是false。\n- `readableAll<boolean>`: 对于IPC服务器，使管道对所有用户都可读，默认值是false。\n- `writableAll<boolean>`: 对于IPC服务器，管道可以为所有用户写入，默认值是false。\n\n### 创建Socket对象发送和接受数据\n```js\nconst net = require('net');\nconst server = net.createServer();\n\nserver.on('error', (err) => {\n    // 处理错误\n    throw err;\n});\n\nserver.on('close', () => {\n    console.log('服务器接收到close事件');\n})\n\nserver.on('connection', (socket) => {\n    console.log('服务器接收到connection事件');\n    socket.setEncoding('utf8');\n    socket.write('welcome!'); // 发送数据\n\n    socket.on('data', (data) => {\n        console.log('服务器接收到的数据为：' + data);\n\n        // 如果收到c字符，就终止连接\n        if (data == 'c') {\n            socket.write('bye!');\n            socket.end(); // 关闭socket\n            // 如果收到k字符，就关闭服务器\n        } else if (data == 'k') {\n            socket.write('bye!');\n            socket.end(); // 关闭socket\n            server.close();// 关闭服务器\n        } else {\n            socket.write(data);\n        }\n\n    })\n})\n\nserver.on('listening', () => {\n    console.log('服务器接收到listening事件');\n})\n\n// 绑定到端口\nserver.listen(8888, () => {\n    console.log('服务器启动，端口：8888');\n});\n```\n在上述示例中，socket.write() 方法用于将数据写入 Socket发送; socket通过data事件，可以监听来自客户端写入的数据(接收)。在上述示例中，会将接收到的数据，再通过 socket.write() 方法发送回客户端。\n\n关闭TCP服务器：TCP服务器通过 socket.end() 终止客户端的连接，也可以通过 server.close() 方法来将整个TCP服务器关闭。当TCP服务器关闭时，会监听到close事件。\n\n### 构建TCP客户端\n可以用net.Socket构建TCP客户端，实现TCP客户端和TCP服务器的通信。\n```js\n/**\n * 构建TCP客户端\n */\n\n/* 引入net模块 */\nvar net = require(\"net\");\n\n/* 创建TCP客户端 */\nvar client = net.Socket();\n\n/* 设置连接的服务器 创建完socket对象后，使用socket对象的connect方法就可以连接一个TCP服务器。*/\nclient.connect(8000, '127.0.0.1', function () {\n  console.log(\"connect the server\");\n\n  /* 向服务器发送数据 */\n  client.write(\"message from client\");\n})\n\n/* 监听服务器传来的data数据 */\nclient.on(\"data\", function (data) {\n  console.log(\"the data of server is \" + data.toString());\n})\n\n/* 监听end事件 */\nclient.on(\"end\", function () {\n  console.log(\"data end\");\n})\n```\n1. net.Socket连接相关的API有:\n- socket.connect(): 有3种不同的参数，用于不同的场景。\n- socket.setTimeout(): 用来进行连接超时设置。\n- socket.setKeepAlive(): 用来设置长连接。\n- socket.destroy( )、socket.destroyed: 当错误发生时，用来销毁socket，确保这个socket上不会再有其他的IO操作。\n2. net.Socket涉及的事件:\n- data: 当收到另一侧传来的数据时触发。\n- connect: 当连接建立时触发。\n- close: 当连接断开时触发。如果是因为传输错误导致的连接断开，参数就为error。\n- end: 当连接另一侧发送了FIN包的时候触发。默认情况下(allowHalfOpen == false)，socket会完成自我销毁操作。但也可以把allowHalfOpen设置为true，这样就可以继续往socket里写数据。当然，最后需要手动调用socket.end()。\n- error: 当有错误发生时就会触发，参数为error。\n- timeout: 示用户socket已经超时，需要手动关闭连接。\n- drain: 当写缓存空了的时候触发。\n- lookup: 当域名解析完成时触发。\n\n## http\nhttp.Server类是继承自net.Server，有很多net.Server的方法和事件。\n\nnet、http、dgram模块分别用来实现TCP、HTTP、UDP的通信。http为应用层模块，主要按照特定协议编解码数据; net为传输层模块，主要负责传输编码后的应用层数据; https是一个综合模块（涵盖了http/tIs/crypto等)，主要用于确保数据安全性。\n```js\nconst http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 8080;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n'); // 用于完成发送请求\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`服务器运行在 http://${hostname}:${port}/`);\n});\n```\n### http.Server事件\n\n1. close事件：服务器关闭时触发close事件\n2. connection事件：建立新的TCP流是会发出connection事件\n3. request事件：每次有请求时都会发出request事件。注意，在HTTP Keep-Alive连接的情况下每个连接可能会有多个请求。\n\n### http.requset发送请求\n```js\nconst http = require ('http');\nconst req = http.request({\n    host: '127.0.0.1',\n    port: 8080,\n    method: 'POST' // 默认是GET，POST、PUT、DELETE\n    }, (res) => {\n    res.resume();\n    res.on('end', () => {\n    console.log ('请求完成!');});\n});\n```\n### http请求对象和响应对象\nHTTP请求对象和响应对象在 Node.js中是被定义在 http.ClientRequest和http.ServerResponse类中的。\n\n#### http.ClientRequest\nhttp.ClientRequest对象由http.request()内部创建并返回。它表示正在进行的请求，且其请求头已进入队列。请求头仍然可以使用\n\n- getHeader(name) 返回请求头的值\n- removeHeader(name) 改变。\n\n实际的请求头将与第一个数据块一起发送，或者当调用request.end()时发送。\n\n要获得响应，则为请求对象添加response事件监听器。当接收到响应头时，将会从请求对象触发response事件。response事件执行时有一个参数，该参数是http.IncomingMessage的实例。\n\n在response事件期间，可以添加监听器到响应对象，如监听data事件。\n\n如果没有添加response事件处理函数，则响应将被完全丢弃。如果添加了response事件处理函数，则必须消费完响应对象中的数据，每当有readable事件时，会调用response.read()，或添加 data事件处理函数，或调用.resume()方法。在消费完数据之前，不会触发end事件。此外，在读取数据之前，它将占用内存，最终可能导致进程内存不足的错误。\n\n#### http.ServerResponse类\nhttp.ServerResponse对象由HTTP服务器在内部创建，而不是由用户创建。它作为第二个参数传给request事件。ServerResponse继承自Stream。\n- close事件：表示底层链接已经终止\n- finish事件：在响应发送后触发。\n- response.end()方法\n`response.end([data][, encoding][, callback])`方法用于向服务器发出信号，表示已发送所有响应标头和正文，该服务器应该考虑此消息已完成。必须在每个响应上调用response.end() 方法。\n\n如果指定了data，则它实际上类似于先调用response.write(data, encoding)方法，接着调用response.end()方法。如果指定了callback，则在响应流完成时将调用它。\n\n- response.setHeader(name, value)：设置响应头。\n- response.getHeaderNames()：返回已经设置的响应头属性数组。\n- response.getHeaders()：返回已经设置的响应头，以key-vale表示。\n\n#### REST ful风格\n- 若要在服务器上创建资源，应该使用POST方法。\n- 若要检索某个资源，应该使用GET方法。\n- 若要更新或添加资源，应该使用PUT方法。\n- 若要删除某个资源，应该使用DELETE方法。\n\n# npm\nnpm全称node package manager即node包管理器。\n\n查看当前项目的所有NPM脚本命令，可以使用不带任何参数的npm run命令:\n```bash\nnpm run\n```\nnpm 脚本的原理相对简单，每当执行npm run时，会自动新建一个Shell，在该Shell 中执行指定的脚本命令。\n\n因此，只要是Shell (一般是Bash)可以运行的命令，就可以写在 NPM脚本里面。需要注意的是，npm run新建的 Shell 会将当前目录的node_modules.bin子目录加入PATH变量，命令执行结束后，再将PATH 变量恢复。也就是说，当前目录的node_modules/.bin子目录里面的所有脚本都可以直接用脚本名调用，而不必加上路径。例如，当前项目的依赖里面有Mocha，只需要直接写mocha test即可:\n```json\n\"script\": {\n    \"test\" : \"mocha test\"\n}\n// 而不需要写成:\n\"script\": {\n    \"test\" :\"./node_modules/.bin/mocha test\"\n}\n```\n由于NPM脚本的唯一要求是可以在Shell 中执行，因此它不一定是Node脚本，任何可执行文件都可以写在script中。\n\n安装的局部开发依赖如果有命令，会在node_modules/.bin目录创建软连接，package.json是可以读取到依赖下.bin目录下的命令，可以在package.json直接使用该命令。\n\n## package.json\npackage.json可以手动编写，也可以使用npm init命令自动生成，它描述了项目使用到的模块，项目名称（必填）、版本号（必填）、许可、关键词。\n\n- Name: 包名。\n- Version: 包的版本号，语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。\n- Description: 包的描述。\n- Homepage: 包的官网地址。\n- Author: 包的作者姓名。\n- Contributors: 包的其他贡献者姓名。\n- Dependencies: 依赖包列表，指定了项目运行所依赖的模块。如果依赖包没有安装，npm就会自动将依赖包安装在node_module目录下。\n- devDependencies: 指定项目开发所需要的模块。\n- repository: 包代码存放的地方的类型，可以是Git或Svn，Git可在GitHub 上。\n- main: main字段指定了程序的主入口文件, require('moduleName')就会加载这个文件。这个字段的默认值是模块根目录下面的index.js。\n- keywords: 关键字。\n- scripts: 指定了运行脚本命令的npm命令行缩写，比如 start 指定了运行npm run start时所要执行的命令。\n- bin: 用来指定各个内部命令对应的可执行文件的位置。\n- config: 用于添加命令行的环境变量。\n\n## npm命令\n```bash\n# 更新模块：\nnpm update module\n\n# 查看安装的模块：\nnpm list -g # 查看全局安装的模块\nnpm list # 查看本地安装的模块\n\n# 查看某个模块的信息\nnpm list koa\n\n# 查看命令详细帮助\nnpm help\n\n# 查看包的安装路径\nnpm root [-g]\n\n# 清除npm本地缓存\nnpm cache clean\n```\n\n# WebSocket\nWebSocket 提供了一个真正的全双工连接，它可用于客户机和服务器之间的双向通信，客户端和服务器可以随意向对方发送数据。\n\n该方案的优点是属于HTML5标准，已经被大多数浏览器支持，而且是真正的全双工，性能比较好。其缺点是实现起来相对比较复杂，需要对ws协议专门处理。\n\n## 使用ws创建WebSocket服务器\nNode.js原生API并未提供 WebSocket的支持，因此，需要安装第三方包才能使用WebSocket 功能。\n```js\n// npm i ws\nconst WebSocket = require('ws');\nconst server = new WebSocket.Server({ \n    port: 8080\n});\n\n```\nWebSocket.Server(options[, callback]）方法中的options对象支持如下参数。\n- `host<String>`: 绑定服务器的主机名。\n- `port<Number>`: 绑定服务器的端口。\n- `backlog<Number>`: 挂起连接队列的最大长度。\n- `server`: 预先创建的Node.js HTTP/S服务器。\n- `verifyClient<Function>`: 可用于验证传入连接的函数。\n- `handleProtocols<Function>`: 可用于处理WebSocket子协议的函数。\n- `path<String>`: 仅接受与此路径匹配的连接。\n- `noServer<Boolean>`: 不启用服务器模式。\n- `clientTracking<Boolean>`: 指定是否跟踪客户端。\n- `perMessageDeflate`: 启用/禁用消息压缩。\n- `maxPayload<Number>`: 允许的最大消息大小(以字节为单位)。\n\n## ws事件\n- ws监听事件：connection。只要有WebSocket连接到该服务器，就能触发connection事件。\n- 如果想获知所有的已连接的客户端信息，则可以使用server.clients数据集。该数据集存储了所有已连接的客户端。\n\n## 发送和接收数据\nws通过websocket.send()方法发送数据，通过监听message事件来接受数据。\n\n### 发送数据\n`websocket.send(data[, options][, callback])`方法可以用来发送数据。data参数就是用来发送的数据。options对象的属性可以有以下几种。\n- compress: 用于指定数据是否需要压缩。默认是true。\n- binary: 用于指定数据是否通过二进制传送。默认是自动检测。\n- mask: 用于指定是否应遮罩数据。当WebSocket不是服务器客户端时，默认认为true。\n- fin: 用于指定数据是否为消息的最后一个片段，默认为true。\n\n#### 发送ping和pong\n在消息通信中, `ping-pong`是一种验证客户端和服务器是否正常连接的简单机制。当客户端给服务器发送`ping`消息时，如果服务器能够正常响应`pong`消息，则说明客户端和服务器之间的通信是正常的。反之亦然，如果服务器想验证客户端的连接是否正常，也可以给客户端发送`ping`消息。\nws提供了一种快捷的方式来发送`ping`消息和`pong`消息。\n- websocket.ping([data[, mask]][, callback])\n- websocket.pong([data[, mask]][, callback])\n\n#### 接收数据\nws通过message事件来接收数据\n\n### 准备状态\nws 中的 WebSocket类具有以下4种准备状态。\n- CONNECTING: 值为0，表示连接还没有打开。\n- OPEN: 值为1，表示连接已打开，可以通信了。\n- CLOSING: 值为2，表示连接正在关闭。\n- CLOSED: 值为2，表示连接已关闭。\n需要注意的是，当通过 WebSocket对象进行通信时，状态必须是OPEN。\n\n### 关闭WebSocket服务器\n可以通过server.close()来关闭服务器，并通过close事件监听服务器的关闭。\n\n### ws例子\n- 服务端\n```js\nconst WebSocket = require('ws');\nconst WebSocketServer = WebSocket.Server;\nconst wss = new WebSocketServer({\n  port: 3000\n});\n\nwss.on('connection', function (ws) {\n  console.log(`[SERVER] connection()`);\n  ws.on('message', function (message) {\n    console.log(`[SERVER] Received: ${message}`);\n    setTimeout(() => {\n      ws.send(`What's your name?`, (err) => {\n        if (err) {\n          console.log(`[SERVER] error: ${err}`);\n        }\n      });\n    }, 1000);\n  })\n});\n\nconsole.log('ws server started at port 3000...');\n```\n- 客户端（浏览器）\n```js\n// client test:\n\nlet count = 0;\n\nlet ws = new WebSocket('ws://localhost:3000/ws/chat');\n\nws.on('open', function () {\n  console.log(`[CLIENT] open()`);\n  ws.send('Hello!');\n});\n\nws.on('message', function (message) {\n  console.log(`[CLIENT] Received: ${message}`);\n  count++;\n  if (count > 3) {\n    ws.send('Goodbye!');\n    ws.close();\n  } else {\n    setTimeout(() => {\n      ws.send(`Hello, I'm Mr No.${count}!`);\n    }, 1000);\n  }\n});\n```\nWebSocket 协议本身不要求同源策略（Same-Origin Policy)，也就是某个地址为 `http://a.com`的网页可以通过 WebSocket连接到`ws://b.com`。但是，浏览器会发送 Origin 的 HTTP 头给服务器，服务器可以根据 Origin 拒绝这个 WebSocket 请求。所以，是否要求同源要看服务器端如何检查。\n\n# MySQL基本操作\n```bash\n# 显示已有的数据库\nshow databases;\n\n# 创建数据库\nCREATE DATABASES data_name; # nodejs_book\n\n# 使用数据库\nuse data_name;\n\n# 建表\nmysql> CREATE TABLE t_user ( user_id BIGINT NOT NULL, username VARCHAR(20));\n\n# 查看表\nshow TABLES;\n\n# 显示表的结构\nmysql> DESCRIBE t_user;\n\n# 往表中加入记录\nmysql> insert into t_user values(1, 'yolo');\n```\n## 使用node.js操作mysql\n使用mysql或者mysql2模块\n\n## 实现简单的查询\n- mysql.createConnection()用于创建一个连接;\n- connection.connect()方法用于建立连接; \n- connection.query()方法用于执行查询，第一个参数就是待执行的SQL语句; \n- connection.end()用于关闭连接。\n\n```js\nconst mysql = require('mysql');\n\n// 连接信息\nconst connection = mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: '123456',\n    database: 'nodejs_book'\n});\n\n// 建立连接\n/// connection.connect();\n\nconnection.connect(function (err) {\n    if (err) {\n        console.error('error connecting: ' + err.stack);\n        return;\n    }\n\n    console.log('connected as id ' + connection.threadId);\n});\n\n// 执行查询\nconnection.query('SELECT * FROM t_user',\n    function (error, results, fields) {\n        if (error) {\n            throw error;\n        }\n\n        // 打印查询结果\n        console.log('SELECT result is: ', results);\n    });\n\n\n// 关闭连接\n///connection.end();\n///connection.destroy();\n\nconnection.end(function (err) {\n    if (err) {\n        console.error('error end: ' + err.stack);\n        return;\n    }\n\n    console.log('end connection');\n});\n```\n### mysql模块连接选项\n|参数|描述|\n|:---:|:---:|\n|host|主机地址,默认是localhost|\n|user|用户名|\n|password|密码|\n|port|端口号，默认是3306|\n|database|数据库名|\n|charset|连接字符集（默认:`'UTF8_GENERAL_CI'`，注意字符集的字母都要大写)|\n|localA ddress|此IP用于TCP连接（可选)|\n|socketPath|连接到unix域路径，当使用host和port时会被忽略|\n|timezone|时区，默认是`'local'`|\n|connectTimeout|连接超时，单位为毫秒。默认为不限制|\n|stringifyObjects|是否序列化对象|\n|typeCast|是否将列值转换为本地JavaScript类型值。默认为true|\n|queryFormat|自定义query语句格式化方法|\n|supportBigNumbers|数据库支持bigint或decimal类型列时，需要设此option为true。默认为false|\n|bigNumberStrings|supportBigNumbers和bigNumberStrings启用，强制bigint或decimal列以JavaScript字符串类型返回。默认为false|\n|dateStrings|强制timestamp、datetime、data类型以字符串类型返回，而不是JavaScript Date类型。默认为false|\n|debug|开启调试。默认为false|\n|multipleStatements|是否允许一个query中有多个MySQL语句。默认为false|\n|flags|用于修改连接标志|\n|ssl|使用ssl参数或一个包含ssl配置文件名称的字符串|\n\n### mysql模块CRUD\n```js\n// 执行查询\nconnection.query('SELECT * FROM t_user',\n    function (error, results, fields) {\n        if (error) {\n            throw error;\n        }\n\n        // 打印查询结果\n        console.log('SELECT result is: ', results);\n    });\n\n// 插入数据 \n// 其中，在SQL语句中，通过“?”占位符的方式将参数对象data进行传入。\nvar data = { user_id: 2, username: 'waylau' };\nconnection.query('INSERT INTO t_user SET ?', data,\n    function (error, results, fields) {\n        if (error) {\n            throw error;\n        }\n\n        // 打印查询结果\n        console.log('INSERT result is: ', results);\n    });\n\n// 更新数据\n// 通过“?\"占位符的方式将参数对象进行传入。所不同的是，参数对象是一个数组。\nconnection.query('UPDATE t_user SET username = ? WHERE user_id = ?', ['Way Lau', 2],\n    function (error, results, fields) {\n        if (error) {\n            throw error;\n        }\n\n        // 打印查询结果\n        console.log('UPDATE result is: ', results);\n    });\n\n// 执行查询\n// 同样也是通过“?占位符的方式将参数对象进行传入。所不同的是，参数对象是一个数值（用户ID)。\nconnection.query('SELECT * FROM t_user',\n    function (error, results, fields) {\n        if (error) {\n            throw error;\n        }\n\n        // 打印查询结果\n        console.log('SELECT result is: ', results);\n    });\n```\n## mysql连接池\n\n建议将连接池的pool.getConnection封装一下，实现复用\n```js\nconst express = require('express');\nconst app = express();\nconst port = 8080;\nconst bodyParser = require('body-parser');//用于req.\nconst URL = '/api/users';\nconst mysql = require('mysql');\n\n// 连接信息.\n// 使用连接池\nconst pool = mysql.createPool({\n    connectionLimit: 4, // 连接数限制\n    host: 'localhost',\n    user: 'root',\n    password: '123456',\n    database: 'nodejs_book'\n});\n\napp.use(bodyParser.json());\n\n// 获取所有用户列表API\napp.get(URL + '/', function (req, res) {\n\n    // 获取连接\n    pool.getConnection(function (err, connection) {\n        if (err) {\n            throw err;\n        }\n\n        // 从请求参数中获取用户ID\n        let name = req.query.name;\n\n        console.log('User name is: ', name);\n        \n        if (name == null) {\n            // 执行查询\n            connection.query('SELECT * FROM t_user',\n                function (error, results) {\n                    // 错误处理\n                    if (error) {\n                        throw error;\n                    }\n\n                    // 打印执行结果\n                    console.log('The result is: ', results);\n\n                    // 释放连接\n                    connection.release();\n\n                    // 转为JSON返回\n                    res.json(results).end();\n                });\n        } else {\n            // 执行查询\n            connection.query('SELECT * FROM t_user where username = ?', name,\n                function (error, results) {\n                    // 错误处理\n                    if (error) {\n                        throw error;\n                    }\n\n                    // 打印查询结果\n                    console.log('The result is: ', results);\n\n                    // 释放连接\n                    connection.release();\n\n                    // 转为JSON返回\n                    res.json(results).end();\n                });\n        }\n    });\n\n});\n\n\n// 获取指定ID的用户API\napp.get(URL + '/:id', function (req, res) {\n\n\n    // 获取连接\n    pool.getConnection(function (err, connection) {\n        if (err) {\n            throw err;\n        }\n\n        // 从请求参数中获取用户ID\n        let id = req.params.id;\n\n        console.log('User id is: ', id);\n\n        // 执行查询\n        connection.query('SELECT * FROM t_user where user_id = ?', id,\n            function (error, results) {\n                // 错误处理\n                if (error) {\n                    throw error;\n                }\n\n                // 打印执行结果\n                console.log('The result is: ', results);\n\n                // 释放连接\n                connection.release();\n\n                // 取第一个，转为JSON返回\n                res.json(results[0]).end();\n            });\n    });\n\n});\n\n\n// 创建用户信息API\napp.post(URL + '/', (req, res) => {\n\n    // 获取连接\n    pool.getConnection(function (err, connection) {\n        if (err) {\n            throw err;\n        }\n\n        // 从请求参数中获取用户信息\n        let username = req.body.username;\n\n        console.log('User is: ', username);\n\n        // 执行查询\n        connection.query('INSERT INTO t_user (username) VALUES (?)', username,\n            function (error, results) {\n                // 错误处理\n                if (error) {\n                    throw error;\n                }\n\n                // 打印执行结果\n                console.log('The result is: ', results);\n\n                // 释放连接\n                connection.release();\n\n                // 转为JSON返回\n                res.json(results).end();\n            });\n    });\n\n});\n\n// 更新用户信息API\napp.put(URL + '/', (req, res) => {\n    // 获取连接\n    pool.getConnection(function (err, connection) {\n        if (err) {\n            throw err;\n        }\n\n        // 从请求参数中获取用户信息\n        let user_id = req.body.user_id;\n        let username = req.body.username;\n\n        console.log('User id is: ', user_id);\n        console.log('User name is: ', username);\n        // 执行查询\n        connection.query('UPDATE t_user SET username = ? WHERE user_id = ? ', [username, user_id],\n            function (error, results) {\n                // 错误处理\n                if (error) {\n                    throw error;\n                }\n\n                // 打印执行结果\n                console.log('The result is: ', results);\n\n                // 释放连接\n                connection.release();\n\n                // 转为JSON返回\n                res.json(results).end();\n            });\n    });\n\n});\n\n// 删除指定ID的用户API\napp.delete(URL + '/:id', (req, res) => {\n\n    // 获取连接\n    pool.getConnection(function (err, connection) {\n        if (err) {\n            throw err;\n        }\n\n        // 从请求参数中获取用户ID\n        let id = req.params.id;\n\n        console.log('User id is: ', id);\n\n        // 执行查询\n        connection.query('DELETE FROM t_user WHERE user_id = ? ', id,\n            function (error, results) {\n                // 错误处理\n                if (error) {\n                    throw error;\n                }\n\n                // 打印执行结果\n                console.log('The result is: ', results);\n\n                // 释放连接\n                connection.release();\n\n                // 转为JSON返回\n                res.json(results).end();\n            });\n    });\n});\n\napp.listen(port, () => console.log(`Server listening on port ${port}!`));\n```\n# Redis\n\nRedis是一个高性能的key-vale缓存数据库\n\nRedis支持主从同步，可以从主服务器向任意数量的从服务器上同步数据，从服务器可以是关联其他从服务器的主服务器。这使得 Redis可执行单层树复制，存盘可以有意无意地对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方进行数据同步时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。\n\nRedis不仅仅是简单的key-value存储，更是一个data strutures server（数据结构服务器)，用来支持不同的数值类型。在key-value中，value不仅仅局限于string类型，它可以是更复杂的数据结构。\n- 二进制安全的string。\n- List: 一个链表，链表中的元素按照插入顺序排列。\n- Set: string 集合，集合中的元素是唯一的，没有排序。\n- Sorted set: 与Set类似，但是每一个string 元素关联一个浮点数值，这个数值被称为Score。元素总是通过它们的Score进行排序，所以不像Set那样可以获取一段范围的元素（例如，获取前10个，或者后10个)。\n\n- Hash: 指由关联值字段构成的 Map。字段和值都是string。\n- Bit array（或者简单称为Bitmap): 像位数值一样通过特别的命令处理字符串，可以设置和清除单独的bit，统计所有bit集合中为1的数量，查找第一个设置或没有设置的bit等。\n- HyperLogLogs: 这是一个概率统计用的数据结构，可以用来估计一个集合的基数。对于所有的例子，我们都使用redis-cli工具来演示。这是一个简单但非常有用的命令行工具，可以用来给Redis Server 发送命令。\n\n## Redis超时\nRedis超时是 Redis的一个特性之一，这个特性可以用在任何一种值类型中。可以给一个key设置一个超时时间，这个超时时间就是有限的生存时间。当生存时间过去，这个key就会自动被销毁。\n- 在设置超时时间时，可以使用秒或毫秒。\n- 超时时间一般总是1ms。\n- 超时信息会被复制，并持久化到磁盘中。当Redis服务器停止时(这意味着Redis将保存key 的超时时间)。\n\n## node.js操作redis\n使用redis模块操作redis\n\n- redis.createClient()用于创建客户端。\n- client.set()方法设置单个值。\n- client.hset()方法用于设置多个字段。\n- client.hkeys()方法用于返回所有的字段。\n- client.get()和client.hgetall()方法都用于获取key 所对应的值。\n- client.quit()用于关闭连接。\n\n\n```js\nconst redis = require(\"redis\");\n\n// 创建客户端\nconst client = redis.createClient(6379, '127.0.0.1');\n\n// 如果没有密码，则不需要这一步\nclient.auth(123456) // \n\n// 错误处理\nclient.on(\"error\", function (err) {\n    console.log(\"Error \" + err);\n});\n\nclient.on('connect', function(){\n    // 设值\n    client.set(\"hello\", \"this is a value\");\n    // 把存储对象改成JSON对象 程序将会报错，因为Redis 中存储的是字符串对象\n    client.set('test', { user_name: 'yolo', age: 18})\n    // 重写toString 即可方法:\n    // object.prototype.tostring = function (){\n    //     return JSON.stringify(this);\n    // };\n})\n\n// 设值\nclient.set(\"书名\", \"《Node.js企业级应用开发实战》\", redis.print);\n\n// 同个key不同的字段\nclient.hset(\"柳伟卫的Spring三剑客\", \"第一剑\", \"《Spring Boot 企业级应用开发实战》\", redis.print);\nclient.hset(\"柳伟卫的Spring三剑客\", \"第二剑\", \"《Spring Cloud 微服务架构开发实战》\", redis.print);\nclient.hset([\"柳伟卫的Spring三剑客\", \"第三剑\", \"《Spring 5 开发大全》\"], redis.print);\n\n// 返回所有的字段\nclient.hkeys(\"柳伟卫的Spring三剑客\", function (err, replies) {\n    console.log(\"柳伟卫的Spring三剑客共\" + replies.length + \"本:\");\n    \n    // 遍历所有的字段\n    replies.forEach(function (reply, i) {\n        console.log(\"    \" + i + \": \" + reply);\n    });\n});\n\n// 获取key所对应的值\nclient.get(\"书名\", function (err, reply) {\n    console.log(reply); \n});\n\n\n// 获取key所对应的值\nclient.hgetall(\"柳伟卫的Spring三剑客\", function (err, reply) {\n    console.log(reply); \n\n    // 退出\n    client.quit();\n});\n\n// 清除数据\nclient.del('key')\n```\n\n# 异常处理\n\n- 使用`process.on('uncaughtException', function(err){})`就不会造成接口崩溃了，可惜的是，很多应用在开发时都没有做这样的基本处理，因此都出现了问题，捕获那些咱没有 try-catch 的异常错误。\n```js\n// 相对于异常来说，内存泄漏也是一个不能忽视的严重问题，而process.on('uncaughtException')的做法很难保证不造成内存的泄漏。\n// 所以当捕获到异常时，显式地手动杀掉进程并重启Node进程，既可以保证释放内存，又保证了服务后续的正常可用。\nprocess.on ('uncaughtException', (e)=>{\n    console.error('process error is:', e.message);\n    process.exit(1);\n    restartServer(); //重启服务\n});\n\n```\n- try/catch/finally，当我们去读取文件遇到异常时，抛出的异常会被try/catch捕获，当前的线程就不会英文异常而意外结束了。\n- async/await和promise是无法捕获异步代码的异常的，如下例子，无法捕获setTimeout异步代码里的异常\n```js\nnew Promise((resolve, reject) =>{ \n    setTimeout(() => {\n        throw new Error('error');\n    }, 100);\n}).then(() =>{\n // 一些逻辑代码\n\n}).catch ((e) =>{\n    console.log('能进来说明可以处理异常信息了');\n    console.log(e);\n});\n\n```\n\n```js\nfs.readFile('test.txt', function(err, data){\n    try{\n        if(err) throw err;\n        // ...\n    }catch(e){\n        console.log(e)\n    }finally{\n\n    }\n})\n```\n\n1. nodejs里约定，同步的代码才能捕获异常，异步的代码不能直接使用try、catch\n- 先看同步代码可以捕获的异常\n```js\nconst testFunc = function() {\n  return new Promise((resolve, reject) => {\n    throw new Error('error');\n  });\n};\n\nasync function testAsync() {\n  try {\n    await testFunc();\n  } catch (e) {\n    console.log('能进来，说明异常能处理');\n    console.log(e);\n  }\n}\n\ntestAsync();\n```\n- 异步代码无法捕获异常\n```js\nconst testFunc = function() {\n  setTimeout(() => {\n    console.log(1111);\n    return new Promise((resolve, reject) => {\n      throw new Error('error');\n    });\n  }, 100);\n};\n\nasync function testAsync() {\n  try {\n    await testFunc();\n  } catch (e) {\n    console.log('能进来，说明异常能处理');\n    console.log(e);\n  }\n}\n\ntestAsync();\n```\n## 进程崩溃时重启\n\n进程因异常退出是很常见的事，当遇到崩溃退出的时候，重启就可以了。负责进程崩溃应用自动重启的模块有：\n\n- forever模块，forever处理crash事件，再开启新的node进程（很少用了，基本都用pm2模块）\n- pm2模块，支持所有的forever的功能，功能强大，比如0秒切换。\n\n```bash\nnpm i pm2 -g\npm2 start app.js\n```\n\n## 大集群：多台机器\n\n为了应对大流量，需要多台机器进行集群处理，因此可以通过负载均衡策略将流量分发到各个机器上，通过消除单点故障提升应用系统的可用性。常见的集群处理方式是使用Nginx或HAProxy。\n\n# 参考\n\n- [Node.js的底层原理](https://juejin.cn/post/7008504029277847565)\n- [Node.js 技术架构](https://juejin.cn/post/7081891057918558221)\n- [.env 文件原理](https://juejin.cn/post/7045057475845816357)\n- [Node.js子进程](https://juejin.cn/post/6844903592554397710)\n- [NodeJS中的事件（EventEmitter](https://juejin.cn/post/6844903678227251213)\n- [书栈网node.js教程](https://www.bookstack.cn/read/Nodejs-Roadmap/nodejs-base-what-is-nodejs.md)\n- 《Node.js12 实战》\n- 《Node.js 企业级应用开发实战》\n- 《狼叔卷1》\n- 《狼叔卷2》","source":"_posts/front_end/node-base.md","raw":"---\ntitle: Node 知识梳理（一） \ndate: 2022-01-05 22:15:33\ncategories:\n  - 前端\ntags:\n  - Node\ntoc: true # 是否启用内容索引\ncomments: true\ncopyright: false\n---\n- Node 是一个基于谷歌V8引擎的一个JavaScript运行环境（runtime运行时），是服务端的运行环境。\n- Node 的特点是事件驱动、非阻塞式 I/O（input/output）、单线程。触发一次事件，执行回调，是事件驱动的一种体现。\n\n# Node的使用场景\n\n- I/O 密集型场景\n- 提供http接口，组装数据\n- RPC服务，RPC（Remote Procedure Call远程过程调用），RPC服务也是采用的TCP，出名的RPC服务有Google的gRPC、阿里的Dubble\n- 基础工具：构建工具（webpack、vite）、搭建脚手架（cra、vue-cli、umi）等\n- BFF：接口聚合、转发\n- Serverless（无服务器架构）：函数即服务，写一个函数就可以实现一个 API 接口给到前端\n- Microservices（微服务）：小型服务、以独立进程运行、可以使用不同语言\n\n# Node.js 架构（node底层原理）\n\n1. Node.js内置模块（标准库）： http、fs、buffer、path、stream。\n2. Node bindings（桥梁）：是JavaScript与 C++ 连接的桥梁，对底层模块进行封装，为内置模块的提供 API 接口。\n3. Node底层模块\n- V8：Google开源的高性能JavaScript引擎，使用 C++ 开发，并且应用于谷歌浏览器\n- Libuv：提供Event Loop 事件循环和线程池，提供事件驱动的 I/O 库。它是使用 C 和 C++ 语言为 Node.js 所开发的，同时也是 I/O 操作的核心部分，例如读取文件和 OS 交互（几乎所有和操作系统打交道的部分离不开libuv的支持）\n- C-ares（异步 DNS 解析库）\n- Low-Level Components：提供了http 解析、OpenSSL、数据压缩（zlib）等功能。\n\n# Node EventLoop（事件循环）\n\nnode中的事件循环的顺序：\n外部输入数据(incoming) --> 轮询阶段(poll) --> 检查阶段(check)--> 关闭事件回调阶段(close callbacks) --> 定时器检测阶段(timers) --> I/O事件回调阶段(I/O callbacks) --> 闲置阶段(idle, prepare) --> 轮询阶段(按照该顺序反复运行)\n\n每个阶段都有一个先入先出的队列，这个队列存有要执行的回调函数\n\n```js\n   ┌───────────────────────────┐\n┌─>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     I/O callbacks         │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle, prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming:   │\n│  │           poll            │<─────┤  connections, │\n│  └─────────────┬─────────────┘      │   data, etc.  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘\n```\n## Node事件循环各阶段概述\n\n绝大部分异步任务都是在timers、poll、check这3个阶段处理的。\n1. timers 这个阶段执行 setTimeout() 和 setInterval() 的回调，并且是由 poll 阶段控制的。 在 Node 中定时器指定的时间也不是准确时间，只能是尽快执行，如果操作系统很忙，那么计时器的回调函数就会被推迟执行\n2. I/O callbacks 处理一些上一轮循环中的少数未执行的 I/O 回调（执行一些系统操作的回调函数）\n3. 闲置阶段：idle（空闲），prepare 仅在内部使用。\n4. poll（轮询阶段）：处理大部分的事件，如看看有没有文件可以读，有没有请求可以处理，检查一下最近的计时器，看看有没有需要过会儿去执行的 callback。poll 是一个至关重要的阶段，这一阶段中，系统会做两件事情\n  - 回到 timer 阶段执行回调\n  - 执行 I/O 回调\n\n并且在进入该阶段时如果没有设定了 timer 的话，会发生以下两件事情\n\n- 如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制\n- 如果 poll 队列为空时，会有两件事发生\n\n  - 如果有 setImmediate 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调\n  - 如果没有 setImmediate 回调需要执行，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间设置防止一直等待下去\n5. check（检查） 执行 setImmediate() 的回调\n6. close callbacks 执行 socket 的 close 事件回调，例如：`socket.on('close', ...)`，如果队列是空的，则跳过\n\nNode 不会一直循环循环，如果发现没什么事儿做，就会停留在 poll（轮询）阶段，大部分事件都在 poll 阶段被处理，如文件、网络请求等\n\n# 进程和线程\n\n1. 进程\n\n- 进程可以说是计算机系统进行资源分配和调度的基本单位，启动一个服务、运行一个应用，就是开一个进程，进程是线程的容器。\n- 例如 Java 里的 JVM 本身就是一个进程，Node.js 里通过 node app.js 开启一个服务进程。在任务管理器查看任务进程，Nodejs JavaScript Runtime\n<img src=\"/images/front_end/nodejs-runtime001.png\" >\n- 一个进程无法访问另外一个进程里定义的变量、数据结构，只有建立了 IPC 通信，进程之间才可数据共享。\n- 同一块代码，可以根据系统CPU核心数启动多个进程，每个进程都有属于自己的独立运行空间，进程之间是不相互影响的。\n\n2. 线程\n\n- 线程是属于进程的，进程可以调用线程去执行一些子任务，一个进程是可以拥有多个线程的。\n- 同一进程中的多条线程可以共享该进程中的全部系统资源。\n- 同一进程中的多个线程有各自的调用栈（call stack），本地存储（thread-local storage)等。\n- 线程可以分为单线程（JavaScript）和多线程（Java）。\n\n3. 单线程\n\n- 单线程就是一个进程只开一个线程，Javascript 就是属于单线程，程序顺序执行，前面一个执行完之后，后面才可以执行。\n- 在使用单线程编码时不要有过多耗时的同步操作，否则线程会造成阻塞，导致后续响应无法处理，适当地使用异步操作。\n\n4. 多线程\n\n- 多线程就是，一个进程可以开启多线程，Java 就是多线程编程语言的一种，可以有效避免代码阻塞导致的后续请求无法处理。\n- 多线程创建新的线程来切换开销，由于每创建一个线程就会占用一定的内存，当应用程序并发大了之后，内存将会很快耗尽。\n\n# Node模块机制\n1. Node.js 模块采用Commonjs规范，Node.js的系统模块采用了延迟加载的策略，只有在用到的情况下，系统模块才会被加载，加载完成后会放到 binding_cache缓存中。\n2. 在 Node.js 中模块加载一般会经历 3 个步骤，路径分析、文件定位、编译执行。按照模块的分类，按照以下顺序进行优先加载：\n- 如果有 `./`从当前目录查找，相对路径文件模块\n- 如果没有 `./`，先从系统模块，再从node_modules下查找 （[nodejs模块系统](https://blog.csdn.net/gongch0604/article/details/111748684)）\n- 系统缓存：模块被执行之后会进行缓存，首先是先进行缓存加载，判断缓存中是否有值（require.cache查看已缓存的模块，返回值为对象）。因为 Node.js 默认先从缓存中加载模块，一个模块被加载一次之后，就会在缓存中维持一个副本，如果遇到重复加载的模块会直接提取缓存中的副本，也就是说在任何时候每个模块都只在缓存中有一个实例。\n- 系统模块：也就是原生模块，这个优先级仅次于缓存加载，部分核心模块已经被编译成二进制，省略了 路径分析、文件定位，直接加载到了内存中，系统模块定义在 Node.js 源码的 lib 目录下，可以去查看。\n- 文件模块（开发者自己编写的模块）：优先加载 `.`、`..`、`/` 开头的，如果文件没有加上扩展名，会依次按照 `.js`、`.json`、`.node` 进行扩展名补足尝试，那么在尝试的过程中也是以同步阻塞模式来判断文件是否存在，从性能优化的角度来看待，`.json`、`.node`最好还是加上文件的扩展名。\n- 目录做为模块：这种情况发生在文件模块加载过程中，也没有找到，但是发现是一个目录的情况，这个时候会将这个目录当作一个包来处理，Node 这块采用了 Commonjs 规范，先会在项目根目录查找 package.json 文件，取出文件中定义的 main 属性 `(\"main\": \"lib/index.js\")` 描述的入口文件进行加载，也没加载到，则会抛出默认错误: `Error: Cannot find module 'lib/index.js'`\n- node_modules 目录加载：对于系统模块、路径文件模块都找不到，Node.js 会从当前模块的父目录进行查找，直到系统的根目录\n\n# Node常用模块\n\n|模块名称 | 功能描述|\n|:-:|:-:|\n| buffer | 实现数据缓冲区，Buffer一般用于处理二进制数据，也可以处理字符编码|\n| child_process| （实现多进程任务）创建子进程，实现子进程和主进程之间的通信|\n| cluster | 可以简化`多进程`、`并行化`程序的开发难度，利用多核CPU 实现并行，轻松构建一个用于负载均衡的集群。著名的pm2模块就使用了cluster实现|\n| console| 和浏览里的用法一样，比如console.log、console.dir等\n|crypto|对OpenSSL里的 HMAC、Cipher、Decipher等算法进行加解密封装，一般用户在进行密码处理时都会用到该模块|\n|dns|域名解析，主要API是 lookup和 resolve|\n| events| 事件处理，EventEmitter的核心功能就是对事件触发和事件监听器功能进行封装|\n| fs|文件系统模块，主要针对目录、文件进行操作，开发中使用极其广泛| \n| http | Node.js里使用多的模块，可以非常构建Web应用服务，搭建HTTP服务端和客户端，是Web框架的底层核心库| \n| http2| 下一代HTTP协议，在Node.js 8里是需要通过flag开启的体验功能|\n| https| HTTPS实现，是HTTP的安全加强版| HTTPS的安全基础是SSL，在架构选择上，可以通过Nginx实现，也可以在 Node.js应用层上实现|\n\n## process全局对象\n\nNode.js 中的进程 process 是一个全局对象，无需 require 直接使用（global.process = process），process对象是EventEmitter的实例\n\n- process.title：终端上显示的标题\n- process.version：nodejs的版本号\n- process.versions：nodejs依赖模块的版本信息\n- process.env：环境变量，例如通过 `process.env.NODE_ENV` 获取不同环境项目配置信息，还可以往`process.env`上挂载其他常量。\n- process.nextTick：表示在事件循环（EventLoop）的下一次循环中调用 callback 回调函数，要注意的是它总会在I/O操作（比如查询数据）之前先执行\n- process.pid：获取当前进程id\n- process.ppid：当前进程对应的父进程\n- process.cwd()：获取当前进程工作目录\n- process.argv: 返回当前命令行指令参数，是一个数组，`process.argv[2]`\n- process.execPath：获取当前进程的这个可执行文件的绝对路径\n- process.exit([code])：终止当前进程并返回给定的 code，默认是0\n- process.exitCode：可以自定义退出进程时node shell捕获到的状态码（可以自定义退出进程时node shell捕获到的状态码）\n- process.chdir(directory)：改变进程的当前进程的工作目录（该目录必须已存在），若操作失败则抛出异常\n- process.platform：获取当前进程运行的操作系统平台\n- process.uptime()：当前进程已运行时间，例如：pm2 守护进程的 uptime 值\n- process.moduleLoadList：当前进程已加载的模块列表，nodejs模块系统。NativeModule原生模块\n- process.config：当前nodejs构建时使用的配置信息，可以辅助定位\n- `process.on('exit', callback)`：当进程将要退出时触发。 'exit'的回调结束后，主进程将不再运行\n- `process.on('SIGINT', callback)`：捕获当前进程接收到的信号\n- process.abort()：触发node的abort事件，退出当前进程，执行该函数后，后面的代码不执行。\n- `process.kill(pid, [signal])`：结束对应某pid的进程并发送一个信号\n- 进程事件：`process.on('uncaughtException', cb)` 捕获异常信息、`process.on('exit', cb)`进程推出监听\n- 三个标准流：process.stdout 标准输出、process.stdin 标准输入、process.stderr 标准错误输出\n\n### process.env\n\nprocess.env属性返回一个包含用户环境信息的对象。在node环境中，当我们打印process.env时，发现它并没有NODE_ENV这一个属性。实际上，process.env.NODE_ENV是在package.json的scripts命令中注入的，也就是NODE_ENV并不是node自带的，而是由用户定义的，至于为什么叫NODE_ENV，应该是约定成俗的吧。\n\n\n\n## child_process（创建子进程）\nNode.js 提供了 child_process 内置模块，用于创建子进程\n\n- child_process.spawn()：适用于返回大量数据，例如图像处理，二进制数据处理。\n- child_process.exec()：适用于小量数据，maxBuffer 默认值为 200 * 1024 超出这个默认值将会导致程序崩溃，数据量过大可采用 spawn。\n- child_process.execFile()：类似 child_process.exec()，区别是不能通过 shell 来执行，不支持像 I/O 重定向和文件查找这样的行为\n- child_process.fork()：衍生新的进程，进程之间是相互独立的，每个进程都有自己的 V8 实例、内存，系统资源是有限的，不建议衍生太多的子进程出来，通长根据系统 CPU 核心数设置。\n\n## path\n\n主要作用就是处理文件的目录和路径，在前端项目webpack配置文件中经常用到。\n\n### path.join()\n\n拼接多个路径片段，还原成完整可用路径\n\n```js\npath.join('a/b', 'c', 'index.html'); // a/b/c/index.html\npath.join('/a/b', 'c', 'index.html'); // /a/b/c/index.html\npath.join('a/b', 'c', '../', 'index.html'); // a/b/index.html\n```\n### path.resove()\n返回一个绝对路径\n```js\npath.resove(); // 获取绝对路径\npath.resove(__dirname, 'c', 'index.html');\n```\n### basename()\n获取路径中基础名称\n```js\npath.basename(__filename); // test.js\n// 传入第二个参数如果匹配会省略后缀，不匹配仍旧返回真实的后缀\npath.basename(__filename, '.js'); // test\npath.basename('/a/b/c'); // c\npath.basename('/a/b/c/'); // c\n```\n### path.extname()\n获取路径中的扩展名称\n```js\npath.extname('/src/index.html'); // .html\n```\n### path.parse()\n解析路径\n```js\nconst obj = path.parse('/src/index.html');\n/**\n* root: /\n* dir: /src\n* base: index.html\n* ext: .html\n* name: index\n*/\n```\n## fs(读取文件)\n\n## events（事件模块）\n- 在 Node.js 中一个很重要的模块 Events（EventEmitter 事件触发器），EventEmitter 本质上就是观察者模式的实现。net、http、fs、stream、process 等模块，express、koa 框架都依赖了Events。\n- EventEmitter 对象的事件触发 emit 和监听 on 是同步的，事件的回调是异步的。\n- 在 Node.js 的事件机制中主要有三类角色: 事件(Event)、事件发射器(EventEmitter)、事件监听器(Event Listener)。\n\n### Event\n\n- EventEmitter 提供了 `on()`、`once()`、`removeListener()` 等方法来对事件进行监听移除，可同时注册多个同名的事件。其中`once()`: 当触发多次相同名称事件，通过 once 添加的侦听器只会执行一次。\n\n- EventEmitter 会按照监听器注册的顺序**同步**地调用所有监听器，所以必须确保事件的排序正确。提前触发未监听的事件，不会报错，并且不会执行监听的回调函数。\n\n```js\n// 基本使用\nconst EventEmitter = require('events').EventEmitter;\nconst emitter = new EventEmitter();\nemitter.on(\"起床\", function(time) {\n    console.log(`早上 ${time} 开始起床，新的一天加油！`)\n});\nemitter.emit(\"起床\", \"6:00\");\n\n// 在 Koa 中 new 一个 app 对象，通过 app.emit() 触发一个事件，实现在整个系统中进行传递。\nconst Koa = require('koa');\nconst app = new Koa();\napp.on(\"koa\", function() {\n    console.log(\"在 Koa 中使用 EventEmitter\");\n});\napp.emit(\"koa\");\n\n// 通过Object.setPrototypeOf() 来实现的继承\nfunction MyEmitter(){\n    EventEmitter.call(this);\n}\nObject.setPrototypeOf(MyEmitter.prototype, EventEmitter.prototype);\nObject.setPrototypeOf(MyEmitter, EventEmitter);\n```\n- 默认情况下，如果为特定事件添加了超过 10 个监听器，则 EventEmitter 会打印一个警告。 但是，并不是所有的事件都要限制 10 个监听器。 `emitter.setMaxListeners()` 方法可以为指定的 EventEmitter 实例修改限制。\n\n```js\n// 操作最大事件监听个数\n// 设置同类型事件监听最大个数\nEventEmitter.prototype.setMaxListeners = function (count) {\n    this._count = count;\n}\n\n// 获取同类型事件监听最大个数\nEventEmitter.prototype.getMaxListeners = function () {\n    return this._count || EventEmitter.defaultMaxListeners;\n}\n```\n### error事件\n\n当EventEmitter 实例出错时，应该触发error事件。如果没有为error事件注册监听器，则当error事件触发时，会抛出错误、打印堆栈跟踪，并退出Node.js进程。\n\n```js\nconst EventEmitter = require ('events');\nclass MyEmitter extends EventEmitter {}\nconst myEmitter = new MyEmitter ();\n// 模拟触发error事件\nmyEmitter.emit('error', new Error('错误信息')); // 抛出错误\n\nmyEmitter.emit('error', (err) => {\n\tconsole.log(err))\n}); \n\n```\n## Buffer（缓冲区）\n- Buffer 用于读取或操作二进制数据流，将数据缓冲起来，它是临时性的，对于流式数据，会采用缓冲区将数据临时存储起来。\n- 如用于操作网络协议、数据库、图片和文件I/O 等一些需要大量二进制数据的场景，专门存放二进制数据的缓存区。\n- Buffer 作为存在于全局对象上，使用时无需 require 引入模块即可使用。\n- Buffer 在创建时大小已经被确定且是无法调整的，在内存分配这块 Buffer 是由 C++ 层面提供而不是 V8。\n\n### Buffer应用场景\n\nBuffer的应用场景有以下几种。\n\n- 在使用net或 http模块来接收网络数据时，可用 Buffer作为数据结构进行传输，即 data事件的参数。\n- 用于大文件的读取和写入。以前fs读取的内容是string，后来都改用Buffer，在大文件读取上，性能和内存有明显优势。\n- 用于字符转码、进制转换。Unicode 编码虽然能满足绝大部分场景，但有时候还是不够的，由于Node.js内置的转换编码并不支持GBK，因此如果要处理编码为GBK的文档，就需要iconv和 iconv-lite来补充一部分，string decoder模块提供了一个 API，用于把 Buffer对象解码成字符串，但会保留编码过的多字节UTF-8与UTF-16字符。\n- 用作数据结构，处理二进制数据，也可以处理字符编码。\n\n## Buffer与字符串的传输速度\n\nbuffer比string快。在 HTTP 传输中传输的是二进制数据，上面例子中的 /string 接口直接返回的字符串，这时候 HTTP 在传输之前会先将字符串转换为 Buffer 类型，以二进制数据传输，通过流（Stream）的方式一点点返回到客户端。但是直接返回 Buffer 类型，则少了每次的转换操作，对于性能也是有提升的。在一些 Web 应用中，对于静态数据可以预先转为 Buffer 进行传输，可以有效减少 CPU 的重复使用（重复的字符串转 Buffer 操作）。\n\n## buffer模块与Buffer的关系\n\nBuffer是全局global上的一个引用，指向的其实是buffer.Buffer\n\n```js\nconst buffer = require('buffer');\nconsole.log(buffer.Buffer === Buffer); //true\n```\n\n### 创建Buffer\n- Buffer.from()，第一个参数是内容，第二个是按什么格式转。Buffer.from不支持传入数字，传入数字可以采用传入数组的，存入的一组数据最好是：全部落在0到255区间  或者全部落在-128到127，这是因为不同的数字读取时应该调用不同的方法。\n```js\nBuffer.from(1234); // throw new errors.TypeError\n\nconst buf = Buffer.from([1, 2, 3, 4]);\nconsole.log(buf); //  <Buffer 01 02 03 04>  显示的是16进制的\n```\n- Buffer.alloc()，第一个参数是长度，第二个具体buffer内容\n```js\nconst b2 = Buffer.alloc(10);  // 创建一个大小为 10 个字节的缓冲区\nconsole.log(b2); // <Buffer 00 00 00 00 00 00 00 00 00 00>\n\n// 尝试分配一个大小为 2048 的 Buffer 对象\nBuffer.alloc(2 * 1024)\n\n// 打印buffer，将每个字符串对应的ASCII码的十进制，转化为16进制的，比如 H\n'H'.charCodeAt()// ASCII码：'72'\n'H'.charCodeAt().toString(16) // '72'的16进制 '48'\n```\n#### Buffer 字符编码\n通过使用字符编码，可实现 Buffer 实例与 JavaScript 字符串之间的相互转换。如果不传递 encoding 默认按照 UTF-8 格式转换存储\n- `'ascii'`仅适用于 7 位 ASCII 数据，此编码速度很快，如果设置则会剥离高位。\n- `'utf8'`多字节编码的 Unicode 字符，许多网页和其他文档格式都使用 UTF-8。\n- `'base64'`Base64 编码。。\n- `'binary'`一种将 Buffer 编码成单字节编码字符串的方法。\n- `'hex'`将每个字节编码成两个十六进制的字符。\n```js\nconst buf = Buffer.from('hello world', 'utf8');\nconsole.log(buf.toString('hex')); // 68656c6c6f20776f726c64\nconsole.log(buf.toString('utf8')); // hello world\n```\n### 字符串与 Buffer 类型互转\n\n#### 字符串转 Buffer（将字符串数据写入缓冲区）\n```js\nconst b3 = Buffer.from('123456789', 'utf8');\nconsole.log(b3) // <Buffer 31 32 33 34 35 36 37 38 39>\nconsole.log(b3.length) // 9\n```\n#### Buffer 转换为字符串（从缓冲区读取string数据）\n使用 buf.toString([encoding], [start], [end]) 方法，默认编码仍为 UTF-8\n```js\nconst b3 = Buffer.from('123456789', 'utf8');\n\nconsole.log(b3.toString()) // 123456789\nconsole.log(b3.toString('utf8', 0, 5)) // 1234\n```\n### 将buffer转换成JSON对象\nbuf.toJSON()，返回一个JSON对象。当字符串化一个buffer实例是，JSON.stringify()会隐式地调用该toJSON()。\n```js\nconst buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\nconst json = JSON.stringify(buf);\n\n// 输出: { \"type\": \"Buffer\", \"data\": [ 1,2,3,4,5] }\nconsole.log(json);\n\nconst copy = JSON.parse(json,(key, value) =>{\n  return value && value.type === 'Buffer' ? Buffer.from(value.data) :value;\n});\n\n// 输出:<Buffer 01 02 03 04 05>\nconsole.log(copy);\n```\n### buffer缓冲区的合并\nBuffer.concat(list[, totalLength])\n- list <Buffer[]> 要连接的 Buffer。\n- totalLength `<integer>` 连接时list中Buffer 实例的总长度，如果未提供 totalLength，则从 list 中的 Buffer 实例通过相加其长度来计算\n- 返回: `<Buffer>`\n\n```js\nconst buf1 = Buffer.alloc(10);\nconst buf2 = Buffer.alloc(14);\nconst buf3 = Buffer.alloc(18);\nconst totalLength = buf1.length + buf2.length + buf3.length;\nconsole.log(totalLength);\n// 打印: 42\nconst bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\nconsole.log(bufA);\n// 打印: <Buffer 00 00 00 00 ...>\nconsole.log(bufA.length);\n// 打印: 42\n```\n### 缓冲区的拷贝\nBuffer.copy(buf)\n### 缓冲区的比较\nBuffer.compare(buf1, buf2)\n### 缓冲区的裁剪\n- buf.slice([start[, end]])\n- 返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切\n### 转换过程中为什么出现乱码？\n字符串中有中文，一个中文在UTF-8下占用3个字节。转成buffer后，再从buffer转成字符串时，如果字符被截断则容易出现乱码。\n```js\nconst buf = Buffer.from('前端开发');\nconsole.log(buf);  // <Buffer e5 89 8d e7 ab af e5 bc 80 e5 8f 91>\nconsole.log(buf.length); // 12，一个中文在UTF-8下占用3个字节\nconsole.log(buf.toString('UTF-8', 0, 8)); // 前端�\n```\n## Stream（流）\n\nStream在 Node.js 中继承自EventEmitter，它有4种基本流类型。\n- Readable: 可读操作类型，可以产出数据，这些数据可以被传送到其他流中，只需要调用pipe方法即可。\n- Writable: 可写操作类型，只能流进不能流出。\n- Duplex: 可读可写操作类型（net.Socket）。\n- Transform: 转换类型，可以写入数据，然后读出结果。\n\nnode.js创建的流都是运作在字符串和buffer上的。\nStream作为读写方法是最好的。可写流和可读流都会在内部的缓冲区中存储数据，可以分别使用 writable.writableBuffer 或 readable.readableBuffer 来获取。\n\n### 流中的缓冲区\n- 可写流和可读流都会在内部的缓冲区中存储数据，可以 writable.writableBuffer 或 readable.readableBuffer 来获取。\n\n- 可缓冲的数据大小取决于传入流构造函数的 highWaterMark 选项。对于普通的流，highWaterMark 指定了字节的总数。对于对象模式的流，highWaterMark 指定了对象的总数。\n\n- 当调用 stream.push(chunk) 时，数据会缓冲在可读流中。如果流的消费者没有调用 stream.read()，则数据会保留在内部队列中直到被消费。\n\n- 一旦内部的可读缓冲的总大小达到 highWaterMark 指定的或值时，流会停止从底层资源读取数据，直到当前缓冲的数据被消贺（也就是说，流会停止调用内部的用于填充可读缓冲的 readable._read())。\n\n- 当调用 writable.write(chunk）时，数据会被缓冲在可写流中。当内部的缓冲区的总大小小于 highWaterMark 设置的阈值时，调用 writable.write() 会返回true。一旦内部缓冲的大小达到或超过 highWaterMark 时，则会返回false。\n\n因为双工流和转换流都是可读又可写的，所以它们各自维护着两个相互独立的内部缓冲区用于读取和写入，这使得它们在维护数据流时，读取和写入两边可以各自独立地运作。例如，net.Socket实例是双工流，它的可读端可以消费从socket接收的数据，而可写端则可以将数据写入到socket。因为数据写入到socket的速度可能比接收数据的速度快或慢，所以在读写两端独立地进行操作（或缓冲）就显得很重要了。\n\n\n```js\nconst fs = require('fs');\nvar source = fs.readFileSync('/path/to/source', (encoding: 'utf8'));\nfs.writeFileSync('/path/to/dest', source);\n\n// 等价于\n// pipe是用来传递  上一个流的输出  并将其作为  下一个流的输入的链式方法。\nfs.createReadstream('/path/to/source').pipe(fs.createWriteStream('/path/to/dest'));\n```\n### 可读流\nNode. js可读流是对提供数据的来源的一种抽象。所有可读流都实现了stream.Readable类定义的接口。可读流常见的例子包括客户端的HTTP响应、服务器的HTTP请求、fs的读取流、zlib流、crypto流、TCP socket、子进程 stdout 与 stderr、process.stdin。\n\n### stream.Readable类事件\n1. close 事件\nclose 事件在流被关闭时触发。表明不会再触发其他事件，也不会再发生操作。不是所有可读流都会触发close事件。如果使用 emitClose 选项创建可读流，则它将始终发出close事件。\n\n2. data 事件\ndata事件是在流将数据块传送给`消费者`后触发。对于非对象模式的流，数据块可以是字符串或 Buffer。对于对象模式的流，数据块可以是除了 null 的任何 JavaScript 值。\n当调用 readable.pipe()、readable.resume() 或绑定监听器到 data 事件时，流会转换到流动模式。当调用 readable.read() 且有数据块返回时，也会触发data 事件。\n如果使用 readable.setEncoding() 为流指定了默认的字符编码，则监听器回调传入的数据为字符串，否则传入的数据为 Buffer。\n\n3. end 事件\nend 事件只有在数据被完全消费掉后才会触发。要想触发该事件，可以将流转换到流动模式，或反复调用 stream.read() 直到数据被消费完。\n\n4. error 事件\nerror事件通常是在当流因底层内部出错而不能产生数据，或推送无效的数据块时触发，监听器回调将传递一个 Error对象。\n\n5. pause 事件\n调用 stream.pause() 并且 readsFlowing 不为 false 时，会发出 pause 事件。\n\n6. readable 事件\nreadable 事件在当流中有数据可供读取时触发。\n```js\nconst readable = getReadableStreamSomehow();\n\nreadable.on('readable', function(){\n    let data; // 有数据可读\n\n    while(data = this.read()){\n        console.log(data);\n    }\n})\n```\n当到达流数据的尽头时，readable 事件也会触发，但是在 end 事件之前触发。readable 事件表明流有新的动态，要么有新的数据，要么到达流的尽头。对于前者，stream.read() 会返回可用的数据。对于后者，stream.read() 会返回null。\n\n### stream.Readable类方法\n1.destroy\nreadable.destroy([error])方法用于销毁流，并触发error事件和close事件。调用后，可读流将释放所有的内部资源，且忽视后续的 push() 调用。实现流时不应该重写这个方法，而是重写 readable._destroy()。\n\n2.isPaused\nreadable.isPaused() 方法用于返回可读流当前的操作状态。主要用于 readable.pipe() 底层的机制，大多数情况下无须直接使用该方法。\n\n3. pause 与 resume\nreadable.pause() 方法使流动模式的流**停止触发data事件**，并切换到流动模式。任何可用的数据都会保留在内部缓存中。\n相对的，readable.resume() 将被暂停的可读流**恢复触发data事件**，并将流切换到流动模式，在readable事件使用不生效。\n\n4. pipe\nreadable.pipe(destination[, options])方法用于绑定可写流到可读流，将可读流自动切换到流动模式，并将可读流的所有数据推送到绑定的可写流。数据流会被自动管理，所以即使可读流更快，目标可写流也不会超负荷。\n\n- 将可读流的所有数据通过管道推送到write-data.txt文件：\n```js\nconst fs = require('fs');\n\nconst readable = fs.createReadStream('data.txt');\n\nconst writable = fs.createWriteStream('write-data.txt');\n\n// readable的所有数据都推送到'write-data.txt'\nreadable.pipe(writable);\n```\n- 可以在单个可读流上绑定多个可写流\n```js\nreadable.pipe(writable1).pipe(writable2);\n```\n- 默认情况下，当来源可读流触发end事件时，目标可写流也会调用stream.end()结束写入。若要禁用这种默认行为，end选项应设为 false，这样目标流就会保持打开。\n```js\nreader.pipe (writer, { end: false });\nreader.on ('end', () => {\n    writer.end ('结束');\n}\n```\n如果可读流发生错误，目标可写流不会自动关闭，需要手动关闭所有流以避免内存泄漏。process.stderr 和 process.stdout 可写的流在 Node.js 进程退出之前永远不会关闭。\n\n5. read\n- readable.read([size])方法用于从内部缓冲拉取并返回数据。其中，size指定要读取的数据的字节数。如果没有指定size参数，则返回内部缓冲中的所有数据。该方法如果没有可读的数据，则返回null。默认情况下，readable.read()返回的数据是Buffer对象，除非使用readable.setEncoding()指定字符编码或流处于对象模式。如果可读的数据不足size个字节，则返回内部缓冲剩余的数据，如果流已经结束则返回null。\n\n- readable.read()应该只对处于暂停模式的可读流调用。在流动模式中，readable.read()会自动调用直到内部缓冲的数据完全耗尽。\n\n- 如果readable.read()返回一个数据块，则data事件也会触发。\n\n- end事件触发后再调用stream.read([size])会返回null，不会抛出错误。\n```js\nconst fs = require('fs');\n\nconst readable = fs.createReadStream('data.txt');\n\n// 设置字符编码\nreadable.setEncoding('utf-8');\n\n// 读取数据\nreadable.on('readable', () => {\n  let chunk;\n  while (null !== (chunk = readable.read(10))) {\n    console.log(`接收到 ${chunk.length} 字节的数据`);\n    console.log(`接收到的数据是： ${chunk}`);\n  }\n});\n\nreadable.on('end', () => {\n  console.log('结束');\n});\n```\n上述示例中，使用readable.read()处理数据时，while循环是必需的。只有在readable.read()返回null之后，才会发出readable事件;\n\nreadable.setEncoding()用于设置字符编码。默认情况下没有设置字符编码，流数据返回的是 Buffer对象。如果设置了字符编码，则流数据返回指定编码的字符串。例如，本例中调用`readable.setEncoding('utf-8')`会将数据解析为UTF-8数据，并返回字符串。如果调用`readable.setEncoding(hex)`则会将数据编码成十六进制字符串。\n\n6. readable.unpipe([destination])\n解绑之前使用 stream.pipe() 绑定的可写流。如果没有指定目标可写流，则解绑所有管道，如果指定了目标可写流但它没有建立管道，则不起作用。\n```js\nconst fs = require('fs');\n\nconst readable = fs.createReadStream('data.txt');\n\nconst writable = fs.createWriteStream('write-data.txt');\n\n// readable的所有数据都推送到'write-data.txt'\nreadable.pipe(writable);\n\nsetTimeout(() => {\n  console.log('停止写入数据');\n  readable.unpipe(writable);\n  console.log('手动关闭文件流');\n  writable.end();\n}, 3);\n```\n### 两种读取模式\n流动模式或者暂停模式\n\n可读流运作于流动模式(flowing)或暂停模式(paused)两种模式之一。\n- 在流动模式中，数据自动从底层系统读取，并通过EventEmitter 接口的事件尽口能快地被提供给应用程序。\n- 在暂停模式中，必须显式调用stream.read()读取数据块。\n所有可读流都开始于暂停模式，可以通过以下方式切换到流动模式。\n- 添加data事件句柄。\n- 调用stream.resume()。·调用stream.pipe()。\n可读流可以通过以下方式切换回暂停模式。\n- 如果没有管道目标，则调用stream.pause()。\n- 如果有管道目标，则移除所有管道目标。调用stream.unpipe()可以移除多个管道目标。\n\n只有提供了消费或忽略数据的机制后，可读流才会产生数据。如果消费的机制被禁用或移除，则可读流会停止产生数据。\n\n为了向后兼容，移除data事件句柄不会自动地暂停流。如果有管道目标，一旦目标变为drain 状态并请求接收数据时，则调用 stream.pause() 也不能保证流会保持暂停模式。\n\n如果可读流切换到流动模式，且没有可用的“消费者”来处理数据，则数据将会丢失。例如，当调用readable.resume() 时，没有监听data事件或data事件句柄已移除。\n\n添加readable事件句柄会使流自动停止流动，并通过 readable.read() 消费数据。如果 readable 事件句柄被移除，且存在data事件句柄，则流会再次开始流动。\n\n### 可写流\n可写流是对数据要被写入的目的地的一种抽象。所有可写流都实现了stream.Writable类定义的接口。可写流常见的例子包括客户端的HTTP请求、服务器的HTTP响应、fs的写入流、zlib流、crypto流、TCP socket、子进程stdin、process.stdout、process.stderr。上面的一些例子事实上是实现了可写流接口的双工流。\n#### stream.Writable类事件\nstream.Writable类定义了如下事件。\n\n1. close事件\n当流及其任何底层资源（如文件描述符）已关闭时，将发出close事件。该事件表明不会发出更多事件，也不会进一步计算。\n如果使用emitClose选项创建可写流，它将始终发出close事件。\n\n2. drain事件\n如果对stream.write(chunk)的调用返回false，则在适合继续将数据写入流时将发出drain事件。\n\n3. error事件\n如果在写入管道数据时发生错误，则会发出error事件。调用时，监听器回调会传递一个Error参数。\n发出error事件时，流不会关闭。\n\n4. finish事件\n调用stream.end()方法后会发出finish事件，并且所有数据都已刷新到底层系统。\n```js\nconst fs = require('fs');\n\nconst writable = fs.createWriteStream('write-data.txt');\n\nfor (let i = 0; i < 10; i++) {\n  writable.write(`写入 #${i}!\\n`);\n}\n\nwritable.end('写入结尾\\n');\nwritable.on('finish', () => {\n  console.log('写入已完成');\n})\n```\n5. pipe事件\n在可读流上调用stream.pipe()方法时会发出pipe事件，并将此可写流添加到其目标集。\n\n6. unpipe事件\n当在可读流上调用stream.unpipe()时触发。当可读流通过管道流向可写流发生错误时，也会触发unpipe事件。\n\n#### stream.Writable类方法\n\n1. cork\nwritable.cork()方法用于强制把所有写入的数据都缓冲到内存中。当调用stream.uncork()或stream.end()时，缓冲的数据才会被输出。\n\n当写入大量小块数据到流时，内部缓冲可能失效，从而导致性能下降，writable.cork()主要用于避免这种情况。对于这种情况，实现了writable._writev()的流可以用更优的方式对写入的数据进行缓冲。\n\n2. destroy\nwritable.destroy([error])方法用于销毁流。在调用该方法之后，可写流已结束，随后对write()或end()的调用都将导致ERR_STREAM_DESTROYED错误。如果数据在关闭之前应该刷新，则应使用end()方法而不是destroy()方法，或者在销毁流之前等待drain事件。实现者不应该重写此方法，而是实现writable._destroy()。\n\n3. end\n调用writable.end([chunk][, encoding][, callback])方法表示不再将数据写入Writable。该方法的参数如下。\n\n- `chunk<string>|<Buffer>|<Uint8Array>/<any>`:要 写入的可选数据。对于不在对象模式下运行的流，块必须是字符串、Buffer 或 Uint8Array。对于对象模式流，块可以是除null 之外的任何JavaScript 值。\n\n- `encoding<string>`: 如果设置了编码，则 chunk 是一个字符串。\n- `callback<Function>`: 流完成时的可选回调。\n\n调用writable.end()方法表示不再将数据写入Writable。可选的块和编码参数允许在关闭流之前立即写入最后一个额外的数据块。如果提供，则附加可选回调函数作为finish事件的监听器。\n\n调用stream.end()后调用stream.write()方法将引发错误。\n\n4. setDefaultEncoding\nwritable.setDefaultEncoding(encoding)为可写流设置默认的编码。\n\n5. uncork\nwritable.uncork()方法用于将调用stream.cork()后缓冲的所有数据输出到目标。当使用writable.cork() 和 writable.uncork() 来管理流的写入缓冲时，建议使用 process.nextTick() 来延迟调用 writable.uncork()。通过这种方式，可以对单个Node.js事件循环中调用的所有 writable.write() 进行批处理。\n```js\nstream.cork ();\nstream.write ('一些');\nstream.write('数据');\nprocess.nextTick(()=> stream.uncork());\n```\n如果一个流上多次调用 writable.cork()，则必须调用同样次数的 writable.uncork() 才能输出缓冲的数据。\n```js\nstream.cork();\nstream.write ('一些' );\nstream.cork();\nstream.write('数据');\nprocess.nextTick(()=> {\n    stream.uncork ();\n    //数据不会被输出,直到第二次调用uncork()\n    stream.uncork();\n});\n```\n6. write\nwritable.write(chunk[, encoding][, callback]) 写入数据到流，并在数据被完全处理之后调用callback。如果发生错误，则callback可能被调用也可能不被调用。为了可靠地检测错误，可以为error事件添加监听器。该方法的参数如下。\n- `chunk<string>|<Buffer>|<Uint8Array>|<any>`: 要写入的数据。对于非对象模式的流，chunk 必须是字符串、Buffer 或 Uint8Array。对于对象模式的流，chunk 可以除null外的是任何 JavaScript 值。\n- `encoding<string>`: 如果chunk是字符串，则指定字符编码。\n- `callback<Function>`: 当数据块被输出到目标后的回调函数。\n- `writable.write()`: 写入数据到流，并在数据被完全处理之后调用callback。如果发生错误，则callback可能被调用也可能不被调用。为了可靠地检测错误，可以为error事件添加监听器。\n\n在接收了chunk后，如果内部的缓冲小于创建流时配置的highWaterMark, 则返回true。如果返回false，则应该停止向流写入数据，直到drain事件被触发。\n\n当流还未被排空时，调用write()会缓冲chunk，并返回false。一旦所有当前缓冲的数据块都被排空了(被操作系统接收并传输)，则触发drain事件。建议一旦write()返回false，则不再写入任何数据块，直到drain事件被触发。当流还未被排空时，也是可以调用write()， Node.js 会缓冲所有被写入的数据块，直到达到最大内存占用，这时它会无条件中止，甚至在它中止之前，高内存占用将会导致垃圾回收器的性能变差和RSS变高(即使内存不再需要，通常也不会被释放回系统)。如果远程的另一端没有读取数据，TCP的socket 可能永远也不会排空，所以写入到一一个不会排空的socket可能会导致产生远程可利用的漏洞。\n\n对于Transform，写入数据到一一个不会排空的流尤其成问题，因为Transform流默认会被暂停，直到它们被pipe或者添加了 data 或readable 事件句柄。\n\n如果要被写入的数据可以根据需要生成或取得，建议将逻辑封装为一一个可读流并且使用stream.pipe()。 如果要优先调用 write()，则可以使用 drain 事件来防止背压与避免内存问题。\n\n### 双工流与转换流\n\n双工流（Duplex）是同时实现了Readable和 Writable接口的流。双工括TCP socket、zlib流、crypto流。\n转换流（Transform）是一种双工流，但它的输出与输入是相关联的。与双工流一样，转换流也同时实现了 Readable 和 Writable 接口。转换流的例子包括 zlib流和 crypto 流。\n\n### 实现双工流\n双工流同时实现了可读流和可写流，如TCP socket连接。因为JavaScript不支持多重继承，所以使用stream.Duplex类来实现双工流（而不是使用stream.Readable类和stream.Writable类)。\nstream.Duplex类的原型继承自stream.Readable和寄生自stream.Writable，但是instanceof对这两个基础类都可用，因为重写了 stream.Writable 的Symbol.hasInstance。\n自定义的双工流必须调用`new stream.Duplex([options])`构造函数并实现 readable._read() 和 writable._write() 方法。以下是示例。\n\n```js\nconst { Duplex } = require('stream');\n\nclass MyDuplex extends Duplex {\n  constructor(options){\n    super(options);\n    // ...\n  }\n}\n```\n### 双工流的例子\n封装了一个可读可写的底层资源对象\n```js\nconst { Duplex } = require('stream');\nconst kSource = Symbol('source');\n\nclass MyDuplex extends Duplex {\n  constructor(source, options) {\n    super(options);\n    this[kSource] = source;\n  }\n\n  _write(chunk, encoding, callback) {\n    // 底层资源只处理字符串。\n    if (Buffer.isBuffer(chunk)){\n      chunk = chunk.toString();\n    }\n    this[kSource].writeSomeData(chunk);\n    callback();\n  }\n\n  _read(size) {\n    this[kSource].fetchSomeData(size, (data, encoding) => {\n      this.push(Buffer.from(data, encoding));\n    });\n  }\n}\n```\n## net模块\n在nodejs中，net模块用于创建基于流的TCP或IPC的服务器与客户端。net主要包含两个部分：\n- net.Server: TCP Server，内部通过socket来实现与客户端的通信。\n- net.Socket: TCP/本地socket的Node版实现，它实现了全双工的stream接口，可以用来构建TCP客户端。\n\n```js\nconst net = require('net');\n```\n### 创建TCP服务器\n1. net.Server类创建TCP或IPC服务器\n2. net.Server支持如下事件：\n- listening事件: 当服务被绑定后调用server.listen()方法后触发。\n- connection事件: 当一个新的connection建立的时候触发，回调参数为socket连接对象。\n- close事件：当TCP服务器关闭的时候触发，回调函数没有参数。\n- error事件: 当TCP服务器出现错误的时候触发，回调函数的参数为err对象。例如，监听了已经被占用的端口号。\n### 创建TCP服务器示例\n```js\nconst net = require('net');\n\nconst server = net.createServer((socket) => {\n    socket.end('goodbye\\n');\n}).on('error', (err) => {\n    // 处理错误\n    throw err;\n});\n\nserver.on('close', () => {\n    console.log('服务器接收到close事件');\n})\n\n// socket对象，对象可以与客户端进行通信\nserver.on('connection', (socket) => {\n    console.log('服务器接收到connection事件')\n})\n\nserver.on('listening', () => {\n    console.log('服务器接收到listening事件')\n})\n\n// 随机获取未绑定的端口\nserver.listen(() => {\n    console.log('服务器启动，占用端口：', server.address());\n});\n```\n当创建了一个TCP服务器后，可以通过 server.address()方法来查看这个TCP服务器监听的地址，并返回一个JSON对象。这个对象的属性有:\n- port: TCP服务器监听的端口号。\n- family: 说明TCP服务器监听的地址是IPv6还是IPv4。\n- address: TCP服务器监听的地址。\n```js\n/**\n * 查看服务器监听的地址\n */\n\n/* 引入net模块 */\nvar net = require(\"net\");\n\n/* 创建TCP服务器 */\nvar server = net.createServer(function (socket) {\n   console.log('someone connects');\n})\n\n/* 获取地址信息 */\nserver.listen(8000, function () {\n   /* 获取地址信息，得到的是一个json { address: '::', family: 'IPv6', port: 8000 } */\n   var address = server.address();\n\n   /* TCP服务器监听的端口号 */\n   console.log(\"the port of server is\" + address.port);\n\n   /* TCP服务器监听的地址 */\n   console.log(\"the address of server is\" + address.address);\n\n   /* 说明TCP服务器监听的地址是 IPv6 还是 IPv4 */\n   console.log(\"the family of server is\" + address.family);\n})\n```\n创建一个TCP服务器后，可以通过server.getConnections()方法获取连接这个TCP服务器的客户端数量。除此之外，也可以通过maxConnections属性来设置这个服务器的最大连接数量，当连接数量超过最大值时，服务器将拒绝新的连接，例如:\n```js\n/**\n * 连接服务器的客户端数量\n */\n\n/* 引入net模块 */\nvar net = require(\"net\");\n\n/* 创建TCP服务器 */\nvar server = net.createServer(function (socket) {\n    console.log('someone connects');\n\n    /* 设置最大连接数量 */\n    server.maxConnections = 3;\n    server.getConnections(function (err, count) {\n        console.log(\"the count of client is \" + count);\n    })\n})\n\n/* 获取监听端口 */\nserver.listen(8000, function () {\n    console.log(\"Creat server on http://127.0.0.1:8000/\");\n})\n```\n服务器和客户端之间的通信：socket对象可以用来获取客户端发出的流数据，每次接收到数据的时候触发data事件，通过监听这个事件就可以在回调函数中获取客户端发送的数据。\n```js\n/**\n * 连接服务器的客户端数量\n */\n\n/* 引入net模块 */\nvar net = require(\"net\");\n\n/* 创建TCP服务器 */\nvar server = net.createServer(function(socket){\n    /* 获取地址信息 */\n    var address = server.address();\n    var message = \"the server address is\"+JSON.stringify(address);\n\n    /* 发送数据 */\n    socket.write(message,function(){\n        var writeSize = socket.bytesWritten;\n        console.log(message + \"has send\");\n        console.log(\"the size of message is\"+writeSize);\n    })\n\n    /* 监听data事件，每次接收到数据的时候触发data事件 */ \n    socket.on('data',function(data){\n        console.log(data.toString());\n        var readSize = socket.bytesRead;\n        console.log(\"the size of data is\"+readSize);\n    })\n})\n\n/* 获取地址信息 */\nserver.listen(8000,function(){\n    console.log(\"Creat server on http://127.0.0.1:8000/\");\n})\n```\n### server.listen监听链接\nlisten()方法是异步的。当服务器开始监听时，会触发listening事件。最后一个参数callback将被添加为listening事件的监听器。\n\n当且仅当在第一次调用server.listen()或调用server.close()期间出现错误时，才能再次调用server.listen()方法。\n\n监听时最常见的错误之一是EADDRINUSE, 这说明该地址正被另一个服务器所使用。处理此问题的一种方法是在一段时间后重试。\n```js\nserver.on('error', function(e){\n    if(e.code === 'EADDRINUSE'){\n        console.log('地址正被使用，重试中。。。')\n\n        setTimeout(()=>{\n            server.close();\n            server.listen(PORT, HOST)\n        }, 1000)\n    }\n})\n```\nserver.listen(options[, callback])方法中的options参数支持如下属性\n- `port<number>`: 端口号。\n- `host<string>`: 主机。\n- `path<string>`: 如果指定了port，将被忽略。\n- `backlog<number>`。如果exclusive为 false，则集群将使用相同的底层句柄，从而允许共享连接处理。当exclusive为 true时，不共享句柄，并且尝试端口共享会导致错误。监听专用端口的示例如下。\n- `exclusive<boolean>`: 默认值是false。\n- `readableAll<boolean>`: 对于IPC服务器，使管道对所有用户都可读，默认值是false。\n- `writableAll<boolean>`: 对于IPC服务器，管道可以为所有用户写入，默认值是false。\n\n### 创建Socket对象发送和接受数据\n```js\nconst net = require('net');\nconst server = net.createServer();\n\nserver.on('error', (err) => {\n    // 处理错误\n    throw err;\n});\n\nserver.on('close', () => {\n    console.log('服务器接收到close事件');\n})\n\nserver.on('connection', (socket) => {\n    console.log('服务器接收到connection事件');\n    socket.setEncoding('utf8');\n    socket.write('welcome!'); // 发送数据\n\n    socket.on('data', (data) => {\n        console.log('服务器接收到的数据为：' + data);\n\n        // 如果收到c字符，就终止连接\n        if (data == 'c') {\n            socket.write('bye!');\n            socket.end(); // 关闭socket\n            // 如果收到k字符，就关闭服务器\n        } else if (data == 'k') {\n            socket.write('bye!');\n            socket.end(); // 关闭socket\n            server.close();// 关闭服务器\n        } else {\n            socket.write(data);\n        }\n\n    })\n})\n\nserver.on('listening', () => {\n    console.log('服务器接收到listening事件');\n})\n\n// 绑定到端口\nserver.listen(8888, () => {\n    console.log('服务器启动，端口：8888');\n});\n```\n在上述示例中，socket.write() 方法用于将数据写入 Socket发送; socket通过data事件，可以监听来自客户端写入的数据(接收)。在上述示例中，会将接收到的数据，再通过 socket.write() 方法发送回客户端。\n\n关闭TCP服务器：TCP服务器通过 socket.end() 终止客户端的连接，也可以通过 server.close() 方法来将整个TCP服务器关闭。当TCP服务器关闭时，会监听到close事件。\n\n### 构建TCP客户端\n可以用net.Socket构建TCP客户端，实现TCP客户端和TCP服务器的通信。\n```js\n/**\n * 构建TCP客户端\n */\n\n/* 引入net模块 */\nvar net = require(\"net\");\n\n/* 创建TCP客户端 */\nvar client = net.Socket();\n\n/* 设置连接的服务器 创建完socket对象后，使用socket对象的connect方法就可以连接一个TCP服务器。*/\nclient.connect(8000, '127.0.0.1', function () {\n  console.log(\"connect the server\");\n\n  /* 向服务器发送数据 */\n  client.write(\"message from client\");\n})\n\n/* 监听服务器传来的data数据 */\nclient.on(\"data\", function (data) {\n  console.log(\"the data of server is \" + data.toString());\n})\n\n/* 监听end事件 */\nclient.on(\"end\", function () {\n  console.log(\"data end\");\n})\n```\n1. net.Socket连接相关的API有:\n- socket.connect(): 有3种不同的参数，用于不同的场景。\n- socket.setTimeout(): 用来进行连接超时设置。\n- socket.setKeepAlive(): 用来设置长连接。\n- socket.destroy( )、socket.destroyed: 当错误发生时，用来销毁socket，确保这个socket上不会再有其他的IO操作。\n2. net.Socket涉及的事件:\n- data: 当收到另一侧传来的数据时触发。\n- connect: 当连接建立时触发。\n- close: 当连接断开时触发。如果是因为传输错误导致的连接断开，参数就为error。\n- end: 当连接另一侧发送了FIN包的时候触发。默认情况下(allowHalfOpen == false)，socket会完成自我销毁操作。但也可以把allowHalfOpen设置为true，这样就可以继续往socket里写数据。当然，最后需要手动调用socket.end()。\n- error: 当有错误发生时就会触发，参数为error。\n- timeout: 示用户socket已经超时，需要手动关闭连接。\n- drain: 当写缓存空了的时候触发。\n- lookup: 当域名解析完成时触发。\n\n## http\nhttp.Server类是继承自net.Server，有很多net.Server的方法和事件。\n\nnet、http、dgram模块分别用来实现TCP、HTTP、UDP的通信。http为应用层模块，主要按照特定协议编解码数据; net为传输层模块，主要负责传输编码后的应用层数据; https是一个综合模块（涵盖了http/tIs/crypto等)，主要用于确保数据安全性。\n```js\nconst http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 8080;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n'); // 用于完成发送请求\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`服务器运行在 http://${hostname}:${port}/`);\n});\n```\n### http.Server事件\n\n1. close事件：服务器关闭时触发close事件\n2. connection事件：建立新的TCP流是会发出connection事件\n3. request事件：每次有请求时都会发出request事件。注意，在HTTP Keep-Alive连接的情况下每个连接可能会有多个请求。\n\n### http.requset发送请求\n```js\nconst http = require ('http');\nconst req = http.request({\n    host: '127.0.0.1',\n    port: 8080,\n    method: 'POST' // 默认是GET，POST、PUT、DELETE\n    }, (res) => {\n    res.resume();\n    res.on('end', () => {\n    console.log ('请求完成!');});\n});\n```\n### http请求对象和响应对象\nHTTP请求对象和响应对象在 Node.js中是被定义在 http.ClientRequest和http.ServerResponse类中的。\n\n#### http.ClientRequest\nhttp.ClientRequest对象由http.request()内部创建并返回。它表示正在进行的请求，且其请求头已进入队列。请求头仍然可以使用\n\n- getHeader(name) 返回请求头的值\n- removeHeader(name) 改变。\n\n实际的请求头将与第一个数据块一起发送，或者当调用request.end()时发送。\n\n要获得响应，则为请求对象添加response事件监听器。当接收到响应头时，将会从请求对象触发response事件。response事件执行时有一个参数，该参数是http.IncomingMessage的实例。\n\n在response事件期间，可以添加监听器到响应对象，如监听data事件。\n\n如果没有添加response事件处理函数，则响应将被完全丢弃。如果添加了response事件处理函数，则必须消费完响应对象中的数据，每当有readable事件时，会调用response.read()，或添加 data事件处理函数，或调用.resume()方法。在消费完数据之前，不会触发end事件。此外，在读取数据之前，它将占用内存，最终可能导致进程内存不足的错误。\n\n#### http.ServerResponse类\nhttp.ServerResponse对象由HTTP服务器在内部创建，而不是由用户创建。它作为第二个参数传给request事件。ServerResponse继承自Stream。\n- close事件：表示底层链接已经终止\n- finish事件：在响应发送后触发。\n- response.end()方法\n`response.end([data][, encoding][, callback])`方法用于向服务器发出信号，表示已发送所有响应标头和正文，该服务器应该考虑此消息已完成。必须在每个响应上调用response.end() 方法。\n\n如果指定了data，则它实际上类似于先调用response.write(data, encoding)方法，接着调用response.end()方法。如果指定了callback，则在响应流完成时将调用它。\n\n- response.setHeader(name, value)：设置响应头。\n- response.getHeaderNames()：返回已经设置的响应头属性数组。\n- response.getHeaders()：返回已经设置的响应头，以key-vale表示。\n\n#### REST ful风格\n- 若要在服务器上创建资源，应该使用POST方法。\n- 若要检索某个资源，应该使用GET方法。\n- 若要更新或添加资源，应该使用PUT方法。\n- 若要删除某个资源，应该使用DELETE方法。\n\n# npm\nnpm全称node package manager即node包管理器。\n\n查看当前项目的所有NPM脚本命令，可以使用不带任何参数的npm run命令:\n```bash\nnpm run\n```\nnpm 脚本的原理相对简单，每当执行npm run时，会自动新建一个Shell，在该Shell 中执行指定的脚本命令。\n\n因此，只要是Shell (一般是Bash)可以运行的命令，就可以写在 NPM脚本里面。需要注意的是，npm run新建的 Shell 会将当前目录的node_modules.bin子目录加入PATH变量，命令执行结束后，再将PATH 变量恢复。也就是说，当前目录的node_modules/.bin子目录里面的所有脚本都可以直接用脚本名调用，而不必加上路径。例如，当前项目的依赖里面有Mocha，只需要直接写mocha test即可:\n```json\n\"script\": {\n    \"test\" : \"mocha test\"\n}\n// 而不需要写成:\n\"script\": {\n    \"test\" :\"./node_modules/.bin/mocha test\"\n}\n```\n由于NPM脚本的唯一要求是可以在Shell 中执行，因此它不一定是Node脚本，任何可执行文件都可以写在script中。\n\n安装的局部开发依赖如果有命令，会在node_modules/.bin目录创建软连接，package.json是可以读取到依赖下.bin目录下的命令，可以在package.json直接使用该命令。\n\n## package.json\npackage.json可以手动编写，也可以使用npm init命令自动生成，它描述了项目使用到的模块，项目名称（必填）、版本号（必填）、许可、关键词。\n\n- Name: 包名。\n- Version: 包的版本号，语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。\n- Description: 包的描述。\n- Homepage: 包的官网地址。\n- Author: 包的作者姓名。\n- Contributors: 包的其他贡献者姓名。\n- Dependencies: 依赖包列表，指定了项目运行所依赖的模块。如果依赖包没有安装，npm就会自动将依赖包安装在node_module目录下。\n- devDependencies: 指定项目开发所需要的模块。\n- repository: 包代码存放的地方的类型，可以是Git或Svn，Git可在GitHub 上。\n- main: main字段指定了程序的主入口文件, require('moduleName')就会加载这个文件。这个字段的默认值是模块根目录下面的index.js。\n- keywords: 关键字。\n- scripts: 指定了运行脚本命令的npm命令行缩写，比如 start 指定了运行npm run start时所要执行的命令。\n- bin: 用来指定各个内部命令对应的可执行文件的位置。\n- config: 用于添加命令行的环境变量。\n\n## npm命令\n```bash\n# 更新模块：\nnpm update module\n\n# 查看安装的模块：\nnpm list -g # 查看全局安装的模块\nnpm list # 查看本地安装的模块\n\n# 查看某个模块的信息\nnpm list koa\n\n# 查看命令详细帮助\nnpm help\n\n# 查看包的安装路径\nnpm root [-g]\n\n# 清除npm本地缓存\nnpm cache clean\n```\n\n# WebSocket\nWebSocket 提供了一个真正的全双工连接，它可用于客户机和服务器之间的双向通信，客户端和服务器可以随意向对方发送数据。\n\n该方案的优点是属于HTML5标准，已经被大多数浏览器支持，而且是真正的全双工，性能比较好。其缺点是实现起来相对比较复杂，需要对ws协议专门处理。\n\n## 使用ws创建WebSocket服务器\nNode.js原生API并未提供 WebSocket的支持，因此，需要安装第三方包才能使用WebSocket 功能。\n```js\n// npm i ws\nconst WebSocket = require('ws');\nconst server = new WebSocket.Server({ \n    port: 8080\n});\n\n```\nWebSocket.Server(options[, callback]）方法中的options对象支持如下参数。\n- `host<String>`: 绑定服务器的主机名。\n- `port<Number>`: 绑定服务器的端口。\n- `backlog<Number>`: 挂起连接队列的最大长度。\n- `server`: 预先创建的Node.js HTTP/S服务器。\n- `verifyClient<Function>`: 可用于验证传入连接的函数。\n- `handleProtocols<Function>`: 可用于处理WebSocket子协议的函数。\n- `path<String>`: 仅接受与此路径匹配的连接。\n- `noServer<Boolean>`: 不启用服务器模式。\n- `clientTracking<Boolean>`: 指定是否跟踪客户端。\n- `perMessageDeflate`: 启用/禁用消息压缩。\n- `maxPayload<Number>`: 允许的最大消息大小(以字节为单位)。\n\n## ws事件\n- ws监听事件：connection。只要有WebSocket连接到该服务器，就能触发connection事件。\n- 如果想获知所有的已连接的客户端信息，则可以使用server.clients数据集。该数据集存储了所有已连接的客户端。\n\n## 发送和接收数据\nws通过websocket.send()方法发送数据，通过监听message事件来接受数据。\n\n### 发送数据\n`websocket.send(data[, options][, callback])`方法可以用来发送数据。data参数就是用来发送的数据。options对象的属性可以有以下几种。\n- compress: 用于指定数据是否需要压缩。默认是true。\n- binary: 用于指定数据是否通过二进制传送。默认是自动检测。\n- mask: 用于指定是否应遮罩数据。当WebSocket不是服务器客户端时，默认认为true。\n- fin: 用于指定数据是否为消息的最后一个片段，默认为true。\n\n#### 发送ping和pong\n在消息通信中, `ping-pong`是一种验证客户端和服务器是否正常连接的简单机制。当客户端给服务器发送`ping`消息时，如果服务器能够正常响应`pong`消息，则说明客户端和服务器之间的通信是正常的。反之亦然，如果服务器想验证客户端的连接是否正常，也可以给客户端发送`ping`消息。\nws提供了一种快捷的方式来发送`ping`消息和`pong`消息。\n- websocket.ping([data[, mask]][, callback])\n- websocket.pong([data[, mask]][, callback])\n\n#### 接收数据\nws通过message事件来接收数据\n\n### 准备状态\nws 中的 WebSocket类具有以下4种准备状态。\n- CONNECTING: 值为0，表示连接还没有打开。\n- OPEN: 值为1，表示连接已打开，可以通信了。\n- CLOSING: 值为2，表示连接正在关闭。\n- CLOSED: 值为2，表示连接已关闭。\n需要注意的是，当通过 WebSocket对象进行通信时，状态必须是OPEN。\n\n### 关闭WebSocket服务器\n可以通过server.close()来关闭服务器，并通过close事件监听服务器的关闭。\n\n### ws例子\n- 服务端\n```js\nconst WebSocket = require('ws');\nconst WebSocketServer = WebSocket.Server;\nconst wss = new WebSocketServer({\n  port: 3000\n});\n\nwss.on('connection', function (ws) {\n  console.log(`[SERVER] connection()`);\n  ws.on('message', function (message) {\n    console.log(`[SERVER] Received: ${message}`);\n    setTimeout(() => {\n      ws.send(`What's your name?`, (err) => {\n        if (err) {\n          console.log(`[SERVER] error: ${err}`);\n        }\n      });\n    }, 1000);\n  })\n});\n\nconsole.log('ws server started at port 3000...');\n```\n- 客户端（浏览器）\n```js\n// client test:\n\nlet count = 0;\n\nlet ws = new WebSocket('ws://localhost:3000/ws/chat');\n\nws.on('open', function () {\n  console.log(`[CLIENT] open()`);\n  ws.send('Hello!');\n});\n\nws.on('message', function (message) {\n  console.log(`[CLIENT] Received: ${message}`);\n  count++;\n  if (count > 3) {\n    ws.send('Goodbye!');\n    ws.close();\n  } else {\n    setTimeout(() => {\n      ws.send(`Hello, I'm Mr No.${count}!`);\n    }, 1000);\n  }\n});\n```\nWebSocket 协议本身不要求同源策略（Same-Origin Policy)，也就是某个地址为 `http://a.com`的网页可以通过 WebSocket连接到`ws://b.com`。但是，浏览器会发送 Origin 的 HTTP 头给服务器，服务器可以根据 Origin 拒绝这个 WebSocket 请求。所以，是否要求同源要看服务器端如何检查。\n\n# MySQL基本操作\n```bash\n# 显示已有的数据库\nshow databases;\n\n# 创建数据库\nCREATE DATABASES data_name; # nodejs_book\n\n# 使用数据库\nuse data_name;\n\n# 建表\nmysql> CREATE TABLE t_user ( user_id BIGINT NOT NULL, username VARCHAR(20));\n\n# 查看表\nshow TABLES;\n\n# 显示表的结构\nmysql> DESCRIBE t_user;\n\n# 往表中加入记录\nmysql> insert into t_user values(1, 'yolo');\n```\n## 使用node.js操作mysql\n使用mysql或者mysql2模块\n\n## 实现简单的查询\n- mysql.createConnection()用于创建一个连接;\n- connection.connect()方法用于建立连接; \n- connection.query()方法用于执行查询，第一个参数就是待执行的SQL语句; \n- connection.end()用于关闭连接。\n\n```js\nconst mysql = require('mysql');\n\n// 连接信息\nconst connection = mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: '123456',\n    database: 'nodejs_book'\n});\n\n// 建立连接\n/// connection.connect();\n\nconnection.connect(function (err) {\n    if (err) {\n        console.error('error connecting: ' + err.stack);\n        return;\n    }\n\n    console.log('connected as id ' + connection.threadId);\n});\n\n// 执行查询\nconnection.query('SELECT * FROM t_user',\n    function (error, results, fields) {\n        if (error) {\n            throw error;\n        }\n\n        // 打印查询结果\n        console.log('SELECT result is: ', results);\n    });\n\n\n// 关闭连接\n///connection.end();\n///connection.destroy();\n\nconnection.end(function (err) {\n    if (err) {\n        console.error('error end: ' + err.stack);\n        return;\n    }\n\n    console.log('end connection');\n});\n```\n### mysql模块连接选项\n|参数|描述|\n|:---:|:---:|\n|host|主机地址,默认是localhost|\n|user|用户名|\n|password|密码|\n|port|端口号，默认是3306|\n|database|数据库名|\n|charset|连接字符集（默认:`'UTF8_GENERAL_CI'`，注意字符集的字母都要大写)|\n|localA ddress|此IP用于TCP连接（可选)|\n|socketPath|连接到unix域路径，当使用host和port时会被忽略|\n|timezone|时区，默认是`'local'`|\n|connectTimeout|连接超时，单位为毫秒。默认为不限制|\n|stringifyObjects|是否序列化对象|\n|typeCast|是否将列值转换为本地JavaScript类型值。默认为true|\n|queryFormat|自定义query语句格式化方法|\n|supportBigNumbers|数据库支持bigint或decimal类型列时，需要设此option为true。默认为false|\n|bigNumberStrings|supportBigNumbers和bigNumberStrings启用，强制bigint或decimal列以JavaScript字符串类型返回。默认为false|\n|dateStrings|强制timestamp、datetime、data类型以字符串类型返回，而不是JavaScript Date类型。默认为false|\n|debug|开启调试。默认为false|\n|multipleStatements|是否允许一个query中有多个MySQL语句。默认为false|\n|flags|用于修改连接标志|\n|ssl|使用ssl参数或一个包含ssl配置文件名称的字符串|\n\n### mysql模块CRUD\n```js\n// 执行查询\nconnection.query('SELECT * FROM t_user',\n    function (error, results, fields) {\n        if (error) {\n            throw error;\n        }\n\n        // 打印查询结果\n        console.log('SELECT result is: ', results);\n    });\n\n// 插入数据 \n// 其中，在SQL语句中，通过“?”占位符的方式将参数对象data进行传入。\nvar data = { user_id: 2, username: 'waylau' };\nconnection.query('INSERT INTO t_user SET ?', data,\n    function (error, results, fields) {\n        if (error) {\n            throw error;\n        }\n\n        // 打印查询结果\n        console.log('INSERT result is: ', results);\n    });\n\n// 更新数据\n// 通过“?\"占位符的方式将参数对象进行传入。所不同的是，参数对象是一个数组。\nconnection.query('UPDATE t_user SET username = ? WHERE user_id = ?', ['Way Lau', 2],\n    function (error, results, fields) {\n        if (error) {\n            throw error;\n        }\n\n        // 打印查询结果\n        console.log('UPDATE result is: ', results);\n    });\n\n// 执行查询\n// 同样也是通过“?占位符的方式将参数对象进行传入。所不同的是，参数对象是一个数值（用户ID)。\nconnection.query('SELECT * FROM t_user',\n    function (error, results, fields) {\n        if (error) {\n            throw error;\n        }\n\n        // 打印查询结果\n        console.log('SELECT result is: ', results);\n    });\n```\n## mysql连接池\n\n建议将连接池的pool.getConnection封装一下，实现复用\n```js\nconst express = require('express');\nconst app = express();\nconst port = 8080;\nconst bodyParser = require('body-parser');//用于req.\nconst URL = '/api/users';\nconst mysql = require('mysql');\n\n// 连接信息.\n// 使用连接池\nconst pool = mysql.createPool({\n    connectionLimit: 4, // 连接数限制\n    host: 'localhost',\n    user: 'root',\n    password: '123456',\n    database: 'nodejs_book'\n});\n\napp.use(bodyParser.json());\n\n// 获取所有用户列表API\napp.get(URL + '/', function (req, res) {\n\n    // 获取连接\n    pool.getConnection(function (err, connection) {\n        if (err) {\n            throw err;\n        }\n\n        // 从请求参数中获取用户ID\n        let name = req.query.name;\n\n        console.log('User name is: ', name);\n        \n        if (name == null) {\n            // 执行查询\n            connection.query('SELECT * FROM t_user',\n                function (error, results) {\n                    // 错误处理\n                    if (error) {\n                        throw error;\n                    }\n\n                    // 打印执行结果\n                    console.log('The result is: ', results);\n\n                    // 释放连接\n                    connection.release();\n\n                    // 转为JSON返回\n                    res.json(results).end();\n                });\n        } else {\n            // 执行查询\n            connection.query('SELECT * FROM t_user where username = ?', name,\n                function (error, results) {\n                    // 错误处理\n                    if (error) {\n                        throw error;\n                    }\n\n                    // 打印查询结果\n                    console.log('The result is: ', results);\n\n                    // 释放连接\n                    connection.release();\n\n                    // 转为JSON返回\n                    res.json(results).end();\n                });\n        }\n    });\n\n});\n\n\n// 获取指定ID的用户API\napp.get(URL + '/:id', function (req, res) {\n\n\n    // 获取连接\n    pool.getConnection(function (err, connection) {\n        if (err) {\n            throw err;\n        }\n\n        // 从请求参数中获取用户ID\n        let id = req.params.id;\n\n        console.log('User id is: ', id);\n\n        // 执行查询\n        connection.query('SELECT * FROM t_user where user_id = ?', id,\n            function (error, results) {\n                // 错误处理\n                if (error) {\n                    throw error;\n                }\n\n                // 打印执行结果\n                console.log('The result is: ', results);\n\n                // 释放连接\n                connection.release();\n\n                // 取第一个，转为JSON返回\n                res.json(results[0]).end();\n            });\n    });\n\n});\n\n\n// 创建用户信息API\napp.post(URL + '/', (req, res) => {\n\n    // 获取连接\n    pool.getConnection(function (err, connection) {\n        if (err) {\n            throw err;\n        }\n\n        // 从请求参数中获取用户信息\n        let username = req.body.username;\n\n        console.log('User is: ', username);\n\n        // 执行查询\n        connection.query('INSERT INTO t_user (username) VALUES (?)', username,\n            function (error, results) {\n                // 错误处理\n                if (error) {\n                    throw error;\n                }\n\n                // 打印执行结果\n                console.log('The result is: ', results);\n\n                // 释放连接\n                connection.release();\n\n                // 转为JSON返回\n                res.json(results).end();\n            });\n    });\n\n});\n\n// 更新用户信息API\napp.put(URL + '/', (req, res) => {\n    // 获取连接\n    pool.getConnection(function (err, connection) {\n        if (err) {\n            throw err;\n        }\n\n        // 从请求参数中获取用户信息\n        let user_id = req.body.user_id;\n        let username = req.body.username;\n\n        console.log('User id is: ', user_id);\n        console.log('User name is: ', username);\n        // 执行查询\n        connection.query('UPDATE t_user SET username = ? WHERE user_id = ? ', [username, user_id],\n            function (error, results) {\n                // 错误处理\n                if (error) {\n                    throw error;\n                }\n\n                // 打印执行结果\n                console.log('The result is: ', results);\n\n                // 释放连接\n                connection.release();\n\n                // 转为JSON返回\n                res.json(results).end();\n            });\n    });\n\n});\n\n// 删除指定ID的用户API\napp.delete(URL + '/:id', (req, res) => {\n\n    // 获取连接\n    pool.getConnection(function (err, connection) {\n        if (err) {\n            throw err;\n        }\n\n        // 从请求参数中获取用户ID\n        let id = req.params.id;\n\n        console.log('User id is: ', id);\n\n        // 执行查询\n        connection.query('DELETE FROM t_user WHERE user_id = ? ', id,\n            function (error, results) {\n                // 错误处理\n                if (error) {\n                    throw error;\n                }\n\n                // 打印执行结果\n                console.log('The result is: ', results);\n\n                // 释放连接\n                connection.release();\n\n                // 转为JSON返回\n                res.json(results).end();\n            });\n    });\n});\n\napp.listen(port, () => console.log(`Server listening on port ${port}!`));\n```\n# Redis\n\nRedis是一个高性能的key-vale缓存数据库\n\nRedis支持主从同步，可以从主服务器向任意数量的从服务器上同步数据，从服务器可以是关联其他从服务器的主服务器。这使得 Redis可执行单层树复制，存盘可以有意无意地对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方进行数据同步时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。\n\nRedis不仅仅是简单的key-value存储，更是一个data strutures server（数据结构服务器)，用来支持不同的数值类型。在key-value中，value不仅仅局限于string类型，它可以是更复杂的数据结构。\n- 二进制安全的string。\n- List: 一个链表，链表中的元素按照插入顺序排列。\n- Set: string 集合，集合中的元素是唯一的，没有排序。\n- Sorted set: 与Set类似，但是每一个string 元素关联一个浮点数值，这个数值被称为Score。元素总是通过它们的Score进行排序，所以不像Set那样可以获取一段范围的元素（例如，获取前10个，或者后10个)。\n\n- Hash: 指由关联值字段构成的 Map。字段和值都是string。\n- Bit array（或者简单称为Bitmap): 像位数值一样通过特别的命令处理字符串，可以设置和清除单独的bit，统计所有bit集合中为1的数量，查找第一个设置或没有设置的bit等。\n- HyperLogLogs: 这是一个概率统计用的数据结构，可以用来估计一个集合的基数。对于所有的例子，我们都使用redis-cli工具来演示。这是一个简单但非常有用的命令行工具，可以用来给Redis Server 发送命令。\n\n## Redis超时\nRedis超时是 Redis的一个特性之一，这个特性可以用在任何一种值类型中。可以给一个key设置一个超时时间，这个超时时间就是有限的生存时间。当生存时间过去，这个key就会自动被销毁。\n- 在设置超时时间时，可以使用秒或毫秒。\n- 超时时间一般总是1ms。\n- 超时信息会被复制，并持久化到磁盘中。当Redis服务器停止时(这意味着Redis将保存key 的超时时间)。\n\n## node.js操作redis\n使用redis模块操作redis\n\n- redis.createClient()用于创建客户端。\n- client.set()方法设置单个值。\n- client.hset()方法用于设置多个字段。\n- client.hkeys()方法用于返回所有的字段。\n- client.get()和client.hgetall()方法都用于获取key 所对应的值。\n- client.quit()用于关闭连接。\n\n\n```js\nconst redis = require(\"redis\");\n\n// 创建客户端\nconst client = redis.createClient(6379, '127.0.0.1');\n\n// 如果没有密码，则不需要这一步\nclient.auth(123456) // \n\n// 错误处理\nclient.on(\"error\", function (err) {\n    console.log(\"Error \" + err);\n});\n\nclient.on('connect', function(){\n    // 设值\n    client.set(\"hello\", \"this is a value\");\n    // 把存储对象改成JSON对象 程序将会报错，因为Redis 中存储的是字符串对象\n    client.set('test', { user_name: 'yolo', age: 18})\n    // 重写toString 即可方法:\n    // object.prototype.tostring = function (){\n    //     return JSON.stringify(this);\n    // };\n})\n\n// 设值\nclient.set(\"书名\", \"《Node.js企业级应用开发实战》\", redis.print);\n\n// 同个key不同的字段\nclient.hset(\"柳伟卫的Spring三剑客\", \"第一剑\", \"《Spring Boot 企业级应用开发实战》\", redis.print);\nclient.hset(\"柳伟卫的Spring三剑客\", \"第二剑\", \"《Spring Cloud 微服务架构开发实战》\", redis.print);\nclient.hset([\"柳伟卫的Spring三剑客\", \"第三剑\", \"《Spring 5 开发大全》\"], redis.print);\n\n// 返回所有的字段\nclient.hkeys(\"柳伟卫的Spring三剑客\", function (err, replies) {\n    console.log(\"柳伟卫的Spring三剑客共\" + replies.length + \"本:\");\n    \n    // 遍历所有的字段\n    replies.forEach(function (reply, i) {\n        console.log(\"    \" + i + \": \" + reply);\n    });\n});\n\n// 获取key所对应的值\nclient.get(\"书名\", function (err, reply) {\n    console.log(reply); \n});\n\n\n// 获取key所对应的值\nclient.hgetall(\"柳伟卫的Spring三剑客\", function (err, reply) {\n    console.log(reply); \n\n    // 退出\n    client.quit();\n});\n\n// 清除数据\nclient.del('key')\n```\n\n# 异常处理\n\n- 使用`process.on('uncaughtException', function(err){})`就不会造成接口崩溃了，可惜的是，很多应用在开发时都没有做这样的基本处理，因此都出现了问题，捕获那些咱没有 try-catch 的异常错误。\n```js\n// 相对于异常来说，内存泄漏也是一个不能忽视的严重问题，而process.on('uncaughtException')的做法很难保证不造成内存的泄漏。\n// 所以当捕获到异常时，显式地手动杀掉进程并重启Node进程，既可以保证释放内存，又保证了服务后续的正常可用。\nprocess.on ('uncaughtException', (e)=>{\n    console.error('process error is:', e.message);\n    process.exit(1);\n    restartServer(); //重启服务\n});\n\n```\n- try/catch/finally，当我们去读取文件遇到异常时，抛出的异常会被try/catch捕获，当前的线程就不会英文异常而意外结束了。\n- async/await和promise是无法捕获异步代码的异常的，如下例子，无法捕获setTimeout异步代码里的异常\n```js\nnew Promise((resolve, reject) =>{ \n    setTimeout(() => {\n        throw new Error('error');\n    }, 100);\n}).then(() =>{\n // 一些逻辑代码\n\n}).catch ((e) =>{\n    console.log('能进来说明可以处理异常信息了');\n    console.log(e);\n});\n\n```\n\n```js\nfs.readFile('test.txt', function(err, data){\n    try{\n        if(err) throw err;\n        // ...\n    }catch(e){\n        console.log(e)\n    }finally{\n\n    }\n})\n```\n\n1. nodejs里约定，同步的代码才能捕获异常，异步的代码不能直接使用try、catch\n- 先看同步代码可以捕获的异常\n```js\nconst testFunc = function() {\n  return new Promise((resolve, reject) => {\n    throw new Error('error');\n  });\n};\n\nasync function testAsync() {\n  try {\n    await testFunc();\n  } catch (e) {\n    console.log('能进来，说明异常能处理');\n    console.log(e);\n  }\n}\n\ntestAsync();\n```\n- 异步代码无法捕获异常\n```js\nconst testFunc = function() {\n  setTimeout(() => {\n    console.log(1111);\n    return new Promise((resolve, reject) => {\n      throw new Error('error');\n    });\n  }, 100);\n};\n\nasync function testAsync() {\n  try {\n    await testFunc();\n  } catch (e) {\n    console.log('能进来，说明异常能处理');\n    console.log(e);\n  }\n}\n\ntestAsync();\n```\n## 进程崩溃时重启\n\n进程因异常退出是很常见的事，当遇到崩溃退出的时候，重启就可以了。负责进程崩溃应用自动重启的模块有：\n\n- forever模块，forever处理crash事件，再开启新的node进程（很少用了，基本都用pm2模块）\n- pm2模块，支持所有的forever的功能，功能强大，比如0秒切换。\n\n```bash\nnpm i pm2 -g\npm2 start app.js\n```\n\n## 大集群：多台机器\n\n为了应对大流量，需要多台机器进行集群处理，因此可以通过负载均衡策略将流量分发到各个机器上，通过消除单点故障提升应用系统的可用性。常见的集群处理方式是使用Nginx或HAProxy。\n\n# 参考\n\n- [Node.js的底层原理](https://juejin.cn/post/7008504029277847565)\n- [Node.js 技术架构](https://juejin.cn/post/7081891057918558221)\n- [.env 文件原理](https://juejin.cn/post/7045057475845816357)\n- [Node.js子进程](https://juejin.cn/post/6844903592554397710)\n- [NodeJS中的事件（EventEmitter](https://juejin.cn/post/6844903678227251213)\n- [书栈网node.js教程](https://www.bookstack.cn/read/Nodejs-Roadmap/nodejs-base-what-is-nodejs.md)\n- 《Node.js12 实战》\n- 《Node.js 企业级应用开发实战》\n- 《狼叔卷1》\n- 《狼叔卷2》","slug":"front_end/node-base","published":1,"updated":"2022-07-08T14:22:02.526Z","layout":"post","photos":[],"link":"","_id":"cl5f0biic001rv4uwa4nah75u","content":"<ul>\n<li>Node 是一个基于谷歌V8引擎的一个JavaScript运行环境（runtime运行时），是服务端的运行环境。</li>\n<li>Node 的特点是事件驱动、非阻塞式 I&#x2F;O（input&#x2F;output）、单线程。触发一次事件，执行回调，是事件驱动的一种体现。</li>\n</ul>\n<h1 id=\"Node的使用场景\"><a href=\"#Node的使用场景\" class=\"headerlink\" title=\"Node的使用场景\"></a>Node的使用场景</h1><ul>\n<li>I&#x2F;O 密集型场景</li>\n<li>提供http接口，组装数据</li>\n<li>RPC服务，RPC（Remote Procedure Call远程过程调用），RPC服务也是采用的TCP，出名的RPC服务有Google的gRPC、阿里的Dubble</li>\n<li>基础工具：构建工具（webpack、vite）、搭建脚手架（cra、vue-cli、umi）等</li>\n<li>BFF：接口聚合、转发</li>\n<li>Serverless（无服务器架构）：函数即服务，写一个函数就可以实现一个 API 接口给到前端</li>\n<li>Microservices（微服务）：小型服务、以独立进程运行、可以使用不同语言</li>\n</ul>\n<h1 id=\"Node-js-架构（node底层原理）\"><a href=\"#Node-js-架构（node底层原理）\" class=\"headerlink\" title=\"Node.js 架构（node底层原理）\"></a>Node.js 架构（node底层原理）</h1><ol>\n<li>Node.js内置模块（标准库）： http、fs、buffer、path、stream。</li>\n<li>Node bindings（桥梁）：是JavaScript与 C++ 连接的桥梁，对底层模块进行封装，为内置模块的提供 API 接口。</li>\n<li>Node底层模块</li>\n</ol>\n<ul>\n<li>V8：Google开源的高性能JavaScript引擎，使用 C++ 开发，并且应用于谷歌浏览器</li>\n<li>Libuv：提供Event Loop 事件循环和线程池，提供事件驱动的 I&#x2F;O 库。它是使用 C 和 C++ 语言为 Node.js 所开发的，同时也是 I&#x2F;O 操作的核心部分，例如读取文件和 OS 交互（几乎所有和操作系统打交道的部分离不开libuv的支持）</li>\n<li>C-ares（异步 DNS 解析库）</li>\n<li>Low-Level Components：提供了http 解析、OpenSSL、数据压缩（zlib）等功能。</li>\n</ul>\n<h1 id=\"Node-EventLoop（事件循环）\"><a href=\"#Node-EventLoop（事件循环）\" class=\"headerlink\" title=\"Node EventLoop（事件循环）\"></a>Node EventLoop（事件循环）</h1><p>node中的事件循环的顺序：<br>外部输入数据(incoming) –&gt; 轮询阶段(poll) –&gt; 检查阶段(check)–&gt; 关闭事件回调阶段(close callbacks) –&gt; 定时器检测阶段(timers) –&gt; I&#x2F;O事件回调阶段(I&#x2F;O callbacks) –&gt; 闲置阶段(idle, prepare) –&gt; 轮询阶段(按照该顺序反复运行)</p>\n<p>每个阶段都有一个先入先出的队列，这个队列存有要执行的回调函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">   ┌───────────────────────────┐\n┌─<span class=\"token operator\">></span>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     <span class=\"token constant\">I</span><span class=\"token operator\">/</span><span class=\"token constant\">O</span> callbacks         │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle<span class=\"token punctuation\">,</span> prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming<span class=\"token operator\">:</span>   │\n│  │           poll            │<span class=\"token operator\">&lt;</span>─────┤  connections<span class=\"token punctuation\">,</span> │\n│  └─────────────┬─────────────┘      │   data<span class=\"token punctuation\">,</span> etc<span class=\"token punctuation\">.</span>  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Node事件循环各阶段概述\"><a href=\"#Node事件循环各阶段概述\" class=\"headerlink\" title=\"Node事件循环各阶段概述\"></a>Node事件循环各阶段概述</h2><p>绝大部分异步任务都是在timers、poll、check这3个阶段处理的。</p>\n<ol>\n<li>timers 这个阶段执行 setTimeout() 和 setInterval() 的回调，并且是由 poll 阶段控制的。 在 Node 中定时器指定的时间也不是准确时间，只能是尽快执行，如果操作系统很忙，那么计时器的回调函数就会被推迟执行</li>\n<li>I&#x2F;O callbacks 处理一些上一轮循环中的少数未执行的 I&#x2F;O 回调（执行一些系统操作的回调函数）</li>\n<li>闲置阶段：idle（空闲），prepare 仅在内部使用。</li>\n<li>poll（轮询阶段）：处理大部分的事件，如看看有没有文件可以读，有没有请求可以处理，检查一下最近的计时器，看看有没有需要过会儿去执行的 callback。poll 是一个至关重要的阶段，这一阶段中，系统会做两件事情</li>\n</ol>\n<ul>\n<li>回到 timer 阶段执行回调</li>\n<li>执行 I&#x2F;O 回调</li>\n</ul>\n<p>并且在进入该阶段时如果没有设定了 timer 的话，会发生以下两件事情</p>\n<ul>\n<li><p>如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制</p>\n</li>\n<li><p>如果 poll 队列为空时，会有两件事发生</p>\n<ul>\n<li>如果有 setImmediate 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调</li>\n<li>如果没有 setImmediate 回调需要执行，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间设置防止一直等待下去</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>check（检查） 执行 setImmediate() 的回调</li>\n<li>close callbacks 执行 socket 的 close 事件回调，例如：<code>socket.on(&#39;close&#39;, ...)</code>，如果队列是空的，则跳过</li>\n</ol>\n<p>Node 不会一直循环循环，如果发现没什么事儿做，就会停留在 poll（轮询）阶段，大部分事件都在 poll 阶段被处理，如文件、网络请求等</p>\n<h1 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h1><ol>\n<li>进程</li>\n</ol>\n<ul>\n<li>进程可以说是计算机系统进行资源分配和调度的基本单位，启动一个服务、运行一个应用，就是开一个进程，进程是线程的容器。</li>\n<li>例如 Java 里的 JVM 本身就是一个进程，Node.js 里通过 node app.js 开启一个服务进程。在任务管理器查看任务进程，Nodejs JavaScript Runtime<img src=\"/images/front_end/nodejs-runtime001.png\" ></li>\n<li>一个进程无法访问另外一个进程里定义的变量、数据结构，只有建立了 IPC 通信，进程之间才可数据共享。</li>\n<li>同一块代码，可以根据系统CPU核心数启动多个进程，每个进程都有属于自己的独立运行空间，进程之间是不相互影响的。</li>\n</ul>\n<ol start=\"2\">\n<li>线程</li>\n</ol>\n<ul>\n<li>线程是属于进程的，进程可以调用线程去执行一些子任务，一个进程是可以拥有多个线程的。</li>\n<li>同一进程中的多条线程可以共享该进程中的全部系统资源。</li>\n<li>同一进程中的多个线程有各自的调用栈（call stack），本地存储（thread-local storage)等。</li>\n<li>线程可以分为单线程（JavaScript）和多线程（Java）。</li>\n</ul>\n<ol start=\"3\">\n<li>单线程</li>\n</ol>\n<ul>\n<li>单线程就是一个进程只开一个线程，Javascript 就是属于单线程，程序顺序执行，前面一个执行完之后，后面才可以执行。</li>\n<li>在使用单线程编码时不要有过多耗时的同步操作，否则线程会造成阻塞，导致后续响应无法处理，适当地使用异步操作。</li>\n</ul>\n<ol start=\"4\">\n<li>多线程</li>\n</ol>\n<ul>\n<li>多线程就是，一个进程可以开启多线程，Java 就是多线程编程语言的一种，可以有效避免代码阻塞导致的后续请求无法处理。</li>\n<li>多线程创建新的线程来切换开销，由于每创建一个线程就会占用一定的内存，当应用程序并发大了之后，内存将会很快耗尽。</li>\n</ul>\n<h1 id=\"Node模块机制\"><a href=\"#Node模块机制\" class=\"headerlink\" title=\"Node模块机制\"></a>Node模块机制</h1><ol>\n<li>Node.js 模块采用Commonjs规范，Node.js的系统模块采用了延迟加载的策略，只有在用到的情况下，系统模块才会被加载，加载完成后会放到 binding_cache缓存中。</li>\n<li>在 Node.js 中模块加载一般会经历 3 个步骤，路径分析、文件定位、编译执行。按照模块的分类，按照以下顺序进行优先加载：</li>\n</ol>\n<ul>\n<li>如果有 <code>./</code>从当前目录查找，相对路径文件模块</li>\n<li>如果没有 <code>./</code>，先从系统模块，再从node_modules下查找 （<a href=\"https://blog.csdn.net/gongch0604/article/details/111748684\">nodejs模块系统</a>）</li>\n<li>系统缓存：模块被执行之后会进行缓存，首先是先进行缓存加载，判断缓存中是否有值（require.cache查看已缓存的模块，返回值为对象）。因为 Node.js 默认先从缓存中加载模块，一个模块被加载一次之后，就会在缓存中维持一个副本，如果遇到重复加载的模块会直接提取缓存中的副本，也就是说在任何时候每个模块都只在缓存中有一个实例。</li>\n<li>系统模块：也就是原生模块，这个优先级仅次于缓存加载，部分核心模块已经被编译成二进制，省略了 路径分析、文件定位，直接加载到了内存中，系统模块定义在 Node.js 源码的 lib 目录下，可以去查看。</li>\n<li>文件模块（开发者自己编写的模块）：优先加载 <code>.</code>、<code>..</code>、<code>/</code> 开头的，如果文件没有加上扩展名，会依次按照 <code>.js</code>、<code>.json</code>、<code>.node</code> 进行扩展名补足尝试，那么在尝试的过程中也是以同步阻塞模式来判断文件是否存在，从性能优化的角度来看待，<code>.json</code>、<code>.node</code>最好还是加上文件的扩展名。</li>\n<li>目录做为模块：这种情况发生在文件模块加载过程中，也没有找到，但是发现是一个目录的情况，这个时候会将这个目录当作一个包来处理，Node 这块采用了 Commonjs 规范，先会在项目根目录查找 package.json 文件，取出文件中定义的 main 属性 <code>(&quot;main&quot;: &quot;lib/index.js&quot;)</code> 描述的入口文件进行加载，也没加载到，则会抛出默认错误: <code>Error: Cannot find module &#39;lib/index.js&#39;</code></li>\n<li>node_modules 目录加载：对于系统模块、路径文件模块都找不到，Node.js 会从当前模块的父目录进行查找，直到系统的根目录</li>\n</ul>\n<h1 id=\"Node常用模块\"><a href=\"#Node常用模块\" class=\"headerlink\" title=\"Node常用模块\"></a>Node常用模块</h1><table>\n<thead>\n<tr>\n<th align=\"center\">模块名称</th>\n<th align=\"center\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">buffer</td>\n<td align=\"center\">实现数据缓冲区，Buffer一般用于处理二进制数据，也可以处理字符编码</td>\n</tr>\n<tr>\n<td align=\"center\">child_process</td>\n<td align=\"center\">（实现多进程任务）创建子进程，实现子进程和主进程之间的通信</td>\n</tr>\n<tr>\n<td align=\"center\">cluster</td>\n<td align=\"center\">可以简化<code>多进程</code>、<code>并行化</code>程序的开发难度，利用多核CPU 实现并行，轻松构建一个用于负载均衡的集群。著名的pm2模块就使用了cluster实现</td>\n</tr>\n<tr>\n<td align=\"center\">console</td>\n<td align=\"center\">和浏览里的用法一样，比如console.log、console.dir等</td>\n</tr>\n<tr>\n<td align=\"center\">crypto</td>\n<td align=\"center\">对OpenSSL里的 HMAC、Cipher、Decipher等算法进行加解密封装，一般用户在进行密码处理时都会用到该模块</td>\n</tr>\n<tr>\n<td align=\"center\">dns</td>\n<td align=\"center\">域名解析，主要API是 lookup和 resolve</td>\n</tr>\n<tr>\n<td align=\"center\">events</td>\n<td align=\"center\">事件处理，EventEmitter的核心功能就是对事件触发和事件监听器功能进行封装</td>\n</tr>\n<tr>\n<td align=\"center\">fs</td>\n<td align=\"center\">文件系统模块，主要针对目录、文件进行操作，开发中使用极其广泛</td>\n</tr>\n<tr>\n<td align=\"center\">http</td>\n<td align=\"center\">Node.js里使用多的模块，可以非常构建Web应用服务，搭建HTTP服务端和客户端，是Web框架的底层核心库</td>\n</tr>\n<tr>\n<td align=\"center\">http2</td>\n<td align=\"center\">下一代HTTP协议，在Node.js 8里是需要通过flag开启的体验功能</td>\n</tr>\n<tr>\n<td align=\"center\">https</td>\n<td align=\"center\">HTTPS实现，是HTTP的安全加强版</td>\n</tr>\n</tbody></table>\n<h2 id=\"process全局对象\"><a href=\"#process全局对象\" class=\"headerlink\" title=\"process全局对象\"></a>process全局对象</h2><p>Node.js 中的进程 process 是一个全局对象，无需 require 直接使用（global.process &#x3D; process），process对象是EventEmitter的实例</p>\n<ul>\n<li>process.title：终端上显示的标题</li>\n<li>process.version：nodejs的版本号</li>\n<li>process.versions：nodejs依赖模块的版本信息</li>\n<li>process.env：环境变量，例如通过 <code>process.env.NODE_ENV</code> 获取不同环境项目配置信息，还可以往<code>process.env</code>上挂载其他常量。</li>\n<li>process.nextTick：表示在事件循环（EventLoop）的下一次循环中调用 callback 回调函数，要注意的是它总会在I&#x2F;O操作（比如查询数据）之前先执行</li>\n<li>process.pid：获取当前进程id</li>\n<li>process.ppid：当前进程对应的父进程</li>\n<li>process.cwd()：获取当前进程工作目录</li>\n<li>process.argv: 返回当前命令行指令参数，是一个数组，<code>process.argv[2]</code></li>\n<li>process.execPath：获取当前进程的这个可执行文件的绝对路径</li>\n<li>process.exit([code])：终止当前进程并返回给定的 code，默认是0</li>\n<li>process.exitCode：可以自定义退出进程时node shell捕获到的状态码（可以自定义退出进程时node shell捕获到的状态码）</li>\n<li>process.chdir(directory)：改变进程的当前进程的工作目录（该目录必须已存在），若操作失败则抛出异常</li>\n<li>process.platform：获取当前进程运行的操作系统平台</li>\n<li>process.uptime()：当前进程已运行时间，例如：pm2 守护进程的 uptime 值</li>\n<li>process.moduleLoadList：当前进程已加载的模块列表，nodejs模块系统。NativeModule原生模块</li>\n<li>process.config：当前nodejs构建时使用的配置信息，可以辅助定位</li>\n<li><code>process.on(&#39;exit&#39;, callback)</code>：当进程将要退出时触发。 ‘exit’的回调结束后，主进程将不再运行</li>\n<li><code>process.on(&#39;SIGINT&#39;, callback)</code>：捕获当前进程接收到的信号</li>\n<li>process.abort()：触发node的abort事件，退出当前进程，执行该函数后，后面的代码不执行。</li>\n<li><code>process.kill(pid, [signal])</code>：结束对应某pid的进程并发送一个信号</li>\n<li>进程事件：<code>process.on(&#39;uncaughtException&#39;, cb)</code> 捕获异常信息、<code>process.on(&#39;exit&#39;, cb)</code>进程推出监听</li>\n<li>三个标准流：process.stdout 标准输出、process.stdin 标准输入、process.stderr 标准错误输出</li>\n</ul>\n<h3 id=\"process-env\"><a href=\"#process-env\" class=\"headerlink\" title=\"process.env\"></a>process.env</h3><p>process.env属性返回一个包含用户环境信息的对象。在node环境中，当我们打印process.env时，发现它并没有NODE_ENV这一个属性。实际上，process.env.NODE_ENV是在package.json的scripts命令中注入的，也就是NODE_ENV并不是node自带的，而是由用户定义的，至于为什么叫NODE_ENV，应该是约定成俗的吧。</p>\n<h2 id=\"child-process（创建子进程）\"><a href=\"#child-process（创建子进程）\" class=\"headerlink\" title=\"child_process（创建子进程）\"></a>child_process（创建子进程）</h2><p>Node.js 提供了 child_process 内置模块，用于创建子进程</p>\n<ul>\n<li>child_process.spawn()：适用于返回大量数据，例如图像处理，二进制数据处理。</li>\n<li>child_process.exec()：适用于小量数据，maxBuffer 默认值为 200 * 1024 超出这个默认值将会导致程序崩溃，数据量过大可采用 spawn。</li>\n<li>child_process.execFile()：类似 child_process.exec()，区别是不能通过 shell 来执行，不支持像 I&#x2F;O 重定向和文件查找这样的行为</li>\n<li>child_process.fork()：衍生新的进程，进程之间是相互独立的，每个进程都有自己的 V8 实例、内存，系统资源是有限的，不建议衍生太多的子进程出来，通长根据系统 CPU 核心数设置。</li>\n</ul>\n<h2 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h2><p>主要作用就是处理文件的目录和路径，在前端项目webpack配置文件中经常用到。</p>\n<h3 id=\"path-join\"><a href=\"#path-join\" class=\"headerlink\" title=\"path.join()\"></a>path.join()</h3><p>拼接多个路径片段，还原成完整可用路径</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a/b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a/b/c/index.html</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/a/b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// /a/b/c/index.html</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a/b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a/b/index.html</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"path-resove\"><a href=\"#path-resove\" class=\"headerlink\" title=\"path.resove()\"></a>path.resove()</h3><p>返回一个绝对路径</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">path<span class=\"token punctuation\">.</span><span class=\"token function\">resove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取绝对路径</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">resove</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"basename\"><a href=\"#basename\" class=\"headerlink\" title=\"basename()\"></a>basename()</h3><p>获取路径中基础名称</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>__filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test.js</span>\n<span class=\"token comment\">// 传入第二个参数如果匹配会省略后缀，不匹配仍旧返回真实的后缀</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>__filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/a/b/c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/a/b/c/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"path-extname\"><a href=\"#path-extname\" class=\"headerlink\" title=\"path.extname()\"></a>path.extname()</h3><p>获取路径中的扩展名称</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/src/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// .html</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"path-parse\"><a href=\"#path-parse\" class=\"headerlink\" title=\"path.parse()\"></a>path.parse()</h3><p>解析路径</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/src/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n* root: /\n* dir: /src\n* base: index.html\n* ext: .html\n* name: index\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"fs-读取文件\"><a href=\"#fs-读取文件\" class=\"headerlink\" title=\"fs(读取文件)\"></a>fs(读取文件)</h2><h2 id=\"events（事件模块）\"><a href=\"#events（事件模块）\" class=\"headerlink\" title=\"events（事件模块）\"></a>events（事件模块）</h2><ul>\n<li>在 Node.js 中一个很重要的模块 Events（EventEmitter 事件触发器），EventEmitter 本质上就是观察者模式的实现。net、http、fs、stream、process 等模块，express、koa 框架都依赖了Events。</li>\n<li>EventEmitter 对象的事件触发 emit 和监听 on 是同步的，事件的回调是异步的。</li>\n<li>在 Node.js 的事件机制中主要有三类角色: 事件(Event)、事件发射器(EventEmitter)、事件监听器(Event Listener)。</li>\n</ul>\n<h3 id=\"Event\"><a href=\"#Event\" class=\"headerlink\" title=\"Event\"></a>Event</h3><ul>\n<li><p>EventEmitter 提供了 <code>on()</code>、<code>once()</code>、<code>removeListener()</code> 等方法来对事件进行监听移除，可同时注册多个同名的事件。其中<code>once()</code>: 当触发多次相同名称事件，通过 once 添加的侦听器只会执行一次。</p>\n</li>\n<li><p>EventEmitter 会按照监听器注册的顺序<strong>同步</strong>地调用所有监听器，所以必须确保事件的排序正确。提前触发未监听的事件，不会报错，并且不会执行监听的回调函数。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 基本使用</span>\n<span class=\"token keyword\">const</span> EventEmitter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>EventEmitter<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> emitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nemitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"起床\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">早上 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>time<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 开始起床，新的一天加油！</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nemitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"起床\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在 Koa 中 new 一个 app 对象，通过 app.emit() 触发一个事件，实现在整个系统中进行传递。</span>\n<span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"koa\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在 Koa 中使用 EventEmitter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"koa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 通过Object.setPrototypeOf() 来实现的继承</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">EventEmitter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyEmitter</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>MyEmitter<span class=\"token punctuation\">,</span> EventEmitter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>默认情况下，如果为特定事件添加了超过 10 个监听器，则 EventEmitter 会打印一个警告。 但是，并不是所有的事件都要限制 10 个监听器。 <code>emitter.setMaxListeners()</code> 方法可以为指定的 EventEmitter 实例修改限制。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 操作最大事件监听个数</span>\n<span class=\"token comment\">// 设置同类型事件监听最大个数</span>\n<span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setMaxListeners</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 获取同类型事件监听最大个数</span>\n<span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getMaxListeners</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_count <span class=\"token operator\">||</span> EventEmitter<span class=\"token punctuation\">.</span>defaultMaxListeners<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"error事件\"><a href=\"#error事件\" class=\"headerlink\" title=\"error事件\"></a>error事件</h3><p>当EventEmitter 实例出错时，应该触发error事件。如果没有为error事件注册监听器，则当error事件触发时，会抛出错误、打印堆栈跟踪，并退出Node.js进程。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> EventEmitter <span class=\"token operator\">=</span> <span class=\"token function\">require</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyEmitter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EventEmitter</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> myEmitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyEmitter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 模拟触发error事件</span>\nmyEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'错误信息'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 抛出错误</span>\n\nmyEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Buffer（缓冲区）\"><a href=\"#Buffer（缓冲区）\" class=\"headerlink\" title=\"Buffer（缓冲区）\"></a>Buffer（缓冲区）</h2><ul>\n<li>Buffer 用于读取或操作二进制数据流，将数据缓冲起来，它是临时性的，对于流式数据，会采用缓冲区将数据临时存储起来。</li>\n<li>如用于操作网络协议、数据库、图片和文件I&#x2F;O 等一些需要大量二进制数据的场景，专门存放二进制数据的缓存区。</li>\n<li>Buffer 作为存在于全局对象上，使用时无需 require 引入模块即可使用。</li>\n<li>Buffer 在创建时大小已经被确定且是无法调整的，在内存分配这块 Buffer 是由 C++ 层面提供而不是 V8。</li>\n</ul>\n<h3 id=\"Buffer应用场景\"><a href=\"#Buffer应用场景\" class=\"headerlink\" title=\"Buffer应用场景\"></a>Buffer应用场景</h3><p>Buffer的应用场景有以下几种。</p>\n<ul>\n<li>在使用net或 http模块来接收网络数据时，可用 Buffer作为数据结构进行传输，即 data事件的参数。</li>\n<li>用于大文件的读取和写入。以前fs读取的内容是string，后来都改用Buffer，在大文件读取上，性能和内存有明显优势。</li>\n<li>用于字符转码、进制转换。Unicode 编码虽然能满足绝大部分场景，但有时候还是不够的，由于Node.js内置的转换编码并不支持GBK，因此如果要处理编码为GBK的文档，就需要iconv和 iconv-lite来补充一部分，string decoder模块提供了一个 API，用于把 Buffer对象解码成字符串，但会保留编码过的多字节UTF-8与UTF-16字符。</li>\n<li>用作数据结构，处理二进制数据，也可以处理字符编码。</li>\n</ul>\n<h2 id=\"Buffer与字符串的传输速度\"><a href=\"#Buffer与字符串的传输速度\" class=\"headerlink\" title=\"Buffer与字符串的传输速度\"></a>Buffer与字符串的传输速度</h2><p>buffer比string快。在 HTTP 传输中传输的是二进制数据，上面例子中的 &#x2F;string 接口直接返回的字符串，这时候 HTTP 在传输之前会先将字符串转换为 Buffer 类型，以二进制数据传输，通过流（Stream）的方式一点点返回到客户端。但是直接返回 Buffer 类型，则少了每次的转换操作，对于性能也是有提升的。在一些 Web 应用中，对于静态数据可以预先转为 Buffer 进行传输，可以有效减少 CPU 的重复使用（重复的字符串转 Buffer 操作）。</p>\n<h2 id=\"buffer模块与Buffer的关系\"><a href=\"#buffer模块与Buffer的关系\" class=\"headerlink\" title=\"buffer模块与Buffer的关系\"></a>buffer模块与Buffer的关系</h2><p>Buffer是全局global上的一个引用，指向的其实是buffer.Buffer</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'buffer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">===</span> Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"创建Buffer\"><a href=\"#创建Buffer\" class=\"headerlink\" title=\"创建Buffer\"></a>创建Buffer</h3><ul>\n<li>Buffer.from()，第一个参数是内容，第二个是按什么格式转。Buffer.from不支持传入数字，传入数字可以采用传入数组的，存入的一组数据最好是：全部落在0到255区间  或者全部落在-128到127，这是因为不同的数字读取时应该调用不同的方法。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throw new errors.TypeError</span>\n\n<span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  &lt;Buffer 01 02 03 04>  显示的是16进制的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>Buffer.alloc()，第一个参数是长度，第二个具体buffer内容<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> b2 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建一个大小为 10 个字节的缓冲区</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;Buffer 00 00 00 00 00 00 00 00 00 00></span>\n\n<span class=\"token comment\">// 尝试分配一个大小为 2048 的 Buffer 对象</span>\nBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 打印buffer，将每个字符串对应的ASCII码的十进制，转化为16进制的，比如 H</span>\n<span class=\"token string\">'H'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// ASCII码：'72'</span>\n<span class=\"token string\">'H'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '72'的16进制 '48'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"Buffer-字符编码\"><a href=\"#Buffer-字符编码\" class=\"headerlink\" title=\"Buffer 字符编码\"></a>Buffer 字符编码</h4><p>通过使用字符编码，可实现 Buffer 实例与 JavaScript 字符串之间的相互转换。如果不传递 encoding 默认按照 UTF-8 格式转换存储</p>\n<ul>\n<li><code>&#39;ascii&#39;</code>仅适用于 7 位 ASCII 数据，此编码速度很快，如果设置则会剥离高位。</li>\n<li><code>&#39;utf8&#39;</code>多字节编码的 Unicode 字符，许多网页和其他文档格式都使用 UTF-8。</li>\n<li><code>&#39;base64&#39;</code>Base64 编码。。</li>\n<li><code>&#39;binary&#39;</code>一种将 Buffer 编码成单字节编码字符串的方法。</li>\n<li><code>&#39;hex&#39;</code>将每个字节编码成两个十六进制的字符。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 68656c6c6f20776f726c64</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello world</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"字符串与-Buffer-类型互转\"><a href=\"#字符串与-Buffer-类型互转\" class=\"headerlink\" title=\"字符串与 Buffer 类型互转\"></a>字符串与 Buffer 类型互转</h3><h4 id=\"字符串转-Buffer（将字符串数据写入缓冲区）\"><a href=\"#字符串转-Buffer（将字符串数据写入缓冲区）\" class=\"headerlink\" title=\"字符串转 Buffer（将字符串数据写入缓冲区）\"></a>字符串转 Buffer（将字符串数据写入缓冲区）</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> b3 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123456789'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;Buffer 31 32 33 34 35 36 37 38 39></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 9</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"Buffer-转换为字符串（从缓冲区读取string数据）\"><a href=\"#Buffer-转换为字符串（从缓冲区读取string数据）\" class=\"headerlink\" title=\"Buffer 转换为字符串（从缓冲区读取string数据）\"></a>Buffer 转换为字符串（从缓冲区读取string数据）</h4><p>使用 buf.toString([encoding], [start], [end]) 方法，默认编码仍为 UTF-8</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> b3 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123456789'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123456789</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1234</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"将buffer转换成JSON对象\"><a href=\"#将buffer转换成JSON对象\" class=\"headerlink\" title=\"将buffer转换成JSON对象\"></a>将buffer转换成JSON对象</h3><p>buf.toJSON()，返回一个JSON对象。当字符串化一个buffer实例是，JSON.stringify()会隐式地调用该toJSON()。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出: &#123; \"type\": \"Buffer\", \"data\": [ 1,2,3,4,5] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'Buffer'</span> <span class=\"token operator\">?</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出:&lt;Buffer 01 02 03 04 05></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"buffer缓冲区的合并\"><a href=\"#buffer缓冲区的合并\" class=\"headerlink\" title=\"buffer缓冲区的合并\"></a>buffer缓冲区的合并</h3><p>Buffer.concat(list[, totalLength])</p>\n<ul>\n<li>list &lt;Buffer[]&gt; 要连接的 Buffer。</li>\n<li>totalLength <code>&lt;integer&gt;</code> 连接时list中Buffer 实例的总长度，如果未提供 totalLength，则从 list 中的 Buffer 实例通过相加其长度来计算</li>\n<li>返回: <code>&lt;Buffer&gt;</code></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf1 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> buf2 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> buf3 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> totalLength <span class=\"token operator\">=</span> buf1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> buf2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> buf3<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>totalLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印: 42</span>\n<span class=\"token keyword\">const</span> bufA <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>buf1<span class=\"token punctuation\">,</span> buf2<span class=\"token punctuation\">,</span> buf3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> totalLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bufA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印: &lt;Buffer 00 00 00 00 ...></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bufA<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印: 42</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"缓冲区的拷贝\"><a href=\"#缓冲区的拷贝\" class=\"headerlink\" title=\"缓冲区的拷贝\"></a>缓冲区的拷贝</h3><p>Buffer.copy(buf)</p>\n<h3 id=\"缓冲区的比较\"><a href=\"#缓冲区的比较\" class=\"headerlink\" title=\"缓冲区的比较\"></a>缓冲区的比较</h3><p>Buffer.compare(buf1, buf2)</p>\n<h3 id=\"缓冲区的裁剪\"><a href=\"#缓冲区的裁剪\" class=\"headerlink\" title=\"缓冲区的裁剪\"></a>缓冲区的裁剪</h3><ul>\n<li>buf.slice([start[, end]])</li>\n<li>返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切</li>\n</ul>\n<h3 id=\"转换过程中为什么出现乱码？\"><a href=\"#转换过程中为什么出现乱码？\" class=\"headerlink\" title=\"转换过程中为什么出现乱码？\"></a>转换过程中为什么出现乱码？</h3><p>字符串中有中文，一个中文在UTF-8下占用3个字节。转成buffer后，再从buffer转成字符串时，如果字符被截断则容易出现乱码。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'前端开发'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// &lt;Buffer e5 89 8d e7 ab af e5 bc 80 e5 8f 91></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12，一个中文在UTF-8下占用3个字节</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UTF-8'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前端�</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Stream（流）\"><a href=\"#Stream（流）\" class=\"headerlink\" title=\"Stream（流）\"></a>Stream（流）</h2><p>Stream在 Node.js 中继承自EventEmitter，它有4种基本流类型。</p>\n<ul>\n<li>Readable: 可读操作类型，可以产出数据，这些数据可以被传送到其他流中，只需要调用pipe方法即可。</li>\n<li>Writable: 可写操作类型，只能流进不能流出。</li>\n<li>Duplex: 可读可写操作类型（net.Socket）。</li>\n<li>Transform: 转换类型，可以写入数据，然后读出结果。</li>\n</ul>\n<p>node.js创建的流都是运作在字符串和buffer上的。<br>Stream作为读写方法是最好的。可写流和可读流都会在内部的缓冲区中存储数据，可以分别使用 writable.writableBuffer 或 readable.readableBuffer 来获取。</p>\n<h3 id=\"流中的缓冲区\"><a href=\"#流中的缓冲区\" class=\"headerlink\" title=\"流中的缓冲区\"></a>流中的缓冲区</h3><ul>\n<li><p>可写流和可读流都会在内部的缓冲区中存储数据，可以 writable.writableBuffer 或 readable.readableBuffer 来获取。</p>\n</li>\n<li><p>可缓冲的数据大小取决于传入流构造函数的 highWaterMark 选项。对于普通的流，highWaterMark 指定了字节的总数。对于对象模式的流，highWaterMark 指定了对象的总数。</p>\n</li>\n<li><p>当调用 stream.push(chunk) 时，数据会缓冲在可读流中。如果流的消费者没有调用 stream.read()，则数据会保留在内部队列中直到被消费。</p>\n</li>\n<li><p>一旦内部的可读缓冲的总大小达到 highWaterMark 指定的或值时，流会停止从底层资源读取数据，直到当前缓冲的数据被消贺（也就是说，流会停止调用内部的用于填充可读缓冲的 readable._read())。</p>\n</li>\n<li><p>当调用 writable.write(chunk）时，数据会被缓冲在可写流中。当内部的缓冲区的总大小小于 highWaterMark 设置的阈值时，调用 writable.write() 会返回true。一旦内部缓冲的大小达到或超过 highWaterMark 时，则会返回false。</p>\n</li>\n</ul>\n<p>因为双工流和转换流都是可读又可写的，所以它们各自维护着两个相互独立的内部缓冲区用于读取和写入，这使得它们在维护数据流时，读取和写入两边可以各自独立地运作。例如，net.Socket实例是双工流，它的可读端可以消费从socket接收的数据，而可写端则可以将数据写入到socket。因为数据写入到socket的速度可能比接收数据的速度快或慢，所以在读写两端独立地进行操作（或缓冲）就显得很重要了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> source <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/source'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>encoding<span class=\"token operator\">:</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/dest'</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 等价于</span>\n<span class=\"token comment\">// pipe是用来传递  上一个流的输出  并将其作为  下一个流的输入的链式方法。</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadstream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/source'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/dest'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"可读流\"><a href=\"#可读流\" class=\"headerlink\" title=\"可读流\"></a>可读流</h3><p>Node. js可读流是对提供数据的来源的一种抽象。所有可读流都实现了stream.Readable类定义的接口。可读流常见的例子包括客户端的HTTP响应、服务器的HTTP请求、fs的读取流、zlib流、crypto流、TCP socket、子进程 stdout 与 stderr、process.stdin。</p>\n<h3 id=\"stream-Readable类事件\"><a href=\"#stream-Readable类事件\" class=\"headerlink\" title=\"stream.Readable类事件\"></a>stream.Readable类事件</h3><ol>\n<li><p>close 事件<br>close 事件在流被关闭时触发。表明不会再触发其他事件，也不会再发生操作。不是所有可读流都会触发close事件。如果使用 emitClose 选项创建可读流，则它将始终发出close事件。</p>\n</li>\n<li><p>data 事件<br>data事件是在流将数据块传送给<code>消费者</code>后触发。对于非对象模式的流，数据块可以是字符串或 Buffer。对于对象模式的流，数据块可以是除了 null 的任何 JavaScript 值。<br>当调用 readable.pipe()、readable.resume() 或绑定监听器到 data 事件时，流会转换到流动模式。当调用 readable.read() 且有数据块返回时，也会触发data 事件。<br>如果使用 readable.setEncoding() 为流指定了默认的字符编码，则监听器回调传入的数据为字符串，否则传入的数据为 Buffer。</p>\n</li>\n<li><p>end 事件<br>end 事件只有在数据被完全消费掉后才会触发。要想触发该事件，可以将流转换到流动模式，或反复调用 stream.read() 直到数据被消费完。</p>\n</li>\n<li><p>error 事件<br>error事件通常是在当流因底层内部出错而不能产生数据，或推送无效的数据块时触发，监听器回调将传递一个 Error对象。</p>\n</li>\n<li><p>pause 事件<br>调用 stream.pause() 并且 readsFlowing 不为 false 时，会发出 pause 事件。</p>\n</li>\n<li><p>readable 事件<br>readable 事件在当流中有数据可供读取时触发。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> readable <span class=\"token operator\">=</span> <span class=\"token function\">getReadableStreamSomehow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreadable<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readable'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有数据可读</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当到达流数据的尽头时，readable 事件也会触发，但是在 end 事件之前触发。readable 事件表明流有新的动态，要么有新的数据，要么到达流的尽头。对于前者，stream.read() 会返回可用的数据。对于后者，stream.read() 会返回null。</p>\n</li>\n</ol>\n<h3 id=\"stream-Readable类方法\"><a href=\"#stream-Readable类方法\" class=\"headerlink\" title=\"stream.Readable类方法\"></a>stream.Readable类方法</h3><p>1.destroy<br>readable.destroy([error])方法用于销毁流，并触发error事件和close事件。调用后，可读流将释放所有的内部资源，且忽视后续的 push() 调用。实现流时不应该重写这个方法，而是重写 readable._destroy()。</p>\n<p>2.isPaused<br>readable.isPaused() 方法用于返回可读流当前的操作状态。主要用于 readable.pipe() 底层的机制，大多数情况下无须直接使用该方法。</p>\n<ol start=\"3\">\n<li><p>pause 与 resume<br>readable.pause() 方法使流动模式的流<strong>停止触发data事件</strong>，并切换到流动模式。任何可用的数据都会保留在内部缓存中。<br>相对的，readable.resume() 将被暂停的可读流<strong>恢复触发data事件</strong>，并将流切换到流动模式，在readable事件使用不生效。</p>\n</li>\n<li><p>pipe<br>readable.pipe(destination[, options])方法用于绑定可写流到可读流，将可读流自动切换到流动模式，并将可读流的所有数据推送到绑定的可写流。数据流会被自动管理，所以即使可读流更快，目标可写流也不会超负荷。</p>\n</li>\n</ol>\n<ul>\n<li>将可读流的所有数据通过管道推送到write-data.txt文件：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> readable <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> writable <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'write-data.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// readable的所有数据都推送到'write-data.txt'</span>\nreadable<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>writable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>可以在单个可读流上绑定多个可写流<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">readable<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>writable1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>writable2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>默认情况下，当来源可读流触发end事件时，目标可写流也会调用stream.end()结束写入。若要禁用这种默认行为，end选项应设为 false，这样目标流就会保持打开。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">reader<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span> <span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">end</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreader<span class=\"token punctuation\">.</span><span class=\"token function\">on</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    writer<span class=\"token punctuation\">.</span><span class=\"token function\">end</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'结束'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n如果可读流发生错误，目标可写流不会自动关闭，需要手动关闭所有流以避免内存泄漏。process.stderr 和 process.stdout 可写的流在 Node.js 进程退出之前永远不会关闭。</li>\n</ul>\n<ol start=\"5\">\n<li>read</li>\n</ol>\n<ul>\n<li><p>readable.read([size])方法用于从内部缓冲拉取并返回数据。其中，size指定要读取的数据的字节数。如果没有指定size参数，则返回内部缓冲中的所有数据。该方法如果没有可读的数据，则返回null。默认情况下，readable.read()返回的数据是Buffer对象，除非使用readable.setEncoding()指定字符编码或流处于对象模式。如果可读的数据不足size个字节，则返回内部缓冲剩余的数据，如果流已经结束则返回null。</p>\n</li>\n<li><p>readable.read()应该只对处于暂停模式的可读流调用。在流动模式中，readable.read()会自动调用直到内部缓冲的数据完全耗尽。</p>\n</li>\n<li><p>如果readable.read()返回一个数据块，则data事件也会触发。</p>\n</li>\n<li><p>end事件触发后再调用stream.read([size])会返回null，不会抛出错误。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> readable <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 设置字符编码</span>\nreadable<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 读取数据</span>\nreadable<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readable'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> chunk<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!==</span> <span class=\"token punctuation\">(</span>chunk <span class=\"token operator\">=</span> readable<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">接收到 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>chunk<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 字节的数据</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">接收到的数据是： </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>chunk<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreadable<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'结束'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述示例中，使用readable.read()处理数据时，while循环是必需的。只有在readable.read()返回null之后，才会发出readable事件;</p>\n</li>\n</ul>\n<p>readable.setEncoding()用于设置字符编码。默认情况下没有设置字符编码，流数据返回的是 Buffer对象。如果设置了字符编码，则流数据返回指定编码的字符串。例如，本例中调用<code>readable.setEncoding(&#39;utf-8&#39;)</code>会将数据解析为UTF-8数据，并返回字符串。如果调用<code>readable.setEncoding(hex)</code>则会将数据编码成十六进制字符串。</p>\n<ol start=\"6\">\n<li>readable.unpipe([destination])<br>解绑之前使用 stream.pipe() 绑定的可写流。如果没有指定目标可写流，则解绑所有管道，如果指定了目标可写流但它没有建立管道，则不起作用。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> readable <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> writable <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'write-data.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// readable的所有数据都推送到'write-data.txt'</span>\nreadable<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>writable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'停止写入数据'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  readable<span class=\"token punctuation\">.</span><span class=\"token function\">unpipe</span><span class=\"token punctuation\">(</span>writable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'手动关闭文件流'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  writable<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"两种读取模式\"><a href=\"#两种读取模式\" class=\"headerlink\" title=\"两种读取模式\"></a>两种读取模式</h3><p>流动模式或者暂停模式</p>\n<p>可读流运作于流动模式(flowing)或暂停模式(paused)两种模式之一。</p>\n<ul>\n<li>在流动模式中，数据自动从底层系统读取，并通过EventEmitter 接口的事件尽口能快地被提供给应用程序。</li>\n<li>在暂停模式中，必须显式调用stream.read()读取数据块。<br>所有可读流都开始于暂停模式，可以通过以下方式切换到流动模式。</li>\n<li>添加data事件句柄。</li>\n<li>调用stream.resume()。·调用stream.pipe()。<br>可读流可以通过以下方式切换回暂停模式。</li>\n<li>如果没有管道目标，则调用stream.pause()。</li>\n<li>如果有管道目标，则移除所有管道目标。调用stream.unpipe()可以移除多个管道目标。</li>\n</ul>\n<p>只有提供了消费或忽略数据的机制后，可读流才会产生数据。如果消费的机制被禁用或移除，则可读流会停止产生数据。</p>\n<p>为了向后兼容，移除data事件句柄不会自动地暂停流。如果有管道目标，一旦目标变为drain 状态并请求接收数据时，则调用 stream.pause() 也不能保证流会保持暂停模式。</p>\n<p>如果可读流切换到流动模式，且没有可用的“消费者”来处理数据，则数据将会丢失。例如，当调用readable.resume() 时，没有监听data事件或data事件句柄已移除。</p>\n<p>添加readable事件句柄会使流自动停止流动，并通过 readable.read() 消费数据。如果 readable 事件句柄被移除，且存在data事件句柄，则流会再次开始流动。</p>\n<h3 id=\"可写流\"><a href=\"#可写流\" class=\"headerlink\" title=\"可写流\"></a>可写流</h3><p>可写流是对数据要被写入的目的地的一种抽象。所有可写流都实现了stream.Writable类定义的接口。可写流常见的例子包括客户端的HTTP请求、服务器的HTTP响应、fs的写入流、zlib流、crypto流、TCP socket、子进程stdin、process.stdout、process.stderr。上面的一些例子事实上是实现了可写流接口的双工流。</p>\n<h4 id=\"stream-Writable类事件\"><a href=\"#stream-Writable类事件\" class=\"headerlink\" title=\"stream.Writable类事件\"></a>stream.Writable类事件</h4><p>stream.Writable类定义了如下事件。</p>\n<ol>\n<li><p>close事件<br>当流及其任何底层资源（如文件描述符）已关闭时，将发出close事件。该事件表明不会发出更多事件，也不会进一步计算。<br>如果使用emitClose选项创建可写流，它将始终发出close事件。</p>\n</li>\n<li><p>drain事件<br>如果对stream.write(chunk)的调用返回false，则在适合继续将数据写入流时将发出drain事件。</p>\n</li>\n<li><p>error事件<br>如果在写入管道数据时发生错误，则会发出error事件。调用时，监听器回调会传递一个Error参数。<br>发出error事件时，流不会关闭。</p>\n</li>\n<li><p>finish事件<br>调用stream.end()方法后会发出finish事件，并且所有数据都已刷新到底层系统。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> writable <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'write-data.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  writable<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">写入 #</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nwritable<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'写入结尾\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwritable<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finish'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'写入已完成'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>pipe事件<br>在可读流上调用stream.pipe()方法时会发出pipe事件，并将此可写流添加到其目标集。</p>\n</li>\n<li><p>unpipe事件<br>当在可读流上调用stream.unpipe()时触发。当可读流通过管道流向可写流发生错误时，也会触发unpipe事件。</p>\n</li>\n</ol>\n<h4 id=\"stream-Writable类方法\"><a href=\"#stream-Writable类方法\" class=\"headerlink\" title=\"stream.Writable类方法\"></a>stream.Writable类方法</h4><ol>\n<li>cork<br>writable.cork()方法用于强制把所有写入的数据都缓冲到内存中。当调用stream.uncork()或stream.end()时，缓冲的数据才会被输出。</li>\n</ol>\n<p>当写入大量小块数据到流时，内部缓冲可能失效，从而导致性能下降，writable.cork()主要用于避免这种情况。对于这种情况，实现了writable._writev()的流可以用更优的方式对写入的数据进行缓冲。</p>\n<ol start=\"2\">\n<li><p>destroy<br>writable.destroy([error])方法用于销毁流。在调用该方法之后，可写流已结束，随后对write()或end()的调用都将导致ERR_STREAM_DESTROYED错误。如果数据在关闭之前应该刷新，则应使用end()方法而不是destroy()方法，或者在销毁流之前等待drain事件。实现者不应该重写此方法，而是实现writable._destroy()。</p>\n</li>\n<li><p>end<br>调用writable.end([chunk][, encoding][, callback])方法表示不再将数据写入Writable。该方法的参数如下。</p>\n</li>\n</ol>\n<ul>\n<li><p><code>chunk&lt;string&gt;|&lt;Buffer&gt;|&lt;Uint8Array&gt;/&lt;any&gt;</code>:要 写入的可选数据。对于不在对象模式下运行的流，块必须是字符串、Buffer 或 Uint8Array。对于对象模式流，块可以是除null 之外的任何JavaScript 值。</p>\n</li>\n<li><p><code>encoding&lt;string&gt;</code>: 如果设置了编码，则 chunk 是一个字符串。</p>\n</li>\n<li><p><code>callback&lt;Function&gt;</code>: 流完成时的可选回调。</p>\n</li>\n</ul>\n<p>调用writable.end()方法表示不再将数据写入Writable。可选的块和编码参数允许在关闭流之前立即写入最后一个额外的数据块。如果提供，则附加可选回调函数作为finish事件的监听器。</p>\n<p>调用stream.end()后调用stream.write()方法将引发错误。</p>\n<ol start=\"4\">\n<li><p>setDefaultEncoding<br>writable.setDefaultEncoding(encoding)为可写流设置默认的编码。</p>\n</li>\n<li><p>uncork<br>writable.uncork()方法用于将调用stream.cork()后缓冲的所有数据输出到目标。当使用writable.cork() 和 writable.uncork() 来管理流的写入缓冲时，建议使用 process.nextTick() 来延迟调用 writable.uncork()。通过这种方式，可以对单个Node.js事件循环中调用的所有 writable.write() 进行批处理。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">stream<span class=\"token punctuation\">.</span><span class=\"token function\">cork</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'一些'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprocess<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">uncork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果一个流上多次调用 writable.cork()，则必须调用同样次数的 writable.uncork() 才能输出缓冲的数据。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">stream<span class=\"token punctuation\">.</span><span class=\"token function\">cork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'一些'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">cork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprocess<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">uncork</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//数据不会被输出,直到第二次调用uncork()</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">uncork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>write<br>writable.write(chunk[, encoding][, callback]) 写入数据到流，并在数据被完全处理之后调用callback。如果发生错误，则callback可能被调用也可能不被调用。为了可靠地检测错误，可以为error事件添加监听器。该方法的参数如下。</p>\n</li>\n</ol>\n<ul>\n<li><code>chunk&lt;string&gt;|&lt;Buffer&gt;|&lt;Uint8Array&gt;|&lt;any&gt;</code>: 要写入的数据。对于非对象模式的流，chunk 必须是字符串、Buffer 或 Uint8Array。对于对象模式的流，chunk 可以除null外的是任何 JavaScript 值。</li>\n<li><code>encoding&lt;string&gt;</code>: 如果chunk是字符串，则指定字符编码。</li>\n<li><code>callback&lt;Function&gt;</code>: 当数据块被输出到目标后的回调函数。</li>\n<li><code>writable.write()</code>: 写入数据到流，并在数据被完全处理之后调用callback。如果发生错误，则callback可能被调用也可能不被调用。为了可靠地检测错误，可以为error事件添加监听器。</li>\n</ul>\n<p>在接收了chunk后，如果内部的缓冲小于创建流时配置的highWaterMark, 则返回true。如果返回false，则应该停止向流写入数据，直到drain事件被触发。</p>\n<p>当流还未被排空时，调用write()会缓冲chunk，并返回false。一旦所有当前缓冲的数据块都被排空了(被操作系统接收并传输)，则触发drain事件。建议一旦write()返回false，则不再写入任何数据块，直到drain事件被触发。当流还未被排空时，也是可以调用write()， Node.js 会缓冲所有被写入的数据块，直到达到最大内存占用，这时它会无条件中止，甚至在它中止之前，高内存占用将会导致垃圾回收器的性能变差和RSS变高(即使内存不再需要，通常也不会被释放回系统)。如果远程的另一端没有读取数据，TCP的socket 可能永远也不会排空，所以写入到一一个不会排空的socket可能会导致产生远程可利用的漏洞。</p>\n<p>对于Transform，写入数据到一一个不会排空的流尤其成问题，因为Transform流默认会被暂停，直到它们被pipe或者添加了 data 或readable 事件句柄。</p>\n<p>如果要被写入的数据可以根据需要生成或取得，建议将逻辑封装为一一个可读流并且使用stream.pipe()。 如果要优先调用 write()，则可以使用 drain 事件来防止背压与避免内存问题。</p>\n<h3 id=\"双工流与转换流\"><a href=\"#双工流与转换流\" class=\"headerlink\" title=\"双工流与转换流\"></a>双工流与转换流</h3><p>双工流（Duplex）是同时实现了Readable和 Writable接口的流。双工括TCP socket、zlib流、crypto流。<br>转换流（Transform）是一种双工流，但它的输出与输入是相关联的。与双工流一样，转换流也同时实现了 Readable 和 Writable 接口。转换流的例子包括 zlib流和 crypto 流。</p>\n<h3 id=\"实现双工流\"><a href=\"#实现双工流\" class=\"headerlink\" title=\"实现双工流\"></a>实现双工流</h3><p>双工流同时实现了可读流和可写流，如TCP socket连接。因为JavaScript不支持多重继承，所以使用stream.Duplex类来实现双工流（而不是使用stream.Readable类和stream.Writable类)。<br>stream.Duplex类的原型继承自stream.Readable和寄生自stream.Writable，但是instanceof对这两个基础类都可用，因为重写了 stream.Writable 的Symbol.hasInstance。<br>自定义的双工流必须调用<code>new stream.Duplex([options])</code>构造函数并实现 readable._read() 和 writable._write() 方法。以下是示例。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> Duplex <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stream'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDuplex</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duplex</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"双工流的例子\"><a href=\"#双工流的例子\" class=\"headerlink\" title=\"双工流的例子\"></a>双工流的例子</h3><p>封装了一个可读可写的底层资源对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> Duplex <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stream'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> kSource <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'source'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDuplex</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duplex</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>kSource<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">_write</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 底层资源只处理字符串。</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">isBuffer</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      chunk <span class=\"token operator\">=</span> chunk<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>kSource<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeSomeData</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">_read</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>kSource<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchSomeData</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> encoding</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"net模块\"><a href=\"#net模块\" class=\"headerlink\" title=\"net模块\"></a>net模块</h2><p>在nodejs中，net模块用于创建基于流的TCP或IPC的服务器与客户端。net主要包含两个部分：</p>\n<ul>\n<li>net.Server: TCP Server，内部通过socket来实现与客户端的通信。</li>\n<li>net.Socket: TCP&#x2F;本地socket的Node版实现，它实现了全双工的stream接口，可以用来构建TCP客户端。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"创建TCP服务器\"><a href=\"#创建TCP服务器\" class=\"headerlink\" title=\"创建TCP服务器\"></a>创建TCP服务器</h3><ol>\n<li>net.Server类创建TCP或IPC服务器</li>\n<li>net.Server支持如下事件：</li>\n</ol>\n<ul>\n<li>listening事件: 当服务被绑定后调用server.listen()方法后触发。</li>\n<li>connection事件: 当一个新的connection建立的时候触发，回调参数为socket连接对象。</li>\n<li>close事件：当TCP服务器关闭的时候触发，回调函数没有参数。</li>\n<li>error事件: 当TCP服务器出现错误的时候触发，回调函数的参数为err对象。例如，监听了已经被占用的端口号。</li>\n</ul>\n<h3 id=\"创建TCP服务器示例\"><a href=\"#创建TCP服务器示例\" class=\"headerlink\" title=\"创建TCP服务器示例\"></a>创建TCP服务器示例</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'goodbye\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 处理错误</span>\n    <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到close事件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// socket对象，对象可以与客户端进行通信</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到connection事件'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到listening事件'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 随机获取未绑定的端口</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器启动，占用端口：'</span><span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当创建了一个TCP服务器后，可以通过 server.address()方法来查看这个TCP服务器监听的地址，并返回一个JSON对象。这个对象的属性有:</p>\n<ul>\n<li>port: TCP服务器监听的端口号。</li>\n<li>family: 说明TCP服务器监听的地址是IPv6还是IPv4。</li>\n<li>address: TCP服务器监听的地址。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 查看服务器监听的地址\n */</span>\n\n<span class=\"token comment\">/* 引入net模块 */</span>\n<span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 创建TCP服务器 */</span>\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone connects'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 获取地址信息 */</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/* 获取地址信息，得到的是一个json &#123; address: '::', family: 'IPv6', port: 8000 &#125; */</span>\n   <span class=\"token keyword\">var</span> address <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">/* TCP服务器监听的端口号 */</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the port of server is\"</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">/* TCP服务器监听的地址 */</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the address of server is\"</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">/* 说明TCP服务器监听的地址是 IPv6 还是 IPv4 */</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the family of server is\"</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">.</span>family<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n创建一个TCP服务器后，可以通过server.getConnections()方法获取连接这个TCP服务器的客户端数量。除此之外，也可以通过maxConnections属性来设置这个服务器的最大连接数量，当连接数量超过最大值时，服务器将拒绝新的连接，例如:<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 连接服务器的客户端数量\n */</span>\n\n<span class=\"token comment\">/* 引入net模块 */</span>\n<span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 创建TCP服务器 */</span>\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone connects'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 设置最大连接数量 */</span>\n    server<span class=\"token punctuation\">.</span>maxConnections <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">getConnections</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the count of client is \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 获取监听端口 */</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Creat server on http://127.0.0.1:8000/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n服务器和客户端之间的通信：socket对象可以用来获取客户端发出的流数据，每次接收到数据的时候触发data事件，通过监听这个事件就可以在回调函数中获取客户端发送的数据。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 连接服务器的客户端数量\n */</span>\n\n<span class=\"token comment\">/* 引入net模块 */</span>\n<span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 创建TCP服务器 */</span>\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* 获取地址信息 */</span>\n    <span class=\"token keyword\">var</span> address <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"the server address is\"</span><span class=\"token operator\">+</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 发送数据 */</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> writeSize <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>bytesWritten<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">+</span> <span class=\"token string\">\"has send\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the size of message is\"</span><span class=\"token operator\">+</span>writeSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">/* 监听data事件，每次接收到数据的时候触发data事件 */</span> \n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> readSize <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>bytesRead<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the size of data is\"</span><span class=\"token operator\">+</span>readSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 获取地址信息 */</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Creat server on http://127.0.0.1:8000/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"server-listen监听链接\"><a href=\"#server-listen监听链接\" class=\"headerlink\" title=\"server.listen监听链接\"></a>server.listen监听链接</h3><p>listen()方法是异步的。当服务器开始监听时，会触发listening事件。最后一个参数callback将被添加为listening事件的监听器。</p>\n<p>当且仅当在第一次调用server.listen()或调用server.close()期间出现错误时，才能再次调用server.listen()方法。</p>\n<p>监听时最常见的错误之一是EADDRINUSE, 这说明该地址正被另一个服务器所使用。处理此问题的一种方法是在一段时间后重试。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token string\">'EADDRINUSE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'地址正被使用，重试中。。。'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n            server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HOST</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>server.listen(options[, callback])方法中的options参数支持如下属性</p>\n<ul>\n<li><code>port&lt;number&gt;</code>: 端口号。</li>\n<li><code>host&lt;string&gt;</code>: 主机。</li>\n<li><code>path&lt;string&gt;</code>: 如果指定了port，将被忽略。</li>\n<li><code>backlog&lt;number&gt;</code>。如果exclusive为 false，则集群将使用相同的底层句柄，从而允许共享连接处理。当exclusive为 true时，不共享句柄，并且尝试端口共享会导致错误。监听专用端口的示例如下。</li>\n<li><code>exclusive&lt;boolean&gt;</code>: 默认值是false。</li>\n<li><code>readableAll&lt;boolean&gt;</code>: 对于IPC服务器，使管道对所有用户都可读，默认值是false。</li>\n<li><code>writableAll&lt;boolean&gt;</code>: 对于IPC服务器，管道可以为所有用户写入，默认值是false。</li>\n</ul>\n<h3 id=\"创建Socket对象发送和接受数据\"><a href=\"#创建Socket对象发送和接受数据\" class=\"headerlink\" title=\"创建Socket对象发送和接受数据\"></a>创建Socket对象发送和接受数据</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 处理错误</span>\n    <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到close事件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到connection事件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'welcome!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送数据</span>\n\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到的数据为：'</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 如果收到c字符，就终止连接</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            socket<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bye!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            socket<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭socket</span>\n            <span class=\"token comment\">// 如果收到k字符，就关闭服务器</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token string\">'k'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            socket<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bye!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            socket<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭socket</span>\n            server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭服务器</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            socket<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到listening事件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 绑定到端口</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器启动，端口：8888'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在上述示例中，socket.write() 方法用于将数据写入 Socket发送; socket通过data事件，可以监听来自客户端写入的数据(接收)。在上述示例中，会将接收到的数据，再通过 socket.write() 方法发送回客户端。</p>\n<p>关闭TCP服务器：TCP服务器通过 socket.end() 终止客户端的连接，也可以通过 server.close() 方法来将整个TCP服务器关闭。当TCP服务器关闭时，会监听到close事件。</p>\n<h3 id=\"构建TCP客户端\"><a href=\"#构建TCP客户端\" class=\"headerlink\" title=\"构建TCP客户端\"></a>构建TCP客户端</h3><p>可以用net.Socket构建TCP客户端，实现TCP客户端和TCP服务器的通信。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 构建TCP客户端\n */</span>\n\n<span class=\"token comment\">/* 引入net模块 */</span>\n<span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 创建TCP客户端 */</span>\n<span class=\"token keyword\">var</span> client <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 设置连接的服务器 创建完socket对象后，使用socket对象的connect方法就可以连接一个TCP服务器。*/</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect the server\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 向服务器发送数据 */</span>\n  client<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message from client\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 监听服务器传来的data数据 */</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the data of server is \"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 监听end事件 */</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>net.Socket连接相关的API有:</li>\n</ol>\n<ul>\n<li>socket.connect(): 有3种不同的参数，用于不同的场景。</li>\n<li>socket.setTimeout(): 用来进行连接超时设置。</li>\n<li>socket.setKeepAlive(): 用来设置长连接。</li>\n<li>socket.destroy( )、socket.destroyed: 当错误发生时，用来销毁socket，确保这个socket上不会再有其他的IO操作。</li>\n</ul>\n<ol start=\"2\">\n<li>net.Socket涉及的事件:</li>\n</ol>\n<ul>\n<li>data: 当收到另一侧传来的数据时触发。</li>\n<li>connect: 当连接建立时触发。</li>\n<li>close: 当连接断开时触发。如果是因为传输错误导致的连接断开，参数就为error。</li>\n<li>end: 当连接另一侧发送了FIN包的时候触发。默认情况下(allowHalfOpen &#x3D;&#x3D; false)，socket会完成自我销毁操作。但也可以把allowHalfOpen设置为true，这样就可以继续往socket里写数据。当然，最后需要手动调用socket.end()。</li>\n<li>error: 当有错误发生时就会触发，参数为error。</li>\n<li>timeout: 示用户socket已经超时，需要手动关闭连接。</li>\n<li>drain: 当写缓存空了的时候触发。</li>\n<li>lookup: 当域名解析完成时触发。</li>\n</ul>\n<h2 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h2><p>http.Server类是继承自net.Server，有很多net.Server的方法和事件。</p>\n<p>net、http、dgram模块分别用来实现TCP、HTTP、UDP的通信。http为应用层模块，主要按照特定协议编解码数据; net为传输层模块，主要负责传输编码后的应用层数据; https是一个综合模块（涵盖了http&#x2F;tIs&#x2F;crypto等)，主要用于确保数据安全性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于完成发送请求</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">服务器运行在 http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>hostname<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>port<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"http-Server事件\"><a href=\"#http-Server事件\" class=\"headerlink\" title=\"http.Server事件\"></a>http.Server事件</h3><ol>\n<li>close事件：服务器关闭时触发close事件</li>\n<li>connection事件：建立新的TCP流是会发出connection事件</li>\n<li>request事件：每次有请求时都会发出request事件。注意，在HTTP Keep-Alive连接的情况下每个连接可能会有多个请求。</li>\n</ol>\n<h3 id=\"http-requset发送请求\"><a href=\"#http-requset发送请求\" class=\"headerlink\" title=\"http.requset发送请求\"></a>http.requset发送请求</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span> <span class=\"token comment\">// 默认是GET，POST、PUT、DELETE</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'请求完成!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"http请求对象和响应对象\"><a href=\"#http请求对象和响应对象\" class=\"headerlink\" title=\"http请求对象和响应对象\"></a>http请求对象和响应对象</h3><p>HTTP请求对象和响应对象在 Node.js中是被定义在 http.ClientRequest和http.ServerResponse类中的。</p>\n<h4 id=\"http-ClientRequest\"><a href=\"#http-ClientRequest\" class=\"headerlink\" title=\"http.ClientRequest\"></a>http.ClientRequest</h4><p>http.ClientRequest对象由http.request()内部创建并返回。它表示正在进行的请求，且其请求头已进入队列。请求头仍然可以使用</p>\n<ul>\n<li>getHeader(name) 返回请求头的值</li>\n<li>removeHeader(name) 改变。</li>\n</ul>\n<p>实际的请求头将与第一个数据块一起发送，或者当调用request.end()时发送。</p>\n<p>要获得响应，则为请求对象添加response事件监听器。当接收到响应头时，将会从请求对象触发response事件。response事件执行时有一个参数，该参数是http.IncomingMessage的实例。</p>\n<p>在response事件期间，可以添加监听器到响应对象，如监听data事件。</p>\n<p>如果没有添加response事件处理函数，则响应将被完全丢弃。如果添加了response事件处理函数，则必须消费完响应对象中的数据，每当有readable事件时，会调用response.read()，或添加 data事件处理函数，或调用.resume()方法。在消费完数据之前，不会触发end事件。此外，在读取数据之前，它将占用内存，最终可能导致进程内存不足的错误。</p>\n<h4 id=\"http-ServerResponse类\"><a href=\"#http-ServerResponse类\" class=\"headerlink\" title=\"http.ServerResponse类\"></a>http.ServerResponse类</h4><p>http.ServerResponse对象由HTTP服务器在内部创建，而不是由用户创建。它作为第二个参数传给request事件。ServerResponse继承自Stream。</p>\n<ul>\n<li>close事件：表示底层链接已经终止</li>\n<li>finish事件：在响应发送后触发。</li>\n<li>response.end()方法<br><code>response.end([data][, encoding][, callback])</code>方法用于向服务器发出信号，表示已发送所有响应标头和正文，该服务器应该考虑此消息已完成。必须在每个响应上调用response.end() 方法。</li>\n</ul>\n<p>如果指定了data，则它实际上类似于先调用response.write(data, encoding)方法，接着调用response.end()方法。如果指定了callback，则在响应流完成时将调用它。</p>\n<ul>\n<li>response.setHeader(name, value)：设置响应头。</li>\n<li>response.getHeaderNames()：返回已经设置的响应头属性数组。</li>\n<li>response.getHeaders()：返回已经设置的响应头，以key-vale表示。</li>\n</ul>\n<h4 id=\"REST-ful风格\"><a href=\"#REST-ful风格\" class=\"headerlink\" title=\"REST ful风格\"></a>REST ful风格</h4><ul>\n<li>若要在服务器上创建资源，应该使用POST方法。</li>\n<li>若要检索某个资源，应该使用GET方法。</li>\n<li>若要更新或添加资源，应该使用PUT方法。</li>\n<li>若要删除某个资源，应该使用DELETE方法。</li>\n</ul>\n<h1 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h1><p>npm全称node package manager即node包管理器。</p>\n<p>查看当前项目的所有NPM脚本命令，可以使用不带任何参数的npm run命令:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>npm 脚本的原理相对简单，每当执行npm run时，会自动新建一个Shell，在该Shell 中执行指定的脚本命令。</p>\n<p>因此，只要是Shell (一般是Bash)可以运行的命令，就可以写在 NPM脚本里面。需要注意的是，npm run新建的 Shell 会将当前目录的node_modules.bin子目录加入PATH变量，命令执行结束后，再将PATH 变量恢复。也就是说，当前目录的node_modules&#x2F;.bin子目录里面的所有脚本都可以直接用脚本名调用，而不必加上路径。例如，当前项目的依赖里面有Mocha，只需要直接写mocha test即可:</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"script\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"test\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"mocha test\"</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 而不需要写成:</span>\n<span class=\"token property\">\"script\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"test\"</span> <span class=\"token operator\">:</span><span class=\"token string\">\"./node_modules/.bin/mocha test\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由于NPM脚本的唯一要求是可以在Shell 中执行，因此它不一定是Node脚本，任何可执行文件都可以写在script中。</p>\n<p>安装的局部开发依赖如果有命令，会在node_modules&#x2F;.bin目录创建软连接，package.json是可以读取到依赖下.bin目录下的命令，可以在package.json直接使用该命令。</p>\n<h2 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h2><p>package.json可以手动编写，也可以使用npm init命令自动生成，它描述了项目使用到的模块，项目名称（必填）、版本号（必填）、许可、关键词。</p>\n<ul>\n<li>Name: 包名。</li>\n<li>Version: 包的版本号，语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。</li>\n<li>Description: 包的描述。</li>\n<li>Homepage: 包的官网地址。</li>\n<li>Author: 包的作者姓名。</li>\n<li>Contributors: 包的其他贡献者姓名。</li>\n<li>Dependencies: 依赖包列表，指定了项目运行所依赖的模块。如果依赖包没有安装，npm就会自动将依赖包安装在node_module目录下。</li>\n<li>devDependencies: 指定项目开发所需要的模块。</li>\n<li>repository: 包代码存放的地方的类型，可以是Git或Svn，Git可在GitHub 上。</li>\n<li>main: main字段指定了程序的主入口文件, require(‘moduleName’)就会加载这个文件。这个字段的默认值是模块根目录下面的index.js。</li>\n<li>keywords: 关键字。</li>\n<li>scripts: 指定了运行脚本命令的npm命令行缩写，比如 start 指定了运行npm run start时所要执行的命令。</li>\n<li>bin: 用来指定各个内部命令对应的可执行文件的位置。</li>\n<li>config: 用于添加命令行的环境变量。</li>\n</ul>\n<h2 id=\"npm命令\"><a href=\"#npm命令\" class=\"headerlink\" title=\"npm命令\"></a>npm命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 更新模块：</span>\n<span class=\"token function\">npm</span> update module\n\n<span class=\"token comment\"># 查看安装的模块：</span>\n<span class=\"token function\">npm</span> list -g <span class=\"token comment\"># 查看全局安装的模块</span>\n<span class=\"token function\">npm</span> list <span class=\"token comment\"># 查看本地安装的模块</span>\n\n<span class=\"token comment\"># 查看某个模块的信息</span>\n<span class=\"token function\">npm</span> list koa\n\n<span class=\"token comment\"># 查看命令详细帮助</span>\n<span class=\"token function\">npm</span> <span class=\"token builtin class-name\">help</span>\n\n<span class=\"token comment\"># 查看包的安装路径</span>\n<span class=\"token function\">npm</span> root <span class=\"token punctuation\">[</span>-g<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 清除npm本地缓存</span>\n<span class=\"token function\">npm</span> cache clean<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h1><p>WebSocket 提供了一个真正的全双工连接，它可用于客户机和服务器之间的双向通信，客户端和服务器可以随意向对方发送数据。</p>\n<p>该方案的优点是属于HTML5标准，已经被大多数浏览器支持，而且是真正的全双工，性能比较好。其缺点是实现起来相对比较复杂，需要对ws协议专门处理。</p>\n<h2 id=\"使用ws创建WebSocket服务器\"><a href=\"#使用ws创建WebSocket服务器\" class=\"headerlink\" title=\"使用ws创建WebSocket服务器\"></a>使用ws创建WebSocket服务器</h2><p>Node.js原生API并未提供 WebSocket的支持，因此，需要安装第三方包才能使用WebSocket 功能。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// npm i ws</span>\n<span class=\"token keyword\">const</span> WebSocket <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket<span class=\"token punctuation\">.</span>Server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> \n    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8080</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>WebSocket.Server(options[, callback]）方法中的options对象支持如下参数。</p>\n<ul>\n<li><code>host&lt;String&gt;</code>: 绑定服务器的主机名。</li>\n<li><code>port&lt;Number&gt;</code>: 绑定服务器的端口。</li>\n<li><code>backlog&lt;Number&gt;</code>: 挂起连接队列的最大长度。</li>\n<li><code>server</code>: 预先创建的Node.js HTTP&#x2F;S服务器。</li>\n<li><code>verifyClient&lt;Function&gt;</code>: 可用于验证传入连接的函数。</li>\n<li><code>handleProtocols&lt;Function&gt;</code>: 可用于处理WebSocket子协议的函数。</li>\n<li><code>path&lt;String&gt;</code>: 仅接受与此路径匹配的连接。</li>\n<li><code>noServer&lt;Boolean&gt;</code>: 不启用服务器模式。</li>\n<li><code>clientTracking&lt;Boolean&gt;</code>: 指定是否跟踪客户端。</li>\n<li><code>perMessageDeflate</code>: 启用&#x2F;禁用消息压缩。</li>\n<li><code>maxPayload&lt;Number&gt;</code>: 允许的最大消息大小(以字节为单位)。</li>\n</ul>\n<h2 id=\"ws事件\"><a href=\"#ws事件\" class=\"headerlink\" title=\"ws事件\"></a>ws事件</h2><ul>\n<li>ws监听事件：connection。只要有WebSocket连接到该服务器，就能触发connection事件。</li>\n<li>如果想获知所有的已连接的客户端信息，则可以使用server.clients数据集。该数据集存储了所有已连接的客户端。</li>\n</ul>\n<h2 id=\"发送和接收数据\"><a href=\"#发送和接收数据\" class=\"headerlink\" title=\"发送和接收数据\"></a>发送和接收数据</h2><p>ws通过websocket.send()方法发送数据，通过监听message事件来接受数据。</p>\n<h3 id=\"发送数据\"><a href=\"#发送数据\" class=\"headerlink\" title=\"发送数据\"></a>发送数据</h3><p><code>websocket.send(data[, options][, callback])</code>方法可以用来发送数据。data参数就是用来发送的数据。options对象的属性可以有以下几种。</p>\n<ul>\n<li>compress: 用于指定数据是否需要压缩。默认是true。</li>\n<li>binary: 用于指定数据是否通过二进制传送。默认是自动检测。</li>\n<li>mask: 用于指定是否应遮罩数据。当WebSocket不是服务器客户端时，默认认为true。</li>\n<li>fin: 用于指定数据是否为消息的最后一个片段，默认为true。</li>\n</ul>\n<h4 id=\"发送ping和pong\"><a href=\"#发送ping和pong\" class=\"headerlink\" title=\"发送ping和pong\"></a>发送ping和pong</h4><p>在消息通信中, <code>ping-pong</code>是一种验证客户端和服务器是否正常连接的简单机制。当客户端给服务器发送<code>ping</code>消息时，如果服务器能够正常响应<code>pong</code>消息，则说明客户端和服务器之间的通信是正常的。反之亦然，如果服务器想验证客户端的连接是否正常，也可以给客户端发送<code>ping</code>消息。<br>ws提供了一种快捷的方式来发送<code>ping</code>消息和<code>pong</code>消息。</p>\n<ul>\n<li>websocket.ping([data[, mask]][, callback])</li>\n<li>websocket.pong([data[, mask]][, callback])</li>\n</ul>\n<h4 id=\"接收数据\"><a href=\"#接收数据\" class=\"headerlink\" title=\"接收数据\"></a>接收数据</h4><p>ws通过message事件来接收数据</p>\n<h3 id=\"准备状态\"><a href=\"#准备状态\" class=\"headerlink\" title=\"准备状态\"></a>准备状态</h3><p>ws 中的 WebSocket类具有以下4种准备状态。</p>\n<ul>\n<li>CONNECTING: 值为0，表示连接还没有打开。</li>\n<li>OPEN: 值为1，表示连接已打开，可以通信了。</li>\n<li>CLOSING: 值为2，表示连接正在关闭。</li>\n<li>CLOSED: 值为2，表示连接已关闭。<br>需要注意的是，当通过 WebSocket对象进行通信时，状态必须是OPEN。</li>\n</ul>\n<h3 id=\"关闭WebSocket服务器\"><a href=\"#关闭WebSocket服务器\" class=\"headerlink\" title=\"关闭WebSocket服务器\"></a>关闭WebSocket服务器</h3><p>可以通过server.close()来关闭服务器，并通过close事件监听服务器的关闭。</p>\n<h3 id=\"ws例子\"><a href=\"#ws例子\" class=\"headerlink\" title=\"ws例子\"></a>ws例子</h3><ul>\n<li>服务端<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> WebSocket <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> WebSocketServer <span class=\"token operator\">=</span> WebSocket<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> wss <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocketServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwss<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ws</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[SERVER] connection()</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ws<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[SERVER] Received: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>message<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">What's your name?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[SERVER] error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>err<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws server started at port 3000...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>客户端（浏览器）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// client test:</span>\n\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost:3000/ws/chat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nws<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[CLIENT] open()</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nws<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[CLIENT] Received: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>message<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Goodbye!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ws<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, I'm Mr No.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>count<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\nWebSocket 协议本身不要求同源策略（Same-Origin Policy)，也就是某个地址为 <code>http://a.com</code>的网页可以通过 WebSocket连接到<code>ws://b.com</code>。但是，浏览器会发送 Origin 的 HTTP 头给服务器，服务器可以根据 Origin 拒绝这个 WebSocket 请求。所以，是否要求同源要看服务器端如何检查。</li>\n</ul>\n<h1 id=\"MySQL基本操作\"><a href=\"#MySQL基本操作\" class=\"headerlink\" title=\"MySQL基本操作\"></a>MySQL基本操作</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 显示已有的数据库</span>\nshow databases<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 创建数据库</span>\nCREATE DATABASES data_name<span class=\"token punctuation\">;</span> <span class=\"token comment\"># nodejs_book</span>\n\n<span class=\"token comment\"># 使用数据库</span>\nuse data_name<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 建表</span>\nmysql<span class=\"token operator\">></span> CREATE TABLE t_user <span class=\"token punctuation\">(</span> user_id BIGINT NOT NULL, username VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 查看表</span>\nshow TABLES<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 显示表的结构</span>\nmysql<span class=\"token operator\">></span> DESCRIBE t_user<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 往表中加入记录</span>\nmysql<span class=\"token operator\">></span> insert into t_user values<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">'yolo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"使用node-js操作mysql\"><a href=\"#使用node-js操作mysql\" class=\"headerlink\" title=\"使用node.js操作mysql\"></a>使用node.js操作mysql</h2><p>使用mysql或者mysql2模块</p>\n<h2 id=\"实现简单的查询\"><a href=\"#实现简单的查询\" class=\"headerlink\" title=\"实现简单的查询\"></a>实现简单的查询</h2><ul>\n<li>mysql.createConnection()用于创建一个连接;</li>\n<li>connection.connect()方法用于建立连接; </li>\n<li>connection.query()方法用于执行查询，第一个参数就是待执行的SQL语句; </li>\n<li>connection.end()用于关闭连接。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 连接信息</span>\n<span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">database</span><span class=\"token operator\">:</span> <span class=\"token string\">'nodejs_book'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 建立连接</span>\n<span class=\"token comment\">/// connection.connect();</span>\n\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error connecting: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connected as id '</span> <span class=\"token operator\">+</span> connection<span class=\"token punctuation\">.</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 执行查询</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM t_user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 打印查询结果</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 关闭连接</span>\n<span class=\"token comment\">///connection.end();</span>\n<span class=\"token comment\">///connection.destroy();</span>\n\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error end: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end connection'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"mysql模块连接选项\"><a href=\"#mysql模块连接选项\" class=\"headerlink\" title=\"mysql模块连接选项\"></a>mysql模块连接选项</h3><table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">host</td>\n<td align=\"center\">主机地址,默认是localhost</td>\n</tr>\n<tr>\n<td align=\"center\">user</td>\n<td align=\"center\">用户名</td>\n</tr>\n<tr>\n<td align=\"center\">password</td>\n<td align=\"center\">密码</td>\n</tr>\n<tr>\n<td align=\"center\">port</td>\n<td align=\"center\">端口号，默认是3306</td>\n</tr>\n<tr>\n<td align=\"center\">database</td>\n<td align=\"center\">数据库名</td>\n</tr>\n<tr>\n<td align=\"center\">charset</td>\n<td align=\"center\">连接字符集（默认:<code>&#39;UTF8_GENERAL_CI&#39;</code>，注意字符集的字母都要大写)</td>\n</tr>\n<tr>\n<td align=\"center\">localA ddress</td>\n<td align=\"center\">此IP用于TCP连接（可选)</td>\n</tr>\n<tr>\n<td align=\"center\">socketPath</td>\n<td align=\"center\">连接到unix域路径，当使用host和port时会被忽略</td>\n</tr>\n<tr>\n<td align=\"center\">timezone</td>\n<td align=\"center\">时区，默认是<code>&#39;local&#39;</code></td>\n</tr>\n<tr>\n<td align=\"center\">connectTimeout</td>\n<td align=\"center\">连接超时，单位为毫秒。默认为不限制</td>\n</tr>\n<tr>\n<td align=\"center\">stringifyObjects</td>\n<td align=\"center\">是否序列化对象</td>\n</tr>\n<tr>\n<td align=\"center\">typeCast</td>\n<td align=\"center\">是否将列值转换为本地JavaScript类型值。默认为true</td>\n</tr>\n<tr>\n<td align=\"center\">queryFormat</td>\n<td align=\"center\">自定义query语句格式化方法</td>\n</tr>\n<tr>\n<td align=\"center\">supportBigNumbers</td>\n<td align=\"center\">数据库支持bigint或decimal类型列时，需要设此option为true。默认为false</td>\n</tr>\n<tr>\n<td align=\"center\">bigNumberStrings</td>\n<td align=\"center\">supportBigNumbers和bigNumberStrings启用，强制bigint或decimal列以JavaScript字符串类型返回。默认为false</td>\n</tr>\n<tr>\n<td align=\"center\">dateStrings</td>\n<td align=\"center\">强制timestamp、datetime、data类型以字符串类型返回，而不是JavaScript Date类型。默认为false</td>\n</tr>\n<tr>\n<td align=\"center\">debug</td>\n<td align=\"center\">开启调试。默认为false</td>\n</tr>\n<tr>\n<td align=\"center\">multipleStatements</td>\n<td align=\"center\">是否允许一个query中有多个MySQL语句。默认为false</td>\n</tr>\n<tr>\n<td align=\"center\">flags</td>\n<td align=\"center\">用于修改连接标志</td>\n</tr>\n<tr>\n<td align=\"center\">ssl</td>\n<td align=\"center\">使用ssl参数或一个包含ssl配置文件名称的字符串</td>\n</tr>\n</tbody></table>\n<h3 id=\"mysql模块CRUD\"><a href=\"#mysql模块CRUD\" class=\"headerlink\" title=\"mysql模块CRUD\"></a>mysql模块CRUD</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 执行查询</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM t_user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 打印查询结果</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 插入数据 </span>\n<span class=\"token comment\">// 其中，在SQL语句中，通过“?”占位符的方式将参数对象data进行传入。</span>\n<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">user_id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'waylau'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INTO t_user SET ?'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 打印查询结果</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 更新数据</span>\n<span class=\"token comment\">// 通过“?\"占位符的方式将参数对象进行传入。所不同的是，参数对象是一个数组。</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UPDATE t_user SET username = ? WHERE user_id = ?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Way Lau'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 打印查询结果</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UPDATE result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 执行查询</span>\n<span class=\"token comment\">// 同样也是通过“?占位符的方式将参数对象进行传入。所不同的是，参数对象是一个数值（用户ID)。</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM t_user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 打印查询结果</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"mysql连接池\"><a href=\"#mysql连接池\" class=\"headerlink\" title=\"mysql连接池\"></a>mysql连接池</h2><p>建议将连接池的pool.getConnection封装一下，实现复用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//用于req.</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 连接信息.</span>\n<span class=\"token comment\">// 使用连接池</span>\n<span class=\"token keyword\">const</span> pool <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">createPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">connectionLimit</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 连接数限制</span>\n    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">database</span><span class=\"token operator\">:</span> <span class=\"token string\">'nodejs_book'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 获取所有用户列表API</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 获取连接</span>\n    pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> connection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 从请求参数中获取用户ID</span>\n        <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User name is: '</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 执行查询</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM t_user'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 错误处理</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n\n                    <span class=\"token comment\">// 打印执行结果</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// 释放连接</span>\n                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// 转为JSON返回</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 执行查询</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM t_user where username = ?'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 错误处理</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n\n                    <span class=\"token comment\">// 打印查询结果</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// 释放连接</span>\n                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// 转为JSON返回</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 获取指定ID的用户API</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\n    <span class=\"token comment\">// 获取连接</span>\n    pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> connection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 从请求参数中获取用户ID</span>\n        <span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User id is: '</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 执行查询</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM t_user where user_id = ?'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 错误处理</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token comment\">// 打印执行结果</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 释放连接</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 取第一个，转为JSON返回</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 创建用户信息API</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 获取连接</span>\n    pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> connection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 从请求参数中获取用户信息</span>\n        <span class=\"token keyword\">let</span> username <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User is: '</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 执行查询</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INTO t_user (username) VALUES (?)'</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 错误处理</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token comment\">// 打印执行结果</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 释放连接</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 转为JSON返回</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 更新用户信息API</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取连接</span>\n    pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> connection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 从请求参数中获取用户信息</span>\n        <span class=\"token keyword\">let</span> user_id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> username <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User id is: '</span><span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User name is: '</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 执行查询</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UPDATE t_user SET username = ? WHERE user_id = ? '</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 错误处理</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token comment\">// 打印执行结果</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 释放连接</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 转为JSON返回</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 删除指定ID的用户API</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 获取连接</span>\n    pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> connection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 从请求参数中获取用户ID</span>\n        <span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User id is: '</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 执行查询</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DELETE FROM t_user WHERE user_id = ? '</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 错误处理</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token comment\">// 打印执行结果</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 释放连接</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 转为JSON返回</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server listening on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>port<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><p>Redis是一个高性能的key-vale缓存数据库</p>\n<p>Redis支持主从同步，可以从主服务器向任意数量的从服务器上同步数据，从服务器可以是关联其他从服务器的主服务器。这使得 Redis可执行单层树复制，存盘可以有意无意地对数据进行写操作。由于完全实现了发布&#x2F;订阅机制，使得从数据库在任何地方进行数据同步时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。</p>\n<p>Redis不仅仅是简单的key-value存储，更是一个data strutures server（数据结构服务器)，用来支持不同的数值类型。在key-value中，value不仅仅局限于string类型，它可以是更复杂的数据结构。</p>\n<ul>\n<li><p>二进制安全的string。</p>\n</li>\n<li><p>List: 一个链表，链表中的元素按照插入顺序排列。</p>\n</li>\n<li><p>Set: string 集合，集合中的元素是唯一的，没有排序。</p>\n</li>\n<li><p>Sorted set: 与Set类似，但是每一个string 元素关联一个浮点数值，这个数值被称为Score。元素总是通过它们的Score进行排序，所以不像Set那样可以获取一段范围的元素（例如，获取前10个，或者后10个)。</p>\n</li>\n<li><p>Hash: 指由关联值字段构成的 Map。字段和值都是string。</p>\n</li>\n<li><p>Bit array（或者简单称为Bitmap): 像位数值一样通过特别的命令处理字符串，可以设置和清除单独的bit，统计所有bit集合中为1的数量，查找第一个设置或没有设置的bit等。</p>\n</li>\n<li><p>HyperLogLogs: 这是一个概率统计用的数据结构，可以用来估计一个集合的基数。对于所有的例子，我们都使用redis-cli工具来演示。这是一个简单但非常有用的命令行工具，可以用来给Redis Server 发送命令。</p>\n</li>\n</ul>\n<h2 id=\"Redis超时\"><a href=\"#Redis超时\" class=\"headerlink\" title=\"Redis超时\"></a>Redis超时</h2><p>Redis超时是 Redis的一个特性之一，这个特性可以用在任何一种值类型中。可以给一个key设置一个超时时间，这个超时时间就是有限的生存时间。当生存时间过去，这个key就会自动被销毁。</p>\n<ul>\n<li>在设置超时时间时，可以使用秒或毫秒。</li>\n<li>超时时间一般总是1ms。</li>\n<li>超时信息会被复制，并持久化到磁盘中。当Redis服务器停止时(这意味着Redis将保存key 的超时时间)。</li>\n</ul>\n<h2 id=\"node-js操作redis\"><a href=\"#node-js操作redis\" class=\"headerlink\" title=\"node.js操作redis\"></a>node.js操作redis</h2><p>使用redis模块操作redis</p>\n<ul>\n<li>redis.createClient()用于创建客户端。</li>\n<li>client.set()方法设置单个值。</li>\n<li>client.hset()方法用于设置多个字段。</li>\n<li>client.hkeys()方法用于返回所有的字段。</li>\n<li>client.get()和client.hgetall()方法都用于获取key 所对应的值。</li>\n<li>client.quit()用于关闭连接。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> redis <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建客户端</span>\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">createClient</span><span class=\"token punctuation\">(</span><span class=\"token number\">6379</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 如果没有密码，则不需要这一步</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token number\">123456</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// </span>\n\n<span class=\"token comment\">// 错误处理</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 设值</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"this is a value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 把存储对象改成JSON对象 程序将会报错，因为Redis 中存储的是字符串对象</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">user_name</span><span class=\"token operator\">:</span> <span class=\"token string\">'yolo'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 重写toString 即可方法:</span>\n    <span class=\"token comment\">// object.prototype.tostring = function ()&#123;</span>\n    <span class=\"token comment\">//     return JSON.stringify(this);</span>\n    <span class=\"token comment\">// &#125;;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 设值</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"书名\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"《Node.js企业级应用开发实战》\"</span><span class=\"token punctuation\">,</span> redis<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 同个key不同的字段</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳伟卫的Spring三剑客\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"第一剑\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"《Spring Boot 企业级应用开发实战》\"</span><span class=\"token punctuation\">,</span> redis<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳伟卫的Spring三剑客\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"第二剑\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"《Spring Cloud 微服务架构开发实战》\"</span><span class=\"token punctuation\">,</span> redis<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"柳伟卫的Spring三剑客\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"第三剑\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"《Spring 5 开发大全》\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> redis<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 返回所有的字段</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">hkeys</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳伟卫的Spring三剑客\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> replies</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳伟卫的Spring三剑客共\"</span> <span class=\"token operator\">+</span> replies<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token string\">\"本:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 遍历所有的字段</span>\n    replies<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reply<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 获取key所对应的值</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"书名\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> reply</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 获取key所对应的值</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">hgetall</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳伟卫的Spring三剑客\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> reply</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// 退出</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 清除数据</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><ul>\n<li>使用<code>process.on(&#39;uncaughtException&#39;, function(err)&#123;&#125;)</code>就不会造成接口崩溃了，可惜的是，很多应用在开发时都没有做这样的基本处理，因此都出现了问题，捕获那些咱没有 try-catch 的异常错误。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 相对于异常来说，内存泄漏也是一个不能忽视的严重问题，而process.on('uncaughtException')的做法很难保证不造成内存的泄漏。</span>\n<span class=\"token comment\">// 所以当捕获到异常时，显式地手动杀掉进程并重启Node进程，既可以保证释放内存，又保证了服务后续的正常可用。</span>\nprocess<span class=\"token punctuation\">.</span><span class=\"token function\">on</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'uncaughtException'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'process error is:'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">restartServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//重启服务</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>try&#x2F;catch&#x2F;finally，当我们去读取文件遇到异常时，抛出的异常会被try&#x2F;catch捕获，当前的线程就不会英文异常而意外结束了。</li>\n<li>async&#x2F;await和promise是无法捕获异步代码的异常的，如下例子，无法捕获setTimeout异步代码里的异常<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span> \n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 一些逻辑代码</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'能进来说明可以处理异常信息了'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>nodejs里约定，同步的代码才能捕获异常，异步的代码不能直接使用try、catch</li>\n</ol>\n<ul>\n<li>先看同步代码可以捕获的异常<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">testFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'能进来，说明异常能处理'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>异步代码无法捕获异常<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">testFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'能进来，说明异常能处理'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"进程崩溃时重启\"><a href=\"#进程崩溃时重启\" class=\"headerlink\" title=\"进程崩溃时重启\"></a>进程崩溃时重启</h2><p>进程因异常退出是很常见的事，当遇到崩溃退出的时候，重启就可以了。负责进程崩溃应用自动重启的模块有：</p>\n<ul>\n<li>forever模块，forever处理crash事件，再开启新的node进程（很少用了，基本都用pm2模块）</li>\n<li>pm2模块，支持所有的forever的功能，功能强大，比如0秒切换。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i pm2 -g\npm2 start app.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"大集群：多台机器\"><a href=\"#大集群：多台机器\" class=\"headerlink\" title=\"大集群：多台机器\"></a>大集群：多台机器</h2><p>为了应对大流量，需要多台机器进行集群处理，因此可以通过负载均衡策略将流量分发到各个机器上，通过消除单点故障提升应用系统的可用性。常见的集群处理方式是使用Nginx或HAProxy。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://juejin.cn/post/7008504029277847565\">Node.js的底层原理</a></li>\n<li><a href=\"https://juejin.cn/post/7081891057918558221\">Node.js 技术架构</a></li>\n<li><a href=\"https://juejin.cn/post/7045057475845816357\">.env 文件原理</a></li>\n<li><a href=\"https://juejin.cn/post/6844903592554397710\">Node.js子进程</a></li>\n<li><a href=\"https://juejin.cn/post/6844903678227251213\">NodeJS中的事件（EventEmitter</a></li>\n<li><a href=\"https://www.bookstack.cn/read/Nodejs-Roadmap/nodejs-base-what-is-nodejs.md\">书栈网node.js教程</a></li>\n<li>《Node.js12 实战》</li>\n<li>《Node.js 企业级应用开发实战》</li>\n<li>《狼叔卷1》</li>\n<li>《狼叔卷2》</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>Node 是一个基于谷歌V8引擎的一个JavaScript运行环境（runtime运行时），是服务端的运行环境。</li>\n<li>Node 的特点是事件驱动、非阻塞式 I&#x2F;O（input&#x2F;output）、单线程。触发一次事件，执行回调，是事件驱动的一种体现。</li>\n</ul>\n<h1 id=\"Node的使用场景\"><a href=\"#Node的使用场景\" class=\"headerlink\" title=\"Node的使用场景\"></a>Node的使用场景</h1><ul>\n<li>I&#x2F;O 密集型场景</li>\n<li>提供http接口，组装数据</li>\n<li>RPC服务，RPC（Remote Procedure Call远程过程调用），RPC服务也是采用的TCP，出名的RPC服务有Google的gRPC、阿里的Dubble</li>\n<li>基础工具：构建工具（webpack、vite）、搭建脚手架（cra、vue-cli、umi）等</li>\n<li>BFF：接口聚合、转发</li>\n<li>Serverless（无服务器架构）：函数即服务，写一个函数就可以实现一个 API 接口给到前端</li>\n<li>Microservices（微服务）：小型服务、以独立进程运行、可以使用不同语言</li>\n</ul>\n<h1 id=\"Node-js-架构（node底层原理）\"><a href=\"#Node-js-架构（node底层原理）\" class=\"headerlink\" title=\"Node.js 架构（node底层原理）\"></a>Node.js 架构（node底层原理）</h1><ol>\n<li>Node.js内置模块（标准库）： http、fs、buffer、path、stream。</li>\n<li>Node bindings（桥梁）：是JavaScript与 C++ 连接的桥梁，对底层模块进行封装，为内置模块的提供 API 接口。</li>\n<li>Node底层模块</li>\n</ol>\n<ul>\n<li>V8：Google开源的高性能JavaScript引擎，使用 C++ 开发，并且应用于谷歌浏览器</li>\n<li>Libuv：提供Event Loop 事件循环和线程池，提供事件驱动的 I&#x2F;O 库。它是使用 C 和 C++ 语言为 Node.js 所开发的，同时也是 I&#x2F;O 操作的核心部分，例如读取文件和 OS 交互（几乎所有和操作系统打交道的部分离不开libuv的支持）</li>\n<li>C-ares（异步 DNS 解析库）</li>\n<li>Low-Level Components：提供了http 解析、OpenSSL、数据压缩（zlib）等功能。</li>\n</ul>\n<h1 id=\"Node-EventLoop（事件循环）\"><a href=\"#Node-EventLoop（事件循环）\" class=\"headerlink\" title=\"Node EventLoop（事件循环）\"></a>Node EventLoop（事件循环）</h1><p>node中的事件循环的顺序：<br>外部输入数据(incoming) –&gt; 轮询阶段(poll) –&gt; 检查阶段(check)–&gt; 关闭事件回调阶段(close callbacks) –&gt; 定时器检测阶段(timers) –&gt; I&#x2F;O事件回调阶段(I&#x2F;O callbacks) –&gt; 闲置阶段(idle, prepare) –&gt; 轮询阶段(按照该顺序反复运行)</p>\n<p>每个阶段都有一个先入先出的队列，这个队列存有要执行的回调函数</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">   ┌───────────────────────────┐\n┌─<span class=\"token operator\">></span>│           timers          │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │     <span class=\"token constant\">I</span><span class=\"token operator\">/</span><span class=\"token constant\">O</span> callbacks         │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n│  │       idle<span class=\"token punctuation\">,</span> prepare       │\n│  └─────────────┬─────────────┘      ┌───────────────┐\n│  ┌─────────────┴─────────────┐      │   incoming<span class=\"token operator\">:</span>   │\n│  │           poll            │<span class=\"token operator\">&lt;</span>─────┤  connections<span class=\"token punctuation\">,</span> │\n│  └─────────────┬─────────────┘      │   data<span class=\"token punctuation\">,</span> etc<span class=\"token punctuation\">.</span>  │\n│  ┌─────────────┴─────────────┐      └───────────────┘\n│  │           check           │\n│  └─────────────┬─────────────┘\n│  ┌─────────────┴─────────────┐\n└──┤      close callbacks      │\n   └───────────────────────────┘<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Node事件循环各阶段概述\"><a href=\"#Node事件循环各阶段概述\" class=\"headerlink\" title=\"Node事件循环各阶段概述\"></a>Node事件循环各阶段概述</h2><p>绝大部分异步任务都是在timers、poll、check这3个阶段处理的。</p>\n<ol>\n<li>timers 这个阶段执行 setTimeout() 和 setInterval() 的回调，并且是由 poll 阶段控制的。 在 Node 中定时器指定的时间也不是准确时间，只能是尽快执行，如果操作系统很忙，那么计时器的回调函数就会被推迟执行</li>\n<li>I&#x2F;O callbacks 处理一些上一轮循环中的少数未执行的 I&#x2F;O 回调（执行一些系统操作的回调函数）</li>\n<li>闲置阶段：idle（空闲），prepare 仅在内部使用。</li>\n<li>poll（轮询阶段）：处理大部分的事件，如看看有没有文件可以读，有没有请求可以处理，检查一下最近的计时器，看看有没有需要过会儿去执行的 callback。poll 是一个至关重要的阶段，这一阶段中，系统会做两件事情</li>\n</ol>\n<ul>\n<li>回到 timer 阶段执行回调</li>\n<li>执行 I&#x2F;O 回调</li>\n</ul>\n<p>并且在进入该阶段时如果没有设定了 timer 的话，会发生以下两件事情</p>\n<ul>\n<li><p>如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制</p>\n</li>\n<li><p>如果 poll 队列为空时，会有两件事发生</p>\n<ul>\n<li>如果有 setImmediate 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调</li>\n<li>如果没有 setImmediate 回调需要执行，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间设置防止一直等待下去</li>\n</ul>\n</li>\n</ul>\n<ol start=\"5\">\n<li>check（检查） 执行 setImmediate() 的回调</li>\n<li>close callbacks 执行 socket 的 close 事件回调，例如：<code>socket.on(&#39;close&#39;, ...)</code>，如果队列是空的，则跳过</li>\n</ol>\n<p>Node 不会一直循环循环，如果发现没什么事儿做，就会停留在 poll（轮询）阶段，大部分事件都在 poll 阶段被处理，如文件、网络请求等</p>\n<h1 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h1><ol>\n<li>进程</li>\n</ol>\n<ul>\n<li>进程可以说是计算机系统进行资源分配和调度的基本单位，启动一个服务、运行一个应用，就是开一个进程，进程是线程的容器。</li>\n<li>例如 Java 里的 JVM 本身就是一个进程，Node.js 里通过 node app.js 开启一个服务进程。在任务管理器查看任务进程，Nodejs JavaScript Runtime<img src=\"/images/front_end/nodejs-runtime001.png\" ></li>\n<li>一个进程无法访问另外一个进程里定义的变量、数据结构，只有建立了 IPC 通信，进程之间才可数据共享。</li>\n<li>同一块代码，可以根据系统CPU核心数启动多个进程，每个进程都有属于自己的独立运行空间，进程之间是不相互影响的。</li>\n</ul>\n<ol start=\"2\">\n<li>线程</li>\n</ol>\n<ul>\n<li>线程是属于进程的，进程可以调用线程去执行一些子任务，一个进程是可以拥有多个线程的。</li>\n<li>同一进程中的多条线程可以共享该进程中的全部系统资源。</li>\n<li>同一进程中的多个线程有各自的调用栈（call stack），本地存储（thread-local storage)等。</li>\n<li>线程可以分为单线程（JavaScript）和多线程（Java）。</li>\n</ul>\n<ol start=\"3\">\n<li>单线程</li>\n</ol>\n<ul>\n<li>单线程就是一个进程只开一个线程，Javascript 就是属于单线程，程序顺序执行，前面一个执行完之后，后面才可以执行。</li>\n<li>在使用单线程编码时不要有过多耗时的同步操作，否则线程会造成阻塞，导致后续响应无法处理，适当地使用异步操作。</li>\n</ul>\n<ol start=\"4\">\n<li>多线程</li>\n</ol>\n<ul>\n<li>多线程就是，一个进程可以开启多线程，Java 就是多线程编程语言的一种，可以有效避免代码阻塞导致的后续请求无法处理。</li>\n<li>多线程创建新的线程来切换开销，由于每创建一个线程就会占用一定的内存，当应用程序并发大了之后，内存将会很快耗尽。</li>\n</ul>\n<h1 id=\"Node模块机制\"><a href=\"#Node模块机制\" class=\"headerlink\" title=\"Node模块机制\"></a>Node模块机制</h1><ol>\n<li>Node.js 模块采用Commonjs规范，Node.js的系统模块采用了延迟加载的策略，只有在用到的情况下，系统模块才会被加载，加载完成后会放到 binding_cache缓存中。</li>\n<li>在 Node.js 中模块加载一般会经历 3 个步骤，路径分析、文件定位、编译执行。按照模块的分类，按照以下顺序进行优先加载：</li>\n</ol>\n<ul>\n<li>如果有 <code>./</code>从当前目录查找，相对路径文件模块</li>\n<li>如果没有 <code>./</code>，先从系统模块，再从node_modules下查找 （<a href=\"https://blog.csdn.net/gongch0604/article/details/111748684\">nodejs模块系统</a>）</li>\n<li>系统缓存：模块被执行之后会进行缓存，首先是先进行缓存加载，判断缓存中是否有值（require.cache查看已缓存的模块，返回值为对象）。因为 Node.js 默认先从缓存中加载模块，一个模块被加载一次之后，就会在缓存中维持一个副本，如果遇到重复加载的模块会直接提取缓存中的副本，也就是说在任何时候每个模块都只在缓存中有一个实例。</li>\n<li>系统模块：也就是原生模块，这个优先级仅次于缓存加载，部分核心模块已经被编译成二进制，省略了 路径分析、文件定位，直接加载到了内存中，系统模块定义在 Node.js 源码的 lib 目录下，可以去查看。</li>\n<li>文件模块（开发者自己编写的模块）：优先加载 <code>.</code>、<code>..</code>、<code>/</code> 开头的，如果文件没有加上扩展名，会依次按照 <code>.js</code>、<code>.json</code>、<code>.node</code> 进行扩展名补足尝试，那么在尝试的过程中也是以同步阻塞模式来判断文件是否存在，从性能优化的角度来看待，<code>.json</code>、<code>.node</code>最好还是加上文件的扩展名。</li>\n<li>目录做为模块：这种情况发生在文件模块加载过程中，也没有找到，但是发现是一个目录的情况，这个时候会将这个目录当作一个包来处理，Node 这块采用了 Commonjs 规范，先会在项目根目录查找 package.json 文件，取出文件中定义的 main 属性 <code>(&quot;main&quot;: &quot;lib/index.js&quot;)</code> 描述的入口文件进行加载，也没加载到，则会抛出默认错误: <code>Error: Cannot find module &#39;lib/index.js&#39;</code></li>\n<li>node_modules 目录加载：对于系统模块、路径文件模块都找不到，Node.js 会从当前模块的父目录进行查找，直到系统的根目录</li>\n</ul>\n<h1 id=\"Node常用模块\"><a href=\"#Node常用模块\" class=\"headerlink\" title=\"Node常用模块\"></a>Node常用模块</h1><table>\n<thead>\n<tr>\n<th align=\"center\">模块名称</th>\n<th align=\"center\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">buffer</td>\n<td align=\"center\">实现数据缓冲区，Buffer一般用于处理二进制数据，也可以处理字符编码</td>\n</tr>\n<tr>\n<td align=\"center\">child_process</td>\n<td align=\"center\">（实现多进程任务）创建子进程，实现子进程和主进程之间的通信</td>\n</tr>\n<tr>\n<td align=\"center\">cluster</td>\n<td align=\"center\">可以简化<code>多进程</code>、<code>并行化</code>程序的开发难度，利用多核CPU 实现并行，轻松构建一个用于负载均衡的集群。著名的pm2模块就使用了cluster实现</td>\n</tr>\n<tr>\n<td align=\"center\">console</td>\n<td align=\"center\">和浏览里的用法一样，比如console.log、console.dir等</td>\n</tr>\n<tr>\n<td align=\"center\">crypto</td>\n<td align=\"center\">对OpenSSL里的 HMAC、Cipher、Decipher等算法进行加解密封装，一般用户在进行密码处理时都会用到该模块</td>\n</tr>\n<tr>\n<td align=\"center\">dns</td>\n<td align=\"center\">域名解析，主要API是 lookup和 resolve</td>\n</tr>\n<tr>\n<td align=\"center\">events</td>\n<td align=\"center\">事件处理，EventEmitter的核心功能就是对事件触发和事件监听器功能进行封装</td>\n</tr>\n<tr>\n<td align=\"center\">fs</td>\n<td align=\"center\">文件系统模块，主要针对目录、文件进行操作，开发中使用极其广泛</td>\n</tr>\n<tr>\n<td align=\"center\">http</td>\n<td align=\"center\">Node.js里使用多的模块，可以非常构建Web应用服务，搭建HTTP服务端和客户端，是Web框架的底层核心库</td>\n</tr>\n<tr>\n<td align=\"center\">http2</td>\n<td align=\"center\">下一代HTTP协议，在Node.js 8里是需要通过flag开启的体验功能</td>\n</tr>\n<tr>\n<td align=\"center\">https</td>\n<td align=\"center\">HTTPS实现，是HTTP的安全加强版</td>\n</tr>\n</tbody></table>\n<h2 id=\"process全局对象\"><a href=\"#process全局对象\" class=\"headerlink\" title=\"process全局对象\"></a>process全局对象</h2><p>Node.js 中的进程 process 是一个全局对象，无需 require 直接使用（global.process &#x3D; process），process对象是EventEmitter的实例</p>\n<ul>\n<li>process.title：终端上显示的标题</li>\n<li>process.version：nodejs的版本号</li>\n<li>process.versions：nodejs依赖模块的版本信息</li>\n<li>process.env：环境变量，例如通过 <code>process.env.NODE_ENV</code> 获取不同环境项目配置信息，还可以往<code>process.env</code>上挂载其他常量。</li>\n<li>process.nextTick：表示在事件循环（EventLoop）的下一次循环中调用 callback 回调函数，要注意的是它总会在I&#x2F;O操作（比如查询数据）之前先执行</li>\n<li>process.pid：获取当前进程id</li>\n<li>process.ppid：当前进程对应的父进程</li>\n<li>process.cwd()：获取当前进程工作目录</li>\n<li>process.argv: 返回当前命令行指令参数，是一个数组，<code>process.argv[2]</code></li>\n<li>process.execPath：获取当前进程的这个可执行文件的绝对路径</li>\n<li>process.exit([code])：终止当前进程并返回给定的 code，默认是0</li>\n<li>process.exitCode：可以自定义退出进程时node shell捕获到的状态码（可以自定义退出进程时node shell捕获到的状态码）</li>\n<li>process.chdir(directory)：改变进程的当前进程的工作目录（该目录必须已存在），若操作失败则抛出异常</li>\n<li>process.platform：获取当前进程运行的操作系统平台</li>\n<li>process.uptime()：当前进程已运行时间，例如：pm2 守护进程的 uptime 值</li>\n<li>process.moduleLoadList：当前进程已加载的模块列表，nodejs模块系统。NativeModule原生模块</li>\n<li>process.config：当前nodejs构建时使用的配置信息，可以辅助定位</li>\n<li><code>process.on(&#39;exit&#39;, callback)</code>：当进程将要退出时触发。 ‘exit’的回调结束后，主进程将不再运行</li>\n<li><code>process.on(&#39;SIGINT&#39;, callback)</code>：捕获当前进程接收到的信号</li>\n<li>process.abort()：触发node的abort事件，退出当前进程，执行该函数后，后面的代码不执行。</li>\n<li><code>process.kill(pid, [signal])</code>：结束对应某pid的进程并发送一个信号</li>\n<li>进程事件：<code>process.on(&#39;uncaughtException&#39;, cb)</code> 捕获异常信息、<code>process.on(&#39;exit&#39;, cb)</code>进程推出监听</li>\n<li>三个标准流：process.stdout 标准输出、process.stdin 标准输入、process.stderr 标准错误输出</li>\n</ul>\n<h3 id=\"process-env\"><a href=\"#process-env\" class=\"headerlink\" title=\"process.env\"></a>process.env</h3><p>process.env属性返回一个包含用户环境信息的对象。在node环境中，当我们打印process.env时，发现它并没有NODE_ENV这一个属性。实际上，process.env.NODE_ENV是在package.json的scripts命令中注入的，也就是NODE_ENV并不是node自带的，而是由用户定义的，至于为什么叫NODE_ENV，应该是约定成俗的吧。</p>\n<h2 id=\"child-process（创建子进程）\"><a href=\"#child-process（创建子进程）\" class=\"headerlink\" title=\"child_process（创建子进程）\"></a>child_process（创建子进程）</h2><p>Node.js 提供了 child_process 内置模块，用于创建子进程</p>\n<ul>\n<li>child_process.spawn()：适用于返回大量数据，例如图像处理，二进制数据处理。</li>\n<li>child_process.exec()：适用于小量数据，maxBuffer 默认值为 200 * 1024 超出这个默认值将会导致程序崩溃，数据量过大可采用 spawn。</li>\n<li>child_process.execFile()：类似 child_process.exec()，区别是不能通过 shell 来执行，不支持像 I&#x2F;O 重定向和文件查找这样的行为</li>\n<li>child_process.fork()：衍生新的进程，进程之间是相互独立的，每个进程都有自己的 V8 实例、内存，系统资源是有限的，不建议衍生太多的子进程出来，通长根据系统 CPU 核心数设置。</li>\n</ul>\n<h2 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h2><p>主要作用就是处理文件的目录和路径，在前端项目webpack配置文件中经常用到。</p>\n<h3 id=\"path-join\"><a href=\"#path-join\" class=\"headerlink\" title=\"path.join()\"></a>path.join()</h3><p>拼接多个路径片段，还原成完整可用路径</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a/b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a/b/c/index.html</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/a/b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// /a/b/c/index.html</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a/b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'../'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// a/b/index.html</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"path-resove\"><a href=\"#path-resove\" class=\"headerlink\" title=\"path.resove()\"></a>path.resove()</h3><p>返回一个绝对路径</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">path<span class=\"token punctuation\">.</span><span class=\"token function\">resove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取绝对路径</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">resove</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"basename\"><a href=\"#basename\" class=\"headerlink\" title=\"basename()\"></a>basename()</h3><p>获取路径中基础名称</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>__filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test.js</span>\n<span class=\"token comment\">// 传入第二个参数如果匹配会省略后缀，不匹配仍旧返回真实的后缀</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>__filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// test</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/a/b/c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/a/b/c/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"path-extname\"><a href=\"#path-extname\" class=\"headerlink\" title=\"path.extname()\"></a>path.extname()</h3><p>获取路径中的扩展名称</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/src/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// .html</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"path-parse\"><a href=\"#path-parse\" class=\"headerlink\" title=\"path.parse()\"></a>path.parse()</h3><p>解析路径</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/src/index.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/**\n* root: /\n* dir: /src\n* base: index.html\n* ext: .html\n* name: index\n*/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"fs-读取文件\"><a href=\"#fs-读取文件\" class=\"headerlink\" title=\"fs(读取文件)\"></a>fs(读取文件)</h2><h2 id=\"events（事件模块）\"><a href=\"#events（事件模块）\" class=\"headerlink\" title=\"events（事件模块）\"></a>events（事件模块）</h2><ul>\n<li>在 Node.js 中一个很重要的模块 Events（EventEmitter 事件触发器），EventEmitter 本质上就是观察者模式的实现。net、http、fs、stream、process 等模块，express、koa 框架都依赖了Events。</li>\n<li>EventEmitter 对象的事件触发 emit 和监听 on 是同步的，事件的回调是异步的。</li>\n<li>在 Node.js 的事件机制中主要有三类角色: 事件(Event)、事件发射器(EventEmitter)、事件监听器(Event Listener)。</li>\n</ul>\n<h3 id=\"Event\"><a href=\"#Event\" class=\"headerlink\" title=\"Event\"></a>Event</h3><ul>\n<li><p>EventEmitter 提供了 <code>on()</code>、<code>once()</code>、<code>removeListener()</code> 等方法来对事件进行监听移除，可同时注册多个同名的事件。其中<code>once()</code>: 当触发多次相同名称事件，通过 once 添加的侦听器只会执行一次。</p>\n</li>\n<li><p>EventEmitter 会按照监听器注册的顺序<strong>同步</strong>地调用所有监听器，所以必须确保事件的排序正确。提前触发未监听的事件，不会报错，并且不会执行监听的回调函数。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 基本使用</span>\n<span class=\"token keyword\">const</span> EventEmitter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>EventEmitter<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> emitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nemitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"起床\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">早上 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>time<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 开始起床，新的一天加油！</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nemitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"起床\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6:00\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 在 Koa 中 new 一个 app 对象，通过 app.emit() 触发一个事件，实现在整个系统中进行传递。</span>\n<span class=\"token keyword\">const</span> Koa <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'koa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Koa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"koa\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"在 Koa 中使用 EventEmitter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"koa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 通过Object.setPrototypeOf() 来实现的继承</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">EventEmitter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyEmitter</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span>MyEmitter<span class=\"token punctuation\">,</span> EventEmitter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>默认情况下，如果为特定事件添加了超过 10 个监听器，则 EventEmitter 会打印一个警告。 但是，并不是所有的事件都要限制 10 个监听器。 <code>emitter.setMaxListeners()</code> 方法可以为指定的 EventEmitter 实例修改限制。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 操作最大事件监听个数</span>\n<span class=\"token comment\">// 设置同类型事件监听最大个数</span>\n<span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setMaxListeners</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 获取同类型事件监听最大个数</span>\n<span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getMaxListeners</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_count <span class=\"token operator\">||</span> EventEmitter<span class=\"token punctuation\">.</span>defaultMaxListeners<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"error事件\"><a href=\"#error事件\" class=\"headerlink\" title=\"error事件\"></a>error事件</h3><p>当EventEmitter 实例出错时，应该触发error事件。如果没有为error事件注册监听器，则当error事件触发时，会抛出错误、打印堆栈跟踪，并退出Node.js进程。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> EventEmitter <span class=\"token operator\">=</span> <span class=\"token function\">require</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyEmitter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EventEmitter</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> myEmitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyEmitter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 模拟触发error事件</span>\nmyEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'错误信息'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 抛出错误</span>\n\nmyEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Buffer（缓冲区）\"><a href=\"#Buffer（缓冲区）\" class=\"headerlink\" title=\"Buffer（缓冲区）\"></a>Buffer（缓冲区）</h2><ul>\n<li>Buffer 用于读取或操作二进制数据流，将数据缓冲起来，它是临时性的，对于流式数据，会采用缓冲区将数据临时存储起来。</li>\n<li>如用于操作网络协议、数据库、图片和文件I&#x2F;O 等一些需要大量二进制数据的场景，专门存放二进制数据的缓存区。</li>\n<li>Buffer 作为存在于全局对象上，使用时无需 require 引入模块即可使用。</li>\n<li>Buffer 在创建时大小已经被确定且是无法调整的，在内存分配这块 Buffer 是由 C++ 层面提供而不是 V8。</li>\n</ul>\n<h3 id=\"Buffer应用场景\"><a href=\"#Buffer应用场景\" class=\"headerlink\" title=\"Buffer应用场景\"></a>Buffer应用场景</h3><p>Buffer的应用场景有以下几种。</p>\n<ul>\n<li>在使用net或 http模块来接收网络数据时，可用 Buffer作为数据结构进行传输，即 data事件的参数。</li>\n<li>用于大文件的读取和写入。以前fs读取的内容是string，后来都改用Buffer，在大文件读取上，性能和内存有明显优势。</li>\n<li>用于字符转码、进制转换。Unicode 编码虽然能满足绝大部分场景，但有时候还是不够的，由于Node.js内置的转换编码并不支持GBK，因此如果要处理编码为GBK的文档，就需要iconv和 iconv-lite来补充一部分，string decoder模块提供了一个 API，用于把 Buffer对象解码成字符串，但会保留编码过的多字节UTF-8与UTF-16字符。</li>\n<li>用作数据结构，处理二进制数据，也可以处理字符编码。</li>\n</ul>\n<h2 id=\"Buffer与字符串的传输速度\"><a href=\"#Buffer与字符串的传输速度\" class=\"headerlink\" title=\"Buffer与字符串的传输速度\"></a>Buffer与字符串的传输速度</h2><p>buffer比string快。在 HTTP 传输中传输的是二进制数据，上面例子中的 &#x2F;string 接口直接返回的字符串，这时候 HTTP 在传输之前会先将字符串转换为 Buffer 类型，以二进制数据传输，通过流（Stream）的方式一点点返回到客户端。但是直接返回 Buffer 类型，则少了每次的转换操作，对于性能也是有提升的。在一些 Web 应用中，对于静态数据可以预先转为 Buffer 进行传输，可以有效减少 CPU 的重复使用（重复的字符串转 Buffer 操作）。</p>\n<h2 id=\"buffer模块与Buffer的关系\"><a href=\"#buffer模块与Buffer的关系\" class=\"headerlink\" title=\"buffer模块与Buffer的关系\"></a>buffer模块与Buffer的关系</h2><p>Buffer是全局global上的一个引用，指向的其实是buffer.Buffer</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'buffer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span>Buffer <span class=\"token operator\">===</span> Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"创建Buffer\"><a href=\"#创建Buffer\" class=\"headerlink\" title=\"创建Buffer\"></a>创建Buffer</h3><ul>\n<li>Buffer.from()，第一个参数是内容，第二个是按什么格式转。Buffer.from不支持传入数字，传入数字可以采用传入数组的，存入的一组数据最好是：全部落在0到255区间  或者全部落在-128到127，这是因为不同的数字读取时应该调用不同的方法。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">1234</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throw new errors.TypeError</span>\n\n<span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//  &lt;Buffer 01 02 03 04>  显示的是16进制的</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>Buffer.alloc()，第一个参数是长度，第二个具体buffer内容<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> b2 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 创建一个大小为 10 个字节的缓冲区</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;Buffer 00 00 00 00 00 00 00 00 00 00></span>\n\n<span class=\"token comment\">// 尝试分配一个大小为 2048 的 Buffer 对象</span>\nBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 打印buffer，将每个字符串对应的ASCII码的十进制，转化为16进制的，比如 H</span>\n<span class=\"token string\">'H'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// ASCII码：'72'</span>\n<span class=\"token string\">'H'</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '72'的16进制 '48'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"Buffer-字符编码\"><a href=\"#Buffer-字符编码\" class=\"headerlink\" title=\"Buffer 字符编码\"></a>Buffer 字符编码</h4><p>通过使用字符编码，可实现 Buffer 实例与 JavaScript 字符串之间的相互转换。如果不传递 encoding 默认按照 UTF-8 格式转换存储</p>\n<ul>\n<li><code>&#39;ascii&#39;</code>仅适用于 7 位 ASCII 数据，此编码速度很快，如果设置则会剥离高位。</li>\n<li><code>&#39;utf8&#39;</code>多字节编码的 Unicode 字符，许多网页和其他文档格式都使用 UTF-8。</li>\n<li><code>&#39;base64&#39;</code>Base64 编码。。</li>\n<li><code>&#39;binary&#39;</code>一种将 Buffer 编码成单字节编码字符串的方法。</li>\n<li><code>&#39;hex&#39;</code>将每个字节编码成两个十六进制的字符。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 68656c6c6f20776f726c64</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello world</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"字符串与-Buffer-类型互转\"><a href=\"#字符串与-Buffer-类型互转\" class=\"headerlink\" title=\"字符串与 Buffer 类型互转\"></a>字符串与 Buffer 类型互转</h3><h4 id=\"字符串转-Buffer（将字符串数据写入缓冲区）\"><a href=\"#字符串转-Buffer（将字符串数据写入缓冲区）\" class=\"headerlink\" title=\"字符串转 Buffer（将字符串数据写入缓冲区）\"></a>字符串转 Buffer（将字符串数据写入缓冲区）</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> b3 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123456789'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &lt;Buffer 31 32 33 34 35 36 37 38 39></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 9</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"Buffer-转换为字符串（从缓冲区读取string数据）\"><a href=\"#Buffer-转换为字符串（从缓冲区读取string数据）\" class=\"headerlink\" title=\"Buffer 转换为字符串（从缓冲区读取string数据）\"></a>Buffer 转换为字符串（从缓冲区读取string数据）</h4><p>使用 buf.toString([encoding], [start], [end]) 方法，默认编码仍为 UTF-8</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> b3 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123456789'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 123456789</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1234</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"将buffer转换成JSON对象\"><a href=\"#将buffer转换成JSON对象\" class=\"headerlink\" title=\"将buffer转换成JSON对象\"></a>将buffer转换成JSON对象</h3><p>buf.toJSON()，返回一个JSON对象。当字符串化一个buffer实例是，JSON.stringify()会隐式地调用该toJSON()。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0x1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> json <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出: &#123; \"type\": \"Buffer\", \"data\": [ 1,2,3,4,5] &#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'Buffer'</span> <span class=\"token operator\">?</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 输出:&lt;Buffer 01 02 03 04 05></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"buffer缓冲区的合并\"><a href=\"#buffer缓冲区的合并\" class=\"headerlink\" title=\"buffer缓冲区的合并\"></a>buffer缓冲区的合并</h3><p>Buffer.concat(list[, totalLength])</p>\n<ul>\n<li>list &lt;Buffer[]&gt; 要连接的 Buffer。</li>\n<li>totalLength <code>&lt;integer&gt;</code> 连接时list中Buffer 实例的总长度，如果未提供 totalLength，则从 list 中的 Buffer 实例通过相加其长度来计算</li>\n<li>返回: <code>&lt;Buffer&gt;</code></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf1 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> buf2 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> buf3 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> totalLength <span class=\"token operator\">=</span> buf1<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> buf2<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> buf3<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>totalLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印: 42</span>\n<span class=\"token keyword\">const</span> bufA <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>buf1<span class=\"token punctuation\">,</span> buf2<span class=\"token punctuation\">,</span> buf3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> totalLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bufA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印: &lt;Buffer 00 00 00 00 ...></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bufA<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印: 42</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"缓冲区的拷贝\"><a href=\"#缓冲区的拷贝\" class=\"headerlink\" title=\"缓冲区的拷贝\"></a>缓冲区的拷贝</h3><p>Buffer.copy(buf)</p>\n<h3 id=\"缓冲区的比较\"><a href=\"#缓冲区的比较\" class=\"headerlink\" title=\"缓冲区的比较\"></a>缓冲区的比较</h3><p>Buffer.compare(buf1, buf2)</p>\n<h3 id=\"缓冲区的裁剪\"><a href=\"#缓冲区的裁剪\" class=\"headerlink\" title=\"缓冲区的裁剪\"></a>缓冲区的裁剪</h3><ul>\n<li>buf.slice([start[, end]])</li>\n<li>返回一个新的缓冲区，它和旧缓冲区指向同一块内存，但是从索引 start 到 end 的位置剪切</li>\n</ul>\n<h3 id=\"转换过程中为什么出现乱码？\"><a href=\"#转换过程中为什么出现乱码？\" class=\"headerlink\" title=\"转换过程中为什么出现乱码？\"></a>转换过程中为什么出现乱码？</h3><p>字符串中有中文，一个中文在UTF-8下占用3个字节。转成buffer后，再从buffer转成字符串时，如果字符被截断则容易出现乱码。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'前端开发'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// &lt;Buffer e5 89 8d e7 ab af e5 bc 80 e5 8f 91></span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12，一个中文在UTF-8下占用3个字节</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UTF-8'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前端�</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Stream（流）\"><a href=\"#Stream（流）\" class=\"headerlink\" title=\"Stream（流）\"></a>Stream（流）</h2><p>Stream在 Node.js 中继承自EventEmitter，它有4种基本流类型。</p>\n<ul>\n<li>Readable: 可读操作类型，可以产出数据，这些数据可以被传送到其他流中，只需要调用pipe方法即可。</li>\n<li>Writable: 可写操作类型，只能流进不能流出。</li>\n<li>Duplex: 可读可写操作类型（net.Socket）。</li>\n<li>Transform: 转换类型，可以写入数据，然后读出结果。</li>\n</ul>\n<p>node.js创建的流都是运作在字符串和buffer上的。<br>Stream作为读写方法是最好的。可写流和可读流都会在内部的缓冲区中存储数据，可以分别使用 writable.writableBuffer 或 readable.readableBuffer 来获取。</p>\n<h3 id=\"流中的缓冲区\"><a href=\"#流中的缓冲区\" class=\"headerlink\" title=\"流中的缓冲区\"></a>流中的缓冲区</h3><ul>\n<li><p>可写流和可读流都会在内部的缓冲区中存储数据，可以 writable.writableBuffer 或 readable.readableBuffer 来获取。</p>\n</li>\n<li><p>可缓冲的数据大小取决于传入流构造函数的 highWaterMark 选项。对于普通的流，highWaterMark 指定了字节的总数。对于对象模式的流，highWaterMark 指定了对象的总数。</p>\n</li>\n<li><p>当调用 stream.push(chunk) 时，数据会缓冲在可读流中。如果流的消费者没有调用 stream.read()，则数据会保留在内部队列中直到被消费。</p>\n</li>\n<li><p>一旦内部的可读缓冲的总大小达到 highWaterMark 指定的或值时，流会停止从底层资源读取数据，直到当前缓冲的数据被消贺（也就是说，流会停止调用内部的用于填充可读缓冲的 readable._read())。</p>\n</li>\n<li><p>当调用 writable.write(chunk）时，数据会被缓冲在可写流中。当内部的缓冲区的总大小小于 highWaterMark 设置的阈值时，调用 writable.write() 会返回true。一旦内部缓冲的大小达到或超过 highWaterMark 时，则会返回false。</p>\n</li>\n</ul>\n<p>因为双工流和转换流都是可读又可写的，所以它们各自维护着两个相互独立的内部缓冲区用于读取和写入，这使得它们在维护数据流时，读取和写入两边可以各自独立地运作。例如，net.Socket实例是双工流，它的可读端可以消费从socket接收的数据，而可写端则可以将数据写入到socket。因为数据写入到socket的速度可能比接收数据的速度快或慢，所以在读写两端独立地进行操作（或缓冲）就显得很重要了。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> source <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/source'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>encoding<span class=\"token operator\">:</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/dest'</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 等价于</span>\n<span class=\"token comment\">// pipe是用来传递  上一个流的输出  并将其作为  下一个流的输入的链式方法。</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadstream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/source'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/path/to/dest'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"可读流\"><a href=\"#可读流\" class=\"headerlink\" title=\"可读流\"></a>可读流</h3><p>Node. js可读流是对提供数据的来源的一种抽象。所有可读流都实现了stream.Readable类定义的接口。可读流常见的例子包括客户端的HTTP响应、服务器的HTTP请求、fs的读取流、zlib流、crypto流、TCP socket、子进程 stdout 与 stderr、process.stdin。</p>\n<h3 id=\"stream-Readable类事件\"><a href=\"#stream-Readable类事件\" class=\"headerlink\" title=\"stream.Readable类事件\"></a>stream.Readable类事件</h3><ol>\n<li><p>close 事件<br>close 事件在流被关闭时触发。表明不会再触发其他事件，也不会再发生操作。不是所有可读流都会触发close事件。如果使用 emitClose 选项创建可读流，则它将始终发出close事件。</p>\n</li>\n<li><p>data 事件<br>data事件是在流将数据块传送给<code>消费者</code>后触发。对于非对象模式的流，数据块可以是字符串或 Buffer。对于对象模式的流，数据块可以是除了 null 的任何 JavaScript 值。<br>当调用 readable.pipe()、readable.resume() 或绑定监听器到 data 事件时，流会转换到流动模式。当调用 readable.read() 且有数据块返回时，也会触发data 事件。<br>如果使用 readable.setEncoding() 为流指定了默认的字符编码，则监听器回调传入的数据为字符串，否则传入的数据为 Buffer。</p>\n</li>\n<li><p>end 事件<br>end 事件只有在数据被完全消费掉后才会触发。要想触发该事件，可以将流转换到流动模式，或反复调用 stream.read() 直到数据被消费完。</p>\n</li>\n<li><p>error 事件<br>error事件通常是在当流因底层内部出错而不能产生数据，或推送无效的数据块时触发，监听器回调将传递一个 Error对象。</p>\n</li>\n<li><p>pause 事件<br>调用 stream.pause() 并且 readsFlowing 不为 false 时，会发出 pause 事件。</p>\n</li>\n<li><p>readable 事件<br>readable 事件在当流中有数据可供读取时触发。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> readable <span class=\"token operator\">=</span> <span class=\"token function\">getReadableStreamSomehow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreadable<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readable'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">let</span> data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有数据可读</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>data <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当到达流数据的尽头时，readable 事件也会触发，但是在 end 事件之前触发。readable 事件表明流有新的动态，要么有新的数据，要么到达流的尽头。对于前者，stream.read() 会返回可用的数据。对于后者，stream.read() 会返回null。</p>\n</li>\n</ol>\n<h3 id=\"stream-Readable类方法\"><a href=\"#stream-Readable类方法\" class=\"headerlink\" title=\"stream.Readable类方法\"></a>stream.Readable类方法</h3><p>1.destroy<br>readable.destroy([error])方法用于销毁流，并触发error事件和close事件。调用后，可读流将释放所有的内部资源，且忽视后续的 push() 调用。实现流时不应该重写这个方法，而是重写 readable._destroy()。</p>\n<p>2.isPaused<br>readable.isPaused() 方法用于返回可读流当前的操作状态。主要用于 readable.pipe() 底层的机制，大多数情况下无须直接使用该方法。</p>\n<ol start=\"3\">\n<li><p>pause 与 resume<br>readable.pause() 方法使流动模式的流<strong>停止触发data事件</strong>，并切换到流动模式。任何可用的数据都会保留在内部缓存中。<br>相对的，readable.resume() 将被暂停的可读流<strong>恢复触发data事件</strong>，并将流切换到流动模式，在readable事件使用不生效。</p>\n</li>\n<li><p>pipe<br>readable.pipe(destination[, options])方法用于绑定可写流到可读流，将可读流自动切换到流动模式，并将可读流的所有数据推送到绑定的可写流。数据流会被自动管理，所以即使可读流更快，目标可写流也不会超负荷。</p>\n</li>\n</ol>\n<ul>\n<li>将可读流的所有数据通过管道推送到write-data.txt文件：<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> readable <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> writable <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'write-data.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// readable的所有数据都推送到'write-data.txt'</span>\nreadable<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>writable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>可以在单个可读流上绑定多个可写流<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">readable<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>writable1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>writable2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>默认情况下，当来源可读流触发end事件时，目标可写流也会调用stream.end()结束写入。若要禁用这种默认行为，end选项应设为 false，这样目标流就会保持打开。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">reader<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span> <span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">end</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreader<span class=\"token punctuation\">.</span><span class=\"token function\">on</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    writer<span class=\"token punctuation\">.</span><span class=\"token function\">end</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'结束'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n如果可读流发生错误，目标可写流不会自动关闭，需要手动关闭所有流以避免内存泄漏。process.stderr 和 process.stdout 可写的流在 Node.js 进程退出之前永远不会关闭。</li>\n</ul>\n<ol start=\"5\">\n<li>read</li>\n</ol>\n<ul>\n<li><p>readable.read([size])方法用于从内部缓冲拉取并返回数据。其中，size指定要读取的数据的字节数。如果没有指定size参数，则返回内部缓冲中的所有数据。该方法如果没有可读的数据，则返回null。默认情况下，readable.read()返回的数据是Buffer对象，除非使用readable.setEncoding()指定字符编码或流处于对象模式。如果可读的数据不足size个字节，则返回内部缓冲剩余的数据，如果流已经结束则返回null。</p>\n</li>\n<li><p>readable.read()应该只对处于暂停模式的可读流调用。在流动模式中，readable.read()会自动调用直到内部缓冲的数据完全耗尽。</p>\n</li>\n<li><p>如果readable.read()返回一个数据块，则data事件也会触发。</p>\n</li>\n<li><p>end事件触发后再调用stream.read([size])会返回null，不会抛出错误。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> readable <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 设置字符编码</span>\nreadable<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 读取数据</span>\nreadable<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readable'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">let</span> chunk<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!==</span> <span class=\"token punctuation\">(</span>chunk <span class=\"token operator\">=</span> readable<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">接收到 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>chunk<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 字节的数据</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">接收到的数据是： </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>chunk<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nreadable<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'结束'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述示例中，使用readable.read()处理数据时，while循环是必需的。只有在readable.read()返回null之后，才会发出readable事件;</p>\n</li>\n</ul>\n<p>readable.setEncoding()用于设置字符编码。默认情况下没有设置字符编码，流数据返回的是 Buffer对象。如果设置了字符编码，则流数据返回指定编码的字符串。例如，本例中调用<code>readable.setEncoding(&#39;utf-8&#39;)</code>会将数据解析为UTF-8数据，并返回字符串。如果调用<code>readable.setEncoding(hex)</code>则会将数据编码成十六进制字符串。</p>\n<ol start=\"6\">\n<li>readable.unpipe([destination])<br>解绑之前使用 stream.pipe() 绑定的可写流。如果没有指定目标可写流，则解绑所有管道，如果指定了目标可写流但它没有建立管道，则不起作用。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> readable <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> writable <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'write-data.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// readable的所有数据都推送到'write-data.txt'</span>\nreadable<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>writable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'停止写入数据'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  readable<span class=\"token punctuation\">.</span><span class=\"token function\">unpipe</span><span class=\"token punctuation\">(</span>writable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'手动关闭文件流'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  writable<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"两种读取模式\"><a href=\"#两种读取模式\" class=\"headerlink\" title=\"两种读取模式\"></a>两种读取模式</h3><p>流动模式或者暂停模式</p>\n<p>可读流运作于流动模式(flowing)或暂停模式(paused)两种模式之一。</p>\n<ul>\n<li>在流动模式中，数据自动从底层系统读取，并通过EventEmitter 接口的事件尽口能快地被提供给应用程序。</li>\n<li>在暂停模式中，必须显式调用stream.read()读取数据块。<br>所有可读流都开始于暂停模式，可以通过以下方式切换到流动模式。</li>\n<li>添加data事件句柄。</li>\n<li>调用stream.resume()。·调用stream.pipe()。<br>可读流可以通过以下方式切换回暂停模式。</li>\n<li>如果没有管道目标，则调用stream.pause()。</li>\n<li>如果有管道目标，则移除所有管道目标。调用stream.unpipe()可以移除多个管道目标。</li>\n</ul>\n<p>只有提供了消费或忽略数据的机制后，可读流才会产生数据。如果消费的机制被禁用或移除，则可读流会停止产生数据。</p>\n<p>为了向后兼容，移除data事件句柄不会自动地暂停流。如果有管道目标，一旦目标变为drain 状态并请求接收数据时，则调用 stream.pause() 也不能保证流会保持暂停模式。</p>\n<p>如果可读流切换到流动模式，且没有可用的“消费者”来处理数据，则数据将会丢失。例如，当调用readable.resume() 时，没有监听data事件或data事件句柄已移除。</p>\n<p>添加readable事件句柄会使流自动停止流动，并通过 readable.read() 消费数据。如果 readable 事件句柄被移除，且存在data事件句柄，则流会再次开始流动。</p>\n<h3 id=\"可写流\"><a href=\"#可写流\" class=\"headerlink\" title=\"可写流\"></a>可写流</h3><p>可写流是对数据要被写入的目的地的一种抽象。所有可写流都实现了stream.Writable类定义的接口。可写流常见的例子包括客户端的HTTP请求、服务器的HTTP响应、fs的写入流、zlib流、crypto流、TCP socket、子进程stdin、process.stdout、process.stderr。上面的一些例子事实上是实现了可写流接口的双工流。</p>\n<h4 id=\"stream-Writable类事件\"><a href=\"#stream-Writable类事件\" class=\"headerlink\" title=\"stream.Writable类事件\"></a>stream.Writable类事件</h4><p>stream.Writable类定义了如下事件。</p>\n<ol>\n<li><p>close事件<br>当流及其任何底层资源（如文件描述符）已关闭时，将发出close事件。该事件表明不会发出更多事件，也不会进一步计算。<br>如果使用emitClose选项创建可写流，它将始终发出close事件。</p>\n</li>\n<li><p>drain事件<br>如果对stream.write(chunk)的调用返回false，则在适合继续将数据写入流时将发出drain事件。</p>\n</li>\n<li><p>error事件<br>如果在写入管道数据时发生错误，则会发出error事件。调用时，监听器回调会传递一个Error参数。<br>发出error事件时，流不会关闭。</p>\n</li>\n<li><p>finish事件<br>调用stream.end()方法后会发出finish事件，并且所有数据都已刷新到底层系统。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> writable <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'write-data.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  writable<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">写入 #</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>i<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nwritable<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'写入结尾\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nwritable<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finish'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'写入已完成'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>pipe事件<br>在可读流上调用stream.pipe()方法时会发出pipe事件，并将此可写流添加到其目标集。</p>\n</li>\n<li><p>unpipe事件<br>当在可读流上调用stream.unpipe()时触发。当可读流通过管道流向可写流发生错误时，也会触发unpipe事件。</p>\n</li>\n</ol>\n<h4 id=\"stream-Writable类方法\"><a href=\"#stream-Writable类方法\" class=\"headerlink\" title=\"stream.Writable类方法\"></a>stream.Writable类方法</h4><ol>\n<li>cork<br>writable.cork()方法用于强制把所有写入的数据都缓冲到内存中。当调用stream.uncork()或stream.end()时，缓冲的数据才会被输出。</li>\n</ol>\n<p>当写入大量小块数据到流时，内部缓冲可能失效，从而导致性能下降，writable.cork()主要用于避免这种情况。对于这种情况，实现了writable._writev()的流可以用更优的方式对写入的数据进行缓冲。</p>\n<ol start=\"2\">\n<li><p>destroy<br>writable.destroy([error])方法用于销毁流。在调用该方法之后，可写流已结束，随后对write()或end()的调用都将导致ERR_STREAM_DESTROYED错误。如果数据在关闭之前应该刷新，则应使用end()方法而不是destroy()方法，或者在销毁流之前等待drain事件。实现者不应该重写此方法，而是实现writable._destroy()。</p>\n</li>\n<li><p>end<br>调用writable.end([chunk][, encoding][, callback])方法表示不再将数据写入Writable。该方法的参数如下。</p>\n</li>\n</ol>\n<ul>\n<li><p><code>chunk&lt;string&gt;|&lt;Buffer&gt;|&lt;Uint8Array&gt;/&lt;any&gt;</code>:要 写入的可选数据。对于不在对象模式下运行的流，块必须是字符串、Buffer 或 Uint8Array。对于对象模式流，块可以是除null 之外的任何JavaScript 值。</p>\n</li>\n<li><p><code>encoding&lt;string&gt;</code>: 如果设置了编码，则 chunk 是一个字符串。</p>\n</li>\n<li><p><code>callback&lt;Function&gt;</code>: 流完成时的可选回调。</p>\n</li>\n</ul>\n<p>调用writable.end()方法表示不再将数据写入Writable。可选的块和编码参数允许在关闭流之前立即写入最后一个额外的数据块。如果提供，则附加可选回调函数作为finish事件的监听器。</p>\n<p>调用stream.end()后调用stream.write()方法将引发错误。</p>\n<ol start=\"4\">\n<li><p>setDefaultEncoding<br>writable.setDefaultEncoding(encoding)为可写流设置默认的编码。</p>\n</li>\n<li><p>uncork<br>writable.uncork()方法用于将调用stream.cork()后缓冲的所有数据输出到目标。当使用writable.cork() 和 writable.uncork() 来管理流的写入缓冲时，建议使用 process.nextTick() 来延迟调用 writable.uncork()。通过这种方式，可以对单个Node.js事件循环中调用的所有 writable.write() 进行批处理。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">stream<span class=\"token punctuation\">.</span><span class=\"token function\">cork</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'一些'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprocess<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">uncork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果一个流上多次调用 writable.cork()，则必须调用同样次数的 writable.uncork() 才能输出缓冲的数据。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">stream<span class=\"token punctuation\">.</span><span class=\"token function\">cork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'一些'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">cork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nprocess<span class=\"token punctuation\">.</span><span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">uncork</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//数据不会被输出,直到第二次调用uncork()</span>\n    stream<span class=\"token punctuation\">.</span><span class=\"token function\">uncork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>write<br>writable.write(chunk[, encoding][, callback]) 写入数据到流，并在数据被完全处理之后调用callback。如果发生错误，则callback可能被调用也可能不被调用。为了可靠地检测错误，可以为error事件添加监听器。该方法的参数如下。</p>\n</li>\n</ol>\n<ul>\n<li><code>chunk&lt;string&gt;|&lt;Buffer&gt;|&lt;Uint8Array&gt;|&lt;any&gt;</code>: 要写入的数据。对于非对象模式的流，chunk 必须是字符串、Buffer 或 Uint8Array。对于对象模式的流，chunk 可以除null外的是任何 JavaScript 值。</li>\n<li><code>encoding&lt;string&gt;</code>: 如果chunk是字符串，则指定字符编码。</li>\n<li><code>callback&lt;Function&gt;</code>: 当数据块被输出到目标后的回调函数。</li>\n<li><code>writable.write()</code>: 写入数据到流，并在数据被完全处理之后调用callback。如果发生错误，则callback可能被调用也可能不被调用。为了可靠地检测错误，可以为error事件添加监听器。</li>\n</ul>\n<p>在接收了chunk后，如果内部的缓冲小于创建流时配置的highWaterMark, 则返回true。如果返回false，则应该停止向流写入数据，直到drain事件被触发。</p>\n<p>当流还未被排空时，调用write()会缓冲chunk，并返回false。一旦所有当前缓冲的数据块都被排空了(被操作系统接收并传输)，则触发drain事件。建议一旦write()返回false，则不再写入任何数据块，直到drain事件被触发。当流还未被排空时，也是可以调用write()， Node.js 会缓冲所有被写入的数据块，直到达到最大内存占用，这时它会无条件中止，甚至在它中止之前，高内存占用将会导致垃圾回收器的性能变差和RSS变高(即使内存不再需要，通常也不会被释放回系统)。如果远程的另一端没有读取数据，TCP的socket 可能永远也不会排空，所以写入到一一个不会排空的socket可能会导致产生远程可利用的漏洞。</p>\n<p>对于Transform，写入数据到一一个不会排空的流尤其成问题，因为Transform流默认会被暂停，直到它们被pipe或者添加了 data 或readable 事件句柄。</p>\n<p>如果要被写入的数据可以根据需要生成或取得，建议将逻辑封装为一一个可读流并且使用stream.pipe()。 如果要优先调用 write()，则可以使用 drain 事件来防止背压与避免内存问题。</p>\n<h3 id=\"双工流与转换流\"><a href=\"#双工流与转换流\" class=\"headerlink\" title=\"双工流与转换流\"></a>双工流与转换流</h3><p>双工流（Duplex）是同时实现了Readable和 Writable接口的流。双工括TCP socket、zlib流、crypto流。<br>转换流（Transform）是一种双工流，但它的输出与输入是相关联的。与双工流一样，转换流也同时实现了 Readable 和 Writable 接口。转换流的例子包括 zlib流和 crypto 流。</p>\n<h3 id=\"实现双工流\"><a href=\"#实现双工流\" class=\"headerlink\" title=\"实现双工流\"></a>实现双工流</h3><p>双工流同时实现了可读流和可写流，如TCP socket连接。因为JavaScript不支持多重继承，所以使用stream.Duplex类来实现双工流（而不是使用stream.Readable类和stream.Writable类)。<br>stream.Duplex类的原型继承自stream.Readable和寄生自stream.Writable，但是instanceof对这两个基础类都可用，因为重写了 stream.Writable 的Symbol.hasInstance。<br>自定义的双工流必须调用<code>new stream.Duplex([options])</code>构造函数并实现 readable._read() 和 writable._write() 方法。以下是示例。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> Duplex <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stream'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDuplex</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duplex</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"双工流的例子\"><a href=\"#双工流的例子\" class=\"headerlink\" title=\"双工流的例子\"></a>双工流的例子</h3><p>封装了一个可读可写的底层资源对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> Duplex <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stream'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> kSource <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'source'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDuplex</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Duplex</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>kSource<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">_write</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 底层资源只处理字符串。</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">isBuffer</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      chunk <span class=\"token operator\">=</span> chunk<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>kSource<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeSomeData</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token function\">_read</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>kSource<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchSomeData</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> encoding</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"net模块\"><a href=\"#net模块\" class=\"headerlink\" title=\"net模块\"></a>net模块</h2><p>在nodejs中，net模块用于创建基于流的TCP或IPC的服务器与客户端。net主要包含两个部分：</p>\n<ul>\n<li>net.Server: TCP Server，内部通过socket来实现与客户端的通信。</li>\n<li>net.Socket: TCP&#x2F;本地socket的Node版实现，它实现了全双工的stream接口，可以用来构建TCP客户端。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"创建TCP服务器\"><a href=\"#创建TCP服务器\" class=\"headerlink\" title=\"创建TCP服务器\"></a>创建TCP服务器</h3><ol>\n<li>net.Server类创建TCP或IPC服务器</li>\n<li>net.Server支持如下事件：</li>\n</ol>\n<ul>\n<li>listening事件: 当服务被绑定后调用server.listen()方法后触发。</li>\n<li>connection事件: 当一个新的connection建立的时候触发，回调参数为socket连接对象。</li>\n<li>close事件：当TCP服务器关闭的时候触发，回调函数没有参数。</li>\n<li>error事件: 当TCP服务器出现错误的时候触发，回调函数的参数为err对象。例如，监听了已经被占用的端口号。</li>\n</ul>\n<h3 id=\"创建TCP服务器示例\"><a href=\"#创建TCP服务器示例\" class=\"headerlink\" title=\"创建TCP服务器示例\"></a>创建TCP服务器示例</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'goodbye\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 处理错误</span>\n    <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到close事件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// socket对象，对象可以与客户端进行通信</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到connection事件'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到listening事件'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 随机获取未绑定的端口</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器启动，占用端口：'</span><span class=\"token punctuation\">,</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当创建了一个TCP服务器后，可以通过 server.address()方法来查看这个TCP服务器监听的地址，并返回一个JSON对象。这个对象的属性有:</p>\n<ul>\n<li>port: TCP服务器监听的端口号。</li>\n<li>family: 说明TCP服务器监听的地址是IPv6还是IPv4。</li>\n<li>address: TCP服务器监听的地址。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 查看服务器监听的地址\n */</span>\n\n<span class=\"token comment\">/* 引入net模块 */</span>\n<span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 创建TCP服务器 */</span>\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone connects'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 获取地址信息 */</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/* 获取地址信息，得到的是一个json &#123; address: '::', family: 'IPv6', port: 8000 &#125; */</span>\n   <span class=\"token keyword\">var</span> address <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">/* TCP服务器监听的端口号 */</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the port of server is\"</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">/* TCP服务器监听的地址 */</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the address of server is\"</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">/* 说明TCP服务器监听的地址是 IPv6 还是 IPv4 */</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the family of server is\"</span> <span class=\"token operator\">+</span> address<span class=\"token punctuation\">.</span>family<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n创建一个TCP服务器后，可以通过server.getConnections()方法获取连接这个TCP服务器的客户端数量。除此之外，也可以通过maxConnections属性来设置这个服务器的最大连接数量，当连接数量超过最大值时，服务器将拒绝新的连接，例如:<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 连接服务器的客户端数量\n */</span>\n\n<span class=\"token comment\">/* 引入net模块 */</span>\n<span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 创建TCP服务器 */</span>\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone connects'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 设置最大连接数量 */</span>\n    server<span class=\"token punctuation\">.</span>maxConnections <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">getConnections</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the count of client is \"</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 获取监听端口 */</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Creat server on http://127.0.0.1:8000/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n服务器和客户端之间的通信：socket对象可以用来获取客户端发出的流数据，每次接收到数据的时候触发data事件，通过监听这个事件就可以在回调函数中获取客户端发送的数据。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 连接服务器的客户端数量\n */</span>\n\n<span class=\"token comment\">/* 引入net模块 */</span>\n<span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 创建TCP服务器 */</span>\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/* 获取地址信息 */</span>\n    <span class=\"token keyword\">var</span> address <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"the server address is\"</span><span class=\"token operator\">+</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 发送数据 */</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">var</span> writeSize <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>bytesWritten<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message <span class=\"token operator\">+</span> <span class=\"token string\">\"has send\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the size of message is\"</span><span class=\"token operator\">+</span>writeSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">/* 监听data事件，每次接收到数据的时候触发data事件 */</span> \n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> readSize <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span>bytesRead<span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the size of data is\"</span><span class=\"token operator\">+</span>readSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 获取地址信息 */</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Creat server on http://127.0.0.1:8000/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"server-listen监听链接\"><a href=\"#server-listen监听链接\" class=\"headerlink\" title=\"server.listen监听链接\"></a>server.listen监听链接</h3><p>listen()方法是异步的。当服务器开始监听时，会触发listening事件。最后一个参数callback将被添加为listening事件的监听器。</p>\n<p>当且仅当在第一次调用server.listen()或调用server.close()期间出现错误时，才能再次调用server.listen()方法。</p>\n<p>监听时最常见的错误之一是EADDRINUSE, 这说明该地址正被另一个服务器所使用。处理此问题的一种方法是在一段时间后重试。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token string\">'EADDRINUSE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'地址正被使用，重试中。。。'</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n            server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">HOST</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>server.listen(options[, callback])方法中的options参数支持如下属性</p>\n<ul>\n<li><code>port&lt;number&gt;</code>: 端口号。</li>\n<li><code>host&lt;string&gt;</code>: 主机。</li>\n<li><code>path&lt;string&gt;</code>: 如果指定了port，将被忽略。</li>\n<li><code>backlog&lt;number&gt;</code>。如果exclusive为 false，则集群将使用相同的底层句柄，从而允许共享连接处理。当exclusive为 true时，不共享句柄，并且尝试端口共享会导致错误。监听专用端口的示例如下。</li>\n<li><code>exclusive&lt;boolean&gt;</code>: 默认值是false。</li>\n<li><code>readableAll&lt;boolean&gt;</code>: 对于IPC服务器，使管道对所有用户都可读，默认值是false。</li>\n<li><code>writableAll&lt;boolean&gt;</code>: 对于IPC服务器，管道可以为所有用户写入，默认值是false。</li>\n</ul>\n<h3 id=\"创建Socket对象发送和接受数据\"><a href=\"#创建Socket对象发送和接受数据\" class=\"headerlink\" title=\"创建Socket对象发送和接受数据\"></a>创建Socket对象发送和接受数据</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'net'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 处理错误</span>\n    <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到close事件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">socket</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到connection事件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">setEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'welcome!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 发送数据</span>\n\n    socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到的数据为：'</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 如果收到c字符，就终止连接</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            socket<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bye!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            socket<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭socket</span>\n            <span class=\"token comment\">// 如果收到k字符，就关闭服务器</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">==</span> <span class=\"token string\">'k'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            socket<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bye!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            socket<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 关闭socket</span>\n            server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭服务器</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            socket<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器接收到listening事件'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 绑定到端口</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器启动，端口：8888'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在上述示例中，socket.write() 方法用于将数据写入 Socket发送; socket通过data事件，可以监听来自客户端写入的数据(接收)。在上述示例中，会将接收到的数据，再通过 socket.write() 方法发送回客户端。</p>\n<p>关闭TCP服务器：TCP服务器通过 socket.end() 终止客户端的连接，也可以通过 server.close() 方法来将整个TCP服务器关闭。当TCP服务器关闭时，会监听到close事件。</p>\n<h3 id=\"构建TCP客户端\"><a href=\"#构建TCP客户端\" class=\"headerlink\" title=\"构建TCP客户端\"></a>构建TCP客户端</h3><p>可以用net.Socket构建TCP客户端，实现TCP客户端和TCP服务器的通信。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * 构建TCP客户端\n */</span>\n\n<span class=\"token comment\">/* 引入net模块 */</span>\n<span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 创建TCP客户端 */</span>\n<span class=\"token keyword\">var</span> client <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* 设置连接的服务器 创建完socket对象后，使用socket对象的connect方法就可以连接一个TCP服务器。*/</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect the server\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* 向服务器发送数据 */</span>\n  client<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message from client\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 监听服务器传来的data数据 */</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the data of server is \"</span> <span class=\"token operator\">+</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/* 监听end事件 */</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li>net.Socket连接相关的API有:</li>\n</ol>\n<ul>\n<li>socket.connect(): 有3种不同的参数，用于不同的场景。</li>\n<li>socket.setTimeout(): 用来进行连接超时设置。</li>\n<li>socket.setKeepAlive(): 用来设置长连接。</li>\n<li>socket.destroy( )、socket.destroyed: 当错误发生时，用来销毁socket，确保这个socket上不会再有其他的IO操作。</li>\n</ul>\n<ol start=\"2\">\n<li>net.Socket涉及的事件:</li>\n</ol>\n<ul>\n<li>data: 当收到另一侧传来的数据时触发。</li>\n<li>connect: 当连接建立时触发。</li>\n<li>close: 当连接断开时触发。如果是因为传输错误导致的连接断开，参数就为error。</li>\n<li>end: 当连接另一侧发送了FIN包的时候触发。默认情况下(allowHalfOpen &#x3D;&#x3D; false)，socket会完成自我销毁操作。但也可以把allowHalfOpen设置为true，这样就可以继续往socket里写数据。当然，最后需要手动调用socket.end()。</li>\n<li>error: 当有错误发生时就会触发，参数为error。</li>\n<li>timeout: 示用户socket已经超时，需要手动关闭连接。</li>\n<li>drain: 当写缓存空了的时候触发。</li>\n<li>lookup: 当域名解析完成时触发。</li>\n</ul>\n<h2 id=\"http\"><a href=\"#http\" class=\"headerlink\" title=\"http\"></a>http</h2><p>http.Server类是继承自net.Server，有很多net.Server的方法和事件。</p>\n<p>net、http、dgram模块分别用来实现TCP、HTTP、UDP的通信。http为应用层模块，主要按照特定协议编解码数据; net为传输层模块，主要负责传输编码后的应用层数据; https是一个综合模块（涵盖了http&#x2F;tIs&#x2F;crypto等)，主要用于确保数据安全性。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> hostname <span class=\"token operator\">=</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于完成发送请求</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostname<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">服务器运行在 http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>hostname<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>port<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"http-Server事件\"><a href=\"#http-Server事件\" class=\"headerlink\" title=\"http.Server事件\"></a>http.Server事件</h3><ol>\n<li>close事件：服务器关闭时触发close事件</li>\n<li>connection事件：建立新的TCP流是会发出connection事件</li>\n<li>request事件：每次有请求时都会发出request事件。注意，在HTTP Keep-Alive连接的情况下每个连接可能会有多个请求。</li>\n</ol>\n<h3 id=\"http-requset发送请求\"><a href=\"#http-requset发送请求\" class=\"headerlink\" title=\"http.requset发送请求\"></a>http.requset发送请求</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span> <span class=\"token comment\">// 默认是GET，POST、PUT、DELETE</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'请求完成!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"http请求对象和响应对象\"><a href=\"#http请求对象和响应对象\" class=\"headerlink\" title=\"http请求对象和响应对象\"></a>http请求对象和响应对象</h3><p>HTTP请求对象和响应对象在 Node.js中是被定义在 http.ClientRequest和http.ServerResponse类中的。</p>\n<h4 id=\"http-ClientRequest\"><a href=\"#http-ClientRequest\" class=\"headerlink\" title=\"http.ClientRequest\"></a>http.ClientRequest</h4><p>http.ClientRequest对象由http.request()内部创建并返回。它表示正在进行的请求，且其请求头已进入队列。请求头仍然可以使用</p>\n<ul>\n<li>getHeader(name) 返回请求头的值</li>\n<li>removeHeader(name) 改变。</li>\n</ul>\n<p>实际的请求头将与第一个数据块一起发送，或者当调用request.end()时发送。</p>\n<p>要获得响应，则为请求对象添加response事件监听器。当接收到响应头时，将会从请求对象触发response事件。response事件执行时有一个参数，该参数是http.IncomingMessage的实例。</p>\n<p>在response事件期间，可以添加监听器到响应对象，如监听data事件。</p>\n<p>如果没有添加response事件处理函数，则响应将被完全丢弃。如果添加了response事件处理函数，则必须消费完响应对象中的数据，每当有readable事件时，会调用response.read()，或添加 data事件处理函数，或调用.resume()方法。在消费完数据之前，不会触发end事件。此外，在读取数据之前，它将占用内存，最终可能导致进程内存不足的错误。</p>\n<h4 id=\"http-ServerResponse类\"><a href=\"#http-ServerResponse类\" class=\"headerlink\" title=\"http.ServerResponse类\"></a>http.ServerResponse类</h4><p>http.ServerResponse对象由HTTP服务器在内部创建，而不是由用户创建。它作为第二个参数传给request事件。ServerResponse继承自Stream。</p>\n<ul>\n<li>close事件：表示底层链接已经终止</li>\n<li>finish事件：在响应发送后触发。</li>\n<li>response.end()方法<br><code>response.end([data][, encoding][, callback])</code>方法用于向服务器发出信号，表示已发送所有响应标头和正文，该服务器应该考虑此消息已完成。必须在每个响应上调用response.end() 方法。</li>\n</ul>\n<p>如果指定了data，则它实际上类似于先调用response.write(data, encoding)方法，接着调用response.end()方法。如果指定了callback，则在响应流完成时将调用它。</p>\n<ul>\n<li>response.setHeader(name, value)：设置响应头。</li>\n<li>response.getHeaderNames()：返回已经设置的响应头属性数组。</li>\n<li>response.getHeaders()：返回已经设置的响应头，以key-vale表示。</li>\n</ul>\n<h4 id=\"REST-ful风格\"><a href=\"#REST-ful风格\" class=\"headerlink\" title=\"REST ful风格\"></a>REST ful风格</h4><ul>\n<li>若要在服务器上创建资源，应该使用POST方法。</li>\n<li>若要检索某个资源，应该使用GET方法。</li>\n<li>若要更新或添加资源，应该使用PUT方法。</li>\n<li>若要删除某个资源，应该使用DELETE方法。</li>\n</ul>\n<h1 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h1><p>npm全称node package manager即node包管理器。</p>\n<p>查看当前项目的所有NPM脚本命令，可以使用不带任何参数的npm run命令:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>npm 脚本的原理相对简单，每当执行npm run时，会自动新建一个Shell，在该Shell 中执行指定的脚本命令。</p>\n<p>因此，只要是Shell (一般是Bash)可以运行的命令，就可以写在 NPM脚本里面。需要注意的是，npm run新建的 Shell 会将当前目录的node_modules.bin子目录加入PATH变量，命令执行结束后，再将PATH 变量恢复。也就是说，当前目录的node_modules&#x2F;.bin子目录里面的所有脚本都可以直接用脚本名调用，而不必加上路径。例如，当前项目的依赖里面有Mocha，只需要直接写mocha test即可:</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token property\">\"script\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"test\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"mocha test\"</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 而不需要写成:</span>\n<span class=\"token property\">\"script\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token property\">\"test\"</span> <span class=\"token operator\">:</span><span class=\"token string\">\"./node_modules/.bin/mocha test\"</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由于NPM脚本的唯一要求是可以在Shell 中执行，因此它不一定是Node脚本，任何可执行文件都可以写在script中。</p>\n<p>安装的局部开发依赖如果有命令，会在node_modules&#x2F;.bin目录创建软连接，package.json是可以读取到依赖下.bin目录下的命令，可以在package.json直接使用该命令。</p>\n<h2 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h2><p>package.json可以手动编写，也可以使用npm init命令自动生成，它描述了项目使用到的模块，项目名称（必填）、版本号（必填）、许可、关键词。</p>\n<ul>\n<li>Name: 包名。</li>\n<li>Version: 包的版本号，语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。</li>\n<li>Description: 包的描述。</li>\n<li>Homepage: 包的官网地址。</li>\n<li>Author: 包的作者姓名。</li>\n<li>Contributors: 包的其他贡献者姓名。</li>\n<li>Dependencies: 依赖包列表，指定了项目运行所依赖的模块。如果依赖包没有安装，npm就会自动将依赖包安装在node_module目录下。</li>\n<li>devDependencies: 指定项目开发所需要的模块。</li>\n<li>repository: 包代码存放的地方的类型，可以是Git或Svn，Git可在GitHub 上。</li>\n<li>main: main字段指定了程序的主入口文件, require(‘moduleName’)就会加载这个文件。这个字段的默认值是模块根目录下面的index.js。</li>\n<li>keywords: 关键字。</li>\n<li>scripts: 指定了运行脚本命令的npm命令行缩写，比如 start 指定了运行npm run start时所要执行的命令。</li>\n<li>bin: 用来指定各个内部命令对应的可执行文件的位置。</li>\n<li>config: 用于添加命令行的环境变量。</li>\n</ul>\n<h2 id=\"npm命令\"><a href=\"#npm命令\" class=\"headerlink\" title=\"npm命令\"></a>npm命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 更新模块：</span>\n<span class=\"token function\">npm</span> update module\n\n<span class=\"token comment\"># 查看安装的模块：</span>\n<span class=\"token function\">npm</span> list -g <span class=\"token comment\"># 查看全局安装的模块</span>\n<span class=\"token function\">npm</span> list <span class=\"token comment\"># 查看本地安装的模块</span>\n\n<span class=\"token comment\"># 查看某个模块的信息</span>\n<span class=\"token function\">npm</span> list koa\n\n<span class=\"token comment\"># 查看命令详细帮助</span>\n<span class=\"token function\">npm</span> <span class=\"token builtin class-name\">help</span>\n\n<span class=\"token comment\"># 查看包的安装路径</span>\n<span class=\"token function\">npm</span> root <span class=\"token punctuation\">[</span>-g<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 清除npm本地缓存</span>\n<span class=\"token function\">npm</span> cache clean<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"WebSocket\"><a href=\"#WebSocket\" class=\"headerlink\" title=\"WebSocket\"></a>WebSocket</h1><p>WebSocket 提供了一个真正的全双工连接，它可用于客户机和服务器之间的双向通信，客户端和服务器可以随意向对方发送数据。</p>\n<p>该方案的优点是属于HTML5标准，已经被大多数浏览器支持，而且是真正的全双工，性能比较好。其缺点是实现起来相对比较复杂，需要对ws协议专门处理。</p>\n<h2 id=\"使用ws创建WebSocket服务器\"><a href=\"#使用ws创建WebSocket服务器\" class=\"headerlink\" title=\"使用ws创建WebSocket服务器\"></a>使用ws创建WebSocket服务器</h2><p>Node.js原生API并未提供 WebSocket的支持，因此，需要安装第三方包才能使用WebSocket 功能。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// npm i ws</span>\n<span class=\"token keyword\">const</span> WebSocket <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket<span class=\"token punctuation\">.</span>Server</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> \n    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">8080</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>WebSocket.Server(options[, callback]）方法中的options对象支持如下参数。</p>\n<ul>\n<li><code>host&lt;String&gt;</code>: 绑定服务器的主机名。</li>\n<li><code>port&lt;Number&gt;</code>: 绑定服务器的端口。</li>\n<li><code>backlog&lt;Number&gt;</code>: 挂起连接队列的最大长度。</li>\n<li><code>server</code>: 预先创建的Node.js HTTP&#x2F;S服务器。</li>\n<li><code>verifyClient&lt;Function&gt;</code>: 可用于验证传入连接的函数。</li>\n<li><code>handleProtocols&lt;Function&gt;</code>: 可用于处理WebSocket子协议的函数。</li>\n<li><code>path&lt;String&gt;</code>: 仅接受与此路径匹配的连接。</li>\n<li><code>noServer&lt;Boolean&gt;</code>: 不启用服务器模式。</li>\n<li><code>clientTracking&lt;Boolean&gt;</code>: 指定是否跟踪客户端。</li>\n<li><code>perMessageDeflate</code>: 启用&#x2F;禁用消息压缩。</li>\n<li><code>maxPayload&lt;Number&gt;</code>: 允许的最大消息大小(以字节为单位)。</li>\n</ul>\n<h2 id=\"ws事件\"><a href=\"#ws事件\" class=\"headerlink\" title=\"ws事件\"></a>ws事件</h2><ul>\n<li>ws监听事件：connection。只要有WebSocket连接到该服务器，就能触发connection事件。</li>\n<li>如果想获知所有的已连接的客户端信息，则可以使用server.clients数据集。该数据集存储了所有已连接的客户端。</li>\n</ul>\n<h2 id=\"发送和接收数据\"><a href=\"#发送和接收数据\" class=\"headerlink\" title=\"发送和接收数据\"></a>发送和接收数据</h2><p>ws通过websocket.send()方法发送数据，通过监听message事件来接受数据。</p>\n<h3 id=\"发送数据\"><a href=\"#发送数据\" class=\"headerlink\" title=\"发送数据\"></a>发送数据</h3><p><code>websocket.send(data[, options][, callback])</code>方法可以用来发送数据。data参数就是用来发送的数据。options对象的属性可以有以下几种。</p>\n<ul>\n<li>compress: 用于指定数据是否需要压缩。默认是true。</li>\n<li>binary: 用于指定数据是否通过二进制传送。默认是自动检测。</li>\n<li>mask: 用于指定是否应遮罩数据。当WebSocket不是服务器客户端时，默认认为true。</li>\n<li>fin: 用于指定数据是否为消息的最后一个片段，默认为true。</li>\n</ul>\n<h4 id=\"发送ping和pong\"><a href=\"#发送ping和pong\" class=\"headerlink\" title=\"发送ping和pong\"></a>发送ping和pong</h4><p>在消息通信中, <code>ping-pong</code>是一种验证客户端和服务器是否正常连接的简单机制。当客户端给服务器发送<code>ping</code>消息时，如果服务器能够正常响应<code>pong</code>消息，则说明客户端和服务器之间的通信是正常的。反之亦然，如果服务器想验证客户端的连接是否正常，也可以给客户端发送<code>ping</code>消息。<br>ws提供了一种快捷的方式来发送<code>ping</code>消息和<code>pong</code>消息。</p>\n<ul>\n<li>websocket.ping([data[, mask]][, callback])</li>\n<li>websocket.pong([data[, mask]][, callback])</li>\n</ul>\n<h4 id=\"接收数据\"><a href=\"#接收数据\" class=\"headerlink\" title=\"接收数据\"></a>接收数据</h4><p>ws通过message事件来接收数据</p>\n<h3 id=\"准备状态\"><a href=\"#准备状态\" class=\"headerlink\" title=\"准备状态\"></a>准备状态</h3><p>ws 中的 WebSocket类具有以下4种准备状态。</p>\n<ul>\n<li>CONNECTING: 值为0，表示连接还没有打开。</li>\n<li>OPEN: 值为1，表示连接已打开，可以通信了。</li>\n<li>CLOSING: 值为2，表示连接正在关闭。</li>\n<li>CLOSED: 值为2，表示连接已关闭。<br>需要注意的是，当通过 WebSocket对象进行通信时，状态必须是OPEN。</li>\n</ul>\n<h3 id=\"关闭WebSocket服务器\"><a href=\"#关闭WebSocket服务器\" class=\"headerlink\" title=\"关闭WebSocket服务器\"></a>关闭WebSocket服务器</h3><p>可以通过server.close()来关闭服务器，并通过close事件监听服务器的关闭。</p>\n<h3 id=\"ws例子\"><a href=\"#ws例子\" class=\"headerlink\" title=\"ws例子\"></a>ws例子</h3><ul>\n<li>服务端<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> WebSocket <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> WebSocketServer <span class=\"token operator\">=</span> WebSocket<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> wss <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocketServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwss<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connection'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ws</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[SERVER] connection()</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ws<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[SERVER] Received: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>message<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">What's your name?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[SERVER] error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>err<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws server started at port 3000...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>客户端（浏览器）<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// client test:</span>\n\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost:3000/ws/chat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nws<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[CLIENT] open()</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nws<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[CLIENT] Received: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>message<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Goodbye!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ws<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, I'm Mr No.</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>count<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\nWebSocket 协议本身不要求同源策略（Same-Origin Policy)，也就是某个地址为 <code>http://a.com</code>的网页可以通过 WebSocket连接到<code>ws://b.com</code>。但是，浏览器会发送 Origin 的 HTTP 头给服务器，服务器可以根据 Origin 拒绝这个 WebSocket 请求。所以，是否要求同源要看服务器端如何检查。</li>\n</ul>\n<h1 id=\"MySQL基本操作\"><a href=\"#MySQL基本操作\" class=\"headerlink\" title=\"MySQL基本操作\"></a>MySQL基本操作</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 显示已有的数据库</span>\nshow databases<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 创建数据库</span>\nCREATE DATABASES data_name<span class=\"token punctuation\">;</span> <span class=\"token comment\"># nodejs_book</span>\n\n<span class=\"token comment\"># 使用数据库</span>\nuse data_name<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 建表</span>\nmysql<span class=\"token operator\">></span> CREATE TABLE t_user <span class=\"token punctuation\">(</span> user_id BIGINT NOT NULL, username VARCHAR<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">))</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 查看表</span>\nshow TABLES<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 显示表的结构</span>\nmysql<span class=\"token operator\">></span> DESCRIBE t_user<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 往表中加入记录</span>\nmysql<span class=\"token operator\">></span> insert into t_user values<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token string\">'yolo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"使用node-js操作mysql\"><a href=\"#使用node-js操作mysql\" class=\"headerlink\" title=\"使用node.js操作mysql\"></a>使用node.js操作mysql</h2><p>使用mysql或者mysql2模块</p>\n<h2 id=\"实现简单的查询\"><a href=\"#实现简单的查询\" class=\"headerlink\" title=\"实现简单的查询\"></a>实现简单的查询</h2><ul>\n<li>mysql.createConnection()用于创建一个连接;</li>\n<li>connection.connect()方法用于建立连接; </li>\n<li>connection.query()方法用于执行查询，第一个参数就是待执行的SQL语句; </li>\n<li>connection.end()用于关闭连接。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 连接信息</span>\n<span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">database</span><span class=\"token operator\">:</span> <span class=\"token string\">'nodejs_book'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 建立连接</span>\n<span class=\"token comment\">/// connection.connect();</span>\n\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error connecting: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connected as id '</span> <span class=\"token operator\">+</span> connection<span class=\"token punctuation\">.</span>threadId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 执行查询</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM t_user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 打印查询结果</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 关闭连接</span>\n<span class=\"token comment\">///connection.end();</span>\n<span class=\"token comment\">///connection.destroy();</span>\n\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error end: '</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end connection'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"mysql模块连接选项\"><a href=\"#mysql模块连接选项\" class=\"headerlink\" title=\"mysql模块连接选项\"></a>mysql模块连接选项</h3><table>\n<thead>\n<tr>\n<th align=\"center\">参数</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">host</td>\n<td align=\"center\">主机地址,默认是localhost</td>\n</tr>\n<tr>\n<td align=\"center\">user</td>\n<td align=\"center\">用户名</td>\n</tr>\n<tr>\n<td align=\"center\">password</td>\n<td align=\"center\">密码</td>\n</tr>\n<tr>\n<td align=\"center\">port</td>\n<td align=\"center\">端口号，默认是3306</td>\n</tr>\n<tr>\n<td align=\"center\">database</td>\n<td align=\"center\">数据库名</td>\n</tr>\n<tr>\n<td align=\"center\">charset</td>\n<td align=\"center\">连接字符集（默认:<code>&#39;UTF8_GENERAL_CI&#39;</code>，注意字符集的字母都要大写)</td>\n</tr>\n<tr>\n<td align=\"center\">localA ddress</td>\n<td align=\"center\">此IP用于TCP连接（可选)</td>\n</tr>\n<tr>\n<td align=\"center\">socketPath</td>\n<td align=\"center\">连接到unix域路径，当使用host和port时会被忽略</td>\n</tr>\n<tr>\n<td align=\"center\">timezone</td>\n<td align=\"center\">时区，默认是<code>&#39;local&#39;</code></td>\n</tr>\n<tr>\n<td align=\"center\">connectTimeout</td>\n<td align=\"center\">连接超时，单位为毫秒。默认为不限制</td>\n</tr>\n<tr>\n<td align=\"center\">stringifyObjects</td>\n<td align=\"center\">是否序列化对象</td>\n</tr>\n<tr>\n<td align=\"center\">typeCast</td>\n<td align=\"center\">是否将列值转换为本地JavaScript类型值。默认为true</td>\n</tr>\n<tr>\n<td align=\"center\">queryFormat</td>\n<td align=\"center\">自定义query语句格式化方法</td>\n</tr>\n<tr>\n<td align=\"center\">supportBigNumbers</td>\n<td align=\"center\">数据库支持bigint或decimal类型列时，需要设此option为true。默认为false</td>\n</tr>\n<tr>\n<td align=\"center\">bigNumberStrings</td>\n<td align=\"center\">supportBigNumbers和bigNumberStrings启用，强制bigint或decimal列以JavaScript字符串类型返回。默认为false</td>\n</tr>\n<tr>\n<td align=\"center\">dateStrings</td>\n<td align=\"center\">强制timestamp、datetime、data类型以字符串类型返回，而不是JavaScript Date类型。默认为false</td>\n</tr>\n<tr>\n<td align=\"center\">debug</td>\n<td align=\"center\">开启调试。默认为false</td>\n</tr>\n<tr>\n<td align=\"center\">multipleStatements</td>\n<td align=\"center\">是否允许一个query中有多个MySQL语句。默认为false</td>\n</tr>\n<tr>\n<td align=\"center\">flags</td>\n<td align=\"center\">用于修改连接标志</td>\n</tr>\n<tr>\n<td align=\"center\">ssl</td>\n<td align=\"center\">使用ssl参数或一个包含ssl配置文件名称的字符串</td>\n</tr>\n</tbody></table>\n<h3 id=\"mysql模块CRUD\"><a href=\"#mysql模块CRUD\" class=\"headerlink\" title=\"mysql模块CRUD\"></a>mysql模块CRUD</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 执行查询</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM t_user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 打印查询结果</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 插入数据 </span>\n<span class=\"token comment\">// 其中，在SQL语句中，通过“?”占位符的方式将参数对象data进行传入。</span>\n<span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">user_id</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'waylau'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INTO t_user SET ?'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 打印查询结果</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 更新数据</span>\n<span class=\"token comment\">// 通过“?\"占位符的方式将参数对象进行传入。所不同的是，参数对象是一个数组。</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UPDATE t_user SET username = ? WHERE user_id = ?'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Way Lau'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 打印查询结果</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UPDATE result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 执行查询</span>\n<span class=\"token comment\">// 同样也是通过“?占位符的方式将参数对象进行传入。所不同的是，参数对象是一个数值（用户ID)。</span>\nconnection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM t_user'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">,</span> fields</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 打印查询结果</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"mysql连接池\"><a href=\"#mysql连接池\" class=\"headerlink\" title=\"mysql连接池\"></a>mysql连接池</h2><p>建议将连接池的pool.getConnection封装一下，实现复用</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//用于req.</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'/api/users'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mysql <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mysql'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 连接信息.</span>\n<span class=\"token comment\">// 使用连接池</span>\n<span class=\"token keyword\">const</span> pool <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span><span class=\"token function\">createPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">connectionLimit</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 连接数限制</span>\n    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">database</span><span class=\"token operator\">:</span> <span class=\"token string\">'nodejs_book'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 获取所有用户列表API</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 获取连接</span>\n    pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> connection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 从请求参数中获取用户ID</span>\n        <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User name is: '</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 执行查询</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM t_user'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 错误处理</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n\n                    <span class=\"token comment\">// 打印执行结果</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// 释放连接</span>\n                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// 转为JSON返回</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// 执行查询</span>\n            connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM t_user where username = ?'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token comment\">// 错误处理</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n\n                    <span class=\"token comment\">// 打印查询结果</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// 释放连接</span>\n                    connection<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token comment\">// 转为JSON返回</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 获取指定ID的用户API</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\n    <span class=\"token comment\">// 获取连接</span>\n    pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> connection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 从请求参数中获取用户ID</span>\n        <span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User id is: '</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 执行查询</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM t_user where user_id = ?'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 错误处理</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token comment\">// 打印执行结果</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 释放连接</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 取第一个，转为JSON返回</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 创建用户信息API</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 获取连接</span>\n    pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> connection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 从请求参数中获取用户信息</span>\n        <span class=\"token keyword\">let</span> username <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User is: '</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 执行查询</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INTO t_user (username) VALUES (?)'</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 错误处理</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token comment\">// 打印执行结果</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 释放连接</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 转为JSON返回</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 更新用户信息API</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 获取连接</span>\n    pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> connection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 从请求参数中获取用户信息</span>\n        <span class=\"token keyword\">let</span> user_id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>user_id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> username <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User id is: '</span><span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User name is: '</span><span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 执行查询</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UPDATE t_user SET username = ? WHERE user_id = ? '</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>username<span class=\"token punctuation\">,</span> user_id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 错误处理</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token comment\">// 打印执行结果</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 释放连接</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 转为JSON返回</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 删除指定ID的用户API</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 获取连接</span>\n    pool<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> connection</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">// 从请求参数中获取用户ID</span>\n        <span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User id is: '</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 执行查询</span>\n        connection<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DELETE FROM t_user WHERE user_id = ? '</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> results</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// 错误处理</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token comment\">// 打印执行结果</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The result is: '</span><span class=\"token punctuation\">,</span> results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 释放连接</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// 转为JSON返回</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server listening on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>port<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><p>Redis是一个高性能的key-vale缓存数据库</p>\n<p>Redis支持主从同步，可以从主服务器向任意数量的从服务器上同步数据，从服务器可以是关联其他从服务器的主服务器。这使得 Redis可执行单层树复制，存盘可以有意无意地对数据进行写操作。由于完全实现了发布&#x2F;订阅机制，使得从数据库在任何地方进行数据同步时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。</p>\n<p>Redis不仅仅是简单的key-value存储，更是一个data strutures server（数据结构服务器)，用来支持不同的数值类型。在key-value中，value不仅仅局限于string类型，它可以是更复杂的数据结构。</p>\n<ul>\n<li><p>二进制安全的string。</p>\n</li>\n<li><p>List: 一个链表，链表中的元素按照插入顺序排列。</p>\n</li>\n<li><p>Set: string 集合，集合中的元素是唯一的，没有排序。</p>\n</li>\n<li><p>Sorted set: 与Set类似，但是每一个string 元素关联一个浮点数值，这个数值被称为Score。元素总是通过它们的Score进行排序，所以不像Set那样可以获取一段范围的元素（例如，获取前10个，或者后10个)。</p>\n</li>\n<li><p>Hash: 指由关联值字段构成的 Map。字段和值都是string。</p>\n</li>\n<li><p>Bit array（或者简单称为Bitmap): 像位数值一样通过特别的命令处理字符串，可以设置和清除单独的bit，统计所有bit集合中为1的数量，查找第一个设置或没有设置的bit等。</p>\n</li>\n<li><p>HyperLogLogs: 这是一个概率统计用的数据结构，可以用来估计一个集合的基数。对于所有的例子，我们都使用redis-cli工具来演示。这是一个简单但非常有用的命令行工具，可以用来给Redis Server 发送命令。</p>\n</li>\n</ul>\n<h2 id=\"Redis超时\"><a href=\"#Redis超时\" class=\"headerlink\" title=\"Redis超时\"></a>Redis超时</h2><p>Redis超时是 Redis的一个特性之一，这个特性可以用在任何一种值类型中。可以给一个key设置一个超时时间，这个超时时间就是有限的生存时间。当生存时间过去，这个key就会自动被销毁。</p>\n<ul>\n<li>在设置超时时间时，可以使用秒或毫秒。</li>\n<li>超时时间一般总是1ms。</li>\n<li>超时信息会被复制，并持久化到磁盘中。当Redis服务器停止时(这意味着Redis将保存key 的超时时间)。</li>\n</ul>\n<h2 id=\"node-js操作redis\"><a href=\"#node-js操作redis\" class=\"headerlink\" title=\"node.js操作redis\"></a>node.js操作redis</h2><p>使用redis模块操作redis</p>\n<ul>\n<li>redis.createClient()用于创建客户端。</li>\n<li>client.set()方法设置单个值。</li>\n<li>client.hset()方法用于设置多个字段。</li>\n<li>client.hkeys()方法用于返回所有的字段。</li>\n<li>client.get()和client.hgetall()方法都用于获取key 所对应的值。</li>\n<li>client.quit()用于关闭连接。</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> redis <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 创建客户端</span>\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">createClient</span><span class=\"token punctuation\">(</span><span class=\"token number\">6379</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 如果没有密码，则不需要这一步</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token number\">123456</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// </span>\n\n<span class=\"token comment\">// 错误处理</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 设值</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"this is a value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 把存储对象改成JSON对象 程序将会报错，因为Redis 中存储的是字符串对象</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">user_name</span><span class=\"token operator\">:</span> <span class=\"token string\">'yolo'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 重写toString 即可方法:</span>\n    <span class=\"token comment\">// object.prototype.tostring = function ()&#123;</span>\n    <span class=\"token comment\">//     return JSON.stringify(this);</span>\n    <span class=\"token comment\">// &#125;;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 设值</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"书名\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"《Node.js企业级应用开发实战》\"</span><span class=\"token punctuation\">,</span> redis<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 同个key不同的字段</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳伟卫的Spring三剑客\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"第一剑\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"《Spring Boot 企业级应用开发实战》\"</span><span class=\"token punctuation\">,</span> redis<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳伟卫的Spring三剑客\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"第二剑\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"《Spring Cloud 微服务架构开发实战》\"</span><span class=\"token punctuation\">,</span> redis<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"柳伟卫的Spring三剑客\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"第三剑\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"《Spring 5 开发大全》\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> redis<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 返回所有的字段</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">hkeys</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳伟卫的Spring三剑客\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> replies</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳伟卫的Spring三剑客共\"</span> <span class=\"token operator\">+</span> replies<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token string\">\"本:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 遍历所有的字段</span>\n    replies<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">reply<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"    \"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 获取key所对应的值</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"书名\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> reply</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 获取key所对应的值</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">hgetall</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"柳伟卫的Spring三剑客\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> reply</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// 退出</span>\n    client<span class=\"token punctuation\">.</span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 清除数据</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><ul>\n<li>使用<code>process.on(&#39;uncaughtException&#39;, function(err)&#123;&#125;)</code>就不会造成接口崩溃了，可惜的是，很多应用在开发时都没有做这样的基本处理，因此都出现了问题，捕获那些咱没有 try-catch 的异常错误。<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 相对于异常来说，内存泄漏也是一个不能忽视的严重问题，而process.on('uncaughtException')的做法很难保证不造成内存的泄漏。</span>\n<span class=\"token comment\">// 所以当捕获到异常时，显式地手动杀掉进程并重启Node进程，既可以保证释放内存，又保证了服务后续的正常可用。</span>\nprocess<span class=\"token punctuation\">.</span><span class=\"token function\">on</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'uncaughtException'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'process error is:'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">restartServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//重启服务</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>try&#x2F;catch&#x2F;finally，当我们去读取文件遇到异常时，抛出的异常会被try&#x2F;catch捕获，当前的线程就不会英文异常而意外结束了。</li>\n<li>async&#x2F;await和promise是无法捕获异步代码的异常的，如下例子，无法捕获setTimeout异步代码里的异常<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span> \n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">// 一些逻辑代码</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'能进来说明可以处理异常信息了'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>nodejs里约定，同步的代码才能捕获异常，异步的代码不能直接使用try、catch</li>\n</ol>\n<ul>\n<li>先看同步代码可以捕获的异常<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">testFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'能进来，说明异常能处理'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>异步代码无法捕获异常<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">testFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">testFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'能进来，说明异常能处理'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"进程崩溃时重启\"><a href=\"#进程崩溃时重启\" class=\"headerlink\" title=\"进程崩溃时重启\"></a>进程崩溃时重启</h2><p>进程因异常退出是很常见的事，当遇到崩溃退出的时候，重启就可以了。负责进程崩溃应用自动重启的模块有：</p>\n<ul>\n<li>forever模块，forever处理crash事件，再开启新的node进程（很少用了，基本都用pm2模块）</li>\n<li>pm2模块，支持所有的forever的功能，功能强大，比如0秒切换。</li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i pm2 -g\npm2 start app.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"大集群：多台机器\"><a href=\"#大集群：多台机器\" class=\"headerlink\" title=\"大集群：多台机器\"></a>大集群：多台机器</h2><p>为了应对大流量，需要多台机器进行集群处理，因此可以通过负载均衡策略将流量分发到各个机器上，通过消除单点故障提升应用系统的可用性。常见的集群处理方式是使用Nginx或HAProxy。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><a href=\"https://juejin.cn/post/7008504029277847565\">Node.js的底层原理</a></li>\n<li><a href=\"https://juejin.cn/post/7081891057918558221\">Node.js 技术架构</a></li>\n<li><a href=\"https://juejin.cn/post/7045057475845816357\">.env 文件原理</a></li>\n<li><a href=\"https://juejin.cn/post/6844903592554397710\">Node.js子进程</a></li>\n<li><a href=\"https://juejin.cn/post/6844903678227251213\">NodeJS中的事件（EventEmitter</a></li>\n<li><a href=\"https://www.bookstack.cn/read/Nodejs-Roadmap/nodejs-base-what-is-nodejs.md\">书栈网node.js教程</a></li>\n<li>《Node.js12 实战》</li>\n<li>《Node.js 企业级应用开发实战》</li>\n<li>《狼叔卷1》</li>\n<li>《狼叔卷2》</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl5f0bihq0001v4uwdk2ydiha","category_id":"cl5f0bihu0004v4uw8xx8fcyq","_id":"cl5f0bii1000jv4uwadrj8bxq"},{"post_id":"cl5f0biht0003v4uw3eiu9q0s","category_id":"cl5f0bihy000cv4uw053we422","_id":"cl5f0bii4000qv4uw4h3i6pwp"},{"post_id":"cl5f0bihw0007v4uw8drm9j95","category_id":"cl5f0bihy000cv4uw053we422","_id":"cl5f0bii5000wv4uwd7b3fxm5"},{"post_id":"cl5f0bii3000ov4uw711m6h5t","category_id":"cl5f0bihy000cv4uw053we422","_id":"cl5f0bii6000zv4uweuww7zdr"},{"post_id":"cl5f0bihx0009v4uwbpbb9lg9","category_id":"cl5f0bihy000cv4uw053we422","_id":"cl5f0bii70011v4uwcan38dce"},{"post_id":"cl5f0bihx000bv4uw0u87ed2o","category_id":"cl5f0bii5000vv4uwe7h6e153","_id":"cl5f0bii80018v4uw8m2wavoe"},{"post_id":"cl5f0bihz000gv4uw3iibal85","category_id":"cl5f0bii5000vv4uwe7h6e153","_id":"cl5f0bii8001cv4uwdvpwanhb"},{"post_id":"cl5f0bii0000iv4uw5yandon6","category_id":"cl5f0bii5000vv4uwe7h6e153","_id":"cl5f0bii9001gv4uwewvoaxe0"},{"post_id":"cl5f0bii2000mv4uwalvc9c3z","category_id":"cl5f0bii5000vv4uwe7h6e153","_id":"cl5f0bii9001jv4uwe2s217rs"},{"post_id":"cl5f0bii4000sv4uwbgcw5zn6","category_id":"cl5f0bii5000vv4uwe7h6e153","_id":"cl5f0biia001lv4uw8yg1fg40"},{"post_id":"cl5f0bii5000uv4uw8rfke59d","category_id":"cl5f0bii5000vv4uwe7h6e153","_id":"cl5f0biia001nv4uwdrag48yv"},{"post_id":"cl5f0biib001ov4uwakzi49k6","category_id":"cl5f0bii5000vv4uwe7h6e153","_id":"cl5f0biid001sv4uwa10x5ugl"},{"post_id":"cl5f0biic001pv4uw0oo2d3m6","category_id":"cl5f0bii5000vv4uwe7h6e153","_id":"cl5f0biid001uv4uw2lou2li9"},{"post_id":"cl5f0biic001rv4uwa4nah75u","category_id":"cl5f0bii5000vv4uwe7h6e153","_id":"cl5f0biid001xv4uw69yl3dwk"}],"PostTag":[{"post_id":"cl5f0bihq0001v4uwdk2ydiha","tag_id":"cl5f0bihv0005v4uw0lw73795","_id":"cl5f0bihy000ev4uwe0k63fwn"},{"post_id":"cl5f0biht0003v4uw3eiu9q0s","tag_id":"cl5f0bihy000dv4uw81gz6ted","_id":"cl5f0bii3000nv4uw03a878ml"},{"post_id":"cl5f0bihw0007v4uw8drm9j95","tag_id":"cl5f0bii1000lv4uwb0y442m6","_id":"cl5f0bii5000tv4uw2w53a2pt"},{"post_id":"cl5f0bii3000ov4uw711m6h5t","tag_id":"cl5f0bihy000dv4uw81gz6ted","_id":"cl5f0bii5000xv4uw9ol26iaw"},{"post_id":"cl5f0bii4000sv4uwbgcw5zn6","tag_id":"cl5f0bii1000lv4uwb0y442m6","_id":"cl5f0bii60010v4uwabtq01jr"},{"post_id":"cl5f0bihx0009v4uwbpbb9lg9","tag_id":"cl5f0bii1000lv4uwb0y442m6","_id":"cl5f0bii70012v4uw3w3p9rhe"},{"post_id":"cl5f0bii5000uv4uw8rfke59d","tag_id":"cl5f0bii1000lv4uwb0y442m6","_id":"cl5f0bii70015v4uw47s05vy9"},{"post_id":"cl5f0bihx000bv4uw0u87ed2o","tag_id":"cl5f0bii5000yv4uw46vu691g","_id":"cl5f0bii70016v4uwfw8s6d65"},{"post_id":"cl5f0bihz000gv4uw3iibal85","tag_id":"cl5f0bii70014v4uwg635fb4a","_id":"cl5f0bii8001av4uw1mft3f4h"},{"post_id":"cl5f0bii0000iv4uw5yandon6","tag_id":"cl5f0bii70014v4uwg635fb4a","_id":"cl5f0bii9001ev4uw41iy01og"},{"post_id":"cl5f0bii2000mv4uwalvc9c3z","tag_id":"cl5f0bii8001dv4uwcr7v5jhn","_id":"cl5f0biia001kv4uwhyxs63hy"},{"post_id":"cl5f0bii2000mv4uwalvc9c3z","tag_id":"cl5f0bii9001hv4uw08pg5ab8","_id":"cl5f0biia001mv4uw4ioi8l94"},{"post_id":"cl5f0biic001rv4uwa4nah75u","tag_id":"cl5f0bii8001dv4uwcr7v5jhn","_id":"cl5f0biid001tv4uw5d7favh0"},{"post_id":"cl5f0biib001ov4uwakzi49k6","tag_id":"cl5f0biic001qv4uw15vu65q7","_id":"cl5f0biid001wv4uw8k62cj41"},{"post_id":"cl5f0biic001pv4uw0oo2d3m6","tag_id":"cl5f0biid001vv4uw3znx2bxg","_id":"cl5f0biie001yv4uw8pcxcg4q"}],"Tag":[{"name":"数据结构与算法","_id":"cl5f0bihv0005v4uw0lw73795"},{"name":"Webpack","_id":"cl5f0bihy000dv4uw81gz6ted"},{"name":"React","_id":"cl5f0bii1000lv4uwb0y442m6"},{"name":"面试","_id":"cl5f0bii5000yv4uw46vu691g"},{"name":"JavaScript","_id":"cl5f0bii70014v4uwg635fb4a"},{"name":"Node","_id":"cl5f0bii8001dv4uwcr7v5jhn"},{"name":"Koa","_id":"cl5f0bii9001hv4uw08pg5ab8"},{"name":"TypeScript","_id":"cl5f0biic001qv4uw15vu65q7"},{"name":"浏览器","_id":"cl5f0biid001vv4uw3znx2bxg"}]}}